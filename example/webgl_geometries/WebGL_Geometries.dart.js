// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $$ = {};
var $ = Isolate.$isolateProperties;
$$.DateImplementation = {"":
 ["millisecondsSinceEpoch?", "isUtc"],
 "super": "Object",
 operator$eq$1: function(other) {
  if (!(typeof other === 'object' && other !== null && !!other.is$Date))
    return false;
  return $.eq(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$lt$1: function(other) {
  return $.lt(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$le$1: function(other) {
  return $.le(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$gt$1: function(other) {
  return $.gt(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$ge$1: function(other) {
  return $.ge(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 hashCode$0: function() {
  return this.millisecondsSinceEpoch;
},
 toString$0: function() {
  var t1 = new $.DateImplementation_toString_fourDigits();
  var t2 = new $.DateImplementation_toString_threeDigits();
  var t3 = new $.DateImplementation_toString_twoDigits();
  var y = t1.call$1(this.get$year());
  var m = t3.call$1(this.get$month());
  var d = t3.call$1(this.get$day());
  var h = t3.call$1(this.get$hour());
  var min = t3.call$1(this.get$minute());
  var sec = t3.call$1(this.get$second());
  var ms = t2.call$1(this.get$millisecond());
  if (this.isUtc === true)
    return $.S(y) + '-' + $.S(m) + '-' + $.S(d) + ' ' + $.S(h) + ':' + $.S(min) + ':' + $.S(sec) + '.' + $.S(ms) + 'Z';
  else
    return $.S(y) + '-' + $.S(m) + '-' + $.S(d) + ' ' + $.S(h) + ':' + $.S(min) + ':' + $.S(sec) + '.' + $.S(ms);
},
 add$1: function(duration) {
  return $.DateImplementation$fromMillisecondsSinceEpoch($.add(this.millisecondsSinceEpoch, duration.get$inMilliseconds()), this.isUtc);
},
 get$year: function() {
  return $.Primitives_getYear(this);
},
 get$month: function() {
  return $.Primitives_getMonth(this);
},
 get$day: function() {
  return $.Primitives_getDay(this);
},
 get$hour: function() {
  return $.Primitives_getHours(this);
},
 get$minute: function() {
  return $.Primitives_getMinutes(this);
},
 get$second: function() {
  return $.Primitives_getSeconds(this);
},
 get$millisecond: function() {
  return $.Primitives_getMilliseconds(this);
},
 DateImplementation$now$0: function() {
  $.Primitives_lazyAsJsDate(this);
},
 DateImplementation$fromMillisecondsSinceEpoch$2: function(millisecondsSinceEpoch, isUtc) {
  var t1 = this.millisecondsSinceEpoch;
  if ($.gtB($.abs(t1), 8640000000000000))
    throw $.$$throw($.IllegalArgumentException$(t1));
  t1 = this.isUtc;
  if (t1 == null)
    throw $.$$throw($.IllegalArgumentException$(t1));
},
 is$Date: true
};

$$.ExceptionImplementation = {"":
 ["_msg"],
 "super": "Object",
 toString$0: function() {
  var t1 = this._msg;
  return t1 == null ? 'Exception' : 'Exception: ' + $.S(t1);
},
 is$Exception: true
};

$$.FutureImpl = {"":
 ["_isComplete", "_lib3_value?", "_exception", "_stackTrace", "_exceptionHandled", "_successListeners", "_exceptionHandlers", "_completionListeners"],
 "super": "Object",
 get$value: function() {
  if (this.get$isComplete() !== true)
    throw $.$$throw($.FutureNotCompleteException$());
  var t1 = this._exception;
  if (!(t1 == null))
    throw $.$$throw(t1);
  return this._lib3_value;
},
 get$stackTrace: function() {
  if (this.get$isComplete() !== true)
    throw $.$$throw($.FutureNotCompleteException$());
  return this._stackTrace;
},
 get$isComplete: function() {
  return this._isComplete;
},
 get$hasValue: function() {
  return this.get$isComplete() === true && this._exception == null;
},
 then$1: function(onSuccess) {
  if (this.get$hasValue() === true)
    onSuccess.call$1(this.get$value());
  else if (this.get$isComplete() !== true)
    this._successListeners.push(onSuccess);
  else if (this._exceptionHandled !== true)
    throw $.$$throw(this._exception);
},
 handleException$1: function(onException) {
  if (this._exceptionHandled === true)
    return;
  if (this._isComplete === true) {
    var t1 = this._exception;
    if (!(t1 == null))
      this._exceptionHandled = onException.call$1(t1);
  } else
    this._exceptionHandlers.push(onException);
},
 _complete$0: function() {
  this._isComplete = true;
  try {
    if (!(this._exception == null))
      for (var t1 = $.iterator(this._exceptionHandlers); t1.hasNext$0() === true;) {
        var handler = t1.next$0();
        if ($.eqB(handler.call$1(this._exception), true)) {
          this._exceptionHandled = true;
          break;
        }
      }
    if (this.get$hasValue() === true)
      for (t1 = $.iterator(this._successListeners); t1.hasNext$0() === true;) {
        var listener = t1.next$0();
        listener.call$1(this.get$value());
      }
    else if (this._exceptionHandled !== true && $.gtB($.get$length(this._successListeners), 0))
      throw $.$$throw(this._exception);
  } finally {
    for (t1 = $.iterator(this._completionListeners); t1.hasNext$0() === true;) {
      var listener0 = t1.next$0();
      try {
        listener0.call$1(this);
      } catch (exception) {
        $.unwrapException(exception);
      }

    }
  }
},
 _setValue$1: function(value) {
  if (this._isComplete === true)
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._lib3_value = value;
  this._complete$0();
},
 _setException$2: function(exception, stackTrace) {
  if (exception == null)
    throw $.$$throw($.IllegalArgumentException$(null));
  if (this._isComplete === true)
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._exception = exception;
  this._stackTrace = stackTrace;
  this._complete$0();
}
};

$$.CompleterImpl = {"":
 ["_futureImpl"],
 "super": "Object",
 get$future: function() {
  return this._futureImpl;
},
 complete$1: function(value) {
  this._futureImpl._setValue$1(value);
},
 completeException$2: function(exception, stackTrace) {
  this._futureImpl._setException$2(exception, stackTrace);
},
 completeException$1: function(exception) {
  return this.completeException$2(exception,null)
},
 completeException$1: function(exception) {
  return this.completeException$2(exception,null)
}
};

$$.HashMapImplementation = {"":
 ["_keys", "_values", "_loadLimit", "_numberOfEntries", "_numberOfDeleted"],
 "super": "Object",
 _probeForAdding$1: function(key) {
  var t1 = $.hashCode(key);
  if (t1 !== (t1 | 0))
    return this._probeForAdding$1$bailout(1, key, t1, 0, 0, 0);
  var t3 = $.get$length(this._keys);
  if (t3 !== (t3 | 0))
    return this._probeForAdding$1$bailout(2, key, t1, t3, 0, 0);
  var hash = (t1 & t3 - 1) >>> 0;
  for (var numberOfProbes = 1, insertionIndex = -1; true;) {
    t1 = this._keys;
    if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this._probeForAdding$1$bailout(3, key, hash, numberOfProbes, insertionIndex, t1);
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    var existingKey = t1[hash];
    if (existingKey == null) {
      if (insertionIndex < 0)
        return hash;
      return insertionIndex;
    } else if ($.eqB(existingKey, key))
      return hash;
    else if (insertionIndex < 0 && $.CTC13 === existingKey)
      insertionIndex = hash;
    var numberOfProbes0 = numberOfProbes + 1;
    hash = $.HashMapImplementation__nextProbe(hash, numberOfProbes, $.get$length(this._keys));
    if (hash !== (hash | 0))
      return this._probeForAdding$1$bailout(4, numberOfProbes0, key, insertionIndex, hash, 0);
    numberOfProbes = numberOfProbes0;
  }
},
 _probeForAdding$1$bailout: function(state, env0, env1, env2, env3, env4) {
  switch (state) {
    case 1:
      var key = env0;
      t1 = env1;
      break;
    case 2:
      key = env0;
      t1 = env1;
      t3 = env2;
      break;
    case 3:
      key = env0;
      hash = env1;
      numberOfProbes = env2;
      insertionIndex = env3;
      t1 = env4;
      break;
    case 4:
      numberOfProbes0 = env0;
      key = env1;
      insertionIndex = env2;
      hash = env3;
      break;
  }
  switch (state) {
    case 0:
      var t1 = $.hashCode(key);
    case 1:
      state = 0;
      var t3 = $.get$length(this._keys);
    case 2:
      state = 0;
      var hash = $.and(t1, $.sub(t3, 1));
      var numberOfProbes = 1;
      var insertionIndex = -1;
    default:
      L0:
        while (true)
          switch (state) {
            case 0:
              if (!true)
                break L0;
              t1 = this._keys;
            case 3:
              state = 0;
              var existingKey = $.index(t1, hash);
              if (existingKey == null) {
                if ($.ltB(insertionIndex, 0))
                  return hash;
                return insertionIndex;
              } else if ($.eqB(existingKey, key))
                return hash;
              else if ($.ltB(insertionIndex, 0) && $.CTC13 === existingKey)
                insertionIndex = hash;
              var numberOfProbes0 = numberOfProbes + 1;
              hash = $.HashMapImplementation__nextProbe(hash, numberOfProbes, $.get$length(this._keys));
            case 4:
              state = 0;
              numberOfProbes = numberOfProbes0;
          }
  }
},
 _probeForLookup$1: function(key) {
  var hash = $.and($.hashCode(key), $.sub($.get$length(this._keys), 1));
  if (hash !== (hash | 0))
    return this._probeForLookup$1$bailout(1, key, hash);
  for (var numberOfProbes = 1; true;) {
    var existingKey = $.index(this._keys, hash);
    if (existingKey == null)
      return -1;
    if ($.eqB(existingKey, key))
      return hash;
    var numberOfProbes0 = numberOfProbes + 1;
    hash = $.HashMapImplementation__nextProbe(hash, numberOfProbes, $.get$length(this._keys));
    numberOfProbes = numberOfProbes0;
  }
},
 _probeForLookup$1$bailout: function(state, key, hash) {
  for (var numberOfProbes = 1; true;) {
    var existingKey = $.index(this._keys, hash);
    if (existingKey == null)
      return -1;
    if ($.eqB(existingKey, key))
      return hash;
    var numberOfProbes0 = numberOfProbes + 1;
    hash = $.HashMapImplementation__nextProbe(hash, numberOfProbes, $.get$length(this._keys));
    numberOfProbes = numberOfProbes0;
  }
},
 _ensureCapacity$0: function() {
  var newNumberOfEntries = $.add(this._numberOfEntries, 1);
  if ($.geB(newNumberOfEntries, this._loadLimit)) {
    this._grow$1($.mul($.get$length(this._keys), 2));
    return;
  }
  var numberOfFree = $.sub($.sub($.get$length(this._keys), newNumberOfEntries), this._numberOfDeleted);
  if ($.gtB(this._numberOfDeleted, numberOfFree))
    this._grow$1($.get$length(this._keys));
},
 _grow$1: function(newCapacity) {
  var capacity = $.get$length(this._keys);
  if (typeof capacity !== 'number')
    return this._grow$1$bailout(1, newCapacity, capacity, 0, 0);
  this._loadLimit = $.tdiv($.mul(newCapacity, 3), 4);
  var oldKeys = this._keys;
  if (typeof oldKeys !== 'string' && (typeof oldKeys !== 'object' || oldKeys === null || oldKeys.constructor !== Array && !oldKeys.is$JavaScriptIndexingBehavior()))
    return this._grow$1$bailout(2, newCapacity, oldKeys, capacity, 0);
  var oldValues = this._values;
  if (typeof oldValues !== 'string' && (typeof oldValues !== 'object' || oldValues === null || oldValues.constructor !== Array && !oldValues.is$JavaScriptIndexingBehavior()))
    return this._grow$1$bailout(3, newCapacity, oldKeys, oldValues, capacity);
  this._keys = $.ListImplementation_List(newCapacity);
  this._values = $.ListImplementation_List(newCapacity);
  for (var i = 0; i < capacity; ++i) {
    if (i < 0 || i >= oldKeys.length)
      throw $.ioore(i);
    var key = oldKeys[i];
    if (key == null || key === $.CTC13)
      continue;
    if (i < 0 || i >= oldValues.length)
      throw $.ioore(i);
    var value = oldValues[i];
    var newIndex = this._probeForAdding$1(key);
    $.indexSet(this._keys, newIndex, key);
    $.indexSet(this._values, newIndex, value);
  }
  this._numberOfDeleted = 0;
},
 _grow$1$bailout: function(state, env0, env1, env2, env3) {
  switch (state) {
    case 1:
      var newCapacity = env0;
      capacity = env1;
      break;
    case 2:
      newCapacity = env0;
      oldKeys = env1;
      capacity = env2;
      break;
    case 3:
      newCapacity = env0;
      oldKeys = env1;
      oldValues = env2;
      capacity = env3;
      break;
  }
  switch (state) {
    case 0:
      var capacity = $.get$length(this._keys);
    case 1:
      state = 0;
      this._loadLimit = $.tdiv($.mul(newCapacity, 3), 4);
      var oldKeys = this._keys;
    case 2:
      state = 0;
      var oldValues = this._values;
    case 3:
      state = 0;
      this._keys = $.ListImplementation_List(newCapacity);
      this._values = $.ListImplementation_List(newCapacity);
      for (var i = 0; $.ltB(i, capacity); ++i) {
        var key = $.index(oldKeys, i);
        if (key == null || key === $.CTC13)
          continue;
        var value = $.index(oldValues, i);
        var newIndex = this._probeForAdding$1(key);
        $.indexSet(this._keys, newIndex, key);
        $.indexSet(this._values, newIndex, value);
      }
      this._numberOfDeleted = 0;
  }
},
 clear$0: function() {
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  var length$ = $.get$length(this._keys);
  if (typeof length$ !== 'number')
    return this.clear$0$bailout(1, length$);
  for (var i = 0; i < length$; ++i) {
    $.indexSet(this._keys, i, null);
    $.indexSet(this._values, i, null);
  }
},
 clear$0$bailout: function(state, length$) {
  for (var i = 0; $.ltB(i, length$); ++i) {
    $.indexSet(this._keys, i, null);
    $.indexSet(this._values, i, null);
  }
},
 operator$indexSet$2: function(key, value) {
  this._ensureCapacity$0();
  var index = this._probeForAdding$1(key);
  var t1 = this._keys;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.operator$indexSet$2$bailout(1, key, value, index, t1);
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  if (!(t1[index] == null)) {
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    var t2 = t1[index] === $.CTC13;
    t1 = t2;
  } else
    t1 = true;
  if (t1) {
    t1 = this._numberOfEntries;
    if (typeof t1 !== 'number')
      return this.operator$indexSet$2$bailout(3, key, value, t1, index);
    this._numberOfEntries = t1 + 1;
  }
  t1 = this._keys;
  if (typeof t1 !== 'object' || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
    return this.operator$indexSet$2$bailout(4, key, value, t1, index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  t1[index] = key;
  t1 = this._values;
  if (typeof t1 !== 'object' || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
    return this.operator$indexSet$2$bailout(5, value, t1, index, 0);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  t1[index] = value;
},
 operator$indexSet$2$bailout: function(state, env0, env1, env2, env3) {
  switch (state) {
    case 1:
      var key = env0;
      var value = env1;
      index = env2;
      t1 = env3;
      break;
    case 2:
      key = env0;
      value = env1;
      index = env2;
      t1 = env3;
      break;
    case 3:
      key = env0;
      value = env1;
      t1 = env2;
      index = env3;
      break;
    case 4:
      key = env0;
      value = env1;
      t1 = env2;
      index = env3;
      break;
    case 5:
      value = env0;
      t1 = env1;
      index = env2;
      break;
  }
  switch (state) {
    case 0:
      this._ensureCapacity$0();
      var index = this._probeForAdding$1(key);
      var t1 = this._keys;
    case 1:
      state = 0;
    case 2:
      if (state === 2 || state === 0 && !($.index(t1, index) == null))
        switch (state) {
          case 0:
            t1 = this._keys;
          case 2:
            state = 0;
            var t3 = $.index(t1, index) === $.CTC13;
            t1 = t3;
        }
      else
        t1 = true;
    case 3:
      if (state === 3 || state === 0 && t1)
        switch (state) {
          case 0:
            t1 = this._numberOfEntries;
          case 3:
            state = 0;
            this._numberOfEntries = $.add(t1, 1);
        }
      t1 = this._keys;
    case 4:
      state = 0;
      $.indexSet(t1, index, key);
      t1 = this._values;
    case 5:
      state = 0;
      $.indexSet(t1, index, value);
  }
},
 operator$index$1: function(key) {
  var index = this._probeForLookup$1(key);
  if ($.ltB(index, 0))
    return;
  return $.index(this._values, index);
},
 remove$1: function(key) {
  var index = this._probeForLookup$1(key);
  if ($.geB(index, 0)) {
    this._numberOfEntries = $.sub(this._numberOfEntries, 1);
    var value = $.index(this._values, index);
    $.indexSet(this._values, index, null);
    $.indexSet(this._keys, index, $.CTC13);
    this._numberOfDeleted = $.add(this._numberOfDeleted, 1);
    return value;
  }
  return;
},
 isEmpty$0: function() {
  return $.eq(this._numberOfEntries, 0);
},
 get$length: function() {
  return this._numberOfEntries;
},
 length$0: function() { return this.get$length().call$0(); },
 forEach$1: function(f) {
  var length$ = $.get$length(this._keys);
  if (typeof length$ !== 'number')
    return this.forEach$1$bailout(1, f, length$);
  for (var i = 0; i < length$; ++i) {
    var key = $.index(this._keys, i);
    if (!(key == null) && !(key === $.CTC13))
      f.call$2(key, $.index(this._values, i));
  }
},
 forEach$1$bailout: function(state, f, length$) {
  for (var i = 0; $.ltB(i, length$); ++i) {
    var key = $.index(this._keys, i);
    if (!(key == null) && !(key === $.CTC13))
      f.call$2(key, $.index(this._values, i));
  }
},
 getKeys$0: function() {
  var t1 = {};
  var list = $.ListImplementation_List($.get$length(this));
  t1.i_10 = 0;
  this.forEach$1(new $.HashMapImplementation_getKeys__(list, t1));
  return list;
},
 getValues$0: function() {
  var t1 = {};
  var list = $.ListImplementation_List($.get$length(this));
  t1.i_1 = 0;
  this.forEach$1(new $.HashMapImplementation_getValues__(list, t1));
  return list;
},
 containsKey$1: function(key) {
  return !$.eqB(this._probeForLookup$1(key), -1);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 HashMapImplementation$0: function() {
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  this._loadLimit = $.HashMapImplementation__computeLoadLimit(8);
  this._keys = $.ListImplementation_List(8);
  this._values = $.ListImplementation_List(8);
},
 is$Map: function() { return true; }
};

$$._DeletedKeySentinel = {"":
 [],
 "super": "Object"
};

$$.KeyValuePair = {"":
 ["key?", "value="],
 "super": "Object"
};

$$.LinkedHashMapImplementation = {"":
 ["_list", "_map"],
 "super": "Object",
 operator$indexSet$2: function(key, value) {
  var t1 = this._map;
  if (typeof t1 !== 'object' || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
    return this.operator$indexSet$2$bailout(1, key, value, t1);
  if (t1.containsKey$1(key) === true) {
    if (key !== (key | 0))
      throw $.iae(key);
    if (key < 0 || key >= t1.length)
      throw $.ioore(key);
    t1[key].get$element().set$value(value);
  } else {
    var t2 = this._list;
    $.addLast(t2, $.KeyValuePair$(key, value));
    t2 = t2.lastEntry$0();
    if (key !== (key | 0))
      throw $.iae(key);
    if (key < 0 || key >= t1.length)
      throw $.ioore(key);
    t1[key] = t2;
  }
},
 operator$indexSet$2$bailout: function(state, key, value, t1) {
  if (t1.containsKey$1(key) === true)
    $.index(t1, key).get$element().set$value(value);
  else {
    var t2 = this._list;
    $.addLast(t2, $.KeyValuePair$(key, value));
    $.indexSet(t1, key, t2.lastEntry$0());
  }
},
 operator$index$1: function(key) {
  var entry = $.index(this._map, key);
  if (entry == null)
    return;
  return entry.get$element().get$value();
},
 remove$1: function(key) {
  var entry = this._map.remove$1(key);
  if (entry == null)
    return;
  entry.remove$0();
  return entry.get$element().get$value();
},
 getKeys$0: function() {
  var t1 = {};
  var list = $.ListImplementation_List($.get$length(this));
  t1.index_10 = 0;
  $.forEach(this._list, new $.LinkedHashMapImplementation_getKeys__(list, t1));
  return list;
},
 getValues$0: function() {
  var t1 = {};
  var list = $.ListImplementation_List($.get$length(this));
  t1.index_1 = 0;
  $.forEach(this._list, new $.LinkedHashMapImplementation_getValues__(list, t1));
  return list;
},
 forEach$1: function(f) {
  $.forEach(this._list, new $.LinkedHashMapImplementation_forEach__(f));
},
 containsKey$1: function(key) {
  return this._map.containsKey$1(key);
},
 get$length: function() {
  return $.get$length(this._map);
},
 length$0: function() { return this.get$length().call$0(); },
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 clear$0: function() {
  $.clear(this._map);
  $.clear(this._list);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 LinkedHashMapImplementation$0: function() {
  this._map = $.HashMapImplementation$();
  this._list = $.DoubleLinkedQueue$();
},
 is$Map: function() { return true; }
};

$$.DoubleLinkedQueueEntry = {"":
 ["_previous=", "_next=", "_element?"],
 "super": "Object",
 _link$2: function(p, n) {
  this._next = n;
  this._previous = p;
  p.set$_next(this);
  n.set$_previous(this);
},
 prepend$1: function(e) {
  $.DoubleLinkedQueueEntry$(e)._link$2(this._previous, this);
},
 remove$0: function() {
  var t1 = this._next;
  this._previous.set$_next(t1);
  t1 = this._previous;
  this._next.set$_previous(t1);
  this._next = null;
  this._previous = null;
  return this._element;
},
 _asNonSentinelEntry$0: function() {
  return this;
},
 previousEntry$0: function() {
  return this._previous._asNonSentinelEntry$0();
},
 get$element: function() {
  return this._element;
},
 DoubleLinkedQueueEntry$1: function(e) {
  this._element = e;
}
};

$$._DoubleLinkedQueueEntrySentinel = {"":
 ["_previous", "_next", "_element"],
 "super": "DoubleLinkedQueueEntry",
 remove$0: function() {
  throw $.$$throw($.CTC12);
},
 _asNonSentinelEntry$0: function() {
  return;
},
 get$element: function() {
  throw $.$$throw($.CTC12);
},
 _DoubleLinkedQueueEntrySentinel$0: function() {
  this._link$2(this, this);
}
};

$$.DoubleLinkedQueue = {"":
 ["_sentinel"],
 "super": "Object",
 addLast$1: function(value) {
  this._sentinel.prepend$1(value);
},
 add$1: function(value) {
  this.addLast$1(value);
},
 addAll$1: function(collection) {
  for (var t1 = $.iterator(collection); t1.hasNext$0() === true;)
    this.add$1(t1.next$0());
},
 removeLast$0: function() {
  return this._sentinel.get$_previous().remove$0();
},
 removeFirst$0: function() {
  return this._sentinel.get$_next().remove$0();
},
 last$0: function() {
  return this._sentinel.get$_previous().get$element();
},
 lastEntry$0: function() {
  return this._sentinel.previousEntry$0();
},
 get$length: function() {
  var t1 = {};
  t1.counter_1 = 0;
  this.forEach$1(new $.DoubleLinkedQueue_length__(t1));
  return t1.counter_1;
},
 length$0: function() { return this.get$length().call$0(); },
 isEmpty$0: function() {
  var t1 = this._sentinel;
  var t2 = t1.get$_next();
  return t2 == null ? t1 == null : t2 === t1;
},
 clear$0: function() {
  var t1 = this._sentinel;
  t1.set$_next(t1);
  t1.set$_previous(t1);
},
 forEach$1: function(f) {
  var t1 = this._sentinel;
  var entry = t1.get$_next();
  for (; !(entry == null ? t1 == null : entry === t1);) {
    var nextEntry = entry.get$_next();
    f.call$1(entry.get$_element());
    entry = nextEntry;
  }
},
 map$1: function(f) {
  var other = $.DoubleLinkedQueue$();
  var t1 = this._sentinel;
  var entry = t1.get$_next();
  for (; !(entry == null ? t1 == null : entry === t1);) {
    var nextEntry = entry.get$_next();
    other.addLast$1(f.call$1(entry.get$_element()));
    entry = nextEntry;
  }
  return other;
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 filter$1: function(f) {
  var other = $.DoubleLinkedQueue$();
  var t1 = this._sentinel;
  var entry = t1.get$_next();
  for (; !(entry == null ? t1 == null : entry === t1);) {
    var nextEntry = entry.get$_next();
    if (f.call$1(entry.get$_element()) === true)
      other.addLast$1(entry.get$_element());
    entry = nextEntry;
  }
  return other;
},
 iterator$0: function() {
  return $._DoubleLinkedQueueIterator$(this._sentinel);
},
 toString$0: function() {
  return $.Collections_collectionToString(this);
},
 DoubleLinkedQueue$0: function() {
  this._sentinel = $._DoubleLinkedQueueEntrySentinel$();
},
 is$Collection: function() { return true; }
};

$$._DoubleLinkedQueueIterator = {"":
 ["_sentinel", "_currentEntry"],
 "super": "Object",
 hasNext$0: function() {
  var t1 = this._currentEntry.get$_next();
  var t2 = this._sentinel;
  return !(t1 == null ? t2 == null : t1 === t2);
},
 next$0: function() {
  if (this.hasNext$0() !== true)
    throw $.$$throw($.CTC11);
  this._currentEntry = this._currentEntry.get$_next();
  return this._currentEntry.get$element();
},
 _DoubleLinkedQueueIterator$1: function(_sentinel) {
  this._currentEntry = this._sentinel;
}
};

$$.StringBufferImpl = {"":
 ["_buffer", "_length"],
 "super": "Object",
 get$length: function() {
  return this._length;
},
 length$0: function() { return this.get$length().call$0(); },
 isEmpty$0: function() {
  return this._length === 0;
},
 add$1: function(obj) {
  var str = $.toString(obj);
  if (str == null || $.isEmpty(str) === true)
    return this;
  $.add$1(this._buffer, str);
  var t1 = this._length;
  if (typeof t1 !== 'number')
    return this.add$1$bailout(1, str, t1);
  var t3 = $.get$length(str);
  if (typeof t3 !== 'number')
    return this.add$1$bailout(2, t1, t3);
  this._length = t1 + t3;
  return this;
},
 add$1$bailout: function(state, env0, env1) {
  switch (state) {
    case 1:
      str = env0;
      t1 = env1;
      break;
    case 2:
      t1 = env0;
      t3 = env1;
      break;
  }
  switch (state) {
    case 0:
      var str = $.toString(obj);
      if (str == null || $.isEmpty(str) === true)
        return this;
      $.add$1(this._buffer, str);
      var t1 = this._length;
    case 1:
      state = 0;
      var t3 = $.get$length(str);
    case 2:
      state = 0;
      this._length = $.add(t1, t3);
      return this;
  }
},
 addAll$1: function(objects) {
  for (var t1 = $.iterator(objects); t1.hasNext$0() === true;)
    this.add$1(t1.next$0());
  return this;
},
 clear$0: function() {
  this._buffer = $.ListImplementation_List(null);
  this._length = 0;
  return this;
},
 toString$0: function() {
  if ($.get$length(this._buffer) === 0)
    return '';
  if ($.get$length(this._buffer) === 1)
    return $.index(this._buffer, 0);
  var result = $.stringJoinUnchecked($.StringImplementation__toJsStringArray(this._buffer), '');
  $.clear(this._buffer);
  $.add$1(this._buffer, result);
  return result;
},
 StringBufferImpl$1: function(content$) {
  this.clear$0();
  this.add$1(content$);
}
};

$$.NoSuchMethodError = {"":
 ["_receiver", "_functionName", "_arguments", "_existingArgumentNames"],
 "super": "Object",
 toString$0: function() {
  var sb = $.StringBufferImpl$('');
  for (var t1 = this._arguments, i = 0; i < t1.length; ++i) {
    if (i > 0)
      sb.add$1(', ');
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    sb.add$1(t1[i]);
  }
  t1 = this._existingArgumentNames;
  if (t1 == null)
    return 'NoSuchMethodError : method not found: \'' + $.S(this._functionName) + '\'\n' + 'Receiver: ' + this._receiver + '\n' + 'Arguments: [' + $.S(sb) + ']';
  else {
    var actualParameters = sb.toString$0();
    sb = $.StringBufferImpl$('');
    for (i = 0; $.ltB(i, $.get$length(t1)); ++i) {
      if (i > 0)
        sb.add$1(', ');
      sb.add$1($.index(t1, i));
    }
    var formalParameters = sb.toString$0();
    t1 = this._functionName;
    return 'NoSuchMethodError: incorrect number of arguments passed to method named \'' + $.S(t1) + '\'\nReceiver: ' + this._receiver + '\n' + 'Tried calling: ' + $.S(t1) + '(' + $.S(actualParameters) + ')\n' + 'Found: ' + $.S(t1) + '(' + $.S(formalParameters) + ')';
  }
}
};

$$.IndexOutOfRangeException = {"":
 ["_value?"],
 "super": "Object",
 toString$0: function() {
  return 'IndexOutOfRangeException: ' + $.S(this._value);
},
 is$Exception: true
};

$$.IllegalAccessException = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'Attempt to modify an immutable object';
},
 is$Exception: true
};

$$.ObjectNotClosureException = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'Object is not closure';
},
 is$Exception: true
};

$$.IllegalArgumentException = {"":
 ["_arg"],
 "super": "Object",
 toString$0: function() {
  return 'Illegal argument(s): ' + $.S(this._arg);
},
 is$Exception: true
};

$$.StackOverflowException = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'Stack Overflow';
},
 is$Exception: true
};

$$.FormatException = {"":
 ["message?"],
 "super": "Object",
 toString$0: function() {
  return 'FormatException: ' + this.message;
},
 is$Exception: true
};

$$.NullPointerException = {"":
 ["functionName", "arguments"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.functionName;
  if (t1 == null)
    return this.get$exceptionName();
  else
    return $.S(this.get$exceptionName()) + ' : method: \'' + $.S(t1) + '\'\n' + 'Receiver: null\n' + 'Arguments: ' + $.S(this.arguments);
},
 get$exceptionName: function() {
  return 'NullPointerException';
},
 is$Exception: true
};

$$.NoMoreElementsException = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'NoMoreElementsException';
},
 is$Exception: true
};

$$.EmptyQueueException = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'EmptyQueueException';
},
 is$Exception: true
};

$$.UnsupportedOperationException = {"":
 ["_message"],
 "super": "Object",
 toString$0: function() {
  return 'UnsupportedOperationException: ' + this._message;
},
 is$Exception: true
};

$$.NotImplementedException = {"":
 ["_message"],
 "super": "Object",
 toString$0: function() {
  var t1 = this._message;
  return !(t1 == null) ? 'NotImplementedException: ' + $.S(t1) : 'NotImplementedException';
},
 is$Exception: true
};

$$.FutureNotCompleteException = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'Exception: future has not been completed';
},
 is$Exception: true
};

$$.FutureAlreadyCompleteException = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'Exception: future already completed';
},
 is$Exception: true
};

$$.Object = {"":
 [],
 "super": "",
 operator$eq$1: function(other) {
  return this === other;
},
 toString$0: function() {
  return $.Primitives_objectToString(this);
}
};

$$.ListIterator = {"":
 ["i", "list"],
 "super": "Object",
 hasNext$0: function() {
  var t1 = this.i;
  if (typeof t1 !== 'number')
    return this.hasNext$0$bailout(1, t1);
  return t1 < this.list.length;
},
 hasNext$0$bailout: function(state, t1) {
  return $.lt(t1, this.list.length);
},
 next$0: function() {
  if (this.hasNext$0() !== true)
    throw $.$$throw($.NoMoreElementsException$());
  var value = this.list[this.i];
  var t1 = this.i;
  if (typeof t1 !== 'number')
    return this.next$0$bailout(1, t1, value);
  this.i = t1 + 1;
  return value;
},
 next$0$bailout: function(state, t1, value) {
  this.i = $.add(t1, 1);
  return value;
}
};

$$.StackTrace = {"":
 ["stack"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.stack;
  return !(t1 == null) ? t1 : '';
}
};

$$.Closure = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'Closure';
}
};

$$.CastExceptionImplementation = {"":
 ["actualType", "expectedType"],
 "super": "Object",
 toString$0: function() {
  return 'CastException: Casting value of type ' + $.S(this.actualType) + ' to' + ' incompatible type ' + $.S(this.expectedType);
}
};

$$.ConstantMap = {"":
 ["length?", "_jsObject", "_lib1_keys"],
 "super": "Object",
 length$0: function() { return this.length.call$0(); },
 containsKey$1: function(key) {
  if ($.eqB(key, '__proto__'))
    return false;
  return $.jsHasOwnProperty(this._jsObject, key);
},
 operator$index$1: function(key) {
  if (this.containsKey$1(key) !== true)
    return;
  return this._jsObject[key];
},
 forEach$1: function(f) {
  $.forEach(this._lib1_keys, new $.ConstantMap_forEach_anon(this, f));
},
 getKeys$0: function() {
  return this._lib1_keys;
},
 getValues$0: function() {
  var result = [];
  $.forEach(this._lib1_keys, new $.ConstantMap_getValues_anon(this, result));
  return result;
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _throwImmutable$0: function() {
  throw $.$$throw($.CTC21);
},
 operator$indexSet$2: function(key, val) {
  return this._throwImmutable$0();
},
 remove$1: function(key) {
  return this._throwImmutable$0();
},
 clear$0: function() {
  return this._throwImmutable$0();
},
 is$Map: function() { return true; }
};

$$.MetaInfo = {"":
 ["_tag?", "_tags", "_set?"],
 "super": "Object"
};

$$.StringMatch = {"":
 ["_start", "str", "pattern"],
 "super": "Object",
 start$0: function() {
  return this._start;
},
 get$start: function() { return new $.BoundClosure0(this, 'start$0'); },
 operator$index$1: function(g) {
  return this.group$1(g);
},
 group$1: function(group_) {
  if (!$.eqB(group_, 0))
    throw $.$$throw($.IndexOutOfRangeException$(group_));
  return this.pattern;
}
};

$$.WebGL_Geometries = {"":
 ["container", "camera", "scene", "renderer"],
 "super": "Object",
 run$0: function() {
  this.init$0();
  this.animate$1(0);
},
 init$0: function() {
  this.container = $._ElementFactoryProvider_Element$tag('div');
  $.add$1($.document().get$body().get$nodes(), this.container);
  this.camera = $.PerspectiveCamera$(45, $.div($.window().get$innerWidth(), $.window().get$innerHeight()), 1, 2000);
  this.camera.get$position().set$y(400);
  this.scene = $.Scene$();
  $.add$1(this.scene, $.AmbientLight$(4210752));
  var light = $.DirectionalLight$(16777215, 1, 0);
  light.position.setValues$3(0, 1, 0);
  $.add$1(this.scene, light);
  var map = $.loadTexture('textures/ash_uvgrid01.jpg', null, null, null);
  map.wrapT = 0;
  map.wrapS = 0;
  map.anisotropy = 16;
  var materials = [$.MeshLambertMaterial$(map, 16777215, 12303291, 0, false, null, null, null, null, 0, 1, 0.98, 2, 0, true, false, 1, 'round', 'round', false, false, false, '', 2, 1, false, 1, 204, 205, 100, true, true, false, 0, 0, 0, false, true), $.MeshBasicMaterial$(null, 16777215, null, null, null, 0, 1, 0.98, 2, 0, true, true, 1, 'round', 'round', false, false, '', 2, 0.1, true, 1, 204, 205, 100, true, true, false, 0, 0, 0, false, true)];
  var object = $.createMultiMaterialObject($.CubeGeometry$(100, 100, 100, 4, 4, 4, null, null), materials);
  object.position.setValues$3(-200, 0, 400);
  $.add$1(this.scene, object);
  object = $.createMultiMaterialObject($.CylinderGeometry$(25, 75, 100, 40, 5, false), materials);
  object.position.setValues$3(0, 0, 400);
  $.add$1(this.scene, object);
  object = $.createMultiMaterialObject($.IcosahedronGeometry_IcosahedronGeometry(75, 1), materials);
  object.position.setValues$3(-200, 0, 200);
  $.add$1(this.scene, object);
  object = $.createMultiMaterialObject($.OctahedronGeometry_OctahedronGeometry(75, 2), materials);
  object.position.setValues$3(0, 0, 200);
  $.add$1(this.scene, object);
  object = $.createMultiMaterialObject($.TetrahedronGeometry_TetrahedronGeometry(75, 0), materials);
  object.position.setValues$3(200, 0, 200);
  $.add$1(this.scene, object);
  object = $.createMultiMaterialObject($.PlaneGeometry$(100, 100, 4, 4), materials);
  object.position.setValues$3(-200, 0, 0);
  $.add$1(this.scene, object);
  var object2 = $.createMultiMaterialObject($.CircleGeometry$(50, 10, 0, 3.141592653589793), materials);
  object2.rotation.set$x(1.5707963267948966);
  object.add$1(object2);
  object = $.createMultiMaterialObject($.SphereGeometry$(75, 20, 10, 0, 6.283185307179586, 0, 3.141592653589793), materials);
  object.position.setValues$3(0, 0, 0);
  $.add$1(this.scene, object);
  var points = [];
  for (var i = 0; i < 50; ++i)
    points.push($.Vector3$($.sin(i * 0.2) * 15 + 50, 0, (i - 5) * 2));
  object = $.createMultiMaterialObject($.LatheGeometry$(points, 20, 6.283185307179586), materials);
  object.position.setValues$3(200, 0, 0);
  $.add$1(this.scene, object);
  object = $.createMultiMaterialObject($.TorusGeometry$(50, 20, 20, 20, 6.283185307179586), materials);
  object.position.setValues$3(-200, 0, -200);
  $.add$1(this.scene, object);
  object = $.createMultiMaterialObject($.TorusKnotGeometry$(50, 10, 50, 20, 2, 3, 1), materials);
  object.position.setValues$3(0, 0, -200);
  $.add$1(this.scene, object);
  object = $.AxisHelper$();
  object.position.setValues$3(200, 0, -200);
  var t1 = object.scale;
  t1.set$z(0.5);
  t1.set$y(0.5);
  t1.set$x(0.5);
  $.add$1(this.scene, object);
  object = $.ArrowHelper$($.Vector3$(0, 1, 0), $.Vector3$(0, 0, 0), 50, 16776960);
  object.position.setValues$3(200, 0, 400);
  $.add$1(this.scene, object);
  this.renderer = $.WebGLRenderer$(null, 'highp', true, true, true, true, false, null, 0, 4);
  this.renderer.setSize$2($.window().get$innerWidth(), $.window().get$innerHeight());
  this.renderer.set$sortObjects(false);
  $.add$1(this.container.get$nodes(), this.renderer.get$domElement());
  $.add$1($.window().get$on().get$resize(), this.get$onWindowResize());
},
 onWindowResize$1: function(event$) {
  var t1 = $.div($.window().get$innerWidth(), $.window().get$innerHeight());
  this.camera.set$aspect(t1);
  this.camera.updateProjectionMatrix$0();
  this.renderer.setSize$2($.window().get$innerWidth(), $.window().get$innerHeight());
},
 get$onWindowResize: function() { return new $.BoundClosure(this, 'onWindowResize$1'); },
 animate$1: function(time) {
  $.window().requestAnimationFrame$1(this.get$animate());
  this.render$0();
},
 get$animate: function() { return new $.BoundClosure(this, 'animate$1'); },
 render$0: function() {
  var timer = $.mul($.DateImplementation$now().millisecondsSinceEpoch, 0.0001);
  var t1 = $.cos(timer) * 800;
  this.camera.get$position().set$x(t1);
  t1 = $.sin(timer) * 800;
  this.camera.get$position().set$z(t1);
  this.camera.lookAt$1(this.scene.get$position());
  $.forEach(this.scene.get$children(), new $.WebGL_Geometries_render_anon(timer));
  this.renderer.render$2(this.scene, this.camera);
},
 get$render: function() { return new $.BoundClosure0(this, 'render$0'); }
};

$$._AbstractWorkerEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
}
};

$$._AudioContextEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$complete: function() {
  return this.operator$index$1('complete');
},
 complete$1: function(arg0) { return this.get$complete().call$1(arg0); }
};

$$._BatteryManagerEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl"
};

$$._BodyElementEventsImpl = {"":
 ["_ptr"],
 "super": "_ElementEventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 get$load: function() {
  return this.operator$index$1('load');
},
 get$message: function() {
  return this.operator$index$1('message');
},
 get$resize: function() {
  return this.operator$index$1('resize');
}
};

$$._DOMApplicationCacheEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
}
};

$$._DedicatedWorkerContextEventsImpl = {"":
 ["_ptr"],
 "super": "_WorkerContextEventsImpl",
 get$message: function() {
  return this.operator$index$1('message');
}
};

$$._DocumentEventsImpl = {"":
 ["_ptr"],
 "super": "_ElementEventsImpl",
 get$copy: function() {
  return this.operator$index$1('copy');
},
 copy$1: function(arg0) { return this.get$copy().call$1(arg0); },
 get$error: function() {
  return this.operator$index$1('error');
},
 get$load: function() {
  return this.operator$index$1('load');
},
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); }
};

$$.FilteredElementList = {"":
 ["_node", "_childNodes"],
 "super": "Object",
 get$_filtered: function() {
  return $.ListImplementation_List$from($.filter(this._childNodes, new $.FilteredElementList__filtered_anon()));
},
 forEach$1: function(f) {
  $.forEach(this.get$_filtered(), f);
},
 operator$indexSet$2: function(index, value) {
  this.operator$index$1(index).replaceWith$1(value);
},
 set$length: function(newLength) {
  var len = $.get$length(this);
  if ($.geB(newLength, len))
    return;
  else if ($.ltB(newLength, 0))
    throw $.$$throw($.CTC16);
  this.removeRange$2($.sub(newLength, 1), $.sub(len, newLength));
},
 add$1: function(value) {
  $.add$1(this._childNodes, value);
},
 get$add: function() { return new $.BoundClosure(this, 'add$1'); },
 addAll$1: function(collection) {
  $.forEach(collection, this.get$add());
},
 addLast$1: function(value) {
  this.add$1(value);
},
 sort$1: function(compare) {
  throw $.$$throw($.CTC18);
},
 removeRange$2: function(start, rangeLength) {
  $.forEach($.getRange(this.get$_filtered(), start, rangeLength), new $.FilteredElementList_removeRange_anon());
},
 clear$0: function() {
  $.clear(this._childNodes);
},
 removeLast$0: function() {
  var result = this.last$0();
  if (!(result == null))
    result.remove$0();
  return result;
},
 map$1: function(f) {
  return $.map(this.get$_filtered(), f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $.filter(this.get$_filtered(), f);
},
 isEmpty$0: function() {
  return $.isEmpty(this.get$_filtered());
},
 get$length: function() {
  return $.get$length(this.get$_filtered());
},
 length$0: function() { return this.get$length().call$0(); },
 operator$index$1: function(index) {
  return $.index(this.get$_filtered(), index);
},
 iterator$0: function() {
  return $.iterator(this.get$_filtered());
},
 getRange$2: function(start, rangeLength) {
  return $.getRange(this.get$_filtered(), start, rangeLength);
},
 indexOf$2: function(element, start) {
  return $.indexOf$2(this.get$_filtered(), element, start);
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 last$0: function() {
  return $.last(this.get$_filtered());
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._ChildrenElementList = {"":
 ["_lib_element?", "_childElements"],
 "super": "Object",
 _toList$0: function() {
  var t1 = this._childElements;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this._toList$0$bailout(1, t1);
  var output = $.ListImplementation_List(t1.length);
  for (var len = t1.length, i = 0; i < len; ++i) {
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    var t2 = t1[i];
    if (i < 0 || i >= output.length)
      throw $.ioore(i);
    output[i] = t2;
  }
  return output;
},
 _toList$0$bailout: function(state, t1) {
  var output = $.ListImplementation_List($.get$length(t1));
  for (var len = $.get$length(t1), i = 0; $.ltB(i, len); ++i) {
    var t2 = $.index(t1, i);
    if (i < 0 || i >= output.length)
      throw $.ioore(i);
    output[i] = t2;
  }
  return output;
},
 forEach$1: function(f) {
  for (var t1 = $.iterator(this._childElements); t1.hasNext$0() === true;)
    f.call$1(t1.next$0());
},
 filter$1: function(f) {
  var output = [];
  this.forEach$1(new $._ChildrenElementList_filter_anon(f, output));
  return $._FrozenElementList$_wrap(output);
},
 map$1: function(f) {
  var out = [];
  for (var t1 = $.iterator(this); t1.hasNext$0() === true;)
    out.push(f.call$1(t1.next$0()));
  return out;
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 isEmpty$0: function() {
  return this._lib_element.get$$$dom_firstElementChild() == null;
},
 get$length: function() {
  return $.get$length(this._childElements);
},
 length$0: function() { return this.get$length().call$0(); },
 operator$index$1: function(index) {
  return $.index(this._childElements, index);
},
 operator$indexSet$2: function(index, value) {
  this._lib_element.$dom_replaceChild$2(value, $.index(this._childElements, index));
},
 set$length: function(newLength) {
  throw $.$$throw($.CTC15);
},
 add$1: function(value) {
  this._lib_element.$dom_appendChild$1(value);
  return value;
},
 addLast$1: function(value) {
  return this.add$1(value);
},
 iterator$0: function() {
  return $.iterator(this._toList$0());
},
 addAll$1: function(collection) {
  for (var t1 = $.iterator(collection), t2 = this._lib_element; t1.hasNext$0() === true;)
    t2.$dom_appendChild$1(t1.next$0());
},
 sort$1: function(compare) {
  throw $.$$throw($.CTC18);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC23);
},
 getRange$2: function(start, rangeLength) {
  return $._FrozenElementList$_wrap($._Lists_getRange(this, start, rangeLength, []));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 clear$0: function() {
  this._lib_element.set$text('');
},
 removeLast$0: function() {
  var result = this.last$0();
  if (!(result == null))
    this._lib_element.$dom_removeChild$1(result);
  return result;
},
 last$0: function() {
  return this._lib_element.get$$$dom_lastElementChild();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._FrozenElementList = {"":
 ["_nodeList"],
 "super": "Object",
 forEach$1: function(f) {
  for (var t1 = $.iterator(this); t1.hasNext$0() === true;)
    f.call$1(t1.next$0());
},
 map$1: function(f) {
  var out = [];
  for (var t1 = $.iterator(this); t1.hasNext$0() === true;)
    out.push(f.call$1(t1.next$0()));
  return out;
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  var out = $._ElementList$([]);
  for (var t1 = $.iterator(this); t1.hasNext$0() === true;) {
    var t2 = t1.next$0();
    if (f.call$1(t2) === true)
      out.add$1(t2);
  }
  return out;
},
 isEmpty$0: function() {
  return $.isEmpty(this._nodeList);
},
 get$length: function() {
  return $.get$length(this._nodeList);
},
 length$0: function() { return this.get$length().call$0(); },
 operator$index$1: function(index) {
  return $.index(this._nodeList, index);
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.CTC15);
},
 set$length: function(newLength) {
  $.set$length(this._nodeList, newLength);
},
 add$1: function(value) {
  throw $.$$throw($.CTC15);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC15);
},
 iterator$0: function() {
  return $._FrozenElementListIterator$(this);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC15);
},
 sort$1: function(compare) {
  throw $.$$throw($.CTC15);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC15);
},
 getRange$2: function(start, rangeLength) {
  return $._FrozenElementList$_wrap($.getRange(this._nodeList, start, rangeLength));
},
 indexOf$2: function(element, start) {
  return $.indexOf$2(this._nodeList, element, start);
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 clear$0: function() {
  throw $.$$throw($.CTC15);
},
 removeLast$0: function() {
  throw $.$$throw($.CTC15);
},
 last$0: function() {
  return $.last(this._nodeList);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._FrozenElementListIterator = {"":
 ["_lib_list", "_index"],
 "super": "Object",
 next$0: function() {
  if (this.hasNext$0() !== true)
    throw $.$$throw($.CTC11);
  var t1 = this._lib_list;
  var t2 = this._index;
  if (typeof t2 !== 'number')
    return this.next$0$bailout(1, t1, t2);
  this._index = t2 + 1;
  return t1.operator$index$1(t2);
},
 next$0$bailout: function(state, t1, t2) {
  this._index = $.add(t2, 1);
  return $.index(t1, t2);
},
 hasNext$0: function() {
  var t1 = this._index;
  if (typeof t1 !== 'number')
    return this.hasNext$0$bailout(1, t1, 0);
  var t3 = $.get$length(this._lib_list);
  if (typeof t3 !== 'number')
    return this.hasNext$0$bailout(2, t1, t3);
  return t1 < t3;
},
 hasNext$0$bailout: function(state, env0, env1) {
  switch (state) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t1 = env0;
      t3 = env1;
      break;
  }
  switch (state) {
    case 0:
      var t1 = this._index;
    case 1:
      state = 0;
      var t3 = $.get$length(this._lib_list);
    case 2:
      state = 0;
      return $.lt(t1, t3);
  }
}
};

$$._ElementList = {"":
 ["_lib_list"],
 "super": "_ListWrapper",
 filter$1: function(f) {
  return $._ElementList$($._ListWrapper.prototype.filter$1.call(this, f));
},
 getRange$2: function(start, rangeLength) {
  return $._ElementList$($._ListWrapper.prototype.getRange$2.call(this, start, rangeLength));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._ElementAttributeMap = {"":
 ["_lib_element?"],
 "super": "Object",
 containsKey$1: function(key) {
  return this._lib_element.$dom_hasAttribute$1(key);
},
 operator$index$1: function(key) {
  return this._lib_element.$dom_getAttribute$1(key);
},
 operator$indexSet$2: function(key, value) {
  this._lib_element.$dom_setAttribute$2(key, $.S(value));
},
 remove$1: function(key) {
  var t1 = this._lib_element;
  var value = t1.$dom_getAttribute$1(key);
  t1.$dom_removeAttribute$1(key);
  return value;
},
 clear$0: function() {
  var attributes = this._lib_element.get$$$dom_attributes();
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.clear$0$bailout(1, attributes);
  for (var i = attributes.length - 1; i >= 0; --i) {
    if (i < 0 || i >= attributes.length)
      throw $.ioore(i);
    this.remove$1(attributes[i].get$name());
  }
},
 clear$0$bailout: function(state, attributes) {
  for (var i = $.sub($.get$length(attributes), 1); $.geB(i, 0); i = $.sub(i, 1))
    this.remove$1($.index(attributes, i).get$name());
},
 forEach$1: function(f) {
  var attributes = this._lib_element.get$$$dom_attributes();
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.forEach$1$bailout(1, f, attributes);
  for (var len = attributes.length, i = 0; i < len; ++i) {
    if (i < 0 || i >= attributes.length)
      throw $.ioore(i);
    var item = attributes[i];
    f.call$2(item.get$name(), item.get$value());
  }
},
 forEach$1$bailout: function(state, f, attributes) {
  for (var len = $.get$length(attributes), i = 0; $.ltB(i, len); ++i) {
    var item = $.index(attributes, i);
    f.call$2(item.get$name(), item.get$value());
  }
},
 getKeys$0: function() {
  var attributes = this._lib_element.get$$$dom_attributes();
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.getKeys$0$bailout(1, attributes);
  var keys = $.ListImplementation_List(attributes.length);
  for (var len = attributes.length, i = 0; i < len; ++i) {
    if (i < 0 || i >= attributes.length)
      throw $.ioore(i);
    var t1 = attributes[i].get$name();
    if (i < 0 || i >= keys.length)
      throw $.ioore(i);
    keys[i] = t1;
  }
  return keys;
},
 getKeys$0$bailout: function(state, attributes) {
  var keys = $.ListImplementation_List($.get$length(attributes));
  for (var len = $.get$length(attributes), i = 0; $.ltB(i, len); ++i) {
    var t1 = $.index(attributes, i).get$name();
    if (i < 0 || i >= keys.length)
      throw $.ioore(i);
    keys[i] = t1;
  }
  return keys;
},
 getValues$0: function() {
  var attributes = this._lib_element.get$$$dom_attributes();
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.getValues$0$bailout(1, attributes);
  var values = $.ListImplementation_List(attributes.length);
  for (var len = attributes.length, i = 0; i < len; ++i) {
    if (i < 0 || i >= attributes.length)
      throw $.ioore(i);
    var t1 = attributes[i].get$value();
    if (i < 0 || i >= values.length)
      throw $.ioore(i);
    values[i] = t1;
  }
  return values;
},
 getValues$0$bailout: function(state, attributes) {
  var values = $.ListImplementation_List($.get$length(attributes));
  for (var len = $.get$length(attributes), i = 0; $.ltB(i, len); ++i) {
    var t1 = $.index(attributes, i).get$value();
    if (i < 0 || i >= values.length)
      throw $.ioore(i);
    values[i] = t1;
  }
  return values;
},
 get$length: function() {
  return $.get$length(this._lib_element.get$$$dom_attributes());
},
 length$0: function() { return this.get$length().call$0(); },
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 is$Map: function() { return true; }
};

$$._ElementEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$copy: function() {
  return this.operator$index$1('copy');
},
 copy$1: function(arg0) { return this.get$copy().call$1(arg0); },
 get$error: function() {
  return this.operator$index$1('error');
},
 get$load: function() {
  return this.operator$index$1('load');
},
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); }
};

$$._EventSourceEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 get$message: function() {
  return this.operator$index$1('message');
}
};

$$._EventsImpl = {"":
 ["_ptr"],
 "super": "Object",
 operator$index$1: function(type) {
  return $._EventListenerListImpl$(this._ptr, type);
}
};

$$._EventListenerListImpl = {"":
 ["_ptr", "_type"],
 "super": "Object",
 add$2: function(listener, useCapture) {
  this._add$2(listener, useCapture);
  return this;
},
 add$1: function(listener) {
  return this.add$2(listener,false)
},
 remove$2: function(listener, useCapture) {
  this._remove$2(listener, useCapture);
  return this;
},
 remove$1: function(listener) {
  return this.remove$2(listener,false)
},
 _add$2: function(listener, useCapture) {
  this._ptr.$dom_addEventListener$3(this._type, listener, useCapture);
},
 _remove$2: function(listener, useCapture) {
  this._ptr.$dom_removeEventListener$3(this._type, listener, useCapture);
}
};

$$._FileReaderEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 get$load: function() {
  return this.operator$index$1('load');
}
};

$$._FileWriterEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
}
};

$$._FrameSetElementEventsImpl = {"":
 ["_ptr"],
 "super": "_ElementEventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 get$load: function() {
  return this.operator$index$1('load');
},
 get$message: function() {
  return this.operator$index$1('message');
},
 get$resize: function() {
  return this.operator$index$1('resize');
}
};

$$._HttpRequestEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 get$load: function() {
  return this.operator$index$1('load');
}
};

$$._HttpRequestUploadEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 get$load: function() {
  return this.operator$index$1('load');
}
};

$$._IDBDatabaseEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
}
};

$$._IDBOpenDBRequestEventsImpl = {"":
 ["_ptr"],
 "super": "_IDBRequestEventsImpl"
};

$$._IDBRequestEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
}
};

$$._IDBTransactionEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$complete: function() {
  return this.operator$index$1('complete');
},
 complete$1: function(arg0) { return this.get$complete().call$1(arg0); },
 get$error: function() {
  return this.operator$index$1('error');
}
};

$$._IDBVersionChangeRequestEventsImpl = {"":
 ["_ptr"],
 "super": "_IDBRequestEventsImpl"
};

$$._InputElementEventsImpl = {"":
 ["_ptr"],
 "super": "_ElementEventsImpl"
};

$$._JavaScriptAudioNodeEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl"
};

$$._MediaElementEventsImpl = {"":
 ["_ptr"],
 "super": "_ElementEventsImpl"
};

$$._MediaStreamEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl"
};

$$._MediaStreamTrackEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl"
};

$$._MediaStreamTrackListEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl"
};

$$._MessagePortEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$message: function() {
  return this.operator$index$1('message');
}
};

$$._ChildNodeListLazy = {"":
 ["_this"],
 "super": "Object",
 last$0: function() {
  return this._this.lastChild;
},
 add$1: function(value) {
  this._this.$dom_appendChild$1(value);
},
 addLast$1: function(value) {
  this._this.$dom_appendChild$1(value);
},
 addAll$1: function(collection) {
  for (var t1 = $.iterator(collection), t2 = this._this; t1.hasNext$0() === true;)
    t2.$dom_appendChild$1(t1.next$0());
},
 removeLast$0: function() {
  var result = this.last$0();
  if (!(result == null))
    this._this.$dom_removeChild$1(result);
  return result;
},
 clear$0: function() {
  this._this.set$text('');
},
 operator$indexSet$2: function(index, value) {
  this._this.$dom_replaceChild$2(value, this.operator$index$1(index));
},
 iterator$0: function() {
  return $.iterator(this._this.get$$$dom_childNodes());
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._NodeListWrapper$($._Collections_filter(this, [], f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._NodeListWrapper$($._Lists_getRange(this, start, rangeLength, []));
},
 get$length: function() {
  return $.get$length(this._this.get$$$dom_childNodes());
},
 length$0: function() { return this.get$length().call$0(); },
 operator$index$1: function(index) {
  return $.index(this._this.get$$$dom_childNodes(), index);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._ListWrapper = {"":
 [],
 "super": "Object",
 iterator$0: function() {
  return $.iterator(this._lib_list);
},
 forEach$1: function(f) {
  return $.forEach(this._lib_list, f);
},
 map$1: function(f) {
  return $.map(this._lib_list, f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $.filter(this._lib_list, f);
},
 isEmpty$0: function() {
  return $.isEmpty(this._lib_list);
},
 get$length: function() {
  return $.get$length(this._lib_list);
},
 length$0: function() { return this.get$length().call$0(); },
 operator$index$1: function(index) {
  return $.index(this._lib_list, index);
},
 operator$indexSet$2: function(index, value) {
  $.indexSet(this._lib_list, index, value);
},
 set$length: function(newLength) {
  $.set$length(this._lib_list, newLength);
},
 add$1: function(value) {
  return $.add$1(this._lib_list, value);
},
 addLast$1: function(value) {
  return $.addLast(this._lib_list, value);
},
 addAll$1: function(collection) {
  return $.addAll(this._lib_list, collection);
},
 sort$1: function(compare) {
  return $.sort(this._lib_list, compare);
},
 indexOf$2: function(element, start) {
  return $.indexOf$2(this._lib_list, element, start);
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 clear$0: function() {
  return $.clear(this._lib_list);
},
 removeLast$0: function() {
  return $.removeLast(this._lib_list);
},
 last$0: function() {
  return $.last(this._lib_list);
},
 getRange$2: function(start, rangeLength) {
  return $.getRange(this._lib_list, start, rangeLength);
},
 removeRange$2: function(start, rangeLength) {
  return $.removeRange(this._lib_list, start, rangeLength);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._NodeListWrapper = {"":
 ["_lib_list"],
 "super": "_ListWrapper",
 filter$1: function(f) {
  return $._NodeListWrapper$($.filter(this._lib_list, f));
},
 getRange$2: function(start, rangeLength) {
  return $._NodeListWrapper$($.getRange(this._lib_list, start, rangeLength));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._NotificationEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$close: function() {
  return this.operator$index$1('close');
},
 close$0: function() { return this.get$close().call$0(); },
 get$error: function() {
  return this.operator$index$1('error');
}
};

$$._PeerConnection00EventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl"
};

$$._RTCPeerConnectionEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl"
};

$$._SVGElementInstanceEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$copy: function() {
  return this.operator$index$1('copy');
},
 copy$1: function(arg0) { return this.get$copy().call$1(arg0); },
 get$error: function() {
  return this.operator$index$1('error');
},
 get$load: function() {
  return this.operator$index$1('load');
},
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); },
 get$resize: function() {
  return this.operator$index$1('resize');
}
};

$$._SharedWorkerContextEventsImpl = {"":
 ["_ptr"],
 "super": "_WorkerContextEventsImpl"
};

$$._SpeechRecognitionEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 get$start: function() {
  return this.operator$index$1('start');
}
};

$$._TextTrackEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl"
};

$$._TextTrackCueEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl"
};

$$._TextTrackListEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl"
};

$$._WebSocketEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$close: function() {
  return this.operator$index$1('close');
},
 close$0: function() { return this.get$close().call$0(); },
 get$error: function() {
  return this.operator$index$1('error');
},
 get$message: function() {
  return this.operator$index$1('message');
}
};

$$._WindowEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 get$load: function() {
  return this.operator$index$1('load');
},
 get$message: function() {
  return this.operator$index$1('message');
},
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); },
 get$resize: function() {
  return this.operator$index$1('resize');
}
};

$$._WorkerEventsImpl = {"":
 ["_ptr"],
 "super": "_AbstractWorkerEventsImpl",
 get$message: function() {
  return this.operator$index$1('message');
}
};

$$._WorkerContextEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
}
};

$$._FixedSizeListIterator = {"":
 ["_lib_length", "_array", "_pos"],
 "super": "_VariableSizeListIterator",
 hasNext$0: function() {
  var t1 = this._lib_length;
  if (typeof t1 !== 'number')
    return this.hasNext$0$bailout(1, t1, 0);
  var t3 = this._pos;
  if (typeof t3 !== 'number')
    return this.hasNext$0$bailout(2, t1, t3);
  return t1 > t3;
},
 hasNext$0$bailout: function(state, env0, env1) {
  switch (state) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t1 = env0;
      t3 = env1;
      break;
  }
  switch (state) {
    case 0:
      var t1 = this._lib_length;
    case 1:
      state = 0;
      var t3 = this._pos;
    case 2:
      state = 0;
      return $.gt(t1, t3);
  }
}
};

$$._VariableSizeListIterator = {"":
 ["_array?"],
 "super": "Object",
 hasNext$0: function() {
  var t1 = $.get$length(this._array);
  if (typeof t1 !== 'number')
    return this.hasNext$0$bailout(1, t1, 0);
  var t3 = this._pos;
  if (typeof t3 !== 'number')
    return this.hasNext$0$bailout(2, t3, t1);
  return t1 > t3;
},
 hasNext$0$bailout: function(state, env0, env1) {
  switch (state) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t3 = env0;
      t1 = env1;
      break;
  }
  switch (state) {
    case 0:
      var t1 = $.get$length(this._array);
    case 1:
      state = 0;
      var t3 = this._pos;
    case 2:
      state = 0;
      return $.gt(t1, t3);
  }
},
 next$0: function() {
  if (this.hasNext$0() !== true)
    throw $.$$throw($.CTC11);
  var t1 = this._array;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.next$0$bailout(1, t1, 0);
  var t3 = this._pos;
  if (typeof t3 !== 'number')
    return this.next$0$bailout(2, t1, t3);
  this._pos = t3 + 1;
  if (t3 !== (t3 | 0))
    throw $.iae(t3);
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  return t1[t3];
},
 next$0$bailout: function(state, env0, env1) {
  switch (state) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t1 = env0;
      t3 = env1;
      break;
  }
  switch (state) {
    case 0:
      if (this.hasNext$0() !== true)
        throw $.$$throw($.CTC11);
      var t1 = this._array;
    case 1:
      state = 0;
      var t3 = this._pos;
    case 2:
      state = 0;
      this._pos = $.add(t3, 1);
      return $.index(t1, t3);
  }
}
};

$$._Manager = {"":
 ["nextIsolateId=", "currentManagerId?", "nextManagerId", "currentContext=", "rootContext=", "topEventLoop?", "fromCommandLine?", "isWorker?", "supportsWorkers", "isolates?", "mainManager?", "managers?"],
 "super": "Object",
 get$useWorkers: function() {
  return this.supportsWorkers;
},
 get$needSerialization: function() {
  return this.get$useWorkers();
},
 _nativeDetectEnvironment$0: function() {
    this.isWorker = $isWorker;
    this.supportsWorkers = $supportsWorkers;
    this.fromCommandLine = typeof(window) == 'undefined';
  
},
 _nativeInitWorkerMessageHandler$0: function() {
    $globalThis.onmessage = function (e) {
      _IsolateNatives._processWorkerMessage(this.mainManager, e);
    }
  
},
 maybeCloseWorker$0: function() {
  if ($.isEmpty(this.isolates) === true)
    this.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'close'])));
},
 _Manager$0: function() {
  this._nativeDetectEnvironment$0();
  this.topEventLoop = $._EventLoop$();
  this.isolates = $.HashMapImplementation$();
  this.managers = $.HashMapImplementation$();
  if (this.isWorker === true) {
    this.mainManager = $._MainManagerStub$();
    this._nativeInitWorkerMessageHandler$0();
  }
}
};

$$._IsolateContext = {"":
 ["id=", "ports?", "isolateStatics"],
 "super": "Object",
 initGlobals$0: function() {
$initGlobals(this);
},
 eval$1: function(code) {
  var old = $._globalState().get$currentContext();
  $._globalState().set$currentContext(this);
  this._setGlobals$0();
  var result = null;
  try {
    result = code.call$0();
  } finally {
    var t1 = old;
    $._globalState().set$currentContext(t1);
    t1 = old;
    if (!(t1 == null))
      t1._setGlobals$0();
  }
  return result;
},
 _setGlobals$0: function() {
$setGlobals(this);
},
 lookup$1: function(portId) {
  return $.index(this.ports, portId);
},
 register$2: function(portId, port) {
  var t1 = this.ports;
  if (t1.containsKey$1(portId) === true)
    throw $.$$throw($.ExceptionImplementation$('Registry: ports must be registered only once.'));
  $.indexSet(t1, portId, port);
  $.indexSet($._globalState().get$isolates(), this.id, this);
},
 unregister$1: function(portId) {
  var t1 = this.ports;
  t1.remove$1(portId);
  if ($.isEmpty(t1) === true)
    $._globalState().get$isolates().remove$1(this.id);
},
 _IsolateContext$0: function() {
  var t1 = $._globalState();
  var t2 = t1.get$nextIsolateId();
  t1.set$nextIsolateId($.add(t2, 1));
  this.id = t2;
  this.ports = $.HashMapImplementation$();
  this.initGlobals$0();
}
};

$$._EventLoop = {"":
 ["events"],
 "super": "Object",
 enqueue$3: function(isolate, fn, msg) {
  $.addLast(this.events, $._IsolateEvent$(isolate, fn, msg));
},
 dequeue$0: function() {
  var t1 = this.events;
  if ($.isEmpty(t1) === true)
    return;
  return t1.removeFirst$0();
},
 runIteration$0: function() {
  var event$ = this.dequeue$0();
  if (event$ == null) {
    if ($._globalState().get$isWorker() === true)
      $._globalState().maybeCloseWorker$0();
    else if (!($._globalState().get$rootContext() == null) && $._globalState().get$isolates().containsKey$1($._globalState().get$rootContext().get$id()) === true && $._globalState().get$fromCommandLine() === true && $.isEmpty($._globalState().get$rootContext().get$ports()) === true)
      throw $.$$throw($.ExceptionImplementation$('Program exited with open ReceivePorts.'));
    return false;
  }
  event$.process$0();
  return true;
},
 _runHelper$0: function() {
  if (!($._window() == null))
    new $._EventLoop__runHelper_next(this).call$0();
  else
    for (; this.runIteration$0() === true;)
      ;
},
 run$0: function() {
  if ($._globalState().get$isWorker() !== true)
    this._runHelper$0();
  else
    try {
      this._runHelper$0();
    } catch (exception) {
      var t1 = $.unwrapException(exception);
      var e = t1;
      var trace = $.getTraceFromException(exception);
      $._globalState().get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'error', 'msg', $.S(e) + '\n' + $.S(trace)])));
    }

}
};

$$._IsolateEvent = {"":
 ["isolate", "fn", "message?"],
 "super": "Object",
 process$0: function() {
  this.isolate.eval$1(this.fn);
}
};

$$._MainManagerStub = {"":
 [],
 "super": "Object",
 get$id: function() {
  return 0;
},
 set$id: function(i) {
  throw $.$$throw($.NotImplementedException$(null));
},
 postMessage$1: function(msg) {
$globalThis.postMessage(msg);
}
};

$$._BaseSendPort = {"":
 ["_isolateId?"],
 "super": "Object",
 _checkReplyTo$1: function(replyTo) {
  if (!(replyTo == null) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_NativeJsSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_WorkerSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_BufferingSendPort))
    throw $.$$throw($.ExceptionImplementation$('SendPort.send: Illegal replyTo port type'));
},
 call$1: function(message) {
  var completer = $.CompleterImpl$();
  var port = $._ReceivePortImpl$();
  this.send$2(message, port.toSendPort$0());
  port.receive$1(new $._BaseSendPort_call_anon(port, completer));
  return completer.get$future();
},
 is$SendPort: true
};

$$._NativeJsSendPort = {"":
 ["_receivePort?", "_isolateId"],
 "super": "_BaseSendPort",
 send$2: function(message, replyTo) {
  $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(this, message, replyTo));
},
 operator$eq$1: function(other) {
  return typeof other === 'object' && other !== null && !!other.is$_NativeJsSendPort && $.eqB(this._receivePort, other._receivePort);
},
 hashCode$0: function() {
  return this._receivePort.get$_lib2_id();
},
 is$_NativeJsSendPort: true,
 is$SendPort: true
};

$$._WorkerSendPort = {"":
 ["_workerId?", "_receivePortId", "_isolateId"],
 "super": "_BaseSendPort",
 send$2: function(message, replyTo) {
  $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(this, message, replyTo));
},
 operator$eq$1: function(other) {
  if (typeof other === 'object' && other !== null && !!other.is$_WorkerSendPort)
    var t1 = $.eqB(this._workerId, other._workerId) && $.eqB(this._isolateId, other._isolateId) && $.eqB(this._receivePortId, other._receivePortId);
  else
    t1 = false;
  return t1;
},
 hashCode$0: function() {
  return $.xor($.xor($.shl(this._workerId, 16), $.shl(this._isolateId, 8)), this._receivePortId);
},
 is$_WorkerSendPort: true,
 is$SendPort: true
};

$$._ReceivePortImpl = {"":
 ["_lib2_id?", "_callback?"],
 "super": "Object",
 _callback$2: function(arg0, arg1) { return this._callback.call$2(arg0, arg1); },
 receive$1: function(onMessage) {
  this._callback = onMessage;
},
 close$0: function() {
  this._callback = null;
  $._globalState().get$currentContext().unregister$1(this._lib2_id);
},
 toSendPort$0: function() {
  return $._NativeJsSendPort$(this, $._globalState().get$currentContext().get$id());
},
 _ReceivePortImpl$0: function() {
  $._globalState().get$currentContext().register$2(this._lib2_id, this);
}
};

$$._PendingSendPortFinder = {"":
 ["ports?", "_visited"],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
},
 visitList$1: function(list) {
  var t1 = this._visited;
  if (!($.index(t1, list) == null))
    return;
  $.indexSet(t1, list, true);
  $.forEach(list, new $._PendingSendPortFinder_visitList_anon(this));
},
 visitMap$1: function(map) {
  var t1 = this._visited;
  if (!($.index(t1, map) == null))
    return;
  $.indexSet(t1, map, true);
  $.forEach(map.getValues$0(), new $._PendingSendPortFinder_visitMap_anon(this));
},
 visitSendPort$1: function(port) {
  if (!!port.is$_BufferingSendPort && port._port == null)
    this.ports.push(port.get$_futurePort());
},
 _PendingSendPortFinder$0: function() {
  this._visited = $._JsVisitedMap$();
}
};

$$._JsSerializer = {"":
 ["_nextFreeRefId", "_visited"],
 "super": "_Serializer",
 visitSendPort$1: function(x) {
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return this.visitWorkerSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw('Illegal underlying port ' + $.S(x));
},
 visitNativeJsSendPort$1: function(port) {
  return ['sendport', $._globalState().get$currentManagerId(), port._isolateId, port._receivePort.get$_lib2_id()];
},
 visitWorkerSendPort$1: function(port) {
  return ['sendport', port._workerId, port._isolateId, port._receivePortId];
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw('internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.');
},
 _JsSerializer$0: function() {
  this._visited = $._JsVisitedMap$();
}
};

$$._JsCopier = {"":
 ["_visited"],
 "super": "_Copier",
 visitSendPort$1: function(x) {
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return this.visitWorkerSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw('Illegal underlying port ' + $.S(this.get$p()));
},
 visitNativeJsSendPort$1: function(port) {
  return $._NativeJsSendPort$(port._receivePort, port._isolateId);
},
 visitWorkerSendPort$1: function(port) {
  return $._WorkerSendPort$(port._workerId, port._isolateId, port._receivePortId);
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw('internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.');
},
 _JsCopier$0: function() {
  this._visited = $._JsVisitedMap$();
}
};

$$._JsDeserializer = {"":
 ["_deserialized"],
 "super": "_Deserializer",
 deserializeSendPort$1: function(x) {
  var managerId = $.index(x, 1);
  var isolateId = $.index(x, 2);
  var receivePortId = $.index(x, 3);
  if ($.eqB(managerId, $._globalState().get$currentManagerId())) {
    var isolate = $.index($._globalState().get$isolates(), isolateId);
    if (isolate == null)
      return;
    return $._NativeJsSendPort$(isolate.lookup$1(receivePortId), isolateId);
  } else
    return $._WorkerSendPort$(managerId, isolateId, receivePortId);
}
};

$$._JsVisitedMap = {"":
 ["tagged"],
 "super": "Object",
 operator$index$1: function(object) {
  return this._getAttachedInfo$1(object);
},
 operator$indexSet$2: function(object, info) {
  $.add$1(this.tagged, object);
  this._setAttachedInfo$2(object, info);
},
 reset$0: function() {
  this.tagged = $.ListImplementation_List(null);
},
 cleanup$0: function() {
  var length$ = $.get$length(this.tagged);
  if (typeof length$ !== 'number')
    return this.cleanup$0$bailout(1, length$);
  var i = 0;
  for (; i < length$; ++i)
    this._clearAttachedInfo$1($.index(this.tagged, i));
  this.tagged = null;
},
 cleanup$0$bailout: function(state, length$) {
  var i = 0;
  for (; $.ltB(i, length$); ++i)
    this._clearAttachedInfo$1($.index(this.tagged, i));
  this.tagged = null;
},
 _clearAttachedInfo$1: function(o) {
o['__MessageTraverser__attached_info__'] = (void 0);
},
 _setAttachedInfo$2: function(o, info) {
o['__MessageTraverser__attached_info__'] = info;
},
 _getAttachedInfo$1: function(o) {
return o['__MessageTraverser__attached_info__'];
}
};

$$._MessageTraverserVisitedMap = {"":
 [],
 "super": "Object",
 operator$index$1: function(object) {
  return;
},
 operator$indexSet$2: function(object, info) {
},
 reset$0: function() {
},
 cleanup$0: function() {
}
};

$$._MessageTraverser = {"":
 [],
 "super": "Object",
 traverse$1: function(x) {
  if ($._MessageTraverser_isPrimitive(x))
    return this.visitPrimitive$1(x);
  var t1 = this._visited;
  t1.reset$0();
  var result = null;
  try {
    result = this._dispatch$1(x);
  } finally {
    t1.cleanup$0();
  }
  return result;
},
 _dispatch$1: function(x) {
  if ($._MessageTraverser_isPrimitive(x))
    return this.visitPrimitive$1(x);
  if (typeof x === 'object' && x !== null && (x.constructor === Array || x.is$List()))
    return this.visitList$1(x);
  if (typeof x === 'object' && x !== null && x.is$Map())
    return this.visitMap$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPort)
    return this.visitSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPortSync)
    return this.visitSendPortSync$1(x);
  return this.visitObject$1(x);
},
 visitObject$1: function(x) {
  throw $.$$throw('Message serialization: Illegal value ' + $.S(x) + ' passed');
}
};

$$._Copier = {"":
 [],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  if (typeof list !== 'object' || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior())
    return this.visitList$1$bailout(1, list);
  var t1 = this._visited;
  var copy = t1.operator$index$1(list);
  if (!(copy == null))
    return copy;
  var len = list.length;
  copy = $.ListImplementation_List(len);
  t1.operator$indexSet$2(list, copy);
  for (var i = 0; i < len; ++i) {
    if (i < 0 || i >= list.length)
      throw $.ioore(i);
    t1 = this._dispatch$1(list[i]);
    if (i < 0 || i >= copy.length)
      throw $.ioore(i);
    copy[i] = t1;
  }
  return copy;
},
 visitList$1$bailout: function(state, list) {
  var t1 = this._visited;
  var copy = $.index(t1, list);
  if (!(copy == null))
    return copy;
  var len = $.get$length(list);
  copy = $.ListImplementation_List(len);
  $.indexSet(t1, list, copy);
  for (var i = 0; $.ltB(i, len); ++i) {
    t1 = this._dispatch$1($.index(list, i));
    if (i < 0 || i >= copy.length)
      throw $.ioore(i);
    copy[i] = t1;
  }
  return copy;
},
 visitMap$1: function(map) {
  var t1 = {};
  var t2 = this._visited;
  t1.copy_10 = $.index(t2, map);
  var t3 = t1.copy_10;
  if (!(t3 == null))
    return t3;
  t1.copy_10 = $.HashMapImplementation$();
  $.indexSet(t2, map, t1.copy_10);
  map.forEach$1(new $._Copier_visitMap_anon(this, t1));
  return t1.copy_10;
}
};

$$._Serializer = {"":
 [],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  var t1 = this._visited;
  var copyId = $.index(t1, list);
  if (!(copyId == null))
    return ['ref', copyId];
  var id = this._nextFreeRefId;
  this._nextFreeRefId = id + 1;
  $.indexSet(t1, list, id);
  return ['list', id, this._serializeList$1(list)];
},
 visitMap$1: function(map) {
  var t1 = this._visited;
  var copyId = $.index(t1, map);
  if (!(copyId == null))
    return ['ref', copyId];
  var id = this._nextFreeRefId;
  this._nextFreeRefId = id + 1;
  $.indexSet(t1, map, id);
  return ['map', id, this._serializeList$1(map.getKeys$0()), this._serializeList$1(map.getValues$0())];
},
 _serializeList$1: function(list) {
  if (typeof list !== 'string' && (typeof list !== 'object' || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior()))
    return this._serializeList$1$bailout(1, list);
  var len = list.length;
  var result = $.ListImplementation_List(len);
  for (var i = 0; i < len; ++i) {
    if (i < 0 || i >= list.length)
      throw $.ioore(i);
    var t1 = this._dispatch$1(list[i]);
    if (i < 0 || i >= result.length)
      throw $.ioore(i);
    result[i] = t1;
  }
  return result;
},
 _serializeList$1$bailout: function(state, list) {
  var len = $.get$length(list);
  var result = $.ListImplementation_List(len);
  for (var i = 0; $.ltB(i, len); ++i) {
    var t1 = this._dispatch$1($.index(list, i));
    if (i < 0 || i >= result.length)
      throw $.ioore(i);
    result[i] = t1;
  }
  return result;
}
};

$$._Deserializer = {"":
 [],
 "super": "Object",
 deserialize$1: function(x) {
  if ($._Deserializer_isPrimitive(x))
    return x;
  this._deserialized = $.HashMapImplementation$();
  return this._deserializeHelper$1(x);
},
 _deserializeHelper$1: function(x) {
  if ($._Deserializer_isPrimitive(x))
    return x;
  switch ($.index(x, 0)) {
    case 'ref':
      return this._deserializeRef$1(x);
    case 'list':
      return this._deserializeList$1(x);
    case 'map':
      return this._deserializeMap$1(x);
    case 'sendport':
      return this.deserializeSendPort$1(x);
    default:
      return this.deserializeObject$1(x);
  }
},
 _deserializeRef$1: function(x) {
  var id = $.index(x, 1);
  return $.index(this._deserialized, id);
},
 _deserializeList$1: function(x) {
  var id = $.index(x, 1);
  var dartList = $.index(x, 2);
  if (typeof dartList !== 'object' || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !dartList.is$JavaScriptIndexingBehavior())
    return this._deserializeList$1$bailout(1, dartList, id);
  $.indexSet(this._deserialized, id, dartList);
  var len = dartList.length;
  for (var i = 0; i < len; ++i) {
    if (i < 0 || i >= dartList.length)
      throw $.ioore(i);
    var t1 = this._deserializeHelper$1(dartList[i]);
    if (i < 0 || i >= dartList.length)
      throw $.ioore(i);
    dartList[i] = t1;
  }
  return dartList;
},
 _deserializeList$1$bailout: function(state, dartList, id) {
  $.indexSet(this._deserialized, id, dartList);
  var len = $.get$length(dartList);
  for (var i = 0; $.ltB(i, len); ++i)
    $.indexSet(dartList, i, this._deserializeHelper$1($.index(dartList, i)));
  return dartList;
},
 _deserializeMap$1: function(x) {
  var result = $.HashMapImplementation$();
  var id = $.index(x, 1);
  $.indexSet(this._deserialized, id, result);
  var keys = $.index(x, 2);
  if (typeof keys !== 'string' && (typeof keys !== 'object' || keys === null || keys.constructor !== Array && !keys.is$JavaScriptIndexingBehavior()))
    return this._deserializeMap$1$bailout(1, x, result, keys);
  var values = $.index(x, 3);
  if (typeof values !== 'string' && (typeof values !== 'object' || values === null || values.constructor !== Array && !values.is$JavaScriptIndexingBehavior()))
    return this._deserializeMap$1$bailout(2, values, result, keys);
  var len = keys.length;
  for (var i = 0; i < len; ++i) {
    if (i < 0 || i >= keys.length)
      throw $.ioore(i);
    var key = this._deserializeHelper$1(keys[i]);
    if (i < 0 || i >= values.length)
      throw $.ioore(i);
    result.operator$indexSet$2(key, this._deserializeHelper$1(values[i]));
  }
  return result;
},
 _deserializeMap$1$bailout: function(state, env0, env1, env2) {
  switch (state) {
    case 1:
      var x = env0;
      result = env1;
      keys = env2;
      break;
    case 2:
      values = env0;
      result = env1;
      keys = env2;
      break;
  }
  switch (state) {
    case 0:
      var result = $.HashMapImplementation$();
      var id = $.index(x, 1);
      $.indexSet(this._deserialized, id, result);
      var keys = $.index(x, 2);
    case 1:
      state = 0;
      var values = $.index(x, 3);
    case 2:
      state = 0;
      var len = $.get$length(keys);
      for (var i = 0; $.ltB(i, len); ++i)
        result.operator$indexSet$2(this._deserializeHelper$1($.index(keys, i)), this._deserializeHelper$1($.index(values, i)));
      return result;
  }
},
 deserializeObject$1: function(x) {
  throw $.$$throw('Unexpected serialized object');
}
};

$$._Timer = {"":
 ["_once", "_handle"],
 "super": "Object",
 _Timer$repeating$2: function(milliSeconds, callback) {
  this._handle = $._window().setInterval$2(new $.anon5(this, callback), milliSeconds);
},
 _Timer$2: function(milliSeconds, callback) {
  this._handle = $._window().setTimeout$2(new $.anon4(this, callback), milliSeconds);
}
};

$$._Random = {"":
 [],
 "super": "Object",
 nextInt$1: function(max) {
  if (max < 0)
    throw $.$$throw($.IllegalArgumentException$('negative max: ' + $.S(max)));
  if (max > 4294967295)
    max = 4294967295;
  return (Math.random() * max) >>> 0;
}
};

$$.Camera = {"":
 ["matrixWorldInverse?", "projectionMatrix?", "near?", "far?"],
 "super": "Object3D",
 lookAt$1: function(vector) {
  this.matrix.lookAt$3(this.position, vector, this.up);
  if (this.rotationAutoUpdate === true)
    this.rotation.setEulerFromRotationMatrix$2(this.matrix, this.eulerOrder);
},
 is$Camera: true
};

$$.PerspectiveCamera = {"":
 ["fov", "aspect!", "_fullWidth", "_fullHeight", "_x", "_y", "_width", "_height", "matrixWorldInverse", "projectionMatrix", "projectionMatrixInverse", "near", "far", "id", "name", "properties", "parent", "children", "up", "position", "rotation", "scale", "eulerOrder", "_dynamic", "doubleSided", "flipSided", "rotationAutoUpdate", "renderDepth", "matrix", "matrixWorld", "matrixRotationWorld", "matrixAutoUpdate", "matrixWorldNeedsUpdate", "quaternion", "useQuaternion", "boundRadius", "boundRadiusScale", "visible", "castShadow", "receiveShadow", "frustumCulled", "_vector", "__data"],
 "super": "Camera",
 updateProjectionMatrix$0: function() {
  var t1 = this._fullWidth;
  var t2 = !(t1 == null);
  var t3 = this.projectionMatrix;
  var t4 = this.near;
  var t5 = this.fov;
  var t6 = this.far;
  if (t2) {
    t2 = this._fullHeight;
    var aspect = $.div(t1, t2);
    var t7 = $.tan(t5 * 3.141592653589793 / 360);
    if (typeof t4 !== 'number')
      throw $.iae(t4);
    var top$ = t7 * t4;
    var bottom = -top$;
    var left = $.mul(aspect, bottom);
    var width = $.abs($.sub($.mul(aspect, top$), left));
    var height = $.abs(top$ - bottom);
    t7 = this._x;
    var t8 = $.add(left, $.div($.mul(t7, width), t1));
    var t9 = $.add(left, $.div($.mul($.add(t7, width), width), t1));
    var t10 = this._y;
    var t11 = $.div($.mul($.add(t10, height), height), t2);
    if (typeof t11 !== 'number')
      throw $.iae(t11);
    t11 = top$ - t11;
    t2 = $.div($.mul(t10, height), t2);
    if (typeof t2 !== 'number')
      throw $.iae(t2);
    t3.makeFrustum$6(t8, t9, t11, top$ - t2, t4, t6);
  } else
    t3.makePerspective$4(t5, this.aspect, t4, t6);
},
 PerspectiveCamera$4: function(fov, aspect, near, far) {
  this.updateProjectionMatrix$0();
}
};

$$.Vector3 = {"":
 ["x=", "y=", "z="],
 "super": "Object",
 setValues$3: function(x, y, z) {
  this.x = x;
  this.y = y;
  this.z = z;
  return this;
},
 setY$1: function(y) {
  this.y = y;
  return this;
},
 copy$1: function(v) {
  this.x = v.get$x();
  this.y = v.get$y();
  this.z = v.get$z();
  return this;
},
 add$2: function(v1, v2) {
  var t1 = v1.get$x();
  if (typeof t1 !== 'number')
    return this.add$2$bailout(1, v1, v2, t1, 0);
  var t3 = v2.get$x();
  if (typeof t3 !== 'number')
    return this.add$2$bailout(2, v1, v2, t1, t3);
  this.x = t1 + t3;
  var t5 = v1.get$y();
  if (typeof t5 !== 'number')
    return this.add$2$bailout(3, v1, v2, t5, 0);
  var t7 = v2.get$y();
  if (typeof t7 !== 'number')
    return this.add$2$bailout(4, v1, v2, t5, t7);
  this.y = t5 + t7;
  var t9 = v1.get$z();
  if (typeof t9 !== 'number')
    return this.add$2$bailout(5, v2, t9, 0, 0);
  var t11 = v2.get$z();
  if (typeof t11 !== 'number')
    return this.add$2$bailout(6, t9, t11, 0, 0);
  this.z = t9 + t11;
  return this;
},
 add$2$bailout: function(state, env0, env1, env2, env3) {
  switch (state) {
    case 1:
      var v1 = env0;
      var v2 = env1;
      t1 = env2;
      break;
    case 2:
      v1 = env0;
      v2 = env1;
      t1 = env2;
      t3 = env3;
      break;
    case 3:
      v1 = env0;
      v2 = env1;
      t5 = env2;
      break;
    case 4:
      v1 = env0;
      v2 = env1;
      t5 = env2;
      t7 = env3;
      break;
    case 5:
      v2 = env0;
      t9 = env1;
      break;
    case 6:
      t9 = env0;
      t11 = env1;
      break;
  }
  switch (state) {
    case 0:
      var t1 = v1.get$x();
    case 1:
      state = 0;
      var t3 = v2.get$x();
    case 2:
      state = 0;
      this.x = $.add(t1, t3);
      var t5 = v1.get$y();
    case 3:
      state = 0;
      var t7 = v2.get$y();
    case 4:
      state = 0;
      this.y = $.add(t5, t7);
      var t9 = v1.get$z();
    case 5:
      state = 0;
      var t11 = v2.get$z();
    case 6:
      state = 0;
      this.z = $.add(t9, t11);
      return this;
  }
},
 addSelf$1: function(v) {
  this.x = $.add(this.x, v.get$x());
  this.y = $.add(this.y, v.get$y());
  this.z = $.add(this.z, v.get$z());
  return this;
},
 sub$2: function(v1, v2) {
  this.x = $.sub(v1.get$x(), v2.get$x());
  this.y = $.sub(v1.get$y(), v2.get$y());
  this.z = $.sub(v1.get$z(), v2.get$z());
  return this;
},
 subSelf$1: function(v) {
  var t1 = this.x;
  if (typeof t1 !== 'number')
    return this.subSelf$1$bailout(1, v, t1, 0);
  var t3 = v.get$x();
  if (typeof t3 !== 'number')
    return this.subSelf$1$bailout(2, v, t1, t3);
  this.x = t1 - t3;
  var t5 = this.y;
  if (typeof t5 !== 'number')
    return this.subSelf$1$bailout(3, v, t5, 0);
  var t7 = v.get$y();
  if (typeof t7 !== 'number')
    return this.subSelf$1$bailout(4, v, t7, t5);
  this.y = t5 - t7;
  var t9 = this.z;
  if (typeof t9 !== 'number')
    return this.subSelf$1$bailout(5, t9, v, 0);
  var t11 = v.get$z();
  if (typeof t11 !== 'number')
    return this.subSelf$1$bailout(6, t9, t11, 0);
  this.z = t9 - t11;
  return this;
},
 subSelf$1$bailout: function(state, env0, env1, env2) {
  switch (state) {
    case 1:
      var v = env0;
      t1 = env1;
      break;
    case 2:
      v = env0;
      t1 = env1;
      t3 = env2;
      break;
    case 3:
      v = env0;
      t5 = env1;
      break;
    case 4:
      v = env0;
      t7 = env1;
      t5 = env2;
      break;
    case 5:
      t9 = env0;
      v = env1;
      break;
    case 6:
      t9 = env0;
      t11 = env1;
      break;
  }
  switch (state) {
    case 0:
      var t1 = this.x;
    case 1:
      state = 0;
      var t3 = v.get$x();
    case 2:
      state = 0;
      this.x = $.sub(t1, t3);
      var t5 = this.y;
    case 3:
      state = 0;
      var t7 = v.get$y();
    case 4:
      state = 0;
      this.y = $.sub(t5, t7);
      var t9 = this.z;
    case 5:
      state = 0;
      var t11 = v.get$z();
    case 6:
      state = 0;
      this.z = $.sub(t9, t11);
      return this;
  }
},
 multiply$2: function(a, b) {
  this.x = $.mul(a.get$x(), b.get$x());
  this.y = $.mul(a.get$y(), b.get$y());
  this.z = $.mul(a.get$z(), b.get$z());
  return this;
},
 multiplySelf$1: function(v) {
  this.x = $.mul(this.x, v.get$x());
  this.y = $.mul(this.y, v.get$y());
  this.z = $.mul(this.z, v.get$z());
  return this;
},
 multiplyScalar$1: function(s) {
  this.x = $.mul(this.x, s);
  this.y = $.mul(this.y, s);
  this.z = $.mul(this.z, s);
  return this;
},
 divideScalar$1: function(s) {
  if (typeof s !== 'number')
    return this.divideScalar$1$bailout(1, s, 0);
  if (!(s === 0)) {
    var t1 = this.x;
    if (typeof t1 !== 'number')
      return this.divideScalar$1$bailout(2, s, t1);
    this.x = t1 / s;
    var t3 = this.y;
    if (typeof t3 !== 'number')
      return this.divideScalar$1$bailout(3, s, t3);
    this.y = t3 / s;
    var t5 = this.z;
    if (typeof t5 !== 'number')
      return this.divideScalar$1$bailout(4, s, t5);
    this.z = t5 / s;
  } else {
    this.x = 0;
    this.y = 0;
    this.z = 0;
  }
  return this;
},
 divideScalar$1$bailout: function(state, env0, env1) {
  switch (state) {
    case 1:
      var s = env0;
      break;
    case 2:
      s = env0;
      t1 = env1;
      break;
    case 3:
      s = env0;
      t3 = env1;
      break;
    case 4:
      s = env0;
      t5 = env1;
      break;
  }
  switch (state) {
    case 0:
    case 1:
      state = 0;
    default:
      if (state === 4 || state === 3 || state === 2 || state === 0 && !$.eqB(s, 0))
        switch (state) {
          case 0:
            var t1 = this.x;
          case 2:
            state = 0;
            this.x = $.div(t1, s);
            var t3 = this.y;
          case 3:
            state = 0;
            this.y = $.div(t3, s);
            var t5 = this.z;
          case 4:
            state = 0;
            this.z = $.div(t5, s);
        }
      else {
        this.x = 0;
        this.y = 0;
        this.z = 0;
      }
      return this;
  }
},
 negate$0: function() {
  return this.multiplyScalar$1(-1);
},
 dot$1: function(v) {
  return $.add($.add($.mul(this.x, v.get$x()), $.mul(this.y, v.get$y())), $.mul(this.z, v.get$z()));
},
 lengthSq$0: function() {
  var t1 = this.x;
  t1 = $.mul(t1, t1);
  var t2 = this.y;
  t1 = $.add(t1, $.mul(t2, t2));
  var t3 = this.z;
  return $.add(t1, $.mul(t3, t3));
},
 length$0: function() {
  return $.sqrt(this.lengthSq$0());
},
 get$length: function() { return new $.BoundClosure0(this, 'length$0'); },
 normalize$0: function() {
  return this.divideScalar$1(this.length$0());
},
 cross$2: function(a, b) {
  var t1 = a.get$y();
  if (typeof t1 !== 'number')
    return this.cross$2$bailout(1, a, b, t1, 0, 0);
  var t3 = b.get$z();
  if (typeof t3 !== 'number')
    return this.cross$2$bailout(2, a, b, t1, t3, 0);
  t3 = t1 * t3;
  t1 = a.get$z();
  if (typeof t1 !== 'number')
    return this.cross$2$bailout(3, a, b, t1, t3, 0);
  var t6 = b.get$y();
  if (typeof t6 !== 'number')
    return this.cross$2$bailout(4, a, b, t6, t1, t3);
  this.x = t3 - t1 * t6;
  var t8 = a.get$z();
  if (typeof t8 !== 'number')
    return this.cross$2$bailout(5, a, b, t8, 0, 0);
  var t10 = b.get$x();
  if (typeof t10 !== 'number')
    return this.cross$2$bailout(6, a, b, t10, t8, 0);
  t10 = t8 * t10;
  t8 = a.get$x();
  if (typeof t8 !== 'number')
    return this.cross$2$bailout(7, a, b, t10, t8, 0);
  var t13 = b.get$z();
  if (typeof t13 !== 'number')
    return this.cross$2$bailout(8, a, b, t10, t8, t13);
  this.y = t10 - t8 * t13;
  var t15 = a.get$x();
  if (typeof t15 !== 'number')
    return this.cross$2$bailout(9, a, b, t15, 0, 0);
  var t17 = b.get$y();
  if (typeof t17 !== 'number')
    return this.cross$2$bailout(10, a, b, t15, t17, 0);
  t17 = t15 * t17;
  t15 = a.get$y();
  if (typeof t15 !== 'number')
    return this.cross$2$bailout(11, b, t17, t15, 0, 0);
  var t20 = b.get$x();
  if (typeof t20 !== 'number')
    return this.cross$2$bailout(12, t17, t15, t20, 0, 0);
  this.z = t17 - t15 * t20;
  return this;
},
 cross$2$bailout: function(state, env0, env1, env2, env3, env4) {
  switch (state) {
    case 1:
      var a = env0;
      var b = env1;
      t1 = env2;
      break;
    case 2:
      a = env0;
      b = env1;
      t1 = env2;
      t3 = env3;
      break;
    case 3:
      a = env0;
      b = env1;
      t1 = env2;
      t3 = env3;
      break;
    case 4:
      a = env0;
      b = env1;
      t6 = env2;
      t1 = env3;
      t3 = env4;
      break;
    case 5:
      a = env0;
      b = env1;
      t8 = env2;
      break;
    case 6:
      a = env0;
      b = env1;
      t10 = env2;
      t8 = env3;
      break;
    case 7:
      a = env0;
      b = env1;
      t10 = env2;
      t8 = env3;
      break;
    case 8:
      a = env0;
      b = env1;
      t10 = env2;
      t8 = env3;
      t13 = env4;
      break;
    case 9:
      a = env0;
      b = env1;
      t15 = env2;
      break;
    case 10:
      a = env0;
      b = env1;
      t15 = env2;
      t17 = env3;
      break;
    case 11:
      b = env0;
      t17 = env1;
      t15 = env2;
      break;
    case 12:
      t17 = env0;
      t15 = env1;
      t20 = env2;
      break;
  }
  switch (state) {
    case 0:
      var t1 = a.get$y();
    case 1:
      state = 0;
      var t3 = b.get$z();
    case 2:
      state = 0;
      t3 = $.mul(t1, t3);
      t1 = a.get$z();
    case 3:
      state = 0;
      var t6 = b.get$y();
    case 4:
      state = 0;
      this.x = $.sub(t3, $.mul(t1, t6));
      var t8 = a.get$z();
    case 5:
      state = 0;
      var t10 = b.get$x();
    case 6:
      state = 0;
      t10 = $.mul(t8, t10);
      t8 = a.get$x();
    case 7:
      state = 0;
      var t13 = b.get$z();
    case 8:
      state = 0;
      this.y = $.sub(t10, $.mul(t8, t13));
      var t15 = a.get$x();
    case 9:
      state = 0;
      var t17 = b.get$y();
    case 10:
      state = 0;
      t17 = $.mul(t15, t17);
      t15 = a.get$y();
    case 11:
      state = 0;
      var t20 = b.get$x();
    case 12:
      state = 0;
      this.z = $.sub(t17, $.mul(t15, t20));
      return this;
  }
},
 crossSelf$1: function(v) {
  var x2 = this.x;
  var y2 = this.y;
  var z2 = this.z;
  this.x = $.sub($.mul(y2, v.get$z()), $.mul(z2, v.get$y()));
  this.y = $.sub($.mul(z2, v.get$x()), $.mul(x2, v.get$z()));
  this.z = $.sub($.mul(x2, v.get$y()), $.mul(y2, v.get$x()));
  return this;
},
 setEulerFromRotationMatrix$2: function(m, order) {
  var clamp = new $.Vector3_setEulerFromRotationMatrix_anon();
  var te = m.get$elements();
  var m11 = $.index(te, 0);
  var m12 = $.index(te, 4);
  var m13 = $.index(te, 8);
  var m21 = $.index(te, 1);
  var m22 = $.index(te, 5);
  var m23 = $.index(te, 9);
  var m31 = $.index(te, 2);
  var m32 = $.index(te, 6);
  var m33 = $.index(te, 10);
  if ($.eqB(order, 'XYZ')) {
    this.y = $.asin(clamp.call$1(m13));
    if ($.ltB($.abs(m13), 0.99999)) {
      this.x = $.atan2($.neg(m23), m33);
      this.z = $.atan2($.neg(m12), m11);
    } else {
      this.x = $.atan2(m21, m22);
      this.z = 0;
    }
  } else if (order === 'YXZ') {
    this.x = $.asin($.neg(clamp.call$1(m23)));
    if ($.ltB($.abs(m23), 0.99999)) {
      this.y = $.atan2(m13, m33);
      this.z = $.atan2(m21, m22);
    } else {
      this.y = $.atan2($.neg(m31), m11);
      this.z = 0;
    }
  } else if (order === 'ZXY') {
    this.x = $.asin(clamp.call$1(m32));
    if ($.ltB($.abs(m32), 0.99999)) {
      this.y = $.atan2($.neg(m31), m33);
      this.z = $.atan2($.neg(m12), m22);
    } else {
      this.y = 0;
      this.z = $.atan2(m13, m11);
    }
  } else if (order === 'ZYX') {
    this.y = $.asin($.neg(clamp.call$1(m31)));
    if ($.ltB($.abs(m31), 0.99999)) {
      this.x = $.atan2(m32, m33);
      this.z = $.atan2(m21, m11);
    } else {
      this.x = 0;
      this.z = $.atan2($.neg(m12), m22);
    }
  } else if (order === 'YZX') {
    this.z = $.asin(clamp.call$1(m21));
    if ($.ltB($.abs(m21), 0.99999)) {
      this.x = $.atan2($.neg(m23), m22);
      this.y = $.atan2($.neg(m31), m11);
    } else {
      this.x = 0;
      this.y = $.atan2(m31, m33);
    }
  } else if (order === 'XZY') {
    this.z = $.asin($.neg(clamp.call$1(m12)));
    if ($.ltB($.abs(m12), 0.99999)) {
      this.x = $.atan2(m32, m22);
      this.y = $.atan2(m13, m11);
    } else {
      this.x = $.atan2($.neg(m13), m33);
      this.y = 0;
    }
  }
  return this;
},
 isZero$0: function() {
  return $.lt(this.lengthSq$0(), 0.0001);
},
 clone$0: function() {
  return $.Vector3$(this.x, this.y, this.z);
},
 is$Vector3: true
};

$$.Matrix3 = {"":
 ["elements?"],
 "super": "Object",
 getInverse$1: function(matrix) {
  var me = matrix.get$elements();
  var a11 = $.sub($.mul($.index(me, 10), $.index(me, 5)), $.mul($.index(me, 6), $.index(me, 9)));
  var a21 = $.add($.mul($.neg($.index(me, 10)), $.index(me, 1)), $.mul($.index(me, 2), $.index(me, 9)));
  var a31 = $.sub($.mul($.index(me, 6), $.index(me, 1)), $.mul($.index(me, 2), $.index(me, 5)));
  var a12 = $.add($.mul($.neg($.index(me, 10)), $.index(me, 4)), $.mul($.index(me, 6), $.index(me, 8)));
  var a22 = $.sub($.mul($.index(me, 10), $.index(me, 0)), $.mul($.index(me, 2), $.index(me, 8)));
  var a32 = $.add($.mul($.neg($.index(me, 6)), $.index(me, 0)), $.mul($.index(me, 2), $.index(me, 4)));
  var a13 = $.sub($.mul($.index(me, 9), $.index(me, 4)), $.mul($.index(me, 5), $.index(me, 8)));
  var a23 = $.add($.mul($.neg($.index(me, 9)), $.index(me, 0)), $.mul($.index(me, 1), $.index(me, 8)));
  var a33 = $.sub($.mul($.index(me, 5), $.index(me, 0)), $.mul($.index(me, 1), $.index(me, 4)));
  var det = $.add($.add($.mul($.index(me, 0), a11), $.mul($.index(me, 1), a12)), $.mul($.index(me, 2), a13));
  if (det === 0)
    $.print('Matrix3.getInverse(): determinant == 0');
  if (typeof det !== 'number')
    throw $.iae(det);
  var idet = 1 / det;
  var m = this.elements;
  if (typeof a11 !== 'number')
    throw $.iae(a11);
  $.indexSet(m, 0, idet * a11);
  if (typeof a21 !== 'number')
    throw $.iae(a21);
  $.indexSet(m, 1, idet * a21);
  if (typeof a31 !== 'number')
    throw $.iae(a31);
  $.indexSet(m, 2, idet * a31);
  if (typeof a12 !== 'number')
    throw $.iae(a12);
  $.indexSet(m, 3, idet * a12);
  if (typeof a22 !== 'number')
    throw $.iae(a22);
  $.indexSet(m, 4, idet * a22);
  if (typeof a32 !== 'number')
    throw $.iae(a32);
  $.indexSet(m, 5, idet * a32);
  if (typeof a13 !== 'number')
    throw $.iae(a13);
  $.indexSet(m, 6, idet * a13);
  if (typeof a23 !== 'number')
    throw $.iae(a23);
  $.indexSet(m, 7, idet * a23);
  if (typeof a33 !== 'number')
    throw $.iae(a33);
  $.indexSet(m, 8, idet * a33);
  return this;
},
 transpose$0: function() {
  var m = this.elements;
  var tmp = $.index(m, 1);
  $.indexSet(m, 1, $.index(m, 3));
  $.indexSet(m, 3, tmp);
  tmp = $.index(m, 2);
  $.indexSet(m, 2, $.index(m, 6));
  $.indexSet(m, 6, tmp);
  tmp = $.index(m, 5);
  $.indexSet(m, 5, $.index(m, 7));
  $.indexSet(m, 7, tmp);
  return this;
}
};

$$.Matrix4 = {"":
 ["elements?"],
 "super": "Object",
 setValues$16: function(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
  var te = this.elements;
  $.indexSet(te, 0, n11);
  $.indexSet(te, 4, n12);
  $.indexSet(te, 8, n13);
  $.indexSet(te, 12, n14);
  $.indexSet(te, 1, n21);
  $.indexSet(te, 5, n22);
  $.indexSet(te, 9, n23);
  $.indexSet(te, 13, n24);
  $.indexSet(te, 2, n31);
  $.indexSet(te, 6, n32);
  $.indexSet(te, 10, n33);
  $.indexSet(te, 14, n34);
  $.indexSet(te, 3, n41);
  $.indexSet(te, 7, n42);
  $.indexSet(te, 11, n43);
  $.indexSet(te, 15, n44);
  return this;
},
 copy$1: function(m) {
  var me = m.get$elements();
  if (typeof me !== 'string' && (typeof me !== 'object' || me === null || me.constructor !== Array && !me.is$JavaScriptIndexingBehavior()))
    return this.copy$1$bailout(1, me);
  var t2 = me.length;
  if (0 >= t2)
    throw $.ioore(0);
  var t3 = me[0];
  if (4 >= t2)
    throw $.ioore(4);
  var t4 = me[4];
  if (8 >= t2)
    throw $.ioore(8);
  var t5 = me[8];
  if (12 >= t2)
    throw $.ioore(12);
  var t6 = me[12];
  if (1 >= t2)
    throw $.ioore(1);
  var t7 = me[1];
  if (5 >= t2)
    throw $.ioore(5);
  var t8 = me[5];
  if (9 >= t2)
    throw $.ioore(9);
  var t9 = me[9];
  if (13 >= t2)
    throw $.ioore(13);
  var t10 = me[13];
  if (2 >= t2)
    throw $.ioore(2);
  var t11 = me[2];
  if (6 >= t2)
    throw $.ioore(6);
  var t12 = me[6];
  if (10 >= t2)
    throw $.ioore(10);
  var t13 = me[10];
  if (14 >= t2)
    throw $.ioore(14);
  var t14 = me[14];
  if (3 >= t2)
    throw $.ioore(3);
  var t15 = me[3];
  if (7 >= t2)
    throw $.ioore(7);
  var t16 = me[7];
  if (11 >= t2)
    throw $.ioore(11);
  var t17 = me[11];
  if (15 >= t2)
    throw $.ioore(15);
  this.setValues$16(t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, me[15]);
  return this;
},
 copy$1$bailout: function(state, me) {
  this.setValues$16($.index(me, 0), $.index(me, 4), $.index(me, 8), $.index(me, 12), $.index(me, 1), $.index(me, 5), $.index(me, 9), $.index(me, 13), $.index(me, 2), $.index(me, 6), $.index(me, 10), $.index(me, 14), $.index(me, 3), $.index(me, 7), $.index(me, 11), $.index(me, 15));
  return this;
},
 lookAt$3: function(eye, center, up) {
  var te = this.elements;
  var x = $.Matrix4___v1();
  var y = $.Matrix4___v2();
  var z = $.Matrix4___v3();
  z.sub$2(eye, center).normalize$0();
  if (z.length$0() === 0)
    z.set$z(1);
  x.cross$2(up, z).normalize$0();
  if (x.length$0() === 0) {
    z.set$x($.add(z.get$x(), 0.0001));
    x.cross$2(up, z).normalize$0();
  }
  y.cross$2(z, x).normalize$0();
  $.indexSet(te, 0, x.get$x());
  $.indexSet(te, 4, y.get$x());
  $.indexSet(te, 8, z.get$x());
  $.indexSet(te, 1, x.get$y());
  $.indexSet(te, 5, y.get$y());
  $.indexSet(te, 9, z.get$y());
  $.indexSet(te, 2, x.get$z());
  $.indexSet(te, 6, y.get$z());
  $.indexSet(te, 10, z.get$z());
  return this;
},
 multiply$2: function(a, b) {
  var ae = a.get$elements();
  var be = b.get$elements();
  var te = this.elements;
  var a11 = $.index(ae, 0);
  var a12 = $.index(ae, 4);
  var a13 = $.index(ae, 8);
  var a14 = $.index(ae, 12);
  var a21 = $.index(ae, 1);
  var a22 = $.index(ae, 5);
  var a23 = $.index(ae, 9);
  var a24 = $.index(ae, 13);
  var a31 = $.index(ae, 2);
  var a32 = $.index(ae, 6);
  var a33 = $.index(ae, 10);
  var a34 = $.index(ae, 14);
  var a41 = $.index(ae, 3);
  var a42 = $.index(ae, 7);
  var a43 = $.index(ae, 11);
  var a44 = $.index(ae, 15);
  var b11 = $.index(be, 0);
  var b12 = $.index(be, 4);
  var b13 = $.index(be, 8);
  var b14 = $.index(be, 12);
  var b21 = $.index(be, 1);
  var b22 = $.index(be, 5);
  var b23 = $.index(be, 9);
  var b24 = $.index(be, 13);
  var b31 = $.index(be, 2);
  var b32 = $.index(be, 6);
  var b33 = $.index(be, 10);
  var b34 = $.index(be, 14);
  var b41 = $.index(be, 3);
  var b42 = $.index(be, 7);
  var b43 = $.index(be, 11);
  var b44 = $.index(be, 15);
  $.indexSet(te, 0, $.add($.add($.add($.mul(a11, b11), $.mul(a12, b21)), $.mul(a13, b31)), $.mul(a14, b41)));
  $.indexSet(te, 4, $.add($.add($.add($.mul(a11, b12), $.mul(a12, b22)), $.mul(a13, b32)), $.mul(a14, b42)));
  $.indexSet(te, 8, $.add($.add($.add($.mul(a11, b13), $.mul(a12, b23)), $.mul(a13, b33)), $.mul(a14, b43)));
  $.indexSet(te, 12, $.add($.add($.add($.mul(a11, b14), $.mul(a12, b24)), $.mul(a13, b34)), $.mul(a14, b44)));
  $.indexSet(te, 1, $.add($.add($.add($.mul(a21, b11), $.mul(a22, b21)), $.mul(a23, b31)), $.mul(a24, b41)));
  $.indexSet(te, 5, $.add($.add($.add($.mul(a21, b12), $.mul(a22, b22)), $.mul(a23, b32)), $.mul(a24, b42)));
  $.indexSet(te, 9, $.add($.add($.add($.mul(a21, b13), $.mul(a22, b23)), $.mul(a23, b33)), $.mul(a24, b43)));
  $.indexSet(te, 13, $.add($.add($.add($.mul(a21, b14), $.mul(a22, b24)), $.mul(a23, b34)), $.mul(a24, b44)));
  $.indexSet(te, 2, $.add($.add($.add($.mul(a31, b11), $.mul(a32, b21)), $.mul(a33, b31)), $.mul(a34, b41)));
  $.indexSet(te, 6, $.add($.add($.add($.mul(a31, b12), $.mul(a32, b22)), $.mul(a33, b32)), $.mul(a34, b42)));
  $.indexSet(te, 10, $.add($.add($.add($.mul(a31, b13), $.mul(a32, b23)), $.mul(a33, b33)), $.mul(a34, b43)));
  $.indexSet(te, 14, $.add($.add($.add($.mul(a31, b14), $.mul(a32, b24)), $.mul(a33, b34)), $.mul(a34, b44)));
  $.indexSet(te, 3, $.add($.add($.add($.mul(a41, b11), $.mul(a42, b21)), $.mul(a43, b31)), $.mul(a44, b41)));
  $.indexSet(te, 7, $.add($.add($.add($.mul(a41, b12), $.mul(a42, b22)), $.mul(a43, b32)), $.mul(a44, b42)));
  $.indexSet(te, 11, $.add($.add($.add($.mul(a41, b13), $.mul(a42, b23)), $.mul(a43, b33)), $.mul(a44, b43)));
  $.indexSet(te, 15, $.add($.add($.add($.mul(a41, b14), $.mul(a42, b24)), $.mul(a43, b34)), $.mul(a44, b44)));
  return this;
},
 multiplySelf$1: function(m) {
  return this.multiply$2(this, m);
},
 multiplyScalar$1: function(s) {
  var te = this.elements;
  $.indexSet(te, 0, $.mul($.index(te, 0), s));
  $.indexSet(te, 4, $.mul($.index(te, 4), s));
  $.indexSet(te, 8, $.mul($.index(te, 8), s));
  $.indexSet(te, 12, $.mul($.index(te, 12), s));
  $.indexSet(te, 1, $.mul($.index(te, 1), s));
  $.indexSet(te, 5, $.mul($.index(te, 5), s));
  $.indexSet(te, 9, $.mul($.index(te, 9), s));
  $.indexSet(te, 13, $.mul($.index(te, 13), s));
  $.indexSet(te, 2, $.mul($.index(te, 2), s));
  $.indexSet(te, 6, $.mul($.index(te, 6), s));
  $.indexSet(te, 10, $.mul($.index(te, 10), s));
  $.indexSet(te, 14, $.mul($.index(te, 14), s));
  $.indexSet(te, 3, $.mul($.index(te, 3), s));
  $.indexSet(te, 7, $.mul($.index(te, 7), s));
  $.indexSet(te, 11, $.mul($.index(te, 11), s));
  $.indexSet(te, 15, $.mul($.index(te, 15), s));
  return this;
},
 multiplyVector3$1: function(v) {
  var te = this.elements;
  if (typeof te !== 'string' && (typeof te !== 'object' || te === null || te.constructor !== Array && !te.is$JavaScriptIndexingBehavior()))
    return this.multiplyVector3$1$bailout(1, v, te, 0, 0, 0, 0, 0, 0);
  var vx = v.get$x();
  if (typeof vx !== 'number')
    return this.multiplyVector3$1$bailout(2, v, te, vx, 0, 0, 0, 0, 0);
  var vy = v.get$y();
  if (typeof vy !== 'number')
    return this.multiplyVector3$1$bailout(3, v, te, vy, vx, 0, 0, 0, 0);
  var vz = v.get$z();
  if (typeof vz !== 'number')
    return this.multiplyVector3$1$bailout(4, v, te, vy, vz, vx, 0, 0, 0);
  var t5 = te.length;
  if (3 >= t5)
    throw $.ioore(3);
  var t6 = te[3];
  if (typeof t6 !== 'number')
    return this.multiplyVector3$1$bailout(5, v, te, vy, vz, vx, t6, 0, 0);
  t6 *= vx;
  if (7 >= t5)
    throw $.ioore(7);
  var t8 = te[7];
  if (typeof t8 !== 'number')
    return this.multiplyVector3$1$bailout(6, v, te, vy, vz, vx, t6, t8, 0);
  t6 += t8 * vy;
  if (11 >= t5)
    throw $.ioore(11);
  var t10 = te[11];
  if (typeof t10 !== 'number')
    return this.multiplyVector3$1$bailout(7, v, t6, te, vy, vz, vx, t10, 0);
  t6 += t10 * vz;
  if (15 >= t5)
    throw $.ioore(15);
  var t12 = te[15];
  if (typeof t12 !== 'number')
    return this.multiplyVector3$1$bailout(8, v, te, vy, vz, vx, t6, t12, 0);
  var d = 1 / (t6 + t12);
  if (0 >= t5)
    throw $.ioore(0);
  var t14 = te[0];
  if (typeof t14 !== 'number')
    return this.multiplyVector3$1$bailout(9, v, d, te, vy, vz, vx, t14, 0);
  t14 *= vx;
  if (4 >= t5)
    throw $.ioore(4);
  var t16 = te[4];
  if (typeof t16 !== 'number')
    return this.multiplyVector3$1$bailout(10, v, d, te, vy, vz, vx, t14, t16);
  t14 += t16 * vy;
  if (8 >= t5)
    throw $.ioore(8);
  var t18 = te[8];
  if (typeof t18 !== 'number')
    return this.multiplyVector3$1$bailout(11, v, d, t18, te, vy, vz, vx, t14);
  t14 += t18 * vz;
  if (12 >= t5)
    throw $.ioore(12);
  var t20 = te[12];
  if (typeof t20 !== 'number')
    return this.multiplyVector3$1$bailout(12, v, d, te, vy, vz, vx, t20, t14);
  v.set$x((t14 + t20) * d);
  var t22 = te.length;
  if (1 >= t22)
    throw $.ioore(1);
  var t23 = te[1];
  if (typeof t23 !== 'number')
    return this.multiplyVector3$1$bailout(13, v, d, te, vy, vz, vx, t23, 0);
  t23 *= vx;
  if (5 >= t22)
    throw $.ioore(5);
  var t25 = te[5];
  if (typeof t25 !== 'number')
    return this.multiplyVector3$1$bailout(14, v, d, t23, te, vy, vz, vx, t25);
  t23 += t25 * vy;
  if (9 >= t22)
    throw $.ioore(9);
  var t27 = te[9];
  if (typeof t27 !== 'number')
    return this.multiplyVector3$1$bailout(15, v, d, te, vy, vz, vx, t23, t27);
  t23 += t27 * vz;
  if (13 >= t22)
    throw $.ioore(13);
  var t29 = te[13];
  if (typeof t29 !== 'number')
    return this.multiplyVector3$1$bailout(16, v, d, t29, te, vy, vz, vx, t23);
  v.set$y((t23 + t29) * d);
  var t31 = te.length;
  if (2 >= t31)
    throw $.ioore(2);
  var t32 = te[2];
  if (typeof t32 !== 'number')
    return this.multiplyVector3$1$bailout(17, v, d, te, vy, vz, vx, t32, 0);
  t32 *= vx;
  if (6 >= t31)
    throw $.ioore(6);
  var t34 = te[6];
  if (typeof t34 !== 'number')
    return this.multiplyVector3$1$bailout(18, v, d, te, vy, vz, t32, t34, 0);
  t32 += t34 * vy;
  if (10 >= t31)
    throw $.ioore(10);
  var t36 = te[10];
  if (typeof t36 !== 'number')
    return this.multiplyVector3$1$bailout(19, v, d, t32, te, t36, vz, 0, 0);
  t32 += t36 * vz;
  if (14 >= t31)
    throw $.ioore(14);
  var t38 = te[14];
  if (typeof t38 !== 'number')
    return this.multiplyVector3$1$bailout(20, v, d, t32, t38, 0, 0, 0, 0);
  v.set$z((t32 + t38) * d);
  return v;
},
 multiplyVector3$1$bailout: function(state, env0, env1, env2, env3, env4, env5, env6, env7) {
  switch (state) {
    case 1:
      var v = env0;
      te = env1;
      break;
    case 2:
      v = env0;
      te = env1;
      vx = env2;
      break;
    case 3:
      v = env0;
      te = env1;
      vy = env2;
      vx = env3;
      break;
    case 4:
      v = env0;
      te = env1;
      vy = env2;
      vz = env3;
      vx = env4;
      break;
    case 5:
      v = env0;
      te = env1;
      vy = env2;
      vz = env3;
      vx = env4;
      t5 = env5;
      break;
    case 6:
      v = env0;
      te = env1;
      vy = env2;
      vz = env3;
      vx = env4;
      t5 = env5;
      t7 = env6;
      break;
    case 7:
      v = env0;
      t5 = env1;
      te = env2;
      vy = env3;
      vz = env4;
      vx = env5;
      t9 = env6;
      break;
    case 8:
      v = env0;
      te = env1;
      vy = env2;
      vz = env3;
      vx = env4;
      t5 = env5;
      t11 = env6;
      break;
    case 9:
      v = env0;
      d = env1;
      te = env2;
      vy = env3;
      vz = env4;
      vx = env5;
      t11 = env6;
      break;
    case 10:
      v = env0;
      d = env1;
      te = env2;
      vy = env3;
      vz = env4;
      vx = env5;
      t11 = env6;
      t13 = env7;
      break;
    case 11:
      v = env0;
      d = env1;
      t15 = env2;
      te = env3;
      vy = env4;
      vz = env5;
      vx = env6;
      t11 = env7;
      break;
    case 12:
      v = env0;
      d = env1;
      te = env2;
      vy = env3;
      vz = env4;
      vx = env5;
      t17 = env6;
      t11 = env7;
      break;
    case 13:
      v = env0;
      d = env1;
      te = env2;
      vy = env3;
      vz = env4;
      vx = env5;
      t19 = env6;
      break;
    case 14:
      v = env0;
      d = env1;
      t19 = env2;
      te = env3;
      vy = env4;
      vz = env5;
      vx = env6;
      t21 = env7;
      break;
    case 15:
      v = env0;
      d = env1;
      te = env2;
      vy = env3;
      vz = env4;
      vx = env5;
      t19 = env6;
      t23 = env7;
      break;
    case 16:
      v = env0;
      d = env1;
      t25 = env2;
      te = env3;
      vy = env4;
      vz = env5;
      vx = env6;
      t19 = env7;
      break;
    case 17:
      v = env0;
      d = env1;
      te = env2;
      vy = env3;
      vz = env4;
      vx = env5;
      t27 = env6;
      break;
    case 18:
      v = env0;
      d = env1;
      te = env2;
      vy = env3;
      vz = env4;
      t27 = env5;
      t29 = env6;
      break;
    case 19:
      v = env0;
      d = env1;
      t27 = env2;
      te = env3;
      t31 = env4;
      vz = env5;
      break;
    case 20:
      v = env0;
      d = env1;
      t27 = env2;
      t33 = env3;
      break;
  }
  switch (state) {
    case 0:
      var te = this.elements;
    case 1:
      state = 0;
      var vx = v.get$x();
    case 2:
      state = 0;
      var vy = v.get$y();
    case 3:
      state = 0;
      var vz = v.get$z();
    case 4:
      state = 0;
      var t5 = $.index(te, 3);
    case 5:
      state = 0;
      t5 = $.mul(t5, vx);
      var t7 = $.index(te, 7);
    case 6:
      state = 0;
      t5 = $.add(t5, $.mul(t7, vy));
      var t9 = $.index(te, 11);
    case 7:
      state = 0;
      t5 = $.add(t5, $.mul(t9, vz));
      var t11 = $.index(te, 15);
    case 8:
      state = 0;
      t11 = $.add(t5, t11);
      if (typeof t11 !== 'number')
        throw $.iae(t11);
      var d = 1 / t11;
      t11 = $.index(te, 0);
    case 9:
      state = 0;
      t11 = $.mul(t11, vx);
      var t13 = $.index(te, 4);
    case 10:
      state = 0;
      t11 = $.add(t11, $.mul(t13, vy));
      var t15 = $.index(te, 8);
    case 11:
      state = 0;
      t11 = $.add(t11, $.mul(t15, vz));
      var t17 = $.index(te, 12);
    case 12:
      state = 0;
      v.set$x($.mul($.add(t11, t17), d));
      var t19 = $.index(te, 1);
    case 13:
      state = 0;
      t19 = $.mul(t19, vx);
      var t21 = $.index(te, 5);
    case 14:
      state = 0;
      t19 = $.add(t19, $.mul(t21, vy));
      var t23 = $.index(te, 9);
    case 15:
      state = 0;
      t19 = $.add(t19, $.mul(t23, vz));
      var t25 = $.index(te, 13);
    case 16:
      state = 0;
      v.set$y($.mul($.add(t19, t25), d));
      var t27 = $.index(te, 2);
    case 17:
      state = 0;
      t27 = $.mul(t27, vx);
      var t29 = $.index(te, 6);
    case 18:
      state = 0;
      t27 = $.add(t27, $.mul(t29, vy));
      var t31 = $.index(te, 10);
    case 19:
      state = 0;
      t27 = $.add(t27, $.mul(t31, vz));
      var t33 = $.index(te, 14);
    case 20:
      state = 0;
      v.set$z($.mul($.add(t27, t33), d));
      return v;
  }
},
 determinant$0: function() {
  var te = this.elements;
  var n11 = $.index(te, 0);
  var n12 = $.index(te, 4);
  var n13 = $.index(te, 8);
  var n14 = $.index(te, 12);
  var n21 = $.index(te, 1);
  var n22 = $.index(te, 5);
  var n23 = $.index(te, 9);
  var n24 = $.index(te, 13);
  var n31 = $.index(te, 2);
  var n32 = $.index(te, 6);
  var n33 = $.index(te, 10);
  var n34 = $.index(te, 14);
  var n41 = $.index(te, 3);
  var n42 = $.index(te, 7);
  var n43 = $.index(te, 11);
  var n44 = $.index(te, 15);
  return $.add($.sub($.sub($.add($.add($.sub($.sub($.add($.add($.sub($.sub($.add($.add($.sub($.sub($.add($.add($.sub($.sub($.add($.add($.sub($.sub($.mul($.mul($.mul(n14, n23), n32), n41), $.mul($.mul($.mul(n13, n24), n32), n41)), $.mul($.mul($.mul(n14, n22), n33), n41)), $.mul($.mul($.mul(n12, n24), n33), n41)), $.mul($.mul($.mul(n13, n22), n34), n41)), $.mul($.mul($.mul(n12, n23), n34), n41)), $.mul($.mul($.mul(n14, n23), n31), n42)), $.mul($.mul($.mul(n13, n24), n31), n42)), $.mul($.mul($.mul(n14, n21), n33), n42)), $.mul($.mul($.mul(n11, n24), n33), n42)), $.mul($.mul($.mul(n13, n21), n34), n42)), $.mul($.mul($.mul(n11, n23), n34), n42)), $.mul($.mul($.mul(n14, n22), n31), n43)), $.mul($.mul($.mul(n12, n24), n31), n43)), $.mul($.mul($.mul(n14, n21), n32), n43)), $.mul($.mul($.mul(n11, n24), n32), n43)), $.mul($.mul($.mul(n12, n21), n34), n43)), $.mul($.mul($.mul(n11, n22), n34), n43)), $.mul($.mul($.mul(n13, n22), n31), n44)), $.mul($.mul($.mul(n12, n23), n31), n44)), $.mul($.mul($.mul(n13, n21), n32), n44)), $.mul($.mul($.mul(n11, n23), n32), n44)), $.mul($.mul($.mul(n12, n21), n33), n44)), $.mul($.mul($.mul(n11, n22), n33), n44));
},
 transpose$0: function() {
  var te = this.elements;
  var tmp = $.index(te, 1);
  $.indexSet(te, 1, $.index(te, 4));
  $.indexSet(te, 4, tmp);
  tmp = $.index(te, 2);
  $.indexSet(te, 2, $.index(te, 8));
  $.indexSet(te, 8, tmp);
  tmp = $.index(te, 6);
  $.indexSet(te, 6, $.index(te, 9));
  $.indexSet(te, 9, tmp);
  tmp = $.index(te, 3);
  $.indexSet(te, 3, $.index(te, 12));
  $.indexSet(te, 12, tmp);
  tmp = $.index(te, 7);
  $.indexSet(te, 7, $.index(te, 13));
  $.indexSet(te, 13, tmp);
  tmp = $.index(te, 11);
  $.indexSet(te, 11, $.index(te, 14));
  $.indexSet(te, 14, tmp);
  return this;
},
 flattenToArray$1: function(flat) {
  if (typeof flat !== 'object' || flat === null || (flat.constructor !== Array || !!flat.immutable$list) && !flat.is$JavaScriptIndexingBehavior())
    return this.flattenToArray$1$bailout(1, flat, 0);
  var te = this.elements;
  if (typeof te !== 'string' && (typeof te !== 'object' || te === null || te.constructor !== Array && !te.is$JavaScriptIndexingBehavior()))
    return this.flattenToArray$1$bailout(2, flat, te);
  if (0 >= te.length)
    throw $.ioore(0);
  var t2 = te[0];
  if (0 >= flat.length)
    throw $.ioore(0);
  flat[0] = t2;
  if (1 >= te.length)
    throw $.ioore(1);
  t2 = te[1];
  if (1 >= flat.length)
    throw $.ioore(1);
  flat[1] = t2;
  if (2 >= te.length)
    throw $.ioore(2);
  t2 = te[2];
  if (2 >= flat.length)
    throw $.ioore(2);
  flat[2] = t2;
  if (3 >= te.length)
    throw $.ioore(3);
  t2 = te[3];
  if (3 >= flat.length)
    throw $.ioore(3);
  flat[3] = t2;
  if (4 >= te.length)
    throw $.ioore(4);
  t2 = te[4];
  if (4 >= flat.length)
    throw $.ioore(4);
  flat[4] = t2;
  if (5 >= te.length)
    throw $.ioore(5);
  t2 = te[5];
  if (5 >= flat.length)
    throw $.ioore(5);
  flat[5] = t2;
  if (6 >= te.length)
    throw $.ioore(6);
  t2 = te[6];
  if (6 >= flat.length)
    throw $.ioore(6);
  flat[6] = t2;
  if (7 >= te.length)
    throw $.ioore(7);
  t2 = te[7];
  if (7 >= flat.length)
    throw $.ioore(7);
  flat[7] = t2;
  if (8 >= te.length)
    throw $.ioore(8);
  t2 = te[8];
  if (8 >= flat.length)
    throw $.ioore(8);
  flat[8] = t2;
  if (9 >= te.length)
    throw $.ioore(9);
  t2 = te[9];
  if (9 >= flat.length)
    throw $.ioore(9);
  flat[9] = t2;
  if (10 >= te.length)
    throw $.ioore(10);
  t2 = te[10];
  if (10 >= flat.length)
    throw $.ioore(10);
  flat[10] = t2;
  if (11 >= te.length)
    throw $.ioore(11);
  t2 = te[11];
  if (11 >= flat.length)
    throw $.ioore(11);
  flat[11] = t2;
  if (12 >= te.length)
    throw $.ioore(12);
  t2 = te[12];
  if (12 >= flat.length)
    throw $.ioore(12);
  flat[12] = t2;
  if (13 >= te.length)
    throw $.ioore(13);
  t2 = te[13];
  if (13 >= flat.length)
    throw $.ioore(13);
  flat[13] = t2;
  if (14 >= te.length)
    throw $.ioore(14);
  t2 = te[14];
  if (14 >= flat.length)
    throw $.ioore(14);
  flat[14] = t2;
  if (15 >= te.length)
    throw $.ioore(15);
  t2 = te[15];
  if (15 >= flat.length)
    throw $.ioore(15);
  flat[15] = t2;
  return flat;
},
 flattenToArray$1$bailout: function(state, env0, env1) {
  switch (state) {
    case 1:
      var flat = env0;
      break;
    case 2:
      flat = env0;
      te = env1;
      break;
  }
  switch (state) {
    case 0:
    case 1:
      state = 0;
      var te = this.elements;
    case 2:
      state = 0;
      $.indexSet(flat, 0, $.index(te, 0));
      $.indexSet(flat, 1, $.index(te, 1));
      $.indexSet(flat, 2, $.index(te, 2));
      $.indexSet(flat, 3, $.index(te, 3));
      $.indexSet(flat, 4, $.index(te, 4));
      $.indexSet(flat, 5, $.index(te, 5));
      $.indexSet(flat, 6, $.index(te, 6));
      $.indexSet(flat, 7, $.index(te, 7));
      $.indexSet(flat, 8, $.index(te, 8));
      $.indexSet(flat, 9, $.index(te, 9));
      $.indexSet(flat, 10, $.index(te, 10));
      $.indexSet(flat, 11, $.index(te, 11));
      $.indexSet(flat, 12, $.index(te, 12));
      $.indexSet(flat, 13, $.index(te, 13));
      $.indexSet(flat, 14, $.index(te, 14));
      $.indexSet(flat, 15, $.index(te, 15));
      return flat;
  }
},
 flattenToArrayOffset$2: function(flat, offset) {
  if (typeof flat !== 'object' || flat === null || (flat.constructor !== Array || !!flat.immutable$list) && !flat.is$JavaScriptIndexingBehavior())
    return this.flattenToArrayOffset$2$bailout(1, flat, offset, 0);
  var te = this.elements;
  if (typeof te !== 'string' && (typeof te !== 'object' || te === null || te.constructor !== Array && !te.is$JavaScriptIndexingBehavior()))
    return this.flattenToArrayOffset$2$bailout(2, flat, offset, te);
  if (0 >= te.length)
    throw $.ioore(0);
  var t2 = te[0];
  if (offset < 0 || offset >= flat.length)
    throw $.ioore(offset);
  flat[offset] = t2;
  t2 = offset + 1;
  if (1 >= te.length)
    throw $.ioore(1);
  var t3 = te[1];
  if (t2 < 0 || t2 >= flat.length)
    throw $.ioore(t2);
  flat[t2] = t3;
  t3 = offset + 2;
  if (2 >= te.length)
    throw $.ioore(2);
  t2 = te[2];
  if (t3 < 0 || t3 >= flat.length)
    throw $.ioore(t3);
  flat[t3] = t2;
  t2 = offset + 3;
  if (3 >= te.length)
    throw $.ioore(3);
  t3 = te[3];
  if (t2 < 0 || t2 >= flat.length)
    throw $.ioore(t2);
  flat[t2] = t3;
  t3 = offset + 4;
  if (4 >= te.length)
    throw $.ioore(4);
  t2 = te[4];
  if (t3 < 0 || t3 >= flat.length)
    throw $.ioore(t3);
  flat[t3] = t2;
  t2 = offset + 5;
  if (5 >= te.length)
    throw $.ioore(5);
  t3 = te[5];
  if (t2 < 0 || t2 >= flat.length)
    throw $.ioore(t2);
  flat[t2] = t3;
  t3 = offset + 6;
  if (6 >= te.length)
    throw $.ioore(6);
  t2 = te[6];
  if (t3 < 0 || t3 >= flat.length)
    throw $.ioore(t3);
  flat[t3] = t2;
  t2 = offset + 7;
  if (7 >= te.length)
    throw $.ioore(7);
  t3 = te[7];
  if (t2 < 0 || t2 >= flat.length)
    throw $.ioore(t2);
  flat[t2] = t3;
  t3 = offset + 8;
  if (8 >= te.length)
    throw $.ioore(8);
  t2 = te[8];
  if (t3 < 0 || t3 >= flat.length)
    throw $.ioore(t3);
  flat[t3] = t2;
  t2 = offset + 9;
  if (9 >= te.length)
    throw $.ioore(9);
  t3 = te[9];
  if (t2 < 0 || t2 >= flat.length)
    throw $.ioore(t2);
  flat[t2] = t3;
  t3 = offset + 10;
  if (10 >= te.length)
    throw $.ioore(10);
  t2 = te[10];
  if (t3 < 0 || t3 >= flat.length)
    throw $.ioore(t3);
  flat[t3] = t2;
  t2 = offset + 11;
  if (11 >= te.length)
    throw $.ioore(11);
  t3 = te[11];
  if (t2 < 0 || t2 >= flat.length)
    throw $.ioore(t2);
  flat[t2] = t3;
  t3 = offset + 12;
  if (12 >= te.length)
    throw $.ioore(12);
  t2 = te[12];
  if (t3 < 0 || t3 >= flat.length)
    throw $.ioore(t3);
  flat[t3] = t2;
  t2 = offset + 13;
  if (13 >= te.length)
    throw $.ioore(13);
  t3 = te[13];
  if (t2 < 0 || t2 >= flat.length)
    throw $.ioore(t2);
  flat[t2] = t3;
  t3 = offset + 14;
  if (14 >= te.length)
    throw $.ioore(14);
  t2 = te[14];
  if (t3 < 0 || t3 >= flat.length)
    throw $.ioore(t3);
  flat[t3] = t2;
  t2 = offset + 15;
  if (15 >= te.length)
    throw $.ioore(15);
  t3 = te[15];
  if (t2 < 0 || t2 >= flat.length)
    throw $.ioore(t2);
  flat[t2] = t3;
  return flat;
},
 flattenToArrayOffset$2$bailout: function(state, env0, env1, env2) {
  switch (state) {
    case 1:
      var flat = env0;
      var offset = env1;
      break;
    case 2:
      flat = env0;
      offset = env1;
      te = env2;
      break;
  }
  switch (state) {
    case 0:
    case 1:
      state = 0;
      var te = this.elements;
    case 2:
      state = 0;
      $.indexSet(flat, offset, $.index(te, 0));
      $.indexSet(flat, offset + 1, $.index(te, 1));
      $.indexSet(flat, offset + 2, $.index(te, 2));
      $.indexSet(flat, offset + 3, $.index(te, 3));
      $.indexSet(flat, offset + 4, $.index(te, 4));
      $.indexSet(flat, offset + 5, $.index(te, 5));
      $.indexSet(flat, offset + 6, $.index(te, 6));
      $.indexSet(flat, offset + 7, $.index(te, 7));
      $.indexSet(flat, offset + 8, $.index(te, 8));
      $.indexSet(flat, offset + 9, $.index(te, 9));
      $.indexSet(flat, offset + 10, $.index(te, 10));
      $.indexSet(flat, offset + 11, $.index(te, 11));
      $.indexSet(flat, offset + 12, $.index(te, 12));
      $.indexSet(flat, offset + 13, $.index(te, 13));
      $.indexSet(flat, offset + 14, $.index(te, 14));
      $.indexSet(flat, offset + 15, $.index(te, 15));
      return flat;
  }
},
 getPosition$0: function() {
  var t1 = $.Matrix4___v1();
  var t2 = this.elements;
  if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
    return this.getPosition$0$bailout(1, t1, t2);
  var t4 = t2.length;
  if (12 >= t4)
    throw $.ioore(12);
  var t5 = t2[12];
  if (13 >= t4)
    throw $.ioore(13);
  var t6 = t2[13];
  if (14 >= t4)
    throw $.ioore(14);
  return t1.setValues$3(t5, t6, t2[14]);
},
 getPosition$0$bailout: function(state, t1, t2) {
  return t1.setValues$3($.index(t2, 12), $.index(t2, 13), $.index(t2, 14));
},
 setPosition$1: function(v) {
  var te = this.elements;
  $.indexSet(te, 12, v.get$x());
  $.indexSet(te, 13, v.get$y());
  $.indexSet(te, 14, v.get$z());
  return this;
},
 getInverse$1: function(m) {
  var te = this.elements;
  var me = m.get$elements();
  var n11 = $.index(me, 0);
  var n12 = $.index(me, 4);
  var n13 = $.index(me, 8);
  var n14 = $.index(me, 12);
  var n21 = $.index(me, 1);
  var n22 = $.index(me, 5);
  var n23 = $.index(me, 9);
  var n24 = $.index(me, 13);
  var n31 = $.index(me, 2);
  var n32 = $.index(me, 6);
  var n33 = $.index(me, 10);
  var n34 = $.index(me, 14);
  var n41 = $.index(me, 3);
  var n42 = $.index(me, 7);
  var n43 = $.index(me, 11);
  var n44 = $.index(me, 15);
  $.indexSet(te, 0, $.add($.sub($.sub($.add($.sub($.mul($.mul(n23, n34), n42), $.mul($.mul(n24, n33), n42)), $.mul($.mul(n24, n32), n43)), $.mul($.mul(n22, n34), n43)), $.mul($.mul(n23, n32), n44)), $.mul($.mul(n22, n33), n44)));
  $.indexSet(te, 4, $.sub($.add($.add($.sub($.sub($.mul($.mul(n14, n33), n42), $.mul($.mul(n13, n34), n42)), $.mul($.mul(n14, n32), n43)), $.mul($.mul(n12, n34), n43)), $.mul($.mul(n13, n32), n44)), $.mul($.mul(n12, n33), n44)));
  $.indexSet(te, 8, $.add($.sub($.sub($.add($.sub($.mul($.mul(n13, n24), n42), $.mul($.mul(n14, n23), n42)), $.mul($.mul(n14, n22), n43)), $.mul($.mul(n12, n24), n43)), $.mul($.mul(n13, n22), n44)), $.mul($.mul(n12, n23), n44)));
  $.indexSet(te, 12, $.sub($.add($.add($.sub($.sub($.mul($.mul(n14, n23), n32), $.mul($.mul(n13, n24), n32)), $.mul($.mul(n14, n22), n33)), $.mul($.mul(n12, n24), n33)), $.mul($.mul(n13, n22), n34)), $.mul($.mul(n12, n23), n34)));
  $.indexSet(te, 1, $.sub($.add($.add($.sub($.sub($.mul($.mul(n24, n33), n41), $.mul($.mul(n23, n34), n41)), $.mul($.mul(n24, n31), n43)), $.mul($.mul(n21, n34), n43)), $.mul($.mul(n23, n31), n44)), $.mul($.mul(n21, n33), n44)));
  $.indexSet(te, 5, $.add($.sub($.sub($.add($.sub($.mul($.mul(n13, n34), n41), $.mul($.mul(n14, n33), n41)), $.mul($.mul(n14, n31), n43)), $.mul($.mul(n11, n34), n43)), $.mul($.mul(n13, n31), n44)), $.mul($.mul(n11, n33), n44)));
  $.indexSet(te, 9, $.sub($.add($.add($.sub($.sub($.mul($.mul(n14, n23), n41), $.mul($.mul(n13, n24), n41)), $.mul($.mul(n14, n21), n43)), $.mul($.mul(n11, n24), n43)), $.mul($.mul(n13, n21), n44)), $.mul($.mul(n11, n23), n44)));
  $.indexSet(te, 13, $.add($.sub($.sub($.add($.sub($.mul($.mul(n13, n24), n31), $.mul($.mul(n14, n23), n31)), $.mul($.mul(n14, n21), n33)), $.mul($.mul(n11, n24), n33)), $.mul($.mul(n13, n21), n34)), $.mul($.mul(n11, n23), n34)));
  $.indexSet(te, 2, $.add($.sub($.sub($.add($.sub($.mul($.mul(n22, n34), n41), $.mul($.mul(n24, n32), n41)), $.mul($.mul(n24, n31), n42)), $.mul($.mul(n21, n34), n42)), $.mul($.mul(n22, n31), n44)), $.mul($.mul(n21, n32), n44)));
  $.indexSet(te, 6, $.sub($.add($.add($.sub($.sub($.mul($.mul(n14, n32), n41), $.mul($.mul(n12, n34), n41)), $.mul($.mul(n14, n31), n42)), $.mul($.mul(n11, n34), n42)), $.mul($.mul(n12, n31), n44)), $.mul($.mul(n11, n32), n44)));
  $.indexSet(te, 10, $.add($.sub($.sub($.add($.sub($.mul($.mul(n12, n24), n41), $.mul($.mul(n14, n22), n41)), $.mul($.mul(n14, n21), n42)), $.mul($.mul(n11, n24), n42)), $.mul($.mul(n12, n21), n44)), $.mul($.mul(n11, n22), n44)));
  $.indexSet(te, 14, $.sub($.add($.add($.sub($.sub($.mul($.mul(n14, n22), n31), $.mul($.mul(n12, n24), n31)), $.mul($.mul(n14, n21), n32)), $.mul($.mul(n11, n24), n32)), $.mul($.mul(n12, n21), n34)), $.mul($.mul(n11, n22), n34)));
  $.indexSet(te, 3, $.sub($.add($.add($.sub($.sub($.mul($.mul(n23, n32), n41), $.mul($.mul(n22, n33), n41)), $.mul($.mul(n23, n31), n42)), $.mul($.mul(n21, n33), n42)), $.mul($.mul(n22, n31), n43)), $.mul($.mul(n21, n32), n43)));
  $.indexSet(te, 7, $.add($.sub($.sub($.add($.sub($.mul($.mul(n12, n33), n41), $.mul($.mul(n13, n32), n41)), $.mul($.mul(n13, n31), n42)), $.mul($.mul(n11, n33), n42)), $.mul($.mul(n12, n31), n43)), $.mul($.mul(n11, n32), n43)));
  $.indexSet(te, 11, $.sub($.add($.add($.sub($.sub($.mul($.mul(n13, n22), n41), $.mul($.mul(n12, n23), n41)), $.mul($.mul(n13, n21), n42)), $.mul($.mul(n11, n23), n42)), $.mul($.mul(n12, n21), n43)), $.mul($.mul(n11, n22), n43)));
  $.indexSet(te, 15, $.add($.sub($.sub($.add($.sub($.mul($.mul(n12, n23), n31), $.mul($.mul(n13, n22), n31)), $.mul($.mul(n13, n21), n32)), $.mul($.mul(n11, n23), n32)), $.mul($.mul(n12, n21), n33)), $.mul($.mul(n11, n22), n33)));
  var t1 = m.determinant$0();
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  this.multiplyScalar$1(1 / t1);
  return this;
},
 setRotationFromEuler$2: function(v, order) {
  var te = this.elements;
  var x = v.get$x();
  var y = v.get$y();
  var z = v.get$z();
  var a = $.cos(x);
  var b = $.sin(x);
  var c = $.cos(y);
  var d = $.sin(y);
  var e = $.cos(z);
  var f = $.sin(z);
  switch (order) {
    case 'YXZ':
      var ce = c * e;
      var cf = c * f;
      var de = d * e;
      var df = d * f;
      $.indexSet(te, 0, ce + df * b);
      $.indexSet(te, 4, de * b - cf);
      $.indexSet(te, 8, a * d);
      $.indexSet(te, 1, a * f);
      $.indexSet(te, 5, a * e);
      $.indexSet(te, 9, -b);
      $.indexSet(te, 2, cf * b - de);
      $.indexSet(te, 6, df + ce * b);
      $.indexSet(te, 10, a * c);
      break;
    case 'ZXY':
      ce = c * e;
      cf = c * f;
      de = d * e;
      df = d * f;
      $.indexSet(te, 0, ce - df * b);
      var t1 = -a;
      $.indexSet(te, 4, t1 * f);
      $.indexSet(te, 8, de + cf * b);
      $.indexSet(te, 1, cf + de * b);
      $.indexSet(te, 5, a * e);
      $.indexSet(te, 9, df - ce * b);
      $.indexSet(te, 2, t1 * d);
      $.indexSet(te, 6, b);
      $.indexSet(te, 10, a * c);
      break;
    case 'ZYX':
      var ae = a * e;
      var af = a * f;
      var be = b * e;
      var bf = b * f;
      $.indexSet(te, 0, c * e);
      $.indexSet(te, 4, be * d - af);
      $.indexSet(te, 8, ae * d + bf);
      $.indexSet(te, 1, c * f);
      $.indexSet(te, 5, bf * d + ae);
      $.indexSet(te, 9, af * d - be);
      $.indexSet(te, 2, -d);
      $.indexSet(te, 6, b * c);
      $.indexSet(te, 10, a * c);
      break;
    case 'YZX':
      var ac = a * c;
      var ad = a * d;
      var bc = b * c;
      var bd = b * d;
      $.indexSet(te, 0, c * e);
      $.indexSet(te, 4, bd - ac * f);
      $.indexSet(te, 8, bc * f + ad);
      $.indexSet(te, 1, f);
      $.indexSet(te, 5, a * e);
      $.indexSet(te, 9, -b * e);
      $.indexSet(te, 2, -d * e);
      $.indexSet(te, 6, ad * f + bc);
      $.indexSet(te, 10, ac - bd * f);
      break;
    case 'XZY':
      ac = a * c;
      ad = a * d;
      bc = b * c;
      bd = b * d;
      $.indexSet(te, 0, c * e);
      $.indexSet(te, 4, -f);
      $.indexSet(te, 8, d * e);
      $.indexSet(te, 1, ac * f + bd);
      $.indexSet(te, 5, a * e);
      $.indexSet(te, 9, ad * f - bc);
      $.indexSet(te, 2, bc * f - ad);
      $.indexSet(te, 6, b * e);
      $.indexSet(te, 10, bd * f + ac);
      break;
    default:
      ae = a * e;
      af = a * f;
      be = b * e;
      bf = b * f;
      $.indexSet(te, 0, c * e);
      $.indexSet(te, 4, -c * f);
      $.indexSet(te, 8, d);
      $.indexSet(te, 1, af + be * d);
      $.indexSet(te, 5, ae - bf * d);
      $.indexSet(te, 9, -b * c);
      $.indexSet(te, 2, bf - ae * d);
      $.indexSet(te, 6, be + af * d);
      $.indexSet(te, 10, a * c);
      break;
  }
  return this;
},
 setRotationFromQuaternion$1: function(q) {
  var te = this.elements;
  var x = q.get$x();
  var y = q.get$y();
  var z = q.get$z();
  var w = q.get$w();
  var x2 = $.add(x, x);
  var y2 = $.add(y, y);
  var z2 = $.add(z, z);
  var xx = $.mul(x, x2);
  var xy = $.mul(x, y2);
  var xz = $.mul(x, z2);
  var yy = $.mul(y, y2);
  var yz = $.mul(y, z2);
  var zz = $.mul(z, z2);
  var wx = $.mul(w, x2);
  var wy = $.mul(w, y2);
  var wz = $.mul(w, z2);
  var t1 = $.add(yy, zz);
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  $.indexSet(te, 0, 1 - t1);
  $.indexSet(te, 4, $.sub(xy, wz));
  $.indexSet(te, 8, $.add(xz, wy));
  $.indexSet(te, 1, $.add(xy, wz));
  var t2 = $.add(xx, zz);
  if (typeof t2 !== 'number')
    throw $.iae(t2);
  $.indexSet(te, 5, 1 - t2);
  $.indexSet(te, 9, $.sub(yz, wx));
  $.indexSet(te, 2, $.sub(xz, wy));
  $.indexSet(te, 6, $.add(yz, wx));
  var t3 = $.add(xx, yy);
  if (typeof t3 !== 'number')
    throw $.iae(t3);
  $.indexSet(te, 10, 1 - t3);
  return this;
},
 scale$1: function(v) {
  var te = this.elements;
  var x = v.get$x();
  var y = v.get$y();
  var z = v.get$z();
  $.indexSet(te, 0, $.mul($.index(te, 0), x));
  $.indexSet(te, 4, $.mul($.index(te, 4), y));
  $.indexSet(te, 8, $.mul($.index(te, 8), z));
  $.indexSet(te, 1, $.mul($.index(te, 1), x));
  $.indexSet(te, 5, $.mul($.index(te, 5), y));
  $.indexSet(te, 9, $.mul($.index(te, 9), z));
  $.indexSet(te, 2, $.mul($.index(te, 2), x));
  $.indexSet(te, 6, $.mul($.index(te, 6), y));
  $.indexSet(te, 10, $.mul($.index(te, 10), z));
  $.indexSet(te, 3, $.mul($.index(te, 3), x));
  $.indexSet(te, 7, $.mul($.index(te, 7), y));
  $.indexSet(te, 11, $.mul($.index(te, 11), z));
  return this;
},
 getMaxScaleOnAxis$0: function() {
  var te = this.elements;
  return $.sqrt($.max($.add($.add($.mul($.index(te, 0), $.index(te, 0)), $.mul($.index(te, 1), $.index(te, 1))), $.mul($.index(te, 2), $.index(te, 2))), $.max($.add($.add($.mul($.index(te, 4), $.index(te, 4)), $.mul($.index(te, 5), $.index(te, 5))), $.mul($.index(te, 6), $.index(te, 6))), $.add($.add($.mul($.index(te, 8), $.index(te, 8)), $.mul($.index(te, 9), $.index(te, 9))), $.mul($.index(te, 10), $.index(te, 10))))));
},
 makeRotationZ$1: function(theta) {
  var c = $.cos(theta);
  var s = $.sin(theta);
  this.setValues$16(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
  return this;
},
 makeRotationAxis$2: function(axis, angle) {
  var c = $.cos(angle);
  var s = $.sin(angle);
  var t = 1 - c;
  var x = axis.get$x();
  var y = axis.get$y();
  var z = axis.get$z();
  if (typeof x !== 'number')
    throw $.iae(x);
  var tx = t * x;
  if (typeof y !== 'number')
    throw $.iae(y);
  var ty = t * y;
  var t1 = tx * x + c;
  var t2 = tx * y;
  if (typeof z !== 'number')
    throw $.iae(z);
  var t3 = s * z;
  var t4 = t2 - t3;
  var t5 = tx * z;
  var t6 = s * y;
  var t7 = t5 + t6;
  t3 = t2 + t3;
  t2 = ty * y + c;
  var t8 = ty * z;
  var t9 = s * x;
  this.setValues$16(t1, t4, t7, 0, t3, t2, t8 - t9, 0, t5 - t6, t8 + t9, t * z * z + c, 0, 0, 0, 0, 1);
  return this;
},
 makeFrustum$6: function(left, right, bottom, top$, near, far) {
  var te = this.elements;
  if (typeof near !== 'number')
    throw $.iae(near);
  var t1 = 2 * near;
  var t2 = $.sub(right, left);
  if (typeof t2 !== 'number')
    throw $.iae(t2);
  var x = t1 / t2;
  t2 = $.sub(top$, bottom);
  if (typeof t2 !== 'number')
    throw $.iae(t2);
  var y = t1 / t2;
  var a = $.div($.add(right, left), $.sub(right, left));
  var b = $.div($.add(top$, bottom), $.sub(top$, bottom));
  var c = $.div($.neg($.add(far, near)), $.sub(far, near));
  if (typeof far !== 'number')
    throw $.iae(far);
  var d = -2 * far * near / (far - near);
  $.indexSet(te, 0, x);
  $.indexSet(te, 4, 0);
  $.indexSet(te, 8, a);
  $.indexSet(te, 12, 0);
  $.indexSet(te, 1, 0);
  $.indexSet(te, 5, y);
  $.indexSet(te, 9, b);
  $.indexSet(te, 13, 0);
  $.indexSet(te, 2, 0);
  $.indexSet(te, 6, 0);
  $.indexSet(te, 10, c);
  $.indexSet(te, 14, d);
  $.indexSet(te, 3, 0);
  $.indexSet(te, 7, 0);
  $.indexSet(te, 11, -1);
  $.indexSet(te, 15, 0);
  return this;
},
 makePerspective$4: function(fov, aspect, near, far) {
  var ymax = $.mul(near, $.tan($.div($.mul(fov, 3.141592653589793), 360)));
  var ymin = $.neg(ymax);
  return this.makeFrustum$6($.mul(ymin, aspect), $.mul(ymax, aspect), ymin, ymax, near, far);
},
 clone$0: function() {
  var te = this.elements;
  return $.Matrix4$($.index(te, 0), $.index(te, 4), $.index(te, 8), $.index(te, 12), $.index(te, 1), $.index(te, 5), $.index(te, 9), $.index(te, 13), $.index(te, 2), $.index(te, 6), $.index(te, 10), $.index(te, 14), $.index(te, 3), $.index(te, 7), $.index(te, 11), $.index(te, 15));
},
 Matrix4$16: function(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
  this.setValues$16(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44);
},
 is$Matrix4: true
};

$$.Quaternion = {"":
 ["x=", "y=", "z=", "w?"],
 "super": "Object",
 setValues$4: function(newX, newY, newZ, newW) {
  this.x = newX;
  this.y = newY;
  this.z = newZ;
  this.w = newW;
  return this;
},
 copy$1: function(q) {
  this.x = q.get$x();
  this.y = q.get$y();
  this.z = q.get$z();
  this.w = q.get$w();
  return this;
},
 length$0: function() {
  var t1 = this.x;
  t1 = $.mul(t1, t1);
  var t2 = this.y;
  t1 = $.add(t1, $.mul(t2, t2));
  var t3 = this.z;
  t1 = $.add(t1, $.mul(t3, t3));
  var t4 = this.w;
  return $.sqrt($.add(t1, $.mul(t4, t4)));
},
 get$length: function() { return new $.BoundClosure0(this, 'length$0'); },
 normalize$0: function() {
  var t1 = this.x;
  if (typeof t1 !== 'number')
    return this.normalize$0$bailout(1, t1, 0);
  t1 *= t1;
  var t3 = this.y;
  if (typeof t3 !== 'number')
    return this.normalize$0$bailout(2, t1, t3);
  t1 += t3 * t3;
  var t5 = this.z;
  if (typeof t5 !== 'number')
    return this.normalize$0$bailout(3, t5, t1);
  t1 += t5 * t5;
  var t7 = this.w;
  if (typeof t7 !== 'number')
    return this.normalize$0$bailout(4, t1, t7);
  var l = $.sqrt(t1 + t7 * t7);
  if (l === 0) {
    this.x = 0;
    this.y = 0;
    this.z = 0;
    this.w = 0;
  } else {
    l = 1 / l;
    t1 = this.x;
    if (typeof t1 !== 'number')
      return this.normalize$0$bailout(5, t1, l);
    this.x = t1 * l;
    t3 = this.y;
    if (typeof t3 !== 'number')
      return this.normalize$0$bailout(6, t3, l);
    this.y = t3 * l;
    t5 = this.z;
    if (typeof t5 !== 'number')
      return this.normalize$0$bailout(7, t5, l);
    this.z = t5 * l;
    t7 = this.w;
    if (typeof t7 !== 'number')
      return this.normalize$0$bailout(8, t7, l);
    this.w = t7 * l;
  }
  return this;
},
 normalize$0$bailout: function(state, env0, env1) {
  switch (state) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t1 = env0;
      t3 = env1;
      break;
    case 3:
      t5 = env0;
      t1 = env1;
      break;
    case 4:
      t1 = env0;
      t7 = env1;
      break;
    case 5:
      t1 = env0;
      l = env1;
      break;
    case 6:
      t3 = env0;
      l = env1;
      break;
    case 7:
      t5 = env0;
      l = env1;
      break;
    case 8:
      t7 = env0;
      l = env1;
      break;
  }
  switch (state) {
    case 0:
      var t1 = this.x;
    case 1:
      state = 0;
      t1 = $.mul(t1, t1);
      var t3 = this.y;
    case 2:
      state = 0;
      t1 = $.add(t1, $.mul(t3, t3));
      var t5 = this.z;
    case 3:
      state = 0;
      t1 = $.add(t1, $.mul(t5, t5));
      var t7 = this.w;
    case 4:
      state = 0;
      var l = $.sqrt($.add(t1, $.mul(t7, t7)));
    default:
      if (state === 0 && l === 0) {
        this.x = 0;
        this.y = 0;
        this.z = 0;
        this.w = 0;
      } else
        switch (state) {
          case 0:
            l = 1 / l;
            t1 = this.x;
          case 5:
            state = 0;
            this.x = $.mul(t1, l);
            t3 = this.y;
          case 6:
            state = 0;
            this.y = $.mul(t3, l);
            t5 = this.z;
          case 7:
            state = 0;
            this.z = $.mul(t5, l);
            t7 = this.w;
          case 8:
            state = 0;
            this.w = $.mul(t7, l);
        }
      return this;
  }
},
 multiply$2: function(q1, q2) {
  this.x = $.add($.sub($.add($.mul(q1.get$x(), q2.get$w()), $.mul(q1.get$y(), q2.get$z())), $.mul(q1.get$z(), q2.get$y())), $.mul(q1.get$w(), q2.get$x()));
  this.y = $.add($.add($.add($.mul($.neg(q1.get$x()), q2.get$z()), $.mul(q1.get$y(), q2.get$w())), $.mul(q1.get$z(), q2.get$x())), $.mul(q1.get$w(), q2.get$y()));
  this.z = $.add($.add($.sub($.mul(q1.get$x(), q2.get$y()), $.mul(q1.get$y(), q2.get$x())), $.mul(q1.get$z(), q2.get$w())), $.mul(q1.get$w(), q2.get$z()));
  this.w = $.add($.sub($.sub($.mul($.neg(q1.get$x()), q2.get$x()), $.mul(q1.get$y(), q2.get$y())), $.mul(q1.get$z(), q2.get$z())), $.mul(q1.get$w(), q2.get$w()));
  return this;
},
 multiplySelf$1: function(quat2) {
  var qax = this.x;
  var qay = this.y;
  var qaz = this.z;
  var qaw = this.w;
  var qbx = quat2.get$x();
  var qby = quat2.get$y();
  var qbz = quat2.get$z();
  var qbw = quat2.get$w();
  this.x = $.sub($.add($.add($.mul(qax, qbw), $.mul(qaw, qbx)), $.mul(qay, qbz)), $.mul(qaz, qby));
  this.y = $.sub($.add($.add($.mul(qay, qbw), $.mul(qaw, qby)), $.mul(qaz, qbx)), $.mul(qax, qbz));
  this.z = $.sub($.add($.add($.mul(qaz, qbw), $.mul(qaw, qbz)), $.mul(qax, qby)), $.mul(qay, qbx));
  this.w = $.sub($.sub($.sub($.mul(qaw, qbw), $.mul(qax, qbx)), $.mul(qay, qby)), $.mul(qaz, qbz));
  return this;
},
 multiplyVector3$2: function(vec, dest) {
  if (dest == null)
    dest = vec;
  var _x = vec.get$x();
  if (typeof _x !== 'number')
    return this.multiplyVector3$2$bailout(1, vec, dest, _x, 0, 0, 0, 0, 0);
  var _y = vec.get$y();
  if (typeof _y !== 'number')
    return this.multiplyVector3$2$bailout(2, vec, dest, _x, _y, 0, 0, 0, 0);
  var _z = vec.get$z();
  if (typeof _z !== 'number')
    return this.multiplyVector3$2$bailout(3, dest, _x, _y, _z, 0, 0, 0, 0);
  var qx = this.x;
  if (typeof qx !== 'number')
    return this.multiplyVector3$2$bailout(4, qx, dest, _x, _y, _z, 0, 0, 0);
  var qy = this.y;
  if (typeof qy !== 'number')
    return this.multiplyVector3$2$bailout(5, qx, qy, dest, _x, _y, _z, 0, 0);
  var qz = this.z;
  if (typeof qz !== 'number')
    return this.multiplyVector3$2$bailout(6, qx, qy, qz, dest, _x, _y, _z, 0);
  var qw = this.w;
  if (typeof qw !== 'number')
    return this.multiplyVector3$2$bailout(7, qx, qy, qz, qw, dest, _x, _y, _z);
  var ix = qw * _x + qy * _z - qz * _y;
  var iy = qw * _y + qz * _x - qx * _z;
  var iz = qw * _z + qx * _y - qy * _x;
  var t8 = -qx;
  var iw = t8 * _x - qy * _y - qz * _z;
  var t9 = ix * qw + iw * t8;
  var t10 = -qz;
  t9 += iy * t10;
  var t11 = -qy;
  dest.set$x(t9 - iz * t11);
  dest.set$y(iy * qw + iw * t11 + iz * t8 - ix * t10);
  dest.set$z(iz * qw + iw * t10 + ix * t11 - iy * t8);
  return dest;
},
 multiplyVector3$2$bailout: function(state, env0, env1, env2, env3, env4, env5, env6, env7) {
  switch (state) {
    case 1:
      var vec = env0;
      dest = env1;
      _x = env2;
      break;
    case 2:
      vec = env0;
      dest = env1;
      _x = env2;
      _y = env3;
      break;
    case 3:
      dest = env0;
      _x = env1;
      _y = env2;
      _z = env3;
      break;
    case 4:
      qx = env0;
      dest = env1;
      _x = env2;
      _y = env3;
      _z = env4;
      break;
    case 5:
      qx = env0;
      qy = env1;
      dest = env2;
      _x = env3;
      _y = env4;
      _z = env5;
      break;
    case 6:
      qx = env0;
      qy = env1;
      qz = env2;
      dest = env3;
      _x = env4;
      _y = env5;
      _z = env6;
      break;
    case 7:
      qx = env0;
      qy = env1;
      qz = env2;
      qw = env3;
      dest = env4;
      _x = env5;
      _y = env6;
      _z = env7;
      break;
  }
  switch (state) {
    case 0:
      if (dest == null)
        var dest = vec;
      var _x = vec.get$x();
    case 1:
      state = 0;
      var _y = vec.get$y();
    case 2:
      state = 0;
      var _z = vec.get$z();
    case 3:
      state = 0;
      var qx = this.x;
    case 4:
      state = 0;
      var qy = this.y;
    case 5:
      state = 0;
      var qz = this.z;
    case 6:
      state = 0;
      var qw = this.w;
    case 7:
      state = 0;
      var ix = $.sub($.add($.mul(qw, _x), $.mul(qy, _z)), $.mul(qz, _y));
      var iy = $.sub($.add($.mul(qw, _y), $.mul(qz, _x)), $.mul(qx, _z));
      var iz = $.sub($.add($.mul(qw, _z), $.mul(qx, _y)), $.mul(qy, _x));
      var iw = $.sub($.sub($.mul($.neg(qx), _x), $.mul(qy, _y)), $.mul(qz, _z));
      dest.set$x($.sub($.add($.add($.mul(ix, qw), $.mul(iw, $.neg(qx))), $.mul(iy, $.neg(qz))), $.mul(iz, $.neg(qy))));
      dest.set$y($.sub($.add($.add($.mul(iy, qw), $.mul(iw, $.neg(qy))), $.mul(iz, $.neg(qx))), $.mul(ix, $.neg(qz))));
      dest.set$z($.sub($.add($.add($.mul(iz, qw), $.mul(iw, $.neg(qz))), $.mul(ix, $.neg(qy))), $.mul(iy, $.neg(qx))));
      return dest;
  }
},
 multiplyVector3$1: function(vec) {
  return this.multiplyVector3$2(vec,null)
},
 clone$0: function() {
  return $.Quaternion$(this.x, this.y, this.z, this.w);
},
 is$IVector4: true
};

$$.Vector4 = {"":
 ["x=", "y=", "z=", "w?"],
 "super": "Object",
 setValues$4: function(x, y, z, w) {
  this.x = x;
  this.y = y;
  this.z = z;
  this.w = w;
  return this;
},
 copy$1: function(v) {
  this.x = v.get$x();
  this.y = v.get$y();
  this.z = v.get$z();
  if (typeof v === 'object' && v !== null && !!v.is$IVector4)
    this.w = v.get$w();
  else
    this.w = 1;
},
 add$2: function(v1, v2) {
  this.x = $.add(v1.get$x(), v2.get$x());
  this.y = $.add(v1.get$y(), v2.get$y());
  this.z = $.add(v1.get$z(), v2.get$z());
  this.w = $.add(v1.get$w(), v2.get$w());
  return this;
},
 addSelf$1: function(v) {
  this.x = $.add(this.x, v.get$x());
  this.y = $.add(this.y, v.get$y());
  this.z = $.add(this.z, v.get$z());
  this.w = $.add(this.w, v.get$w());
  return this;
},
 sub$2: function(v1, v2) {
  this.x = $.sub(v1.get$x(), v2.get$x());
  this.y = $.sub(v1.get$y(), v2.get$y());
  this.z = $.sub(v1.get$z(), v2.get$z());
  this.w = $.sub(v1.get$w(), v2.get$w());
  return this;
},
 subSelf$1: function(v) {
  var t1 = this.x;
  if (typeof t1 !== 'number')
    return this.subSelf$1$bailout(1, v, t1, 0);
  var t3 = v.get$x();
  if (typeof t3 !== 'number')
    return this.subSelf$1$bailout(2, v, t1, t3);
  this.x = t1 - t3;
  var t5 = this.y;
  if (typeof t5 !== 'number')
    return this.subSelf$1$bailout(3, v, t5, 0);
  var t7 = v.get$y();
  if (typeof t7 !== 'number')
    return this.subSelf$1$bailout(4, v, t7, t5);
  this.y = t5 - t7;
  var t9 = this.z;
  if (typeof t9 !== 'number')
    return this.subSelf$1$bailout(5, v, t9, 0);
  var t11 = v.get$z();
  if (typeof t11 !== 'number')
    return this.subSelf$1$bailout(6, v, t9, t11);
  this.z = t9 - t11;
  var t13 = this.w;
  if (typeof t13 !== 'number')
    return this.subSelf$1$bailout(7, v, t13, 0);
  var t15 = v.get$w();
  if (typeof t15 !== 'number')
    return this.subSelf$1$bailout(8, t15, t13, 0);
  this.w = t13 - t15;
  return this;
},
 subSelf$1$bailout: function(state, env0, env1, env2) {
  switch (state) {
    case 1:
      var v = env0;
      t1 = env1;
      break;
    case 2:
      v = env0;
      t1 = env1;
      t3 = env2;
      break;
    case 3:
      v = env0;
      t5 = env1;
      break;
    case 4:
      v = env0;
      t7 = env1;
      t5 = env2;
      break;
    case 5:
      v = env0;
      t9 = env1;
      break;
    case 6:
      v = env0;
      t9 = env1;
      t11 = env2;
      break;
    case 7:
      v = env0;
      t13 = env1;
      break;
    case 8:
      t15 = env0;
      t13 = env1;
      break;
  }
  switch (state) {
    case 0:
      var t1 = this.x;
    case 1:
      state = 0;
      var t3 = v.get$x();
    case 2:
      state = 0;
      this.x = $.sub(t1, t3);
      var t5 = this.y;
    case 3:
      state = 0;
      var t7 = v.get$y();
    case 4:
      state = 0;
      this.y = $.sub(t5, t7);
      var t9 = this.z;
    case 5:
      state = 0;
      var t11 = v.get$z();
    case 6:
      state = 0;
      this.z = $.sub(t9, t11);
      var t13 = this.w;
    case 7:
      state = 0;
      var t15 = v.get$w();
    case 8:
      state = 0;
      this.w = $.sub(t13, t15);
      return this;
  }
},
 multiplyScalar$1: function(s) {
  this.x = $.mul(this.x, s);
  this.y = $.mul(this.y, s);
  this.z = $.mul(this.z, s);
  this.w = $.mul(this.w, s);
  return this;
},
 divideScalar$1: function(s) {
  if (typeof s !== 'number')
    return this.divideScalar$1$bailout(1, s, 0);
  var t1 = this.x;
  if (typeof t1 !== 'number')
    return this.divideScalar$1$bailout(2, s, t1);
  this.x = t1 / s;
  var t3 = this.y;
  if (typeof t3 !== 'number')
    return this.divideScalar$1$bailout(3, s, t3);
  this.y = t3 / s;
  var t5 = this.z;
  if (typeof t5 !== 'number')
    return this.divideScalar$1$bailout(4, s, t5);
  this.z = t5 / s;
  var t7 = this.w;
  if (typeof t7 !== 'number')
    return this.divideScalar$1$bailout(5, s, t7);
  this.w = t7 / s;
  return this;
},
 divideScalar$1$bailout: function(state, env0, env1) {
  switch (state) {
    case 1:
      var s = env0;
      break;
    case 2:
      s = env0;
      t1 = env1;
      break;
    case 3:
      s = env0;
      t3 = env1;
      break;
    case 4:
      s = env0;
      t5 = env1;
      break;
    case 5:
      s = env0;
      t7 = env1;
      break;
  }
  switch (state) {
    case 0:
    case 1:
      state = 0;
    default:
      if (state === 5 || state === 4 || state === 3 || state === 2 || state === 0 && !(s == null))
        switch (state) {
          case 0:
            var t1 = this.x;
          case 2:
            state = 0;
            this.x = $.div(t1, s);
            var t3 = this.y;
          case 3:
            state = 0;
            this.y = $.div(t3, s);
            var t5 = this.z;
          case 4:
            state = 0;
            this.z = $.div(t5, s);
            var t7 = this.w;
          case 5:
            state = 0;
            this.w = $.div(t7, s);
        }
      else {
        this.x = 0;
        this.y = 0;
        this.z = 0;
        this.w = 1;
      }
      return this;
  }
},
 negate$0: function() {
  return this.multiplyScalar$1(-1);
},
 dot$1: function(v) {
  return $.add($.add($.add($.mul(this.x, v.x), $.mul(this.y, v.y)), $.mul(this.z, v.z)), $.mul(this.w, v.w));
},
 lengthSq$0: function() {
  return this.dot$1(this);
},
 length$0: function() {
  return $.sqrt(this.lengthSq$0());
},
 get$length: function() { return new $.BoundClosure0(this, 'length$0'); },
 normalize$0: function() {
  return this.divideScalar$1(this.length$0());
},
 clone$0: function() {
  return $.Vector4$(this.x, this.y, this.z, this.w);
},
 is$Vector4: true,
 is$IVector4: true
};

$$.Object3D = {"":
 ["id=", "name?", "properties", "parent=", "children?", "up", "position?", "rotation?", "scale", "eulerOrder", "_dynamic", "doubleSided", "flipSided", "rotationAutoUpdate", "renderDepth?", "matrix", "matrixWorld?", "matrixRotationWorld", "matrixAutoUpdate", "matrixWorldNeedsUpdate", "quaternion", "useQuaternion", "boundRadius", "boundRadiusScale", "visible?", "castShadow?", "receiveShadow?", "frustumCulled?", "_vector", "__data"],
 "super": "Object",
 scale$1: function(arg0) { return this.scale.call$1(arg0); },
 get$Dynamic: function() {
  return this._dynamic;
},
 lookAt$1: function(vector) {
  this.matrix.lookAt$3(vector, this.position, this.up);
  if (this.rotationAutoUpdate === true)
    this.rotation.setEulerFromRotationMatrix$2(this.matrix, this.eulerOrder);
},
 add$1: function(object) {
  if (object === this) {
    $.print('THREE.Object3D.add: An object can\'t be added as a child of itself.');
    return;
  }
  if (!(object.get$parent() == null))
    object.get$parent().remove$1(object);
  object.set$parent(this);
  this.children.push(object);
  for (var scene = this; !(scene.get$parent() == null);)
    scene = scene.get$parent();
  if (typeof scene === 'object' && scene !== null && !!scene.is$Scene)
    scene.addObject$1(object);
},
 remove$1: function(object) {
  var t1 = this.children;
  var index = $.indexOf$1(t1, object);
  if (!(index === -1)) {
    object.set$parent(null);
    $.removeRange(t1, index, 1);
    for (var scene = this; !(scene.get$parent() == null);)
      scene = scene.get$parent();
    if (typeof scene === 'object' && scene !== null && !!scene.is$Scene)
      scene.removeObject$1(object);
  }
},
 updateMatrix$0: function() {
  this.matrix.setPosition$1(this.position);
  var t1 = this.useQuaternion === true;
  var t2 = this.matrix;
  if (t1)
    t2.setRotationFromQuaternion$1(this.quaternion);
  else
    t2.setRotationFromEuler$2(this.rotation, this.eulerOrder);
  t1 = this.scale;
  if (!(t1.get$x() === 1) || !(t1.get$y() === 1) || !(t1.get$z() === 1)) {
    this.matrix.scale$1(t1);
    this.boundRadiusScale = $.max(t1.get$x(), $.max(t1.get$y(), t1.get$z()));
  }
  this.matrixWorldNeedsUpdate = true;
},
 updateMatrixWorld$1: function(force) {
  var t1 = {};
  t1.force_1 = force;
  if (this.matrixAutoUpdate === true)
    this.updateMatrix$0();
  if (this.matrixWorldNeedsUpdate === true || t1.force_1 === true) {
    var t2 = this.parent;
    var t3 = !(t2 == null);
    var t4 = this.matrixWorld;
    if (t3)
      t4.multiply$2(t2.get$matrixWorld(), this.matrix);
    else
      t4.copy$1(this.matrix);
    this.matrixWorldNeedsUpdate = false;
    t1.force_1 = true;
  }
  $.forEach(this.children, new $.Object3D_updateMatrixWorld_anon(t1));
},
 updateMatrixWorld$0: function() {
  return this.updateMatrixWorld$1(false)
},
 clone$0: function() {
},
 get$_data: function() {
  if (this.__data == null)
    this.__data = $.makeLiteralMap([]);
  return this.__data;
},
 operator$index$1: function(key) {
  return $.index(this.get$_data(), key);
},
 operator$indexSet$2: function(key, value) {
  $.indexSet(this.get$_data(), key, value);
  return value;
}
};

$$.Color = {"":
 ["r?", "g?", "b?"],
 "super": "Object",
 copy$1: function(color) {
  this.r = color.get$r();
  this.g = color.get$g();
  this.b = color.get$b();
  return this;
},
 copyGammaToLinear$1: function(color) {
  var t1 = color.get$r();
  this.r = $.mul(t1, t1);
  var t2 = color.get$g();
  this.g = $.mul(t2, t2);
  var t3 = color.get$b();
  this.b = $.mul(t3, t3);
  return this;
},
 setRGB$3: function(newR, newG, newB) {
  this.r = newR;
  this.g = newG;
  this.b = newB;
  return this;
},
 setHex$1: function(hex) {
  var h = $.toInt($.floor(hex));
  this.r = $.div($.shr($.and(h, 16711680), 16), 255);
  this.g = $.div($.shr($.and(h, 65280), 8), 255);
  this.b = $.div($.and(h, 255), 255);
  return this;
},
 clone$0: function() {
  return $.Color$(null).setRGB$3(this.r, this.g, this.b);
},
 Color$1: function(hex) {
  if (typeof hex === 'number')
    this.setHex$1(hex);
},
 is$Color: true
};

$$.Face3 = {"":
 ["a?", "b?", "c?", "normal?", "vertexNormals?", "vertexColors?", "vertexTangents?", "color?", "materialIndex?", "centroid?"],
 "super": "Object",
 clone$0: function() {
  var face = $.Face3$(this.a, this.b, this.c, null, null, null);
  face.normal.copy$1(this.normal);
  face.color.copy$1(this.color);
  face.centroid.copy$1(this.centroid);
  face.materialIndex = this.materialIndex;
  face.vertexNormals = $.map(this.vertexNormals, new $.Face3_clone_anon());
  face.vertexColors = $.map(this.vertexColors, new $.Face3_clone_anon0());
  face.vertexTangents = $.map(this.vertexTangents, new $.Face3_clone_anon1());
  return face;
},
 Face3$6: function(a, b, c, normalOrVertexNormals, colorOrVertexColors, materialIndex) {
  this.normal = typeof normalOrVertexNormals === 'object' && normalOrVertexNormals !== null && !!normalOrVertexNormals.is$Vector3 ? normalOrVertexNormals : $.Vector3$(0, 0, 0);
  this.vertexNormals = typeof normalOrVertexNormals === 'object' && normalOrVertexNormals !== null && (normalOrVertexNormals.constructor === Array || normalOrVertexNormals.is$List()) ? normalOrVertexNormals : [];
  this.color = typeof colorOrVertexColors === 'object' && colorOrVertexColors !== null && !!colorOrVertexColors.is$Color ? colorOrVertexColors : $.Color$(null);
  this.vertexColors = typeof colorOrVertexColors === 'object' && colorOrVertexColors !== null && (colorOrVertexColors.constructor === Array || colorOrVertexColors.is$List()) ? colorOrVertexColors : [];
  this.vertexTangents = [];
  this.centroid = $.Vector3$(0, 0, 0);
},
 is$Face3: true
};

$$.Face4 = {"":
 ["a?", "b?", "c?", "d?", "normal?", "vertexNormals?", "vertexColors?", "vertexTangents?", "color?", "materialIndex?", "centroid?"],
 "super": "Object",
 clone$0: function() {
  var face = $.Face4$(this.a, this.b, this.c, this.d, null, null, null);
  face.normal.copy$1(this.normal);
  face.color.copy$1(this.color);
  face.centroid.copy$1(this.centroid);
  face.materialIndex = this.materialIndex;
  face.vertexNormals = $.map(this.vertexNormals, new $.Face4_clone_anon());
  face.vertexColors = $.map(this.vertexColors, new $.Face4_clone_anon0());
  face.vertexTangents = $.map(this.vertexTangents, new $.Face4_clone_anon1());
  return face;
},
 Face4$7: function(a, b, c, d, normalOrVertexNormals, colorOrVertexColors, materialIndex) {
  this.normal = typeof normalOrVertexNormals === 'object' && normalOrVertexNormals !== null && !!normalOrVertexNormals.is$Vector3 ? normalOrVertexNormals : $.Vector3$(0, 0, 0);
  this.vertexNormals = typeof normalOrVertexNormals === 'object' && normalOrVertexNormals !== null && (normalOrVertexNormals.constructor === Array || normalOrVertexNormals.is$List()) ? normalOrVertexNormals : [];
  this.color = typeof colorOrVertexColors === 'object' && colorOrVertexColors !== null && !!colorOrVertexColors.is$Color ? colorOrVertexColors : $.Color$(null);
  this.vertexColors = typeof colorOrVertexColors === 'object' && colorOrVertexColors !== null && (colorOrVertexColors.constructor === Array || colorOrVertexColors.is$List()) ? colorOrVertexColors : [];
  this.vertexTangents = [];
  this.materialIndex = this.materialIndex;
  this.centroid = $.Vector3$(0, 0, 0);
},
 is$Face4: true
};

$$.Frustum = {"":
 ["planes"],
 "super": "Object",
 setFromMatrix$1: function(m) {
  var me = m.get$elements();
  var me0 = $.index(me, 0);
  var me1 = $.index(me, 1);
  var me2 = $.index(me, 2);
  var me3 = $.index(me, 3);
  var me4 = $.index(me, 4);
  var me5 = $.index(me, 5);
  var me6 = $.index(me, 6);
  var me7 = $.index(me, 7);
  var me8 = $.index(me, 8);
  var me9 = $.index(me, 9);
  var me10 = $.index(me, 10);
  var me11 = $.index(me, 11);
  var me12 = $.index(me, 12);
  var me13 = $.index(me, 13);
  var me14 = $.index(me, 14);
  var me15 = $.index(me, 15);
  var t1 = this.planes;
  if (0 < 0 || 0 >= t1.length)
    throw $.ioore(0);
  t1[0].setValues$4($.sub(me3, me0), $.sub(me7, me4), $.sub(me11, me8), $.sub(me15, me12));
  if (1 < 0 || 1 >= t1.length)
    throw $.ioore(1);
  t1[1].setValues$4($.add(me3, me0), $.add(me7, me4), $.add(me11, me8), $.add(me15, me12));
  if (2 < 0 || 2 >= t1.length)
    throw $.ioore(2);
  t1[2].setValues$4($.add(me3, me1), $.add(me7, me5), $.add(me11, me9), $.add(me15, me13));
  if (3 < 0 || 3 >= t1.length)
    throw $.ioore(3);
  t1[3].setValues$4($.sub(me3, me1), $.sub(me7, me5), $.sub(me11, me9), $.sub(me15, me13));
  if (4 < 0 || 4 >= t1.length)
    throw $.ioore(4);
  t1[4].setValues$4($.sub(me3, me2), $.sub(me7, me6), $.sub(me11, me10), $.sub(me15, me14));
  if (5 < 0 || 5 >= t1.length)
    throw $.ioore(5);
  t1[5].setValues$4($.add(me3, me2), $.add(me7, me6), $.add(me11, me10), $.add(me15, me14));
  for (var i = 0, plane = null; i < 6; ++i) {
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    plane = t1[i];
    plane.divideScalar$1($.sqrt($.add($.add($.mul(plane.get$x(), plane.get$x()), $.mul(plane.get$y(), plane.get$y())), $.mul(plane.get$z(), plane.get$z()))));
  }
},
 contains$1: function(object) {
  var matrix = object.get$matrixWorld();
  var me = matrix.get$elements();
  if (typeof me !== 'string' && (typeof me !== 'object' || me === null || me.constructor !== Array && !me.is$JavaScriptIndexingBehavior()))
    return this.contains$1$bailout(1, object, matrix, me);
  var radius = $.mul($.neg($.get$dynamic(object).get$geometry().get$boundingSphere().get$radius()), matrix.getMaxScaleOnAxis$0());
  if (typeof radius !== 'number')
    return this.contains$1$bailout(2, me, radius, 0);
  for (var t1 = this.planes, distance = 0, i = 0; i < 6; ++i) {
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    var t2 = t1[i].get$x();
    if (12 >= me.length)
      throw $.ioore(12);
    t2 = $.mul(t2, me[12]);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    var t3 = t1[i].get$y();
    if (13 >= me.length)
      throw $.ioore(13);
    t2 = $.add(t2, $.mul(t3, me[13]));
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    var t4 = t1[i].get$z();
    if (14 >= me.length)
      throw $.ioore(14);
    t2 = $.add(t2, $.mul(t4, me[14]));
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    distance = $.add(t2, t1[i].get$w());
    if ($.leB(distance, radius))
      return false;
  }
  return true;
},
 contains$1$bailout: function(state, env0, env1, env2) {
  switch (state) {
    case 1:
      var object = env0;
      matrix = env1;
      me = env2;
      break;
    case 2:
      me = env0;
      radius = env1;
      break;
  }
  switch (state) {
    case 0:
      var matrix = object.get$matrixWorld();
      var me = matrix.get$elements();
    case 1:
      state = 0;
      var radius = $.mul($.neg($.get$dynamic(object).get$geometry().get$boundingSphere().get$radius()), matrix.getMaxScaleOnAxis$0());
    case 2:
      state = 0;
      for (var t1 = this.planes, distance = 0, i = 0; i < 6; ++i) {
        if (i < 0 || i >= t1.length)
          throw $.ioore(i);
        var t2 = $.mul(t1[i].get$x(), $.index(me, 12));
        if (i < 0 || i >= t1.length)
          throw $.ioore(i);
        t2 = $.add(t2, $.mul(t1[i].get$y(), $.index(me, 13)));
        if (i < 0 || i >= t1.length)
          throw $.ioore(i);
        t2 = $.add(t2, $.mul(t1[i].get$z(), $.index(me, 14)));
        if (i < 0 || i >= t1.length)
          throw $.ioore(i);
        distance = $.add(t2, t1[i].get$w());
        if ($.leB(distance, radius))
          return false;
      }
      return true;
  }
}
};

$$.Geometry = {"":
 ["id=", "name?", "vertices=", "colors?", "materials?", "faces=", "faceUvs?", "faceVertexUvs?", "morphTargets?", "morphColors", "morphNormals?", "skinWeights?", "skinIndices?", "__tmpVertices?", "boundingBox", "boundingSphere?", "hasTangents?", "_dynamic", "__data"],
 "super": "Object",
 get$Dynamic: function() {
  return this._dynamic;
},
 computeCentroids$0: function() {
  $.forEach(this.faces, new $.Geometry_computeCentroids_anon(this));
},
 computeFaceNormals$0: function() {
  var t1 = {};
  t1.vA_1 = null;
  t1.vB_2 = null;
  t1.vC_3 = null;
  var cb = $.Vector3$(0, 0, 0);
  var ab = $.Vector3$(0, 0, 0);
  $.forEach(this.faces, new $.Geometry_computeFaceNormals_anon(cb, t1, this, ab));
},
 computeVertexNormals$0: function() {
  var t1 = {};
  t1.vertices_1 = null;
  var t2 = this.__tmpVertices;
  if (t2 == null) {
    this.__tmpVertices = [];
    $.forEach(this.vertices, new $.Geometry_computeVertexNormals_anon(this));
    t1.vertices_1 = this.__tmpVertices;
    $.forEach(this.faces, new $.Geometry_computeVertexNormals_anon0());
  } else {
    t1.vertices_1 = t2;
    var vl = $.get$length(this.vertices);
    if (typeof vl !== 'number')
      return this.computeVertexNormals$0$bailout(1, t1, vl);
    for (var v = 0; v < vl; ++v)
      $.index(t1.vertices_1, v).setValues$3(0, 0, 0);
  }
  $.forEach(this.faces, new $.Geometry_computeVertexNormals_anon1(t1));
  $.forEach(t1.vertices_1, new $.Geometry_computeVertexNormals_anon2());
  $.forEach(this.faces, new $.Geometry_computeVertexNormals_anon3(t1));
},
 computeVertexNormals$0$bailout: function(state, env0, env1) {
  switch (state) {
    case 1:
      t1 = env0;
      vl = env1;
      break;
  }
  switch (state) {
    case 0:
      var t1 = {};
      t1.vertices_1 = null;
      var t2 = this.__tmpVertices;
    case 1:
      if (state === 0 && t2 == null) {
        this.__tmpVertices = [];
        $.forEach(this.vertices, new $.Geometry_computeVertexNormals_anon(this));
        t1.vertices_1 = this.__tmpVertices;
        $.forEach(this.faces, new $.Geometry_computeVertexNormals_anon0());
      } else
        switch (state) {
          case 0:
            t1.vertices_1 = t2;
            var vl = $.get$length(this.vertices);
          case 1:
            state = 0;
            for (var v = 0; $.ltB(v, vl); ++v)
              $.index(t1.vertices_1, v).setValues$3(0, 0, 0);
        }
      $.forEach(this.faces, new $.Geometry_computeVertexNormals_anon1(t1));
      $.forEach(t1.vertices_1, new $.Geometry_computeVertexNormals_anon2());
      $.forEach(this.faces, new $.Geometry_computeVertexNormals_anon3(t1));
  }
},
 computeBoundingSphere$0: function() {
  var t1 = {};
  t1.radiusSq_1 = null;
  this.boundingSphere = $.BoundingSphere$($.sqrt($.reduce(this.vertices, 0, new $.Geometry_computeBoundingSphere_anon(t1))));
},
 mergeVertices$0: function() {
  var verticesMap = $.makeLiteralMap([]);
  var unique = [];
  var changes = [];
  var precision = $.pow(10, 4);
  var il = $.get$length(this.vertices);
  if (typeof il !== 'number')
    return this.mergeVertices$0$bailout(1, precision, verticesMap, unique, changes, il);
  for (var key = null, i = 0, v = null; i < il; ++i) {
    v = $.index(this.vertices, i);
    key = $.Strings_join([$.toStringAsFixed($.round($.mul(v.get$x(), precision)), 0), $.toStringAsFixed($.round($.mul(v.get$y(), precision)), 0), $.toStringAsFixed($.round($.mul(v.get$z(), precision)), 0)], '_');
    if ($.index(verticesMap, key) == null) {
      $.indexSet(verticesMap, key, i);
      unique.push(v);
      changes.push(unique.length - 1);
    } else {
      var t1 = $.index(verticesMap, key);
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= changes.length)
        throw $.ioore(t1);
      changes.push(changes[t1]);
    }
  }
  il = $.get$length(this.faces);
  if (typeof il !== 'number')
    return this.mergeVertices$0$bailout(2, il, unique, changes, 0, 0);
  for (i = 0; i < il; ++i) {
    var face = $.index(this.faces, i);
    if (typeof face === 'object' && face !== null && !!face.is$Face3) {
      t1 = face.a;
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= changes.length)
        throw $.ioore(t1);
      face.a = changes[t1];
      var t2 = face.b;
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= changes.length)
        throw $.ioore(t2);
      face.b = changes[t2];
      var t3 = face.c;
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= changes.length)
        throw $.ioore(t3);
      face.c = changes[t3];
    } else if (typeof face === 'object' && face !== null && !!face.is$Face4) {
      t1 = face.a;
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= changes.length)
        throw $.ioore(t1);
      face.a = changes[t1];
      t2 = face.b;
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= changes.length)
        throw $.ioore(t2);
      face.b = changes[t2];
      t3 = face.c;
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= changes.length)
        throw $.ioore(t3);
      face.c = changes[t3];
      var t4 = face.d;
      if (t4 !== (t4 | 0))
        throw $.iae(t4);
      if (t4 < 0 || t4 >= changes.length)
        throw $.ioore(t4);
      face.d = changes[t4];
    }
  }
  var diff = $.sub($.get$length(this.vertices), unique.length);
  this.vertices = unique;
  return diff;
},
 mergeVertices$0$bailout: function(state, env0, env1, env2, env3, env4) {
  switch (state) {
    case 1:
      precision = env0;
      verticesMap = env1;
      unique = env2;
      changes = env3;
      il = env4;
      break;
    case 2:
      il = env0;
      unique = env1;
      changes = env2;
      break;
  }
  switch (state) {
    case 0:
      var verticesMap = $.makeLiteralMap([]);
      var unique = [];
      var changes = [];
      var precision = $.pow(10, 4);
      var il = $.get$length(this.vertices);
    case 1:
      state = 0;
      for (var key = null, i = 0, v = null; $.ltB(i, il); ++i) {
        v = $.index(this.vertices, i);
        key = $.Strings_join([$.toStringAsFixed($.round($.mul(v.get$x(), precision)), 0), $.toStringAsFixed($.round($.mul(v.get$y(), precision)), 0), $.toStringAsFixed($.round($.mul(v.get$z(), precision)), 0)], '_');
        if ($.index(verticesMap, key) == null) {
          $.indexSet(verticesMap, key, i);
          unique.push(v);
          changes.push(unique.length - 1);
        } else {
          var t1 = $.index(verticesMap, key);
          if (t1 !== (t1 | 0))
            throw $.iae(t1);
          if (t1 < 0 || t1 >= changes.length)
            throw $.ioore(t1);
          changes.push(changes[t1]);
        }
      }
      il = $.get$length(this.faces);
    case 2:
      state = 0;
      for (i = 0; $.ltB(i, il); ++i) {
        var face = $.index(this.faces, i);
        if (typeof face === 'object' && face !== null && !!face.is$Face3) {
          t1 = face.a;
          if (t1 !== (t1 | 0))
            throw $.iae(t1);
          if (t1 < 0 || t1 >= changes.length)
            throw $.ioore(t1);
          face.a = changes[t1];
          var t2 = face.b;
          if (t2 !== (t2 | 0))
            throw $.iae(t2);
          if (t2 < 0 || t2 >= changes.length)
            throw $.ioore(t2);
          face.b = changes[t2];
          var t3 = face.c;
          if (t3 !== (t3 | 0))
            throw $.iae(t3);
          if (t3 < 0 || t3 >= changes.length)
            throw $.ioore(t3);
          face.c = changes[t3];
        } else if (typeof face === 'object' && face !== null && !!face.is$Face4) {
          t1 = face.a;
          if (t1 !== (t1 | 0))
            throw $.iae(t1);
          if (t1 < 0 || t1 >= changes.length)
            throw $.ioore(t1);
          face.a = changes[t1];
          t2 = face.b;
          if (t2 !== (t2 | 0))
            throw $.iae(t2);
          if (t2 < 0 || t2 >= changes.length)
            throw $.ioore(t2);
          face.b = changes[t2];
          t3 = face.c;
          if (t3 !== (t3 | 0))
            throw $.iae(t3);
          if (t3 < 0 || t3 >= changes.length)
            throw $.ioore(t3);
          face.c = changes[t3];
          var t4 = face.d;
          if (t4 !== (t4 | 0))
            throw $.iae(t4);
          if (t4 < 0 || t4 >= changes.length)
            throw $.ioore(t4);
          face.d = changes[t4];
        }
      }
      var diff = $.sub($.get$length(this.vertices), unique.length);
      this.vertices = unique;
      return diff;
  }
},
 clone$0: function() {
},
 get$_data: function() {
  if (this.__data == null)
    this.__data = $.makeLiteralMap([]);
  return this.__data;
},
 operator$index$1: function(key) {
  return $.index(this.get$_data(), key);
},
 operator$indexSet$2: function(key, value) {
  $.indexSet(this.get$_data(), key, value);
  return value;
},
 is$Geometry: true
};

$$.BoundingSphere = {"":
 ["radius?"],
 "super": "Object"
};

$$.Vector2 = {"":
 ["x=", "y="],
 "super": "Object",
 setValues$2: function(x, y) {
  this.x = x;
  this.y = y;
  return this;
},
 copy$1: function(v) {
  this.x = v.get$x();
  this.y = v.get$y();
  return this;
},
 add$2: function(v1, v2) {
  this.x = $.add(v1.get$x(), v2.get$x());
  this.y = $.add(v1.get$y(), v2.get$y());
  return this;
},
 addSelf$1: function(v) {
  var t1 = this.x;
  if (typeof t1 !== 'number')
    return this.addSelf$1$bailout(1, v, t1, 0);
  var t3 = v.get$x();
  if (typeof t3 !== 'number')
    return this.addSelf$1$bailout(2, v, t3, t1);
  this.x = t1 + t3;
  var t5 = this.y;
  if (typeof t5 !== 'number')
    return this.addSelf$1$bailout(3, v, t5, 0);
  var t7 = v.get$y();
  if (typeof t7 !== 'number')
    return this.addSelf$1$bailout(4, t5, t7, 0);
  this.y = t5 + t7;
  return this;
},
 addSelf$1$bailout: function(state, env0, env1, env2) {
  switch (state) {
    case 1:
      var v = env0;
      t1 = env1;
      break;
    case 2:
      v = env0;
      t3 = env1;
      t1 = env2;
      break;
    case 3:
      v = env0;
      t5 = env1;
      break;
    case 4:
      t5 = env0;
      t7 = env1;
      break;
  }
  switch (state) {
    case 0:
      var t1 = this.x;
    case 1:
      state = 0;
      var t3 = v.get$x();
    case 2:
      state = 0;
      this.x = $.add(t1, t3);
      var t5 = this.y;
    case 3:
      state = 0;
      var t7 = v.get$y();
    case 4:
      state = 0;
      this.y = $.add(t5, t7);
      return this;
  }
},
 sub$2: function(v1, v2) {
  this.x = $.sub(v1.get$x(), v2.get$x());
  this.y = $.sub(v1.get$y(), v2.get$y());
  return this;
},
 subSelf$1: function(v) {
  var t1 = this.x;
  if (typeof t1 !== 'number')
    return this.subSelf$1$bailout(1, v, t1, 0);
  var t3 = v.get$x();
  if (typeof t3 !== 'number')
    return this.subSelf$1$bailout(2, v, t3, t1);
  this.x = t1 - t3;
  var t5 = this.y;
  if (typeof t5 !== 'number')
    return this.subSelf$1$bailout(3, v, t5, 0);
  var t7 = v.get$y();
  if (typeof t7 !== 'number')
    return this.subSelf$1$bailout(4, t5, t7, 0);
  this.y = t5 - t7;
  return this;
},
 subSelf$1$bailout: function(state, env0, env1, env2) {
  switch (state) {
    case 1:
      var v = env0;
      t1 = env1;
      break;
    case 2:
      v = env0;
      t3 = env1;
      t1 = env2;
      break;
    case 3:
      v = env0;
      t5 = env1;
      break;
    case 4:
      t5 = env0;
      t7 = env1;
      break;
  }
  switch (state) {
    case 0:
      var t1 = this.x;
    case 1:
      state = 0;
      var t3 = v.get$x();
    case 2:
      state = 0;
      this.x = $.sub(t1, t3);
      var t5 = this.y;
    case 3:
      state = 0;
      var t7 = v.get$y();
    case 4:
      state = 0;
      this.y = $.sub(t5, t7);
      return this;
  }
},
 multiplyScalar$1: function(s) {
  this.x = $.mul(this.x, s);
  this.y = $.mul(this.y, s);
  return this;
},
 divideScalar$1: function(s) {
  if (typeof s !== 'number')
    return this.divideScalar$1$bailout(1, s, 0);
  var t1 = this.x;
  if (typeof t1 !== 'number')
    return this.divideScalar$1$bailout(2, s, t1);
  this.x = t1 / s;
  var t3 = this.y;
  if (typeof t3 !== 'number')
    return this.divideScalar$1$bailout(3, s, t3);
  this.y = t3 / s;
  return this;
},
 divideScalar$1$bailout: function(state, env0, env1) {
  switch (state) {
    case 1:
      var s = env0;
      break;
    case 2:
      s = env0;
      t1 = env1;
      break;
    case 3:
      s = env0;
      t3 = env1;
      break;
  }
  switch (state) {
    case 0:
    case 1:
      state = 0;
    default:
      if (state === 3 || state === 2 || state === 0 && !(s == null))
        switch (state) {
          case 0:
            var t1 = this.x;
          case 2:
            state = 0;
            this.x = $.div(t1, s);
            var t3 = this.y;
          case 3:
            state = 0;
            this.y = $.div(t3, s);
        }
      else
        this.setValues$2(0, 0);
      return this;
  }
},
 negate$0: function() {
  return this.multiplyScalar$1(-1);
},
 lengthSq$0: function() {
  var t1 = this.x;
  t1 = $.mul(t1, t1);
  var t2 = this.y;
  return $.add(t1, $.mul(t2, t2));
},
 length$0: function() {
  return $.sqrt(this.lengthSq$0());
},
 get$length: function() { return new $.BoundClosure0(this, 'length$0'); },
 normalize$0: function() {
  return this.divideScalar$1(this.length$0());
},
 isZero$0: function() {
  return $.lt(this.lengthSq$0(), 0.0001);
},
 clone$0: function() {
  return $.Vector2$(this.x, this.y);
},
 is$Vector2: true
};

$$.UV = {"":
 ["u?", "v?"],
 "super": "Object",
 copy$1: function(uv) {
  this.u = uv.get$u();
  this.v = uv.get$v();
  return this;
},
 clone$0: function() {
  return $.UV$(this.u, this.v);
}
};

$$.EventEmitterEvent = {"":
 ["type?", "message?", "content?"],
 "super": "Object"
};

$$.EventEmitter = {"":
 [],
 "super": "Object",
 addEventListener$2: function(type, listener) {
  var t1 = this.listeners;
  if ($.index(t1, type) == null)
    $.indexSet(t1, type, []);
  if ($.eqB($.indexOf$1($.index(t1, type), listener), -1))
    $.add$1($.index(t1, type), listener);
},
 dispatchEvent$1: function(event$) {
  $.forEach($.index(this.listeners, event$.type), new $.EventEmitter_dispatchEvent_anon(event$));
}
};

$$.ImageLoader = {"":
 ["crossOrigin!", "listeners"],
 "super": "EventEmitter",
 load$2: function(url, image) {
  var t1 = {};
  t1.image_1 = image;
  if (t1.image_1 == null)
    t1.image_1 = $._Elements_ImageElement(null, null, null);
  t1.image_1.get$on().get$load().add$2(new $.ImageLoader_load_anon(this, t1), false);
  t1.image_1.get$on().get$error().add$2(new $.ImageLoader_load_anon0(this, url), false);
  var t2 = this.crossOrigin;
  if (!(t2 == null))
    t1.image_1.set$crossOrigin(t2);
  t1.image_1.set$src(url);
},
 get$load: function() { return new $.BoundClosure4(this, 'load$2'); }
};

$$.CircleGeometry = {"":
 ["radius?", "segments", "thetaStart", "thetaLength", "id", "name", "vertices", "colors", "materials", "faces", "faceUvs", "faceVertexUvs", "morphTargets", "morphColors", "morphNormals", "skinWeights", "skinIndices", "__tmpVertices", "boundingBox", "boundingSphere", "hasTangents", "_dynamic", "__data"],
 "super": "Geometry",
 CircleGeometry$4: function(radius, segments, thetaStart, thetaLength) {
  var t1 = this.segments;
  this.segments = $.max(3, t1);
  var uvs = [];
  var center = $.Vector3$(0, 0, 0);
  var centerUV = $.UV$(0.5, 0.5);
  $.add$1(this.vertices, center);
  uvs.push(centerUV);
  for (var t2 = this.radius, t3 = this.thetaStart, i = 0; i <= t1; ++i) {
    var vertex = $.Vector3$(0, 0, 0);
    if (typeof t1 !== 'number')
      throw $.iae(t1);
    var t4 = i / t1;
    if (typeof thetaLength !== 'number')
      throw $.iae(thetaLength);
    vertex.x = t2 * $.cos(t3 + t4 * thetaLength);
    vertex.y = t2 * $.sin(t3 + i / t1 * thetaLength);
    $.add$1(this.vertices, vertex);
    uvs.push($.UV$($.div($.add($.div(vertex.x, t2), 1), 2), $.add($.div($.neg($.add($.div(vertex.y, t2), 1)), 2), 1)));
  }
  var n = $.Vector3$(0, 0, -1);
  for (t3 = this.faceVertexUvs, i = 1; i <= t1; ++i) {
    var v2 = i + 1;
    $.add$1(this.faces, $.Face3$(i, v2, 0, [n, n, n], null, null));
    if (0 < 0 || 0 >= t3.length)
      throw $.ioore(0);
    t4 = t3[0];
    var t5 = uvs.length;
    if (i < 0 || i >= t5)
      throw $.ioore(i);
    var t6 = uvs[i];
    if (v2 < 0 || v2 >= t5)
      throw $.ioore(v2);
    $.add$1(t4, [t6, uvs[v2], centerUV]);
  }
  this.computeCentroids$0();
  this.computeFaceNormals$0();
  this.boundingSphere = $.BoundingSphere$(t2);
}
};

$$.CubeGeometry = {"":
 ["_sides", "segmentsWidth", "segmentsHeight", "segmentsDepth", "id", "name", "vertices", "colors", "materials", "faces", "faceUvs", "faceVertexUvs", "morphTargets", "morphColors", "morphNormals", "skinWeights", "skinIndices", "__tmpVertices", "boundingBox", "boundingSphere", "hasTangents", "_dynamic", "__data"],
 "super": "Geometry",
 buildPlane$8: function(u, v, udir, vdir, width, height, depth, material) {
  if (typeof depth !== 'number')
    return this.buildPlane$8$bailout(1, u, v, udir, vdir, width, height, depth, material, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var gridX = this.segmentsWidth;
  gridX = gridX;
  var gridY = this.segmentsHeight;
  gridY = gridY;
  var width_half = $.div(width, 2);
  if (typeof width_half !== 'number')
    return this.buildPlane$8$bailout(2, u, v, udir, vdir, width, height, depth, material, gridX, width_half, gridY, 0, 0, 0, 0, 0, 0);
  var height_half = $.div(height, 2);
  if (typeof height_half !== 'number')
    return this.buildPlane$8$bailout(3, u, v, udir, vdir, width, height, depth, material, height_half, width_half, gridY, gridX, 0, 0, 0, 0, 0);
  var offset = $.get$length(this.vertices);
  var t1 = u === 'x';
  if (!(t1 && v === 'y'))
    var t2 = u === 'y' && v === 'x';
  else
    t2 = true;
  if (t2)
    var w = 'z';
  else {
    if (!(t1 && v === 'z'))
      t2 = u === 'z' && v === 'x';
    else
      t2 = true;
    if (t2) {
      gridY = this.segmentsDepth;
      gridY = gridY;
      w = 'y';
    } else {
      if (!(u === 'z' && v === 'y'))
        t2 = u === 'y' && v === 'z';
      else
        t2 = true;
      if (t2) {
        gridX = this.segmentsDepth;
        gridX = gridX;
        w = 'x';
      } else
        w = null;
    }
  }
  var gridX1 = gridX + 1;
  var gridY1 = gridY + 1;
  var segment_width = $.div(width, gridX);
  if (typeof segment_width !== 'number')
    return this.buildPlane$8$bailout(4, w, gridX, udir, vdir, gridX1, gridY, depth, material, segment_width, gridY1, u, height_half, width_half, offset, height, v, t1);
  var segment_height = $.div(height, gridY);
  if (typeof segment_height !== 'number')
    return this.buildPlane$8$bailout(5, w, gridX, udir, vdir, gridX1, gridY, depth, material, segment_width, gridY1, segment_height, height_half, width_half, offset, u, v, t1);
  var normal = $.Vector3$(0, 0, 0);
  t2 = w === 'x';
  if (t2)
    normal.x = depth > 0 ? 1 : -1;
  else if (w === 'y')
    normal.y = depth > 0 ? 1 : -1;
  else if (w === 'z')
    normal.z = depth > 0 ? 1 : -1;
  for (var t3 = u === 'y', t4 = u === 'z', t5 = v === 'x', t6 = v === 'y', t7 = v === 'z', t8 = w === 'y', t9 = w === 'z', iy = 0, ix = null; iy < gridY1; ++iy)
    for (var t10 = (iy * segment_height - height_half) * vdir, ix = 0; ix < gridX1; ++ix) {
      var vector = $.Vector3$(0, 0, 0);
      if (t1)
        vector.x = (ix * segment_width - width_half) * udir;
      else if (t3)
        vector.y = (ix * segment_width - width_half) * udir;
      else if (t4)
        vector.z = (ix * segment_width - width_half) * udir;
      if (t5)
        vector.x = t10;
      else if (t6)
        vector.y = t10;
      else if (t7)
        vector.z = t10;
      if (t2)
        vector.x = depth;
      else if (t8)
        vector.y = depth;
      else if (t9)
        vector.z = depth;
      $.add$1(this.vertices, vector);
    }
  for (t1 = this.faceVertexUvs, iy = 0; iy < gridY; ++iy)
    for (t2 = iy + 1, t3 = gridX1 * iy, t4 = gridX1 * t2, t5 = iy / gridY, t2 /= gridY, ix = 0; ix < gridX; ++ix) {
      var a = ix + t3;
      var b = ix + t4;
      t6 = ix + 1;
      var c = t6 + t4;
      var d = t6 + t3;
      if (typeof offset !== 'number')
        throw $.iae(offset);
      var face = $.Face4$(a + offset, b + offset, c + offset, d + offset, null, null, null);
      face.normal.copy$1(normal);
      $.addAll(face.vertexNormals, [normal.clone$0(), normal.clone$0(), normal.clone$0(), normal.clone$0()]);
      face.materialIndex = material;
      $.add$1(this.faces, face);
      if (0 >= t1.length)
        throw $.ioore(0);
      var faceVertexUV = t1[0];
      var newUVs = $.ListImplementation_List(null);
      t7 = ix / gridX;
      t8 = $.UV$(t7, t5);
      t7 = $.UV$(t7, t2);
      t6 /= gridX;
      $.addAll(newUVs, [t8, t7, $.UV$(t6, t2), $.UV$(t6, t5)]);
      $.add$1(faceVertexUV, newUVs);
    }
},
 buildPlane$8$bailout: function(state, env0, env1, env2, env3, env4, env5, env6, env7, env8, env9, env10, env11, env12, env13, env14, env15, env16) {
  switch (state) {
    case 1:
      var u = env0;
      var v = env1;
      var udir = env2;
      var vdir = env3;
      var width = env4;
      var height = env5;
      var depth = env6;
      var material = env7;
      break;
    case 2:
      u = env0;
      v = env1;
      udir = env2;
      vdir = env3;
      width = env4;
      height = env5;
      depth = env6;
      material = env7;
      gridX = env8;
      width_half = env9;
      gridY = env10;
      break;
    case 3:
      u = env0;
      v = env1;
      udir = env2;
      vdir = env3;
      width = env4;
      height = env5;
      depth = env6;
      material = env7;
      height_half = env8;
      width_half = env9;
      gridY = env10;
      gridX = env11;
      break;
    case 4:
      w = env0;
      gridX = env1;
      udir = env2;
      vdir = env3;
      gridX1 = env4;
      gridY = env5;
      depth = env6;
      material = env7;
      segment_width = env8;
      gridY1 = env9;
      u = env10;
      height_half = env11;
      width_half = env12;
      offset = env13;
      height = env14;
      v = env15;
      t1 = env16;
      break;
    case 5:
      w = env0;
      gridX = env1;
      udir = env2;
      vdir = env3;
      gridX1 = env4;
      gridY = env5;
      depth = env6;
      material = env7;
      segment_width = env8;
      gridY1 = env9;
      segment_height = env10;
      height_half = env11;
      width_half = env12;
      offset = env13;
      u = env14;
      v = env15;
      t1 = env16;
      break;
  }
  switch (state) {
    case 0:
    case 1:
      state = 0;
      var gridX = this.segmentsWidth;
      gridX = !(gridX === null) ? gridX : 1;
      var gridY = this.segmentsHeight;
      gridY = !(gridY === null) ? gridY : 1;
      var width_half = $.div(width, 2);
    case 2:
      state = 0;
      var height_half = $.div(height, 2);
    case 3:
      state = 0;
      var offset = $.get$length(this.vertices);
      var t1 = u === 'x';
      if (!(t1 && v === 'y'))
        var t2 = u === 'y' && v === 'x';
      else
        t2 = true;
      if (t2)
        var w = 'z';
      else {
        if (!(t1 && v === 'z'))
          t2 = u === 'z' && v === 'x';
        else
          t2 = true;
        if (t2) {
          gridY = this.segmentsDepth;
          gridY = !(gridY === null) ? gridY : 1;
          w = 'y';
        } else {
          if (!(u === 'z' && v === 'y'))
            t2 = u === 'y' && v === 'z';
          else
            t2 = true;
          if (t2) {
            gridX = this.segmentsDepth;
            gridX = !(gridX === null) ? gridX : 1;
            w = 'x';
          } else
            w = null;
        }
      }
      var gridX1 = gridX + 1;
      var gridY1 = gridY + 1;
      var segment_width = $.div(width, gridX);
    case 4:
      state = 0;
      var segment_height = $.div(height, gridY);
    case 5:
      state = 0;
      var normal = $.Vector3$(0, 0, 0);
      t2 = w === 'x';
      if (t2)
        normal.x = $.gtB(depth, 0) ? 1 : -1;
      else if (w === 'y')
        normal.y = $.gtB(depth, 0) ? 1 : -1;
      else if (w === 'z')
        normal.z = $.gtB(depth, 0) ? 1 : -1;
      for (var t3 = u === 'y', t4 = u === 'z', t5 = v === 'x', t6 = v === 'y', t7 = v === 'z', t8 = w === 'y', t9 = w === 'z', iy = 0, ix = null; iy < gridY1; ++iy)
        for (ix = 0; ix < gridX1; ++ix) {
          var vector = $.Vector3$(0, 0, 0);
          if (t1) {
            if (typeof segment_width !== 'number')
              throw $.iae(segment_width);
            var t10 = ix * segment_width;
            if (typeof width_half !== 'number')
              throw $.iae(width_half);
            vector.x = (t10 - width_half) * udir;
          } else if (t3) {
            if (typeof segment_width !== 'number')
              throw $.iae(segment_width);
            t10 = ix * segment_width;
            if (typeof width_half !== 'number')
              throw $.iae(width_half);
            vector.y = (t10 - width_half) * udir;
          } else if (t4) {
            if (typeof segment_width !== 'number')
              throw $.iae(segment_width);
            t10 = ix * segment_width;
            if (typeof width_half !== 'number')
              throw $.iae(width_half);
            vector.z = (t10 - width_half) * udir;
          }
          if (t5) {
            if (typeof segment_height !== 'number')
              throw $.iae(segment_height);
            t10 = iy * segment_height;
            if (typeof height_half !== 'number')
              throw $.iae(height_half);
            vector.x = (t10 - height_half) * vdir;
          } else if (t6) {
            if (typeof segment_height !== 'number')
              throw $.iae(segment_height);
            t10 = iy * segment_height;
            if (typeof height_half !== 'number')
              throw $.iae(height_half);
            vector.y = (t10 - height_half) * vdir;
          } else if (t7) {
            if (typeof segment_height !== 'number')
              throw $.iae(segment_height);
            t10 = iy * segment_height;
            if (typeof height_half !== 'number')
              throw $.iae(height_half);
            vector.z = (t10 - height_half) * vdir;
          }
          if (t2)
            vector.x = depth;
          else if (t8)
            vector.y = depth;
          else if (t9)
            vector.z = depth;
          $.add$1(this.vertices, vector);
        }
      for (t1 = this.faceVertexUvs, iy = 0; iy < gridY; ++iy)
        for (t2 = iy + 1, ix = 0; ix < gridX; ++ix) {
          t3 = gridX1 * iy;
          if (typeof t3 !== 'number')
            throw $.iae(t3);
          var a = ix + t3;
          t3 = gridX1 * t2;
          if (typeof t3 !== 'number')
            throw $.iae(t3);
          var b = ix + t3;
          t3 = ix + 1;
          t4 = gridX1 * t2;
          if (typeof t4 !== 'number')
            throw $.iae(t4);
          var c = t3 + t4;
          t4 = gridX1 * iy;
          if (typeof t4 !== 'number')
            throw $.iae(t4);
          var d = t3 + t4;
          if (typeof offset !== 'number')
            throw $.iae(offset);
          var face = $.Face4$(a + offset, b + offset, c + offset, d + offset, null, null, null);
          face.normal.copy$1(normal);
          $.addAll(face.vertexNormals, [normal.clone$0(), normal.clone$0(), normal.clone$0(), normal.clone$0()]);
          face.materialIndex = material;
          $.add$1(this.faces, face);
          if (0 < 0 || 0 >= t1.length)
            throw $.ioore(0);
          var faceVertexUV = t1[0];
          var newUVs = $.ListImplementation_List(null);
          if (typeof gridX !== 'number')
            throw $.iae(gridX);
          t4 = ix / gridX;
          if (typeof gridY !== 'number')
            throw $.iae(gridY);
          t5 = iy / gridY;
          t6 = $.UV$(t4, t5);
          t7 = t2 / gridY;
          t4 = $.UV$(t4, t7);
          t3 /= gridX;
          $.addAll(newUVs, [t6, t4, $.UV$(t3, t7), $.UV$(t3, t5)]);
          $.add$1(faceVertexUV, newUVs);
        }
  }
},
 CubeGeometry$8: function(width, height, depth, segmentsWidth, segmentsHeight, segmentsDepth, materialOrList, sides) {
  if (typeof sides !== 'string' && (typeof sides !== 'object' || sides === null || sides.constructor !== Array && !sides.is$JavaScriptIndexingBehavior()))
    return this.CubeGeometry$8$bailout(1, width, height, depth, materialOrList, sides);
  var width_half = $.div(width, 2);
  var height_half = $.div(height, 2);
  var depth_half = $.div(depth, 2);
  if (!(materialOrList == null)) {
    if (typeof materialOrList === 'object' && materialOrList !== null && (materialOrList.constructor === Array || materialOrList.is$List()))
      this.materials = materialOrList;
    else {
      this.materials = [];
      for (var t1 = this.materials, i = 0; i < 6; ++i)
        $.add$1(t1, materialOrList);
    }
    var mpx = 0;
    var mnx = 1;
    var mny = 3;
    var mpz = 4;
    var mpy = 2;
    var mnz = 5;
  } else {
    this.materials = [];
    mpx = null;
    mnx = null;
    mny = null;
    mpz = null;
    mpy = null;
    mnz = null;
  }
  this._sides = $.CubeGeomSides$(true, true, true, true, true, true);
  for (var t1 = $.iterator(sides), t2 = this._sides; t1.hasNext$0() === true;) {
    var t3 = t1.next$0();
    if (!($.index($.get$dynamic(t2), t3) == null)) {
      var t4 = $.get$dynamic(t2);
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= sides.length)
        throw $.ioore(t3);
      $.indexSet(t4, t3, sides[t3]);
    }
  }
  t1 = this._sides;
  if (t1.px === true)
    this.buildPlane$8('z', 'y', -1, -1, depth, height, width_half, mpx);
  if (t1.nx === true)
    this.buildPlane$8('z', 'y', 1, -1, depth, height, $.neg(width_half), mnx);
  if (t1.py === true)
    this.buildPlane$8('x', 'z', 1, 1, width, depth, height_half, mpy);
  if (t1.ny === true)
    this.buildPlane$8('x', 'z', 1, -1, width, depth, $.neg(height_half), mny);
  if (t1.pz === true)
    this.buildPlane$8('x', 'y', 1, -1, width, height, depth_half, mpz);
  if (t1.nz === true)
    this.buildPlane$8('x', 'y', -1, -1, width, height, $.neg(depth_half), mnz);
  this.computeCentroids$0();
  this.mergeVertices$0();
},
 CubeGeometry$8$bailout: function(state, width, height, depth, materialOrList, sides) {
  var width_half = $.div(width, 2);
  var height_half = $.div(height, 2);
  var depth_half = $.div(depth, 2);
  if (!(materialOrList == null)) {
    if (typeof materialOrList === 'object' && materialOrList !== null && (materialOrList.constructor === Array || materialOrList.is$List()))
      this.materials = materialOrList;
    else {
      this.materials = [];
      for (var t1 = this.materials, i = 0; i < 6; ++i)
        $.add$1(t1, materialOrList);
    }
    var mpx = 0;
    var mnx = 1;
    var mny = 3;
    var mpz = 4;
    var mpy = 2;
    var mnz = 5;
  } else {
    this.materials = [];
    mpx = null;
    mnx = null;
    mny = null;
    mpz = null;
    mpy = null;
    mnz = null;
  }
  this._sides = $.CubeGeomSides$(true, true, true, true, true, true);
  if (!(sides == null))
    for (var t1 = $.iterator(sides), t2 = this._sides; t1.hasNext$0() === true;) {
      var t3 = t1.next$0();
      if (!($.index($.get$dynamic(t2), t3) == null))
        $.indexSet($.get$dynamic(t2), t3, $.index(sides, t3));
    }
  t1 = this._sides;
  if (t1.get$px() === true)
    this.buildPlane$8('z', 'y', -1, -1, depth, height, width_half, mpx);
  if (t1.get$nx() === true)
    this.buildPlane$8('z', 'y', 1, -1, depth, height, $.neg(width_half), mnx);
  if (t1.get$py() === true)
    this.buildPlane$8('x', 'z', 1, 1, width, depth, height_half, mpy);
  if (t1.get$ny() === true)
    this.buildPlane$8('x', 'z', 1, -1, width, depth, $.neg(height_half), mny);
  if (t1.get$pz() === true)
    this.buildPlane$8('x', 'y', 1, -1, width, height, depth_half, mpz);
  if (t1.get$nz() === true)
    this.buildPlane$8('x', 'y', -1, -1, width, height, $.neg(depth_half), mnz);
  this.computeCentroids$0();
  this.mergeVertices$0();
}
};

$$.CubeGeomSides = {"":
 ["px?", "nx?", "py?", "ny?", "pz?", "nz?"],
 "super": "Object"
};

$$.CylinderGeometry = {"":
 ["radiusTop", "radiusBottom", "height=", "segmentsRadius", "segmentsHeight", "openEnded", "id", "name", "vertices", "colors", "materials", "faces", "faceUvs", "faceVertexUvs", "morphTargets", "morphColors", "morphNormals", "skinWeights", "skinIndices", "__tmpVertices", "boundingBox", "boundingSphere", "hasTangents", "_dynamic", "__data"],
 "super": "Geometry",
 CylinderGeometry$6: function(radiusTop, radiusBottom, height, segmentsRadius, segmentsHeight, openEnded) {
  if (typeof segmentsRadius !== 'number')
    return this.CylinderGeometry$6$bailout(1, segmentsRadius, segmentsHeight, openEnded, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  if (typeof segmentsHeight !== 'number')
    return this.CylinderGeometry$6$bailout(1, segmentsRadius, segmentsHeight, openEnded, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var heightHalf = $.div(this.height, 2);
  if (typeof heightHalf !== 'number')
    return this.CylinderGeometry$6$bailout(2, segmentsRadius, segmentsHeight, openEnded, heightHalf, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var vertices = [];
  var uvs = [];
  for (var t1 = this.radiusBottom, t2 = this.radiusTop, t3 = t1 - t2, x = null, y = 0; y <= segmentsHeight; ++y) {
    var verticesRow = [];
    var uvsRow = [];
    var v = y / segmentsHeight;
    var radius = v * t3 + t2;
    for (var t4 = -v, t5 = 1 - v, x = 0; x <= segmentsRadius; ++x) {
      var u = x / segmentsRadius;
      var vertex = $.Vector3$(0, 0, 0);
      var t6 = u * 3.141592653589793 * 2;
      vertex.x = radius * $.sin(t6);
      var t7 = this.height;
      if (typeof t7 !== 'number')
        throw $.iae(t7);
      vertex.y = t4 * t7 + heightHalf;
      vertex.z = radius * $.cos(t6);
      $.add$1(this.vertices, vertex);
      verticesRow.push($.sub($.get$length(this.vertices), 1));
      uvsRow.push($.UV$(u, t5));
    }
    vertices.push(verticesRow);
    uvs.push(uvsRow);
  }
  t4 = this.height;
  if (typeof t4 !== 'number')
    throw $.iae(t4);
  var tanTheta = t3 / t4;
  for (var t3 = !(t2 === 0), t4 = this.faceVertexUvs, x = 0, nb = null, na = null; x < segmentsRadius; ++x) {
    t5 = vertices.length;
    t6 = x + 1;
    t7 = this.vertices;
    if (t3) {
      if (0 >= t5)
        throw $.ioore(0);
      na = $.index(t7, $.index(vertices[0], x)).clone$0();
      var t8 = this.vertices;
      if (0 >= vertices.length)
        throw $.ioore(0);
      nb = $.index(t8, $.index(vertices[0], t6)).clone$0();
    } else {
      if (1 >= t5)
        throw $.ioore(1);
      na = $.index(t7, $.index(vertices[1], x)).clone$0();
      t8 = this.vertices;
      if (1 >= vertices.length)
        throw $.ioore(1);
      nb = $.index(t8, $.index(vertices[1], t6)).clone$0();
    }
    na.setY$1($.sqrt($.add($.mul(na.get$x(), na.get$x()), $.mul(na.get$z(), na.get$z()))) * tanTheta).normalize$0();
    nb.setY$1($.sqrt($.add($.mul(nb.get$x(), nb.get$x()), $.mul(nb.get$z(), nb.get$z()))) * tanTheta).normalize$0();
    for (y = 0; y < segmentsHeight; ++y) {
      t5 = vertices.length;
      if (y < 0 || y >= t5)
        throw $.ioore(y);
      t7 = vertices[y];
      if (typeof t7 !== 'string' && (typeof t7 !== 'object' || t7 === null || t7.constructor !== Array && !t7.is$JavaScriptIndexingBehavior()))
        return this.CylinderGeometry$6$bailout(3, t7, tanTheta, nb, x, na, vertices, uvs, t6, y, t4, segmentsHeight, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      if (x < 0 || x >= t7.length)
        throw $.ioore(x);
      var v1 = t7[x];
      t7 = y + 1;
      if (t7 < 0 || t7 >= t5)
        throw $.ioore(t7);
      var t9 = vertices[t7];
      if (typeof t9 !== 'string' && (typeof t9 !== 'object' || t9 === null || t9.constructor !== Array && !t9.is$JavaScriptIndexingBehavior()))
        return this.CylinderGeometry$6$bailout(4, v1, tanTheta, nb, x, na, t9, vertices, uvs, t6, y, t4, segmentsHeight, t7, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      if (x < 0 || x >= t9.length)
        throw $.ioore(x);
      var v2 = t9[x];
      if (t7 < 0 || t7 >= t5)
        throw $.ioore(t7);
      t9 = vertices[t7];
      if (typeof t9 !== 'string' && (typeof t9 !== 'object' || t9 === null || t9.constructor !== Array && !t9.is$JavaScriptIndexingBehavior()))
        return this.CylinderGeometry$6$bailout(5, v1, tanTheta, nb, x, na, v2, vertices, uvs, t9, t6, y, t4, segmentsHeight, t7, 0, 0, 0, 0, 0, 0, 0, 0);
      if (t6 < 0 || t6 >= t9.length)
        throw $.ioore(t6);
      var v3 = t9[t6];
      t9 = vertices[y];
      if (typeof t9 !== 'string' && (typeof t9 !== 'object' || t9 === null || t9.constructor !== Array && !t9.is$JavaScriptIndexingBehavior()))
        return this.CylinderGeometry$6$bailout(6, v1, tanTheta, nb, x, na, v2, vertices, uvs, t6, y, t4, segmentsHeight, v3, t9, t7, 0, 0, 0, 0, 0, 0, 0);
      if (t6 < 0 || t6 >= t9.length)
        throw $.ioore(t6);
      var v4 = t9[t6];
      var n1 = na.clone$0();
      var n2 = na.clone$0();
      var n3 = nb.clone$0();
      var n4 = nb.clone$0();
      if (y < 0 || y >= uvs.length)
        throw $.ioore(y);
      t9 = uvs[y];
      if (typeof t9 !== 'string' && (typeof t9 !== 'object' || t9 === null || t9.constructor !== Array && !t9.is$JavaScriptIndexingBehavior()))
        return this.CylinderGeometry$6$bailout(7, t9, v1, tanTheta, nb, x, na, v2, vertices, uvs, t6, y, t4, segmentsHeight, v3, v4, n1, n2, n3, n4, t7, 0, 0);
      if (x < 0 || x >= t9.length)
        throw $.ioore(x);
      var uv1 = t9[x].clone$0();
      if (t7 < 0 || t7 >= uvs.length)
        throw $.ioore(t7);
      var t14 = uvs[t7];
      if (typeof t14 !== 'string' && (typeof t14 !== 'object' || t14 === null || t14.constructor !== Array && !t14.is$JavaScriptIndexingBehavior()))
        return this.CylinderGeometry$6$bailout(8, uv1, v1, tanTheta, t14, x, na, nb, v2, vertices, uvs, t6, y, t4, segmentsHeight, v3, v4, n1, n2, n3, n4, t7, 0);
      if (x < 0 || x >= t14.length)
        throw $.ioore(x);
      var uv2 = t14[x].clone$0();
      if (t7 < 0 || t7 >= uvs.length)
        throw $.ioore(t7);
      t7 = uvs[t7];
      if (typeof t7 !== 'string' && (typeof t7 !== 'object' || t7 === null || t7.constructor !== Array && !t7.is$JavaScriptIndexingBehavior()))
        return this.CylinderGeometry$6$bailout(9, uv1, v1, tanTheta, nb, x, uv2, v2, vertices, uvs, t7, t6, y, t4, segmentsHeight, v3, na, v4, n1, n2, n3, n4, 0);
      if (t6 < 0 || t6 >= t7.length)
        throw $.ioore(t6);
      var uv3 = t7[t6].clone$0();
      if (y < 0 || y >= uvs.length)
        throw $.ioore(y);
      var t17 = uvs[y];
      if (typeof t17 !== 'string' && (typeof t17 !== 'object' || t17 === null || t17.constructor !== Array && !t17.is$JavaScriptIndexingBehavior()))
        return this.CylinderGeometry$6$bailout(10, segmentsHeight, uv1, v1, tanTheta, nb, x, uv2, v2, vertices, uvs, na, uv3, y, t4, t17, v3, t6, v4, n1, n2, n3, n4);
      if (t6 < 0 || t6 >= t17.length)
        throw $.ioore(t6);
      var uv4 = t17[t6].clone$0();
      $.add$1(this.faces, $.Face4$(v1, v2, v3, v4, [n1, n2, n3, n4], null, null));
      if (0 >= t4.length)
        throw $.ioore(0);
      $.add$1(t4[0], [uv1, uv2, uv3, uv4]);
    }
  }
  t3 = openEnded !== true;
  if (t3 && t2 > 0) {
    $.add$1(this.vertices, $.Vector3$(0, heightHalf, 0));
    for (x = 0; x < segmentsRadius; ++x) {
      if (0 >= vertices.length)
        throw $.ioore(0);
      v1 = $.index(vertices[0], x);
      if (0 >= vertices.length)
        throw $.ioore(0);
      t2 = vertices[0];
      t5 = x + 1;
      v2 = $.index(t2, t5);
      v3 = $.sub($.get$length(this.vertices), 1);
      n1 = $.Vector3$(0, 1, 0);
      n2 = $.Vector3$(0, 1, 0);
      n3 = $.Vector3$(0, 1, 0);
      if (0 >= uvs.length)
        throw $.ioore(0);
      uv1 = $.index(uvs[0], x).clone$0();
      if (0 >= uvs.length)
        throw $.ioore(0);
      uv2 = $.index(uvs[0], t5).clone$0();
      uv3 = $.UV$(uv2.get$u(), 0);
      $.add$1(this.faces, $.Face3$(v1, v2, v3, [n1, n2, n3], null, null));
      if (0 >= t4.length)
        throw $.ioore(0);
      $.add$1(t4[0], [uv1, uv2, uv3]);
    }
  }
  if (t3 && t1 > 0) {
    $.add$1(this.vertices, $.Vector3$(0, -heightHalf, 0));
    for (x = 0; x < segmentsRadius; ++x) {
      if (y < 0 || y >= vertices.length)
        throw $.ioore(y);
      t1 = vertices[y];
      t2 = x + 1;
      v1 = $.index(t1, t2);
      if (y < 0 || y >= vertices.length)
        throw $.ioore(y);
      v2 = $.index(vertices[y], x);
      v3 = $.sub($.get$length(this.vertices), 1);
      n1 = $.Vector3$(0, -1, 0);
      n2 = $.Vector3$(0, -1, 0);
      n3 = $.Vector3$(0, -1, 0);
      if (y < 0 || y >= uvs.length)
        throw $.ioore(y);
      uv1 = $.index(uvs[y], t2).clone$0();
      if (y < 0 || y >= uvs.length)
        throw $.ioore(y);
      uv2 = $.index(uvs[y], x).clone$0();
      uv3 = $.UV$(uv2.get$u(), 1);
      $.add$1(this.faces, $.Face3$(v1, v2, v3, [n1, n2, n3], null, null));
      if (0 >= t4.length)
        throw $.ioore(0);
      $.add$1(t4[0], [uv1, uv2, uv3]);
    }
  }
  this.computeCentroids$0();
  this.computeFaceNormals$0();
},
 CylinderGeometry$6$bailout: function(state, env0, env1, env2, env3, env4, env5, env6, env7, env8, env9, env10, env11, env12, env13, env14, env15, env16, env17, env18, env19, env20, env21) {
  switch (state) {
    case 1:
      var segmentsRadius = env0;
      var segmentsHeight = env1;
      var openEnded = env2;
      break;
    case 2:
      segmentsRadius = env0;
      segmentsHeight = env1;
      openEnded = env2;
      heightHalf = env3;
      break;
    case 3:
      t6 = env0;
      tanTheta = env1;
      nb = env2;
      x = env3;
      na = env4;
      vertices = env5;
      uvs = env6;
      t5 = env7;
      y = env8;
      t4 = env9;
      segmentsY = env10;
      break;
    case 4:
      v1 = env0;
      tanTheta = env1;
      nb = env2;
      x = env3;
      na = env4;
      t8 = env5;
      vertices = env6;
      uvs = env7;
      t5 = env8;
      y = env9;
      t4 = env10;
      segmentsY = env11;
      t6 = env12;
      break;
    case 5:
      v1 = env0;
      tanTheta = env1;
      nb = env2;
      x = env3;
      na = env4;
      v2 = env5;
      vertices = env6;
      uvs = env7;
      t8 = env8;
      t5 = env9;
      y = env10;
      t4 = env11;
      segmentsY = env12;
      t6 = env13;
      break;
    case 6:
      v1 = env0;
      tanTheta = env1;
      nb = env2;
      x = env3;
      na = env4;
      v2 = env5;
      vertices = env6;
      uvs = env7;
      t5 = env8;
      y = env9;
      t4 = env10;
      segmentsY = env11;
      v3 = env12;
      t8 = env13;
      t6 = env14;
      break;
    case 7:
      t8 = env0;
      v1 = env1;
      tanTheta = env2;
      nb = env3;
      x = env4;
      na = env5;
      v2 = env6;
      vertices = env7;
      uvs = env8;
      t5 = env9;
      y = env10;
      t4 = env11;
      segmentsY = env12;
      v3 = env13;
      v4 = env14;
      n1 = env15;
      n2 = env16;
      n3 = env17;
      n4 = env18;
      t6 = env19;
      break;
    case 8:
      uv1 = env0;
      v1 = env1;
      tanTheta = env2;
      t13 = env3;
      x = env4;
      na = env5;
      nb = env6;
      v2 = env7;
      vertices = env8;
      uvs = env9;
      t5 = env10;
      y = env11;
      t4 = env12;
      segmentsY = env13;
      v3 = env14;
      v4 = env15;
      n1 = env16;
      n2 = env17;
      n3 = env18;
      n4 = env19;
      t6 = env20;
      break;
    case 9:
      uv1 = env0;
      v1 = env1;
      tanTheta = env2;
      nb = env3;
      x = env4;
      uv2 = env5;
      v2 = env6;
      vertices = env7;
      uvs = env8;
      t6 = env9;
      t5 = env10;
      y = env11;
      t4 = env12;
      segmentsY = env13;
      v3 = env14;
      na = env15;
      v4 = env16;
      n1 = env17;
      n2 = env18;
      n3 = env19;
      n4 = env20;
      break;
    case 10:
      segmentsY = env0;
      uv1 = env1;
      v1 = env2;
      tanTheta = env3;
      nb = env4;
      x = env5;
      uv2 = env6;
      v2 = env7;
      vertices = env8;
      uvs = env9;
      na = env10;
      uv3 = env11;
      y = env12;
      t4 = env13;
      t16 = env14;
      v3 = env15;
      t5 = env16;
      v4 = env17;
      n1 = env18;
      n2 = env19;
      n3 = env20;
      n4 = env21;
      break;
  }
  switch (state) {
    case 0:
    case 1:
      state = 0;
      var heightHalf = $.div(this.height, 2);
    case 2:
      state = 0;
      var vertices = [];
      var uvs = [];
      for (var t1 = this.radiusBottom, t2 = this.radiusTop, segmentsY = segmentsHeight, x = null, y = 0; $.leB(y, segmentsY); ++y) {
        var verticesRow = [];
        var uvsRow = [];
        if (typeof segmentsY !== 'number')
          throw $.iae(segmentsY);
        var v = y / segmentsY;
        var t3 = t1 - t2;
        if (typeof t3 !== 'number')
          throw $.iae(t3);
        t3 = v * t3;
        if (typeof t2 !== 'number')
          throw $.iae(t2);
        var radius = t3 + t2;
        for (var t3 = -v, t4 = 1 - v, x = 0; $.leB(x, segmentsRadius); ++x) {
          if (typeof segmentsRadius !== 'number')
            throw $.iae(segmentsRadius);
          var u = x / segmentsRadius;
          var vertex = $.Vector3$(0, 0, 0);
          var t5 = u * 3.141592653589793 * 2;
          vertex.x = radius * $.sin(t5);
          var t6 = this.height;
          if (typeof t6 !== 'number')
            throw $.iae(t6);
          t6 = t3 * t6;
          if (typeof heightHalf !== 'number')
            throw $.iae(heightHalf);
          vertex.y = t6 + heightHalf;
          vertex.z = radius * $.cos(t5);
          $.add$1(this.vertices, vertex);
          verticesRow.push($.sub($.get$length(this.vertices), 1));
          uvsRow.push($.UV$(u, t4));
        }
        vertices.push(verticesRow);
        uvs.push(uvsRow);
      }
      t3 = t1 - t2;
      t4 = this.height;
      if (typeof t4 !== 'number')
        throw $.iae(t4);
      var tanTheta = t3 / t4;
      t3 = !(t2 === 0);
      t4 = this.faceVertexUvs;
      x = 0;
      var nb = null;
      var na = null;
    default:
      L0:
        while (true)
          switch (state) {
            case 0:
              if (!$.ltB(x, segmentsRadius))
                break L0;
              t5 = vertices.length;
              t6 = x + 1;
              var t7 = this.vertices;
              if (t3) {
                if (0 >= t5)
                  throw $.ioore(0);
                na = $.index(t7, $.index(vertices[0], x)).clone$0();
                var t8 = this.vertices;
                if (0 >= vertices.length)
                  throw $.ioore(0);
                nb = $.index(t8, $.index(vertices[0], t6)).clone$0();
              } else {
                if (1 >= t5)
                  throw $.ioore(1);
                na = $.index(t7, $.index(vertices[1], x)).clone$0();
                t8 = this.vertices;
                if (1 >= vertices.length)
                  throw $.ioore(1);
                nb = $.index(t8, $.index(vertices[1], t6)).clone$0();
              }
              t5 = $.sqrt($.add($.mul(na.get$x(), na.get$x()), $.mul(na.get$z(), na.get$z())));
              if (typeof tanTheta !== 'number')
                throw $.iae(tanTheta);
              na.setY$1(t5 * tanTheta).normalize$0();
              nb.setY$1($.sqrt($.add($.mul(nb.get$x(), nb.get$x()), $.mul(nb.get$z(), nb.get$z()))) * tanTheta).normalize$0();
              t5 = x + 1;
              y = 0;
            default:
              L1:
                while (true)
                  switch (state) {
                    case 0:
                      if (!$.ltB(y, segmentsY))
                        break L1;
                      if (y < 0 || y >= vertices.length)
                        throw $.ioore(y);
                      t6 = vertices[y];
                    case 3:
                      state = 0;
                      var v1 = $.index(t6, x);
                      t6 = y + 1;
                      if (t6 < 0 || t6 >= vertices.length)
                        throw $.ioore(t6);
                      t8 = vertices[t6];
                    case 4:
                      state = 0;
                      var v2 = $.index(t8, x);
                      if (t6 < 0 || t6 >= vertices.length)
                        throw $.ioore(t6);
                      t8 = vertices[t6];
                    case 5:
                      state = 0;
                      var v3 = $.index(t8, t5);
                      if (y < 0 || y >= vertices.length)
                        throw $.ioore(y);
                      t8 = vertices[y];
                    case 6:
                      state = 0;
                      var v4 = $.index(t8, t5);
                      var n1 = na.clone$0();
                      var n2 = na.clone$0();
                      var n3 = nb.clone$0();
                      var n4 = nb.clone$0();
                      if (y < 0 || y >= uvs.length)
                        throw $.ioore(y);
                      t8 = uvs[y];
                    case 7:
                      state = 0;
                      var uv1 = $.index(t8, x).clone$0();
                      if (t6 < 0 || t6 >= uvs.length)
                        throw $.ioore(t6);
                      var t13 = uvs[t6];
                    case 8:
                      state = 0;
                      var uv2 = $.index(t13, x).clone$0();
                      if (t6 < 0 || t6 >= uvs.length)
                        throw $.ioore(t6);
                      t6 = uvs[t6];
                    case 9:
                      state = 0;
                      var uv3 = $.index(t6, t5).clone$0();
                      if (y < 0 || y >= uvs.length)
                        throw $.ioore(y);
                      var t16 = uvs[y];
                    case 10:
                      state = 0;
                      var uv4 = $.index(t16, t5).clone$0();
                      $.add$1(this.faces, $.Face4$(v1, v2, v3, v4, [n1, n2, n3, n4], null, null));
                      if (0 < 0 || 0 >= t4.length)
                        throw $.ioore(0);
                      $.add$1(t4[0], [uv1, uv2, uv3, uv4]);
                      ++y;
                  }
              ++x;
          }
      t3 = openEnded !== true;
      if (t3 && t2 > 0) {
        $.add$1(this.vertices, $.Vector3$(0, heightHalf, 0));
        for (x = 0; $.ltB(x, segmentsRadius); ++x) {
          if (0 >= vertices.length)
            throw $.ioore(0);
          v1 = $.index(vertices[0], x);
          if (0 >= vertices.length)
            throw $.ioore(0);
          t2 = vertices[0];
          t5 = x + 1;
          v2 = $.index(t2, t5);
          v3 = $.sub($.get$length(this.vertices), 1);
          n1 = $.Vector3$(0, 1, 0);
          n2 = $.Vector3$(0, 1, 0);
          n3 = $.Vector3$(0, 1, 0);
          if (0 >= uvs.length)
            throw $.ioore(0);
          uv1 = $.index(uvs[0], x).clone$0();
          if (0 >= uvs.length)
            throw $.ioore(0);
          uv2 = $.index(uvs[0], t5).clone$0();
          uv3 = $.UV$(uv2.get$u(), 0);
          $.add$1(this.faces, $.Face3$(v1, v2, v3, [n1, n2, n3], null, null));
          if (0 < 0 || 0 >= t4.length)
            throw $.ioore(0);
          $.add$1(t4[0], [uv1, uv2, uv3]);
        }
      }
      if (t3 && t1 > 0) {
        $.add$1(this.vertices, $.Vector3$(0, $.neg(heightHalf), 0));
        for (x = 0; $.ltB(x, segmentsRadius); ++x) {
          if (y < 0 || y >= vertices.length)
            throw $.ioore(y);
          t1 = vertices[y];
          t2 = x + 1;
          v1 = $.index(t1, t2);
          if (y < 0 || y >= vertices.length)
            throw $.ioore(y);
          v2 = $.index(vertices[y], x);
          v3 = $.sub($.get$length(this.vertices), 1);
          n1 = $.Vector3$(0, -1, 0);
          n2 = $.Vector3$(0, -1, 0);
          n3 = $.Vector3$(0, -1, 0);
          if (y < 0 || y >= uvs.length)
            throw $.ioore(y);
          uv1 = $.index(uvs[y], t2).clone$0();
          if (y < 0 || y >= uvs.length)
            throw $.ioore(y);
          uv2 = $.index(uvs[y], x).clone$0();
          uv3 = $.UV$(uv2.get$u(), 1);
          $.add$1(this.faces, $.Face3$(v1, v2, v3, [n1, n2, n3], null, null));
          if (0 < 0 || 0 >= t4.length)
            throw $.ioore(0);
          $.add$1(t4[0], [uv1, uv2, uv3]);
        }
      }
      this.computeCentroids$0();
      this.computeFaceNormals$0();
  }
}
};

$$.IcosahedronGeometry = {"":
 ["_midpoints", "_p", "id", "name", "vertices", "colors", "materials", "faces", "faceUvs", "faceVertexUvs", "morphTargets", "morphColors", "morphNormals", "skinWeights", "skinIndices", "__tmpVertices", "boundingBox", "boundingSphere", "hasTangents", "_dynamic", "__data"],
 "super": "PolyhedronGeometry"
};

$$.LatheGeometry = {"":
 ["steps", "angle", "id", "name", "vertices", "colors", "materials", "faces", "faceUvs", "faceVertexUvs", "morphTargets", "morphColors", "morphNormals", "skinWeights", "skinIndices", "__tmpVertices", "boundingBox", "boundingSphere", "hasTangents", "_dynamic", "__data"],
 "super": "Geometry",
 LatheGeometry$3: function(points, steps, angle) {
  var newV = $.map(points, new $.anon());
  if (typeof newV !== 'object' || newV === null || (newV.constructor !== Array || !!newV.immutable$list) && !newV.is$JavaScriptIndexingBehavior())
    return this.LatheGeometry$3$bailout(1, points, newV, 0, 0, 0, 0);
  $.addAll(this.vertices, newV);
  var t2 = $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
  var t3 = this.angle;
  var t4 = this.steps;
  var matrix = t2.makeRotationZ$1(t3 / t4);
  var il = t4 + 1;
  for (var i = 0; i < il; ++i)
    for (var j = 0; t1 = newV.length, j < t1; ++j) {
      if (j < 0 || j >= t1)
        throw $.ioore(j);
      t2 = matrix.multiplyVector3$1(newV[j].clone$0());
      if (j < 0 || j >= newV.length)
        throw $.ioore(j);
      newV[j] = t2;
      t2 = this.vertices;
      if (j < 0 || j >= newV.length)
        throw $.ioore(j);
      $.add$1(t2, newV[j]);
    }
  for (t1 = this.faceVertexUvs, i = 0; i < t4; ++i) {
    var kl = $.get$length(points);
    if (typeof kl !== 'number')
      return this.LatheGeometry$3$bailout(2, points, t4, il, t1, kl, i);
    t3 = i + 1;
    var t5 = kl - 1;
    var t6 = i * kl;
    var t7 = $.mod(t3, il) * kl;
    var t8 = 1 - i / t4;
    var t9 = 1 - t3 / t4;
    var k = 0;
    for (; k < t5; ++k) {
      var a = t6 + k;
      var b = t7 + k;
      t2 = k + 1;
      t3 = $.mod(t2, kl);
      var c = t7 + t3;
      var d = t6 + t3;
      $.add$1(this.faces, $.Face4$(a, b, c, d, null, null, null));
      if (0 >= t1.length)
        throw $.ioore(0);
      t3 = t1[0];
      var t10 = k / kl;
      var t11 = $.UV$(t8, t10);
      t10 = $.UV$(t9, t10);
      t2 /= kl;
      $.add$1(t3, [t11, t10, $.UV$(t9, t2), $.UV$(t8, t2)]);
    }
  }
  this.computeCentroids$0();
  this.computeFaceNormals$0();
  this.computeVertexNormals$0();
  var t1;
},
 LatheGeometry$3$bailout: function(state, env0, env1, env2, env3, env4, env5) {
  switch (state) {
    case 1:
      var points = env0;
      newV = env1;
      break;
    case 2:
      points = env0;
      t4 = env1;
      il = env2;
      t1 = env3;
      kl = env4;
      i = env5;
      break;
  }
  switch (state) {
    case 0:
      var newV = $.map(points, new $.anon());
    case 1:
      state = 0;
      $.addAll(this.vertices, newV);
      var t2 = $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
      var t3 = this.angle;
      var t4 = this.steps;
      var matrix = t2.makeRotationZ$1(t3 / t4);
      var il = t4 + 1;
      for (var i = 0; i < il; ++i)
        for (var j = 0; $.ltB(j, $.get$length(newV)); ++j) {
          $.indexSet(newV, j, matrix.multiplyVector3$1($.index(newV, j).clone$0()));
          $.add$1(this.vertices, $.index(newV, j));
        }
      var t1 = this.faceVertexUvs;
      i = 0;
    case 2:
      L0:
        while (true)
          switch (state) {
            case 0:
              if (!(i < t4))
                break L0;
              var kl = $.get$length(points);
            case 2:
              state = 0;
              t3 = i + 1;
              var k = 0;
              for (; $.ltB(k, $.sub(kl, 1)); ++k) {
                if (typeof kl !== 'number')
                  throw $.iae(kl);
                t2 = i * kl;
                var a = t2 + k;
                if (typeof il !== 'number')
                  throw $.iae(il);
                var t5 = $.mod(t3, il) * kl;
                var b = t5 + k;
                var t6 = k + 1;
                var t7 = $.mod(t6, kl);
                var c = t5 + t7;
                var d = t2 + t7;
                $.add$1(this.faces, $.Face4$(a, b, c, d, null, null, null));
                if (0 < 0 || 0 >= t1.length)
                  throw $.ioore(0);
                t7 = t1[0];
                if (typeof t4 !== 'number')
                  throw $.iae(t4);
                t2 = 1 - i / t4;
                t5 = k / kl;
                t2 = $.UV$(t2, t5);
                var t8 = 1 - t3 / t4;
                t5 = $.UV$(t8, t5);
                t6 /= kl;
                $.add$1(t7, [t2, t5, $.UV$(t8, t6), $.UV$(1 - i / t4, t6)]);
              }
              ++i;
          }
      this.computeCentroids$0();
      this.computeFaceNormals$0();
      this.computeVertexNormals$0();
  }
}
};

$$.OctahedronGeometry = {"":
 ["_midpoints", "_p", "id", "name", "vertices", "colors", "materials", "faces", "faceUvs", "faceVertexUvs", "morphTargets", "morphColors", "morphNormals", "skinWeights", "skinIndices", "__tmpVertices", "boundingBox", "boundingSphere", "hasTangents", "_dynamic", "__data"],
 "super": "PolyhedronGeometry"
};

$$.PlaneGeometry = {"":
 ["id", "name", "vertices", "colors", "materials", "faces", "faceUvs", "faceVertexUvs", "morphTargets", "morphColors", "morphNormals", "skinWeights", "skinIndices", "__tmpVertices", "boundingBox", "boundingSphere", "hasTangents", "_dynamic", "__data"],
 "super": "Geometry",
 PlaneGeometry$4: function(width, height, segmentsWidth, segmentsHeight) {
  if (typeof segmentsWidth !== 'number')
    return this.PlaneGeometry$4$bailout(1, width, height, segmentsWidth, segmentsHeight, 0, 0, 0, 0);
  if (typeof segmentsHeight !== 'number')
    return this.PlaneGeometry$4$bailout(1, width, height, segmentsWidth, segmentsHeight, 0, 0, 0, 0);
  var width_half = $.div(width, 2);
  if (typeof width_half !== 'number')
    return this.PlaneGeometry$4$bailout(2, width, height, segmentsWidth, segmentsHeight, width_half, 0, 0, 0);
  var height_half = $.div(height, 2);
  if (typeof height_half !== 'number')
    return this.PlaneGeometry$4$bailout(3, width, height, segmentsWidth, segmentsHeight, width_half, height_half, 0, 0);
  var gridX = segmentsWidth;
  var gridY = segmentsHeight;
  var gridX1 = gridX + 1;
  var gridY1 = gridY + 1;
  var segment_width = $.div(width, gridX);
  if (typeof segment_width !== 'number')
    return this.PlaneGeometry$4$bailout(4, gridY, height, gridX1, gridY1, segment_width, gridX, width_half, height_half);
  var segment_height = $.div(height, gridY);
  if (typeof segment_height !== 'number')
    return this.PlaneGeometry$4$bailout(5, gridY, gridX1, gridY1, segment_width, gridX, segment_height, width_half, height_half);
  var normal = $.Vector3$(0, 0, 1);
  for (var iy = 0, ix = null; iy < gridY1; ++iy)
    for (var t1 = -(iy * segment_height - height_half), ix = 0; ix < gridX1; ++ix) {
      var x = ix * segment_width - width_half;
      $.add$1(this.vertices, $.Vector3$(x, t1, 0));
    }
  for (t1 = this.faceVertexUvs, iy = 0; iy < gridY; ++iy)
    for (t2 = iy + 1, t3 = gridX1 * iy, t4 = gridX1 * t2, t5 = iy / gridY, t2 /= gridY, ix = 0; ix < gridX; ++ix) {
      var a = ix + t3;
      var b = ix + t4;
      var t6 = ix + 1;
      var face = $.Face4$(a, b, t6 + t4, t6 + t3, null, null, null);
      face.normal.copy$1(normal);
      $.addAll(face.vertexNormals, [normal.clone$0(), normal.clone$0(), normal.clone$0(), normal.clone$0()]);
      $.add$1(this.faces, face);
      if (0 >= t1.length)
        throw $.ioore(0);
      var faceVertexUV = t1[0];
      var newUVs = $.ListImplementation_List(null);
      var t7 = ix / gridX;
      var t8 = $.UV$(t7, t5);
      t7 = $.UV$(t7, t2);
      t6 /= gridX;
      $.addAll(newUVs, [t8, t7, $.UV$(t6, t2), $.UV$(t6, t5)]);
      $.add$1(faceVertexUV, newUVs);
    }
  this.computeCentroids$0();
  var t3, t2, t4, t5;
},
 PlaneGeometry$4$bailout: function(state, env0, env1, env2, env3, env4, env5, env6, env7) {
  switch (state) {
    case 1:
      var width = env0;
      var height = env1;
      var segmentsWidth = env2;
      var segmentsHeight = env3;
      break;
    case 2:
      width = env0;
      height = env1;
      segmentsWidth = env2;
      segmentsHeight = env3;
      width_half = env4;
      break;
    case 3:
      width = env0;
      height = env1;
      segmentsWidth = env2;
      segmentsHeight = env3;
      width_half = env4;
      height_half = env5;
      break;
    case 4:
      gridY = env0;
      height = env1;
      gridX1 = env2;
      gridY1 = env3;
      segment_width = env4;
      gridX = env5;
      width_half = env6;
      height_half = env7;
      break;
    case 5:
      gridY = env0;
      gridX1 = env1;
      gridY1 = env2;
      segment_width = env3;
      gridX = env4;
      segment_height = env5;
      width_half = env6;
      height_half = env7;
      break;
  }
  switch (state) {
    case 0:
    case 1:
      state = 0;
      var width_half = $.div(width, 2);
    case 2:
      state = 0;
      var height_half = $.div(height, 2);
    case 3:
      state = 0;
      var gridX = !(segmentsWidth == null) ? segmentsWidth : 1;
      var gridY = !(segmentsHeight == null) ? segmentsHeight : 1;
      var gridX1 = $.add(gridX, 1);
      var gridY1 = $.add(gridY, 1);
      var segment_width = $.div(width, gridX);
    case 4:
      state = 0;
      var segment_height = $.div(height, gridY);
    case 5:
      state = 0;
      var normal = $.Vector3$(0, 0, 1);
      for (var iy = 0, ix = null; $.ltB(iy, gridY1); ++iy)
        for (ix = 0; $.ltB(ix, gridX1); ++ix) {
          if (typeof segment_width !== 'number')
            throw $.iae(segment_width);
          var t1 = ix * segment_width;
          if (typeof width_half !== 'number')
            throw $.iae(width_half);
          var x = t1 - width_half;
          if (typeof segment_height !== 'number')
            throw $.iae(segment_height);
          t1 = iy * segment_height;
          if (typeof height_half !== 'number')
            throw $.iae(height_half);
          var y = t1 - height_half;
          $.add$1(this.vertices, $.Vector3$(x, -y, 0));
        }
      for (t1 = this.faceVertexUvs, iy = 0; $.ltB(iy, gridY); ++iy)
        for (var t2 = iy + 1, ix = 0; $.ltB(ix, gridX); ++ix) {
          var t3 = $.mul(gridX1, iy);
          if (typeof t3 !== 'number')
            throw $.iae(t3);
          var a = ix + t3;
          t3 = $.mul(gridX1, t2);
          if (typeof t3 !== 'number')
            throw $.iae(t3);
          var b = ix + t3;
          t3 = ix + 1;
          var t4 = $.mul(gridX1, t2);
          if (typeof t4 !== 'number')
            throw $.iae(t4);
          var c = t3 + t4;
          t4 = $.mul(gridX1, iy);
          if (typeof t4 !== 'number')
            throw $.iae(t4);
          var face = $.Face4$(a, b, c, t3 + t4, null, null, null);
          face.normal.copy$1(normal);
          $.addAll(face.vertexNormals, [normal.clone$0(), normal.clone$0(), normal.clone$0(), normal.clone$0()]);
          $.add$1(this.faces, face);
          if (0 < 0 || 0 >= t1.length)
            throw $.ioore(0);
          var faceVertexUV = t1[0];
          var newUVs = $.ListImplementation_List(null);
          if (typeof gridX !== 'number')
            throw $.iae(gridX);
          var t5 = ix / gridX;
          if (typeof gridY !== 'number')
            throw $.iae(gridY);
          var t6 = iy / gridY;
          var t7 = $.UV$(t5, t6);
          var t8 = t2 / gridY;
          t5 = $.UV$(t5, t8);
          t3 /= gridX;
          $.addAll(newUVs, [t7, t5, $.UV$(t3, t8), $.UV$(t3, t6)]);
          $.add$1(faceVertexUV, newUVs);
        }
      this.computeCentroids$0();
  }
}
};

$$.PolyhedronGeometry = {"":
 ["_p?"],
 "super": "Geometry",
 _prepare$1: function(vertex) {
  vertex.normalize$0();
  var t1 = this._p;
  t1.push(vertex);
  vertex.set$index(t1.length - 1);
  var u = $.add($.div($.div(this._azimuth$1(vertex), 2), 3.141592653589793), 0.5);
  var v = $.add($.div(this._inclination$1(vertex), 3.141592653589793), 0.5);
  if (typeof v !== 'number')
    throw $.iae(v);
  vertex.set$uv($.UV$(u, 1 - v));
  return vertex;
},
 _make$4: function(v1, v2, v3, detail) {
  if (typeof detail !== 'number')
    return this._make$4$bailout(1, v1, v2, v3, detail);
  if (detail < 1) {
    var face = $.Face3$(v1.get$index(), v2.get$index(), v3.get$index(), [v1.get$vertex().clone$0(), v2.get$vertex().clone$0(), v3.get$vertex().clone$0()], null, null);
    var t1 = face.centroid;
    t1.addSelf$1(v1).addSelf$1(v2).addSelf$1(v3).divideScalar$1(3);
    face.normal = t1.clone$0().normalize$0();
    $.add$1(this.faces, face);
    var azi = this._azimuth$1(t1);
    t1 = this.faceVertexUvs;
    if (0 >= t1.length)
      throw $.ioore(0);
    $.add$1(t1[0], [this._correctUV$3(v1.get$uv(), v1, azi), this._correctUV$3(v2.get$uv(), v2, azi), this._correctUV$3(v3.get$uv(), v3, azi)]);
  } else {
    --detail;
    this._make$4(v1, this._midpoint$2(v1, v2), this._midpoint$2(v1, v3), detail);
    this._make$4(this._midpoint$2(v1, v2), v2, this._midpoint$2(v2, v3), detail);
    this._make$4(this._midpoint$2(v1, v3), this._midpoint$2(v2, v3), v3, detail);
    this._make$4(this._midpoint$2(v1, v2), this._midpoint$2(v2, v3), this._midpoint$2(v1, v3), detail);
  }
},
 _make$4$bailout: function(state, v1, v2, v3, detail) {
  if ($.ltB(detail, 1)) {
    var face = $.Face3$(v1.get$index(), v2.get$index(), v3.get$index(), [v1.get$vertex().clone$0(), v2.get$vertex().clone$0(), v3.get$vertex().clone$0()], null, null);
    var t1 = face.centroid;
    t1.addSelf$1(v1).addSelf$1(v2).addSelf$1(v3).divideScalar$1(3);
    face.normal = t1.clone$0().normalize$0();
    $.add$1(this.faces, face);
    var azi = this._azimuth$1(t1);
    t1 = this.faceVertexUvs;
    if (0 < 0 || 0 >= t1.length)
      throw $.ioore(0);
    $.add$1(t1[0], [this._correctUV$3(v1.get$uv(), v1, azi), this._correctUV$3(v2.get$uv(), v2, azi), this._correctUV$3(v3.get$uv(), v3, azi)]);
  } else {
    detail = $.sub(detail, 1);
    this._make$4(v1, this._midpoint$2(v1, v2), this._midpoint$2(v1, v3), detail);
    this._make$4(this._midpoint$2(v1, v2), v2, this._midpoint$2(v2, v3), detail);
    this._make$4(this._midpoint$2(v1, v3), this._midpoint$2(v2, v3), v3, detail);
    this._make$4(this._midpoint$2(v1, v2), this._midpoint$2(v2, v3), this._midpoint$2(v1, v3), detail);
  }
},
 _midpoint$2: function(v1, v2) {
  var t1 = this._midpoints;
  if ($.ltB(t1.length, $.add(v1.get$index(), 1))) {
    $.set$length(t1, $.add(v1.get$index(), 1));
    var t2 = v1.get$index();
    var t3 = [];
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    t1[t2] = t3;
  }
  if ($.ltB(t1.length, $.add(v2.get$index(), 1))) {
    $.set$length(t1, $.add(v2.get$index(), 1));
    t2 = v2.get$index();
    t3 = [];
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    t1[t2] = t3;
  }
  t2 = v1.get$index();
  if (t2 !== (t2 | 0))
    throw $.iae(t2);
  if (t2 < 0 || t2 >= t1.length)
    throw $.ioore(t2);
  if (t1[t2] == null) {
    t2 = v1.get$index();
    t3 = [];
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    t1[t2] = t3;
  }
  t2 = v1.get$index();
  if (t2 !== (t2 | 0))
    throw $.iae(t2);
  if (t2 < 0 || t2 >= t1.length)
    throw $.ioore(t2);
  if ($.ltB($.get$length(t1[t2]), $.add(v2.get$index(), 1))) {
    t2 = $.add(v2.get$index(), 1);
    t3 = v1.get$index();
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    $.set$length(t1[t3], t2);
  }
  t2 = v2.get$index();
  if (t2 !== (t2 | 0))
    throw $.iae(t2);
  if (t2 < 0 || t2 >= t1.length)
    throw $.ioore(t2);
  if (t1[t2] == null) {
    t2 = v2.get$index();
    t3 = [];
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    t1[t2] = t3;
  }
  t2 = v2.get$index();
  if (t2 !== (t2 | 0))
    throw $.iae(t2);
  if (t2 < 0 || t2 >= t1.length)
    throw $.ioore(t2);
  if ($.ltB($.get$length(t1[t2]), $.add(v1.get$index(), 1))) {
    t2 = $.add(v1.get$index(), 1);
    t3 = v2.get$index();
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    $.set$length(t1[t3], t2);
  }
  t2 = v1.get$index();
  if (t2 !== (t2 | 0))
    throw $.iae(t2);
  if (t2 < 0 || t2 >= t1.length)
    throw $.ioore(t2);
  var mid = $.index(t1[t2], v2.get$index());
  if (mid == null) {
    mid = this._prepare$1($.PolyhedronGeometryVertex$(0, 0, 0).add$2(v1, v2).divideScalar$1(2));
    t2 = v1.get$index();
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    $.indexSet(t1[t2], v2.get$index(), mid);
    t3 = v2.get$index();
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    $.indexSet(t1[t3], v1.get$index(), mid);
  }
  return mid;
},
 _azimuth$1: function(vector) {
  return $.atan2(vector.get$z(), $.neg(vector.get$x()));
},
 _inclination$1: function(vector) {
  return $.atan2($.neg(vector.get$y()), $.sqrt($.add($.mul(vector.get$x(), vector.get$x()), $.mul(vector.get$z(), vector.get$z()))));
},
 _correctUV$3: function(uv, vector, azimuth) {
  if ($.ltB(azimuth, 0) && $.eqB(uv.get$u(), 1))
    uv = $.UV$($.sub(uv.get$u(), 1), uv.get$v());
  return $.eqB(vector.get$x(), 0) && $.eqB(vector.get$z(), 0) ? $.UV$($.add($.div($.div(azimuth, 2), 3.141592653589793), 0.5), uv.get$v()) : uv;
},
 PolyhedronGeometry$4: function(lvertices, lfaces, radius, detail) {
  this._midpoints = [];
  $.forEach(lvertices, new $.anon0(this));
  $.forEach(lfaces, new $.anon1(this, detail));
  $.forEach(this._p, new $.anon2(this));
  this.mergeVertices$0();
  $.forEach(this.vertices, new $.anon3(radius));
  this.computeCentroids$0();
  this.boundingSphere = $.BoundingSphere$(radius);
}
};

$$.PolyhedronGeometryVertex = {"":
 ["vertex?", "index=", "uv="],
 "super": "Object",
 normalize$0: function() {
  return this.vertex.normalize$0();
},
 add$2: function(v1, v2) {
  this.vertex.add$2(v1, v2);
  return this;
},
 divideScalar$1: function(s) {
  this.vertex.divideScalar$1(s);
  return this;
},
 get$x: function() {
  return this.vertex.get$x();
},
 get$y: function() {
  return this.vertex.get$y();
},
 get$z: function() {
  return this.vertex.get$z();
},
 clone$0: function() {
  return $.PolyhedronGeometryVertex$(this.get$x(), this.get$y(), this.get$z());
}
};

$$.SphereGeometry = {"":
 ["radius?", "id", "name", "vertices", "colors", "materials", "faces", "faceUvs", "faceVertexUvs", "morphTargets", "morphColors", "morphNormals", "skinWeights", "skinIndices", "__tmpVertices", "boundingBox", "boundingSphere", "hasTangents", "_dynamic", "__data"],
 "super": "Geometry",
 SphereGeometry$7: function(radius, segmentsWidth, segmentsHeight, phiStart, phiLength, thetaStart, thetaLength) {
  if (typeof phiStart !== 'number')
    return this.SphereGeometry$7$bailout(1, segmentsWidth, segmentsHeight, phiStart, phiLength, thetaStart, thetaLength, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  if (typeof thetaStart !== 'number')
    return this.SphereGeometry$7$bailout(1, segmentsWidth, segmentsHeight, phiStart, phiLength, thetaStart, thetaLength, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var segmentsX = $.max(3, $.floor(segmentsWidth));
  var segmentsY = $.max(2, $.floor(segmentsHeight));
  var vertices = [];
  var uvs = [];
  for (var t1 = this.radius, t2 = -t1, x = null, y = 0; y <= segmentsY; ++y) {
    var verticesRow = [];
    var uvsRow = [];
    for (var v = y / segmentsY, t3 = 1 - v, x = 0; x <= segmentsX; ++x) {
      var u = x / segmentsX;
      var vertex = $.Vector3$(0, 0, 0);
      if (typeof phiLength !== 'number')
        throw $.iae(phiLength);
      var t4 = phiStart + u * phiLength;
      var t5 = t2 * $.cos(t4);
      if (typeof thetaLength !== 'number')
        throw $.iae(thetaLength);
      var t6 = thetaStart + v * thetaLength;
      vertex.x = t5 * $.sin(t6);
      vertex.y = t1 * $.cos(t6);
      vertex.z = t1 * $.sin(t4) * $.sin(t6);
      $.add$1(this.vertices, vertex);
      verticesRow.push($.sub($.get$length(this.vertices), 1));
      uvsRow.push($.UV$(u, t3));
    }
    vertices.push(verticesRow);
    uvs.push(uvsRow);
  }
  for (t2 = this.faceVertexUvs, y = 0; y < segmentsY; ++y)
    for (t3 = y + 1, x = 0; x < segmentsX; ++x) {
      t4 = vertices.length;
      if (y < 0 || y >= t4)
        throw $.ioore(y);
      t5 = vertices[y];
      if (typeof t5 !== 'string' && (typeof t5 !== 'object' || t5 === null || t5.constructor !== Array && !t5.is$JavaScriptIndexingBehavior()))
        return this.SphereGeometry$7$bailout(2, y, t1, vertices, t3, x, uvs, t2, t5, segmentsY, segmentsX, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      var t7 = x + 1;
      if (t7 < 0 || t7 >= t5.length)
        throw $.ioore(t7);
      var v1 = t5[t7];
      t5 = vertices[y];
      if (typeof t5 !== 'string' && (typeof t5 !== 'object' || t5 === null || t5.constructor !== Array && !t5.is$JavaScriptIndexingBehavior()))
        return this.SphereGeometry$7$bailout(3, t5, t1, t3, x, segmentsX, y, vertices, uvs, t2, segmentsY, t7, v1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      if (x < 0 || x >= t5.length)
        throw $.ioore(x);
      var v2 = t5[x];
      if (t3 < 0 || t3 >= t4)
        throw $.ioore(t3);
      t5 = vertices[t3];
      if (typeof t5 !== 'string' && (typeof t5 !== 'object' || t5 === null || t5.constructor !== Array && !t5.is$JavaScriptIndexingBehavior()))
        return this.SphereGeometry$7$bailout(4, v2, t1, t3, x, t5, t3, segmentsX, y, vertices, uvs, t2, segmentsY, t7, v1, 0, 0, 0, 0, 0, 0, 0, 0);
      if (x < 0 || x >= t5.length)
        throw $.ioore(x);
      var v3 = t5[x];
      if (t3 < 0 || t3 >= t4)
        throw $.ioore(t3);
      t5 = vertices[t3];
      if (typeof t5 !== 'string' && (typeof t5 !== 'object' || t5 === null || t5.constructor !== Array && !t5.is$JavaScriptIndexingBehavior()))
        return this.SphereGeometry$7$bailout(5, v2, t1, t3, x, v3, t3, t5, segmentsX, y, vertices, uvs, t2, segmentsY, t7, v1, 0, 0, 0, 0, 0, 0, 0);
      if (t7 < 0 || t7 >= t5.length)
        throw $.ioore(t7);
      var v4 = t5[t7];
      var n1 = $.index(this.vertices, v1).clone$0().normalize$0();
      var n2 = $.index(this.vertices, v2).clone$0().normalize$0();
      var n3 = $.index(this.vertices, v3).clone$0().normalize$0();
      var n4 = $.index(this.vertices, v4).clone$0().normalize$0();
      if (y < 0 || y >= uvs.length)
        throw $.ioore(y);
      t5 = uvs[y];
      if (typeof t5 !== 'string' && (typeof t5 !== 'object' || t5 === null || t5.constructor !== Array && !t5.is$JavaScriptIndexingBehavior()))
        return this.SphereGeometry$7$bailout(6, v2, n4, t1, t3, x, v3, t5, t3, segmentsX, v4, y, vertices, n1, t2, uvs, segmentsY, n2, t7, v1, n3, 0, 0);
      if (t7 < 0 || t7 >= t5.length)
        throw $.ioore(t7);
      var uv1 = t5[t7].clone$0();
      if (y < 0 || y >= uvs.length)
        throw $.ioore(y);
      var t12 = uvs[y];
      if (typeof t12 !== 'string' && (typeof t12 !== 'object' || t12 === null || t12.constructor !== Array && !t12.is$JavaScriptIndexingBehavior()))
        return this.SphereGeometry$7$bailout(7, v2, n4, t1, t3, x, v3, uv1, t3, t12, segmentsX, v4, y, vertices, n1, t2, uvs, segmentsY, n2, t7, v1, n3, 0);
      if (x < 0 || x >= t12.length)
        throw $.ioore(x);
      var uv2 = t12[x].clone$0();
      if (t3 < 0 || t3 >= uvs.length)
        throw $.ioore(t3);
      var t14 = uvs[t3];
      if (typeof t14 !== 'string' && (typeof t14 !== 'object' || t14 === null || t14.constructor !== Array && !t14.is$JavaScriptIndexingBehavior()))
        return this.SphereGeometry$7$bailout(8, v2, n4, t1, t3, x, v3, uv1, t3, segmentsX, v4, uv2, y, vertices, n1, t2, uvs, segmentsY, n2, t14, t7, v1, n3);
      if (x < 0 || x >= t14.length)
        throw $.ioore(x);
      var uv3 = t14[x].clone$0();
      if (t3 < 0 || t3 >= uvs.length)
        throw $.ioore(t3);
      var t16 = uvs[t3];
      if (typeof t16 !== 'string' && (typeof t16 !== 'object' || t16 === null || t16.constructor !== Array && !t16.is$JavaScriptIndexingBehavior()))
        return this.SphereGeometry$7$bailout(9, v2, n4, t1, t3, x, v3, uv1, segmentsX, v4, uv2, y, vertices, n1, t2, uv3, uvs, segmentsY, n2, t16, t7, v1, n3);
      if (t7 < 0 || t7 >= t16.length)
        throw $.ioore(t7);
      var uv4 = t16[t7].clone$0();
      if ($.eqB($.abs($.index(this.vertices, v1).get$y()), t1)) {
        $.add$1(this.faces, $.Face3$(v1, v3, v4, [n1, n3, n4], null, null));
        if (0 >= t2.length)
          throw $.ioore(0);
        $.add$1(t2[0], [uv1, uv3, uv4]);
      } else {
        t4 = $.eqB($.abs($.index(this.vertices, v3).get$y()), t1);
        t5 = this.faces;
        if (t4) {
          $.add$1(t5, $.Face3$(v1, v2, v3, [n1, n2, n3], null, null));
          if (0 >= t2.length)
            throw $.ioore(0);
          $.add$1(t2[0], [uv1, uv2, uv3]);
        } else {
          $.add$1(t5, $.Face4$(v1, v2, v3, v4, [n1, n2, n3, n4], null, null));
          if (0 >= t2.length)
            throw $.ioore(0);
          $.add$1(t2[0], [uv1, uv2, uv3, uv4]);
        }
      }
    }
  this.computeCentroids$0();
  this.computeFaceNormals$0();
  this.boundingSphere = $.BoundingSphere$(t1);
},
 SphereGeometry$7$bailout: function(state, env0, env1, env2, env3, env4, env5, env6, env7, env8, env9, env10, env11, env12, env13, env14, env15, env16, env17, env18, env19, env20, env21) {
  switch (state) {
    case 1:
      var segmentsWidth = env0;
      var segmentsHeight = env1;
      var phiStart = env2;
      var phiLength = env3;
      var thetaStart = env4;
      var thetaLength = env5;
      break;
    case 2:
      y = env0;
      t1 = env1;
      vertices = env2;
      t3 = env3;
      x = env4;
      uvs = env5;
      t2 = env6;
      t4 = env7;
      segmentsY = env8;
      segmentsX = env9;
      break;
    case 3:
      t4 = env0;
      t1 = env1;
      t3 = env2;
      x = env3;
      segmentsX = env4;
      y = env5;
      vertices = env6;
      uvs = env7;
      t2 = env8;
      segmentsY = env9;
      t6 = env10;
      v1 = env11;
      break;
    case 4:
      v2 = env0;
      t1 = env1;
      t3 = env2;
      x = env3;
      t4 = env4;
      t3 = env5;
      segmentsX = env6;
      y = env7;
      vertices = env8;
      uvs = env9;
      t2 = env10;
      segmentsY = env11;
      t6 = env12;
      v1 = env13;
      break;
    case 5:
      v2 = env0;
      t1 = env1;
      t3 = env2;
      x = env3;
      v3 = env4;
      t3 = env5;
      t4 = env6;
      segmentsX = env7;
      y = env8;
      vertices = env9;
      uvs = env10;
      t2 = env11;
      segmentsY = env12;
      t6 = env13;
      v1 = env14;
      break;
    case 6:
      v2 = env0;
      n4 = env1;
      t1 = env2;
      t3 = env3;
      x = env4;
      v3 = env5;
      t4 = env6;
      t3 = env7;
      segmentsX = env8;
      v4 = env9;
      y = env10;
      vertices = env11;
      n1 = env12;
      t2 = env13;
      uvs = env14;
      segmentsY = env15;
      n2 = env16;
      t6 = env17;
      v1 = env18;
      n3 = env19;
      break;
    case 7:
      v2 = env0;
      n4 = env1;
      t1 = env2;
      t3 = env3;
      x = env4;
      v3 = env5;
      uv1 = env6;
      t3 = env7;
      t11 = env8;
      segmentsX = env9;
      v4 = env10;
      y = env11;
      vertices = env12;
      n1 = env13;
      t2 = env14;
      uvs = env15;
      segmentsY = env16;
      n2 = env17;
      t6 = env18;
      v1 = env19;
      n3 = env20;
      break;
    case 8:
      v2 = env0;
      n4 = env1;
      t1 = env2;
      t3 = env3;
      x = env4;
      v3 = env5;
      uv1 = env6;
      t3 = env7;
      segmentsX = env8;
      v4 = env9;
      uv2 = env10;
      y = env11;
      vertices = env12;
      n1 = env13;
      t2 = env14;
      uvs = env15;
      segmentsY = env16;
      n2 = env17;
      t13 = env18;
      t6 = env19;
      v1 = env20;
      n3 = env21;
      break;
    case 9:
      v2 = env0;
      n4 = env1;
      t1 = env2;
      t3 = env3;
      x = env4;
      v3 = env5;
      uv1 = env6;
      segmentsX = env7;
      v4 = env8;
      uv2 = env9;
      y = env10;
      vertices = env11;
      n1 = env12;
      t2 = env13;
      uv3 = env14;
      uvs = env15;
      segmentsY = env16;
      n2 = env17;
      t15 = env18;
      t6 = env19;
      v1 = env20;
      n3 = env21;
      break;
  }
  switch (state) {
    case 0:
    case 1:
      state = 0;
      var segmentsX = $.max(3, $.floor(segmentsWidth));
      var segmentsY = $.max(2, $.floor(segmentsHeight));
      var vertices = [];
      var uvs = [];
      for (var t1 = this.radius, x = null, y = 0; y <= segmentsY; ++y) {
        var verticesRow = [];
        var uvsRow = [];
        for (var v = y / segmentsY, t2 = 1 - v, x = 0; x <= segmentsX; ++x) {
          var u = x / segmentsX;
          var vertex = $.Vector3$(0, 0, 0);
          var t3 = -t1;
          if (typeof phiLength !== 'number')
            throw $.iae(phiLength);
          var t4 = u * phiLength;
          t3 *= $.cos($.add(phiStart, t4));
          if (typeof thetaLength !== 'number')
            throw $.iae(thetaLength);
          var t5 = v * thetaLength;
          vertex.x = t3 * $.sin($.add(thetaStart, t5));
          vertex.y = t1 * $.cos($.add(thetaStart, t5));
          vertex.z = t1 * $.sin($.add(phiStart, t4)) * $.sin($.add(thetaStart, t5));
          $.add$1(this.vertices, vertex);
          verticesRow.push($.sub($.get$length(this.vertices), 1));
          uvsRow.push($.UV$(u, t2));
        }
        vertices.push(verticesRow);
        uvs.push(uvsRow);
      }
      t2 = this.faceVertexUvs;
      y = 0;
    default:
      L0:
        while (true)
          switch (state) {
            case 0:
              if (!(y < segmentsY))
                break L0;
              t3 = y + 1;
              x = 0;
            default:
              L1:
                while (true)
                  switch (state) {
                    case 0:
                      if (!(x < segmentsX))
                        break L1;
                      if (y < 0 || y >= vertices.length)
                        throw $.ioore(y);
                      t4 = vertices[y];
                    case 2:
                      state = 0;
                      var t6 = x + 1;
                      var v1 = $.index(t4, t6);
                      if (y < 0 || y >= vertices.length)
                        throw $.ioore(y);
                      t4 = vertices[y];
                    case 3:
                      state = 0;
                      var v2 = $.index(t4, x);
                      if (t3 < 0 || t3 >= vertices.length)
                        throw $.ioore(t3);
                      t4 = vertices[t3];
                    case 4:
                      state = 0;
                      var v3 = $.index(t4, x);
                      if (t3 < 0 || t3 >= vertices.length)
                        throw $.ioore(t3);
                      t4 = vertices[t3];
                    case 5:
                      state = 0;
                      var v4 = $.index(t4, t6);
                      var n1 = $.index(this.vertices, v1).clone$0().normalize$0();
                      var n2 = $.index(this.vertices, v2).clone$0().normalize$0();
                      var n3 = $.index(this.vertices, v3).clone$0().normalize$0();
                      var n4 = $.index(this.vertices, v4).clone$0().normalize$0();
                      if (y < 0 || y >= uvs.length)
                        throw $.ioore(y);
                      t4 = uvs[y];
                    case 6:
                      state = 0;
                      var uv1 = $.index(t4, t6).clone$0();
                      if (y < 0 || y >= uvs.length)
                        throw $.ioore(y);
                      var t11 = uvs[y];
                    case 7:
                      state = 0;
                      var uv2 = $.index(t11, x).clone$0();
                      if (t3 < 0 || t3 >= uvs.length)
                        throw $.ioore(t3);
                      var t13 = uvs[t3];
                    case 8:
                      state = 0;
                      var uv3 = $.index(t13, x).clone$0();
                      if (t3 < 0 || t3 >= uvs.length)
                        throw $.ioore(t3);
                      var t15 = uvs[t3];
                    case 9:
                      state = 0;
                      var uv4 = $.index(t15, t6).clone$0();
                      if ($.eqB($.abs($.index(this.vertices, v1).get$y()), t1)) {
                        $.add$1(this.faces, $.Face3$(v1, v3, v4, [n1, n3, n4], null, null));
                        if (0 < 0 || 0 >= t2.length)
                          throw $.ioore(0);
                        $.add$1(t2[0], [uv1, uv3, uv4]);
                      } else {
                        t4 = $.eqB($.abs($.index(this.vertices, v3).get$y()), t1);
                        t5 = this.faces;
                        if (t4) {
                          $.add$1(t5, $.Face3$(v1, v2, v3, [n1, n2, n3], null, null));
                          if (0 < 0 || 0 >= t2.length)
                            throw $.ioore(0);
                          $.add$1(t2[0], [uv1, uv2, uv3]);
                        } else {
                          $.add$1(t5, $.Face4$(v1, v2, v3, v4, [n1, n2, n3, n4], null, null));
                          if (0 < 0 || 0 >= t2.length)
                            throw $.ioore(0);
                          $.add$1(t2[0], [uv1, uv2, uv3, uv4]);
                        }
                      }
                      ++x;
                  }
              ++y;
          }
      this.computeCentroids$0();
      this.computeFaceNormals$0();
      this.boundingSphere = $.BoundingSphere$(t1);
  }
}
};

$$.TetrahedronGeometry = {"":
 ["_midpoints", "_p", "id", "name", "vertices", "colors", "materials", "faces", "faceUvs", "faceVertexUvs", "morphTargets", "morphColors", "morphNormals", "skinWeights", "skinIndices", "__tmpVertices", "boundingBox", "boundingSphere", "hasTangents", "_dynamic", "__data"],
 "super": "PolyhedronGeometry"
};

$$.TorusGeometry = {"":
 ["radius?", "tube", "segmentsR", "segmentsT", "arc", "id", "name", "vertices", "colors", "materials", "faces", "faceUvs", "faceVertexUvs", "morphTargets", "morphColors", "morphNormals", "skinWeights", "skinIndices", "__tmpVertices", "boundingBox", "boundingSphere", "hasTangents", "_dynamic", "__data"],
 "super": "Geometry",
 TorusGeometry$5: function(radius, tube, segmentsR, segmentsT, arc) {
  var center = $.Vector3$(0, 0, 0);
  var uvs = [];
  var normals = [];
  for (var t1 = this.segmentsR, t2 = this.segmentsT, t3 = this.arc, t4 = this.radius, t5 = this.tube, j = 0; j <= t1; ++j)
    for (var i = 0; i <= t2; ++i) {
      if (typeof t2 !== 'number')
        throw $.iae(t2);
      var t6 = i / t2;
      if (typeof t3 !== 'number')
        throw $.iae(t3);
      var u = t6 * t3;
      if (typeof t1 !== 'number')
        throw $.iae(t1);
      var v = j / t1 * 3.141592653589793 * 2;
      center.x = t4 * $.cos(u);
      center.y = t4 * $.sin(u);
      var vertex = $.Vector3$(0, 0, 0);
      vertex.x = (t4 + t5 * $.cos(v)) * $.cos(u);
      vertex.y = (t4 + t5 * $.cos(v)) * $.sin(u);
      vertex.z = t5 * $.sin(v);
      $.add$1(this.vertices, vertex);
      uvs.push($.UV$(i / t2, j / t1));
      normals.push(vertex.clone$0().subSelf$1(center).normalize$0());
    }
  for (t3 = this.faceVertexUvs, j = 1; j <= t1; ++j)
    for (t4 = j - 1, i = 1; i <= t2; ++i) {
      var a = (t2 + 1) * j + i - 1;
      var b = (t2 + 1) * t4 + i - 1;
      var c = (t2 + 1) * t4 + i;
      var d = (t2 + 1) * j + i;
      if (a !== (a | 0))
        throw $.iae(a);
      t5 = normals.length;
      if (a < 0 || a >= t5)
        throw $.ioore(a);
      t6 = normals[a];
      if (b !== (b | 0))
        throw $.iae(b);
      if (b < 0 || b >= t5)
        throw $.ioore(b);
      var t7 = normals[b];
      if (c !== (c | 0))
        throw $.iae(c);
      if (c < 0 || c >= t5)
        throw $.ioore(c);
      var t8 = normals[c];
      if (d !== (d | 0))
        throw $.iae(d);
      if (d < 0 || d >= t5)
        throw $.ioore(d);
      var face = $.Face4$(a, b, c, d, [t6, t7, t8, normals[d]], null, null);
      var t9 = face.normal;
      if (a < 0 || a >= normals.length)
        throw $.ioore(a);
      t9.addSelf$1(normals[a]);
      if (b < 0 || b >= normals.length)
        throw $.ioore(b);
      t9.addSelf$1(normals[b]);
      if (c < 0 || c >= normals.length)
        throw $.ioore(c);
      t9.addSelf$1(normals[c]);
      if (d < 0 || d >= normals.length)
        throw $.ioore(d);
      t9.addSelf$1(normals[d]);
      t9.normalize$0();
      $.add$1(this.faces, face);
      if (0 < 0 || 0 >= t3.length)
        throw $.ioore(0);
      t9 = t3[0];
      if (a < 0 || a >= uvs.length)
        throw $.ioore(a);
      var t10 = uvs[a].clone$0();
      if (b < 0 || b >= uvs.length)
        throw $.ioore(b);
      var t11 = uvs[b].clone$0();
      if (c < 0 || c >= uvs.length)
        throw $.ioore(c);
      var t12 = uvs[c].clone$0();
      if (d < 0 || d >= uvs.length)
        throw $.ioore(d);
      $.add$1(t9, [t10, t11, t12, uvs[d].clone$0()]);
    }
  this.computeCentroids$0();
}
};

$$.TorusKnotGeometry = {"":
 ["radius?", "tube", "segmentsR", "segmentsT", "p", "q", "heightScale", "grid", "id", "name", "vertices", "colors", "materials", "faces", "faceUvs", "faceVertexUvs", "morphTargets", "morphColors", "morphNormals", "skinWeights", "skinIndices", "__tmpVertices", "boundingBox", "boundingSphere", "hasTangents", "_dynamic", "__data"],
 "super": "Geometry",
 _vert$3: function(x, y, z) {
  $.add$1(this.vertices, $.Vector3$(x, y, z));
  var t1 = $.get$length(this.vertices);
  if (typeof t1 !== 'number')
    return this._vert$3$bailout(1, t1);
  return t1 - 1;
},
 _vert$3$bailout: function(state, t1) {
  return $.sub(t1, 1);
},
 getPos$6: function(u, v, in_q, in_p, radius, heightScale) {
  if (typeof in_q !== 'number')
    return this.getPos$6$bailout(1, u, v, in_q, in_p, radius, heightScale);
  if (typeof radius !== 'number')
    return this.getPos$6$bailout(1, u, v, in_q, in_p, radius, heightScale);
  if (typeof heightScale !== 'number')
    return this.getPos$6$bailout(1, u, v, in_q, in_p, radius, heightScale);
  var cu = $.cos(u);
  $.cos(v);
  var su = $.sin(u);
  var quOverP = in_q / in_p * u;
  var t1 = radius * (2 + $.cos(quOverP));
  return $.Vector3$(t1 * 0.5 * cu, t1 * su * 0.5, heightScale * radius * $.sin(quOverP) * 0.5);
},
 getPos$6$bailout: function(state, u, v, in_q, in_p, radius, heightScale) {
  var cu = $.cos(u);
  $.cos(v);
  var su = $.sin(u);
  var quOverP = $.mul($.div(in_q, in_p), u);
  var t1 = 2 + $.cos(quOverP);
  return $.Vector3$($.mul($.mul($.mul(radius, t1), 0.5), cu), $.mul($.mul($.mul(radius, t1), su), 0.5), $.mul($.mul($.mul(heightScale, radius), $.sin(quOverP)), 0.5));
},
 TorusKnotGeometry$7: function(radius, tube, segmentsR, segmentsT, p, q, heightScale) {
  var t1 = this.segmentsR;
  this.grid = $.ListImplementation_List(t1);
  var tang = $.Vector3$(0, 0, 0);
  var n = $.Vector3$(0, 0, 0);
  var bitan = $.Vector3$(0, 0, 0);
  for (var t2 = this.grid, t3 = this.segmentsT, t4 = this.p, t5 = this.q, t6 = this.radius, t7 = this.heightScale, t8 = this.tube, i = 0; i < t1; ++i) {
    var t9 = $.ListImplementation_List(t3);
    if (i < 0 || i >= t2.length)
      throw $.ioore(i);
    t2[i] = t9;
    for (var j = 0; j < t3; ++j) {
      if (typeof t1 !== 'number')
        throw $.iae(t1);
      t9 = i / t1 * 2;
      if (typeof t4 !== 'number')
        throw $.iae(t4);
      var u = t9 * t4 * 3.141592653589793;
      if (typeof t3 !== 'number')
        throw $.iae(t3);
      var v = j / t3 * 2 * 3.141592653589793;
      var p1 = this.getPos$6(u, v, t5, t4, t6, t7);
      var p2 = this.getPos$6(u + 0.01, v, t5, t4, t6, t7);
      tang.sub$2(p2, p1);
      n.add$2(p2, p1);
      bitan.cross$2(tang, n);
      n.cross$2(bitan, tang);
      bitan.normalize$0();
      n.normalize$0();
      var cx = -t8 * $.cos(v);
      var cy = t8 * $.sin(v);
      var t10 = p1.get$x();
      var t11 = n.x;
      if (typeof t11 !== 'number')
        throw $.iae(t11);
      t11 = cx * t11;
      var t12 = bitan.x;
      if (typeof t12 !== 'number')
        throw $.iae(t12);
      p1.set$x($.add(t10, t11 + cy * t12));
      var t13 = p1.get$y();
      var t14 = n.y;
      if (typeof t14 !== 'number')
        throw $.iae(t14);
      t14 = cx * t14;
      var t15 = bitan.y;
      if (typeof t15 !== 'number')
        throw $.iae(t15);
      p1.set$y($.add(t13, t14 + cy * t15));
      var t16 = p1.get$z();
      var t17 = n.z;
      if (typeof t17 !== 'number')
        throw $.iae(t17);
      t17 = cx * t17;
      var t18 = bitan.z;
      if (typeof t18 !== 'number')
        throw $.iae(t18);
      p1.set$z($.add(t16, t17 + cy * t18));
      if (i < 0 || i >= t2.length)
        throw $.ioore(i);
      $.indexSet(t2[i], j, this._vert$3(p1.get$x(), p1.get$y(), p1.get$z()));
    }
  }
  for (t4 = this.faceVertexUvs, i = 0; i < t1; ++i)
    for (t5 = i + 1, j = 0; j < t3; ++j) {
      if (typeof t1 !== 'number')
        throw $.iae(t1);
      var ip = $.mod(t5, t1);
      t6 = j + 1;
      if (typeof t3 !== 'number')
        throw $.iae(t3);
      var jp = $.mod(t6, t3);
      if (i < 0 || i >= t2.length)
        throw $.ioore(i);
      var a = $.index(t2[i], j);
      if (ip !== (ip | 0))
        throw $.iae(ip);
      if (ip < 0 || ip >= t2.length)
        throw $.ioore(ip);
      var b = $.index(t2[ip], j);
      if (ip < 0 || ip >= t2.length)
        throw $.ioore(ip);
      var c = $.index(t2[ip], jp);
      if (i < 0 || i >= t2.length)
        throw $.ioore(i);
      var d = $.index(t2[i], jp);
      t7 = i / t1;
      t8 = j / t3;
      var uva = $.UV$(t7, t8);
      t9 = t5 / t1;
      var uvb = $.UV$(t9, t8);
      t6 /= t3;
      var uvc = $.UV$(t9, t6);
      var uvd = $.UV$(t7, t6);
      $.add$1(this.faces, $.Face4$(a, b, c, d, null, null, null));
      if (0 < 0 || 0 >= t4.length)
        throw $.ioore(0);
      $.add$1(t4[0], [uva, uvb, uvc, uvd]);
    }
  this.computeCentroids$0();
  this.computeFaceNormals$0();
  this.computeVertexNormals$0();
}
};

$$.ArrowHelper = {"":
 ["line", "cone", "id", "name", "properties", "parent", "children", "up", "position", "rotation", "scale", "eulerOrder", "_dynamic", "doubleSided", "flipSided", "rotationAutoUpdate", "renderDepth", "matrix", "matrixWorld", "matrixRotationWorld", "matrixAutoUpdate", "matrixWorldNeedsUpdate", "quaternion", "useQuaternion", "boundRadius", "boundRadiusScale", "visible", "castShadow", "receiveShadow", "frustumCulled", "_vector", "__data"],
 "super": "Object3D",
 setDirection$1: function(dir) {
  var axis = $.Vector3$(0, 1, 0).crossSelf$1(dir);
  var radians = $.acos($.Vector3$(0, 1, 0).dot$1(dir.clone$0().normalize$0()));
  this.matrix = $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1).makeRotationAxis$2(axis.normalize$0(), radians);
  this.rotation.setEulerFromRotationMatrix$2(this.matrix, this.eulerOrder);
},
 setLength$1: function(length$) {
  return this.scale.setValues$3(length$, length$, length$);
},
 ArrowHelper$4: function(dir, origin, length$, hex) {
  var lineGeometry = $.Geometry$();
  $.add$1(lineGeometry.vertices, $.Vector3$(0, 0, 0));
  $.add$1(lineGeometry.vertices, $.Vector3$(0, 1, 0));
  this.line = $.Line$(lineGeometry, $.LineBasicMaterial$(hex, 1, 'round', 'round', 0, true, '', 0, 1, false, 1, 204, 205, 100, true, true, false, 0, 0, 0, false, true), 0);
  this.add$1(this.line);
  this.cone = $.Mesh$($.CylinderGeometry$(0, 0.05, 0.25, 5, 1, false), $.MeshBasicMaterial$(null, hex, null, null, null, 0, 1, 0.98, 2, 0, true, false, 1, 'round', 'round', false, false, '', 0, 1, false, 1, 204, 205, 100, true, true, false, 0, 0, 0, false, true));
  var t1 = this.cone;
  t1.get$position().setValues$3(0, 1, 0);
  this.add$1(t1);
  if (!(origin == null))
    this.position = origin;
  this.setDirection$1(dir);
  this.setLength$1(length$);
}
};

$$.AxisHelper = {"":
 ["id", "name", "properties", "parent", "children", "up", "position", "rotation", "scale", "eulerOrder", "_dynamic", "doubleSided", "flipSided", "rotationAutoUpdate", "renderDepth", "matrix", "matrixWorld", "matrixRotationWorld", "matrixAutoUpdate", "matrixWorldNeedsUpdate", "quaternion", "useQuaternion", "boundRadius", "boundRadiusScale", "visible", "castShadow", "receiveShadow", "frustumCulled", "_vector", "__data"],
 "super": "Object3D",
 AxisHelper$0: function() {
  var lineGeometry = $.Geometry$();
  $.add$1(lineGeometry.vertices, $.Vector3$(0, 0, 0));
  $.add$1(lineGeometry.vertices, $.Vector3$(0, 100, 0));
  var coneGeometry = $.CylinderGeometry$(0, 5, 25, 5, 1, false);
  var line = $.Line$(lineGeometry, $.LineBasicMaterial$(16711680, 1, 'round', 'round', 0, true, '', 0, 1, false, 1, 204, 205, 100, true, true, false, 0, 0, 0, false, true), 0);
  line.rotation.set$z(-1.5707963267948966);
  this.add$1(line);
  var cone = $.Mesh$(coneGeometry, $.MeshBasicMaterial$(null, 16711680, null, null, null, 0, 1, 0.98, 2, 0, true, false, 1, 'round', 'round', false, false, '', 0, 1, false, 1, 204, 205, 100, true, true, false, 0, 0, 0, false, true));
  cone.position.set$x(100);
  cone.rotation.set$z(-1.5707963267948966);
  this.add$1(cone);
  this.add$1($.Line$(lineGeometry, $.LineBasicMaterial$(65280, 1, 'round', 'round', 0, true, '', 0, 1, false, 1, 204, 205, 100, true, true, false, 0, 0, 0, false, true), 0));
  cone = $.Mesh$(coneGeometry, $.MeshBasicMaterial$(null, 65280, null, null, null, 0, 1, 0.98, 2, 0, true, false, 1, 'round', 'round', false, false, '', 0, 1, false, 1, 204, 205, 100, true, true, false, 0, 0, 0, false, true));
  cone.position.set$y(100);
  this.add$1(cone);
  line = $.Line$(lineGeometry, $.LineBasicMaterial$(255, 1, 'round', 'round', 0, true, '', 0, 1, false, 1, 204, 205, 100, true, true, false, 0, 0, 0, false, true), 0);
  line.rotation.set$x(1.5707963267948966);
  this.add$1(line);
  cone = $.Mesh$(coneGeometry, $.MeshBasicMaterial$(null, 255, null, null, null, 0, 1, 0.98, 2, 0, true, false, 1, 'round', 'round', false, false, '', 0, 1, false, 1, 204, 205, 100, true, true, false, 0, 0, 0, false, true));
  cone.position.set$z(100);
  cone.rotation.set$x(1.5707963267948966);
  this.add$1(cone);
}
};

$$.AmbientLight = {"":
 ["color", "id", "name", "properties", "parent", "children", "up", "position", "rotation", "scale", "eulerOrder", "_dynamic", "doubleSided", "flipSided", "rotationAutoUpdate", "renderDepth", "matrix", "matrixWorld", "matrixRotationWorld", "matrixAutoUpdate", "matrixWorldNeedsUpdate", "quaternion", "useQuaternion", "boundRadius", "boundRadiusScale", "visible", "castShadow", "receiveShadow", "frustumCulled", "_vector", "__data"],
 "super": "Light",
 is$AmbientLight: true
};

$$.DirectionalLight = {"":
 ["_position", "target", "intensity?", "distance?", "_castShadow", "onlyShadow?", "_shadowCameraLeft", "_shadowCameraRight", "_shadowCameraTop", "_shadowCameraBottom", "_shadowCameraVisible", "_shadowBias", "_shadowDarkness", "_shadowMapWidth", "_shadowMapHeight", "_shadowMap", "_shadowMapSize", "_shadowCamera", "_shadowMatrix", "color", "id", "name", "properties", "parent", "children", "up", "position", "rotation", "scale", "eulerOrder", "_dynamic", "doubleSided", "flipSided", "rotationAutoUpdate", "renderDepth", "matrix", "matrixWorld", "matrixRotationWorld", "matrixAutoUpdate", "matrixWorldNeedsUpdate", "quaternion", "useQuaternion", "boundRadius", "boundRadiusScale", "visible", "castShadow", "receiveShadow", "frustumCulled", "_vector", "__data"],
 "super": "Light",
 DirectionalLight$3: function(hex, intensity, distance) {
  this._position = $.Vector3$(0, 1, 0);
  this.target = $.Object3D$();
  this._castShadow = false;
  this.onlyShadow = false;
  this._shadowCameraLeft = -500;
  this._shadowCameraRight = 500;
  this._shadowCameraTop = 500;
  this._shadowCameraBottom = -500;
  this._shadowCameraVisible = false;
  this._shadowBias = 0;
  this._shadowDarkness = 0.5;
  this._shadowMapWidth = 512;
  this._shadowMapHeight = 512;
  this._shadowMap = null;
  this._shadowMapSize = null;
  this._shadowCamera = null;
  this._shadowMatrix = null;
},
 is$DirectionalLight: true
};

$$.Light = {"":
 ["color?"],
 "super": "Object3D",
 is$Light: true
};

$$.Material = {"":
 ["name?", "id=", "side?", "opacity?", "blending?", "blendSrc?", "blendDst?", "blendEquation?", "alphaTest?", "polygonOffset?", "polygonOffsetFactor?", "polygonOffsetUnits?", "transparent=", "depthTest?", "depthWrite?", "visible?", "needsUpdate="],
 "super": "Object",
 blendEquation$1: function(arg0) { return this.blendEquation.call$1(arg0); },
 polygonOffset$2: function(arg0, arg1) { return this.polygonOffset.call$2(arg0, arg1); },
 get$_data: function() {
  if (this.__data == null)
    this.__data = $.makeLiteralMap([]);
  return this.__data;
},
 operator$index$1: function(key) {
  return $.index(this.get$_data(), key);
},
 operator$indexSet$2: function(key, value) {
  $.indexSet(this.get$_data(), key, value);
  return value;
}
};

$$.MeshBasicMaterial = {"":
 ["color?", "map?", "lightMap?", "specularMap?", "envMap?", "combine?", "reflectivity?", "refractionRatio?", "shading?", "wireframe?", "wireframeLinewidth?", "wireframeLinecap", "wireframeLinejoin", "skinning?", "morphTargets?", "vertexColors?", "fog?", "name", "id", "side", "opacity", "blending", "blendSrc", "blendDst", "blendEquation", "alphaTest", "polygonOffset", "polygonOffsetFactor", "polygonOffsetUnits", "transparent", "depthTest", "depthWrite", "overdraw", "visible", "needsUpdate", "__data"],
 "super": "Material",
 map$1: function(arg0) { return this.map.call$1(arg0); },
 is$MeshBasicMaterial: true
};

$$.LineBasicMaterial = {"":
 ["color?", "linewidth?", "linecap", "linejoin", "fog?", "vertexColors?", "name", "id", "side", "opacity", "blending", "blendSrc", "blendDst", "blendEquation", "alphaTest", "polygonOffset", "polygonOffsetFactor", "polygonOffsetUnits", "transparent", "depthTest", "depthWrite", "overdraw", "visible", "needsUpdate", "__data"],
 "super": "Material",
 is$LineBasicMaterial: true
};

$$.MeshLambertMaterial = {"":
 ["_parameters", "color?", "ambient?", "emissive?", "wrapAround?", "wrapRGB?", "map?", "lightMap?", "specularMap?", "envMap?", "combine?", "reflectivity?", "refractionRatio?", "shading?", "wireframe?", "wireframeLinewidth?", "wireframeLinecap", "wireframeLinejoin", "skinning?", "morphTargets?", "morphNormals?", "vertexColors?", "fog?", "name", "id", "side", "opacity", "blending", "blendSrc", "blendDst", "blendEquation", "alphaTest", "polygonOffset", "polygonOffsetFactor", "polygonOffsetUnits", "transparent", "depthTest", "depthWrite", "overdraw", "visible", "needsUpdate", "__data"],
 "super": "Material",
 map$1: function(arg0) { return this.map.call$1(arg0); },
 is$MeshLambertMaterial: true
};

$$.Mesh = {"":
 ["geometry?", "material?", "_morphTargetBase", "morphTargetForcedOrder?", "morphTargetInfluences?", "_morphTargetDictionary", "id", "name", "properties", "parent", "children", "up", "position", "rotation", "scale", "eulerOrder", "_dynamic", "doubleSided", "flipSided", "rotationAutoUpdate", "renderDepth", "matrix", "matrixWorld", "matrixRotationWorld", "matrixAutoUpdate", "matrixWorldNeedsUpdate", "quaternion", "useQuaternion", "boundRadius", "boundRadiusScale", "visible", "castShadow", "receiveShadow", "frustumCulled", "_vector", "__data"],
 "super": "Object3D",
 Mesh$2: function(geometry, material) {
  if (this.material == null)
    this.material = $.MeshBasicMaterial$(null, $.Random_Random(null).nextInt$1(16777215), null, null, null, 0, 1, 0.98, 2, 0, true, true, 1, 'round', 'round', false, false, '', 0, 1, false, 1, 204, 205, 100, true, true, false, 0, 0, 0, false, true);
  var t1 = this.geometry;
  if (!(t1 == null)) {
    if (t1.get$boundingSphere() == null)
      t1.computeBoundingSphere$0();
    this.boundRadius = t1.get$boundingSphere().get$radius();
    if (!$.eqB($.get$length(t1.get$morphTargets()), 0)) {
      this._morphTargetBase = -1;
      this.morphTargetForcedOrder = [];
      this.morphTargetInfluences = [];
      this._morphTargetDictionary = $.makeLiteralMap([]);
      var t2 = this.morphTargetInfluences;
      var t3 = this._morphTargetDictionary;
      if (typeof t3 !== 'object' || t3 === null || (t3.constructor !== Array || !!t3.immutable$list) && !t3.is$JavaScriptIndexingBehavior())
        return this.Mesh$2$bailout(1, t1, t2, t3);
      var m = 0;
      for (; $.ltB(m, $.get$length(t1.get$morphTargets())); ++m) {
        $.add$1(t2, 0);
        var t4 = $.index(t1.get$morphTargets(), m).get$name();
        if (t4 !== (t4 | 0))
          throw $.iae(t4);
        if (t4 < 0 || t4 >= t3.length)
          throw $.ioore(t4);
        t3[t4] = m;
      }
    }
  }
},
 Mesh$2$bailout: function(state, env0, env1, env2) {
  switch (state) {
    case 1:
      t1 = env0;
      t2 = env1;
      t3 = env2;
      break;
  }
  switch (state) {
    case 0:
      if (this.material == null)
        this.material = $.MeshBasicMaterial$(null, $.Random_Random(null).nextInt$1(16777215), null, null, null, 0, 1, 0.98, 2, 0, true, true, 1, 'round', 'round', false, false, '', 0, 1, false, 1, 204, 205, 100, true, true, false, 0, 0, 0, false, true);
      var t1 = this.geometry;
    case 1:
      if (state === 1 || state === 0 && !(t1 == null))
        switch (state) {
          case 0:
            if (t1.get$boundingSphere() == null)
              t1.computeBoundingSphere$0();
            this.boundRadius = t1.get$boundingSphere().get$radius();
          case 1:
            if (state === 1 || state === 0 && !$.eqB($.get$length(t1.get$morphTargets()), 0))
              switch (state) {
                case 0:
                  this._morphTargetBase = -1;
                  this.morphTargetForcedOrder = [];
                  this.morphTargetInfluences = [];
                  this._morphTargetDictionary = $.makeLiteralMap([]);
                  var t2 = this.morphTargetInfluences;
                  var t3 = this._morphTargetDictionary;
                case 1:
                  state = 0;
                  var m = 0;
                  for (; $.ltB(m, $.get$length(t1.get$morphTargets())); ++m) {
                    $.add$1(t2, 0);
                    $.indexSet(t3, $.index(t1.get$morphTargets(), m).get$name(), m);
                  }
              }
        }
  }
},
 is$Mesh: true
};

$$.Line = {"":
 ["geometry?", "material?", "type?", "id", "name", "properties", "parent", "children", "up", "position", "rotation", "scale", "eulerOrder", "_dynamic", "doubleSided", "flipSided", "rotationAutoUpdate", "renderDepth", "matrix", "matrixWorld", "matrixRotationWorld", "matrixAutoUpdate", "matrixWorldNeedsUpdate", "quaternion", "useQuaternion", "boundRadius", "boundRadiusScale", "visible", "castShadow", "receiveShadow", "frustumCulled", "_vector", "__data"],
 "super": "Object3D",
 Line$3: function(geometry, material, type) {
  if (this.material === null)
    this.material = $.LineBasicMaterial$($.Random_Random(null).nextInt$1(16777215), 1, 'round', 'round', 0, true, '', 0, 1, false, 1, 204, 205, 100, true, true, false, 0, 0, 0, false, true);
  var t1 = this.geometry;
  if (!(t1 === null))
    if (t1.get$boundingSphere() == null)
      t1.computeBoundingSphere$0();
},
 is$Line: true
};

$$.WebGLRenderer = {"":
 ["canvas", "_gl?", "precision", "clearColor", "clearAlpha", "maxLights", "alpha", "premultipliedAlpha", "antialias", "stencil", "preserveDrawingBuffer", "autoClear", "autoClearColor", "autoClearDepth", "autoClearStencil", "sortObjects!", "autoUpdateObjects", "autoUpdateScene", "gammaInput", "gammaOutput", "physicallyBasedShading", "shadowMapEnabled", "shadowMapAutoUpdate", "shadowMapSoft", "shadowMapCullFrontFaces", "shadowMapDebug", "shadowMapCascade", "maxMorphTargets", "maxMorphNormals", "autoScaleCubemaps", "renderPluginsPre", "renderPluginsPost", "info", "_programs", "_programs_counter", "_currentProgram", "_currentFramebuffer", "_currentMaterialId", "_currentGeometryGroupHash", "_currentCamera", "_geometryGroupCounter=", "_oldDoubleSided", "_oldFlipSided", "_oldBlending", "_oldBlendEquation", "_oldBlendSrc", "_oldBlendDst", "_oldDepthTest", "_oldDepthWrite", "_oldPolygonOffset", "_oldPolygonOffsetFactor", "_oldPolygonOffsetUnits", "_oldLineWidth", "_viewportX", "_viewportY", "_viewportWidth", "_viewportHeight", "_currentWidth", "_currentHeight", "_frustum", "_projScreenMatrix", "_projScreenMatrixPS", "_vector3", "_direction", "_lights", "_lightsNeedUpdate", "_glExtensionTextureFloat", "_glExtensionStandardDerivatives", "_glExtensionTextureFilterAnisotropic", "maxAnisotropy", "supportsVertexTextures", "supportsBoneTextures", "shadowMapPlugin", "maxVertexTextures", "maxTextureSize", "maxCubemapSize"],
 "super": "Object",
 clearColor$4: function(arg0, arg1, arg2, arg3) { return this.clearColor.call$4(arg0, arg1, arg2, arg3); },
 get$domElement: function() {
  return this.canvas;
},
 setSize$2: function(width, height) {
  var t1 = this.canvas;
  t1.set$width(width);
  t1.set$height(height);
  this.setViewport$4(0, 0, t1.get$width(), t1.get$height());
},
 setViewport$4: function(x, y, width, height) {
  this._viewportX = x;
  this._viewportY = y;
  this._viewportWidth = !$.eqB(width, -1) ? width : this.canvas.get$width();
  this._viewportHeight = !$.eqB(height, -1) ? height : this.canvas.get$height();
  this._gl.viewport$4(this._viewportX, this._viewportY, this._viewportWidth, this._viewportHeight);
},
 clear$3: function(color, depth, stencil) {
  var bits = color === true ? 16384 : 0;
  if (depth === true)
    bits = (bits | 256) >>> 0;
  if (stencil === true)
    bits = (bits | 1024) >>> 0;
  this._gl.clear$1(bits);
},
 clear$0: function() {
  return this.clear$3(true,true,true)
},
 clear$1: function(color) {
  return this.clear$3(color,true,true)
},
 deallocateMaterial$1: function(material) {
  var program = material.get$program();
  if (program == null)
    return;
  material.set$program(null);
  program.set$usedTimes($.sub(program.get$usedTimes(), 1));
  if ($.eqB(program.get$usedTimes(), 0)) {
    var t1 = this._programs;
    $.removeRange(t1, $.indexOf$1(t1, program), 1);
    this._gl.deleteProgram$1(program.get$glProgram());
    t1 = this.info.get$memory();
    t1.set$programs($.sub(t1.get$programs(), 1));
  }
},
 createParticleBuffers$1: function(geometry) {
  geometry.set$__webglVertexBuffer(this._gl.createBuffer$0());
  geometry.set$__webglColorBuffer(this._gl.createBuffer$0());
  var t1 = this.info.get$memory();
  t1.set$geometries($.add(t1.get$geometries(), 1));
},
 createLineBuffers$1: function(geometry) {
  geometry.set$__webglVertexBuffer(this._gl.createBuffer$0());
  geometry.set$__webglColorBuffer(this._gl.createBuffer$0());
  var t1 = this.info.get$memory();
  t1.set$geometries($.add(t1.get$geometries(), 1));
},
 createRibbonBuffers$1: function(geometry) {
  geometry.set$__webglVertexBuffer(this._gl.createBuffer$0());
  geometry.set$__webglColorBuffer(this._gl.createBuffer$0());
  var t1 = this.info.get$memory();
  t1.set$geometries($.add(t1.get$geometries(), 1));
},
 createMeshBuffers$1: function(geometryGroup) {
  geometryGroup.set$__webglVertexBuffer(this._gl.createBuffer$0());
  geometryGroup.set$__webglNormalBuffer(this._gl.createBuffer$0());
  geometryGroup.set$__webglTangentBuffer(this._gl.createBuffer$0());
  geometryGroup.set$__webglColorBuffer(this._gl.createBuffer$0());
  geometryGroup.set$__webglUVBuffer(this._gl.createBuffer$0());
  geometryGroup.set$__webglUV2Buffer(this._gl.createBuffer$0());
  geometryGroup.set$__webglSkinVertexABuffer(this._gl.createBuffer$0());
  geometryGroup.set$__webglSkinVertexBBuffer(this._gl.createBuffer$0());
  geometryGroup.set$__webglSkinIndicesBuffer(this._gl.createBuffer$0());
  geometryGroup.set$__webglSkinWeightsBuffer(this._gl.createBuffer$0());
  geometryGroup.set$__webglFaceBuffer(this._gl.createBuffer$0());
  geometryGroup.set$__webglLineBuffer(this._gl.createBuffer$0());
  if (!(geometryGroup.get$numMorphTargets() == null)) {
    geometryGroup.set$__webglMorphTargetsBuffers([]);
    var ml = geometryGroup.get$numMorphTargets();
    if (typeof ml !== 'number')
      return this.createMeshBuffers$1$bailout(1, geometryGroup, ml);
    for (var m = 0; m < ml; ++m)
      $.add$1(geometryGroup.get$__webglMorphTargetsBuffers(), this._gl.createBuffer$0());
  }
  if (!(geometryGroup.get$numMorphNormals() == null)) {
    geometryGroup.set$__webglMorphNormalsBuffers([]);
    ml = geometryGroup.get$numMorphNormals();
    if (typeof ml !== 'number')
      return this.createMeshBuffers$1$bailout(2, geometryGroup, ml);
    for (m = 0; m < ml; ++m)
      $.add$1(geometryGroup.get$__webglMorphNormalsBuffers(), this._gl.createBuffer$0());
  }
  var t1 = this.info.memory;
  t1.set$geometries($.add(t1.get$geometries(), 1));
},
 createMeshBuffers$1$bailout: function(state, env0, env1) {
  switch (state) {
    case 1:
      var geometryGroup = env0;
      ml = env1;
      break;
    case 2:
      geometryGroup = env0;
      ml = env1;
      break;
  }
  switch (state) {
    case 0:
      geometryGroup.set$__webglVertexBuffer(this._gl.createBuffer$0());
      geometryGroup.set$__webglNormalBuffer(this._gl.createBuffer$0());
      geometryGroup.set$__webglTangentBuffer(this._gl.createBuffer$0());
      geometryGroup.set$__webglColorBuffer(this._gl.createBuffer$0());
      geometryGroup.set$__webglUVBuffer(this._gl.createBuffer$0());
      geometryGroup.set$__webglUV2Buffer(this._gl.createBuffer$0());
      geometryGroup.set$__webglSkinVertexABuffer(this._gl.createBuffer$0());
      geometryGroup.set$__webglSkinVertexBBuffer(this._gl.createBuffer$0());
      geometryGroup.set$__webglSkinIndicesBuffer(this._gl.createBuffer$0());
      geometryGroup.set$__webglSkinWeightsBuffer(this._gl.createBuffer$0());
      geometryGroup.set$__webglFaceBuffer(this._gl.createBuffer$0());
      geometryGroup.set$__webglLineBuffer(this._gl.createBuffer$0());
    case 1:
      if (state === 1 || state === 0 && !(geometryGroup.get$numMorphTargets() == null))
        switch (state) {
          case 0:
            geometryGroup.set$__webglMorphTargetsBuffers([]);
            var ml = geometryGroup.get$numMorphTargets();
          case 1:
            state = 0;
            for (var m = 0; $.ltB(m, ml); ++m)
              $.add$1(geometryGroup.get$__webglMorphTargetsBuffers(), this._gl.createBuffer$0());
        }
    case 2:
      if (state === 2 || state === 0 && !(geometryGroup.get$numMorphNormals() == null))
        switch (state) {
          case 0:
            geometryGroup.set$__webglMorphNormalsBuffers([]);
            ml = geometryGroup.get$numMorphNormals();
          case 2:
            state = 0;
            for (m = 0; $.ltB(m, ml); ++m)
              $.add$1(geometryGroup.get$__webglMorphNormalsBuffers(), this._gl.createBuffer$0());
        }
      var t1 = this.info.get$memory();
      t1.set$geometries($.add(t1.get$geometries(), 1));
  }
},
 initCustomAttributes$2: function(geometry, object) {
  var nvertices = $.get$length(geometry.get$vertices());
  if (typeof nvertices !== 'number')
    return this.initCustomAttributes$2$bailout(1, geometry, object, nvertices);
  var material = object.get$webglmaterial();
  if (!(material.get$attributes() == null)) {
    if (geometry.get$__webglCustomAttributesList() == null)
      geometry.set$__webglCustomAttributesList([]);
    for (var t1 = $.iterator(material.get$attributes()); t1.hasNext$0() === true;) {
      var t2 = t1.next$0();
      var attribute = $.index(material.get$attributes(), t2);
      if ($.index(attribute, '__webglInitialized') !== true || attribute.get$createUniqueBuffers() === true) {
        $.indexSet(attribute, '__webglInitialized', true);
        var t3 = attribute.get$type();
        if (t3 === 'v2')
          var size = 2;
        else if (t3 === 'v3')
          size = 3;
        else if (t3 === 'v4')
          size = 4;
        else
          size = t3 === 'c' ? 3 : 1;
        attribute.set$size(size);
        attribute.set$array($._TypedArrayFactoryProvider_Float32Array(nvertices * size));
        attribute.set$buffer($.Buffer$(this._gl.createBuffer$0()));
        attribute.get$buffer().set$belongsToAttribute(t2);
        attribute.set$needsUpdate(true);
      }
      $.add$1(geometry.get$__webglCustomAttributesList(), attribute);
    }
  }
},
 initCustomAttributes$2$bailout: function(state, geometry, object, nvertices) {
  var material = object.get$webglmaterial();
  if (!(material.get$attributes() == null)) {
    if (geometry.get$__webglCustomAttributesList() == null)
      geometry.set$__webglCustomAttributesList([]);
    for (var t1 = $.iterator(material.get$attributes()); t1.hasNext$0() === true;) {
      var t2 = t1.next$0();
      var attribute = $.index(material.get$attributes(), t2);
      if ($.index(attribute, '__webglInitialized') !== true || attribute.get$createUniqueBuffers() === true) {
        $.indexSet(attribute, '__webglInitialized', true);
        var t3 = attribute.get$type();
        if (t3 === 'v2')
          var size = 2;
        else if (t3 === 'v3')
          size = 3;
        else if (t3 === 'v4')
          size = 4;
        else
          size = t3 === 'c' ? 3 : 1;
        attribute.set$size(size);
        attribute.set$array($._TypedArrayFactoryProvider_Float32Array($.mul(nvertices, size)));
        attribute.set$buffer($.Buffer$(this._gl.createBuffer$0()));
        attribute.get$buffer().set$belongsToAttribute(t2);
        attribute.set$needsUpdate(true);
      }
      $.add$1(geometry.get$__webglCustomAttributesList(), attribute);
    }
  }
},
 initParticleBuffers$2: function(geometry, object) {
  var nvertices = $.get$length(geometry.get$vertices());
  geometry.set$__vertexArray($._TypedArrayFactoryProvider_Float32Array($.mul(nvertices, 3)));
  geometry.set$__colorArray($._TypedArrayFactoryProvider_Float32Array($.mul(nvertices, 3)));
  geometry.set$__sortArray([]);
  geometry.set$__webglParticleCount(nvertices);
  this.initCustomAttributes$2(geometry, object);
},
 initLineBuffers$2: function(geometry, object) {
  var nvertices = $.get$length(geometry.get$vertices());
  geometry.set$__vertexArray($._TypedArrayFactoryProvider_Float32Array($.mul(nvertices, 3)));
  geometry.set$__colorArray($._TypedArrayFactoryProvider_Float32Array($.mul(nvertices, 3)));
  geometry.set$__webglLineCount(nvertices);
  this.initCustomAttributes$2(geometry, object);
},
 initRibbonBuffers$1: function(geometry) {
  var nvertices = $.get$length(geometry.get$vertices());
  geometry.set$__vertexArray($._TypedArrayFactoryProvider_Float32Array($.mul(nvertices, 3)));
  geometry.set$__colorArray($._TypedArrayFactoryProvider_Float32Array($.mul(nvertices, 3)));
  geometry.set$__webglVertexCount(nvertices);
},
 initMeshBuffers$2: function(geometryGroup, object) {
  var geometry = object.get$geometry();
  var faces3 = geometryGroup.get$faces3();
  var faces4 = geometryGroup.get$faces4();
  var nvertices = $.add($.mul($.get$length(faces3), 3), $.mul($.get$length(faces4), 4));
  if (typeof nvertices !== 'number')
    return this.initMeshBuffers$2$bailout(1, geometryGroup, object, nvertices, geometry, faces3, faces4);
  var ntris = $.add($.mul($.get$length(faces3), 1), $.mul($.get$length(faces4), 2));
  var nlines = $.add($.mul($.get$length(faces3), 3), $.mul($.get$length(faces4), 4));
  var material = this.getBufferMaterial$2(object, geometryGroup);
  var uvType = this.bufferGuessUVType$1(material);
  var normalType = this.bufferGuessNormalType$1(material);
  var vertexColorType = this.bufferGuessVertexColorType$1(material);
  var t2 = nvertices * 3;
  geometryGroup.set$__vertexArray($._TypedArrayFactoryProvider_Float32Array(t2));
  if (!$.eqB(normalType, 0))
    geometryGroup.set$__normalArray($._TypedArrayFactoryProvider_Float32Array(t2));
  if (geometry.get$hasTangents() === true)
    geometryGroup.set$__tangentArray($._TypedArrayFactoryProvider_Float32Array(nvertices * 4));
  if (vertexColorType === true)
    geometryGroup.set$__colorArray($._TypedArrayFactoryProvider_Float32Array(t2));
  if (uvType === true) {
    if ($.gtB($.get$length(geometry.get$faceUvs()), 0) || $.gtB($.get$length(geometry.get$faceVertexUvs()), 0))
      geometryGroup.set$__uvArray($._TypedArrayFactoryProvider_Float32Array(nvertices * 2));
    if ($.gtB($.get$length(geometry.get$faceUvs()), 1) || $.gtB($.get$length(geometry.get$faceVertexUvs()), 1))
      geometryGroup.set$__uv2Array($._TypedArrayFactoryProvider_Float32Array(nvertices * 2));
  }
  if ($.isEmpty(object.get$geometry().get$skinWeights()) !== true && $.isEmpty(object.get$geometry().get$skinIndices()) !== true) {
    var t1 = nvertices * 4;
    geometryGroup.set$__skinVertexAArray($._TypedArrayFactoryProvider_Float32Array(t1));
    geometryGroup.set$__skinVertexBArray($._TypedArrayFactoryProvider_Float32Array(t1));
    geometryGroup.set$__skinIndexArray($._TypedArrayFactoryProvider_Float32Array(t1));
    geometryGroup.set$__skinWeightArray($._TypedArrayFactoryProvider_Float32Array(t1));
  }
  geometryGroup.set$__faceArray($._TypedArrayFactoryProvider_Uint16Array($.mul(ntris, 3)));
  geometryGroup.set$__lineArray($._TypedArrayFactoryProvider_Uint16Array($.mul(nlines, 2)));
  if (!(geometryGroup.get$numMorphTargets() == null)) {
    geometryGroup.set$__morphTargetsArrays([]);
    var ml = geometryGroup.get$numMorphTargets();
    if (typeof ml !== 'number')
      return this.initMeshBuffers$2$bailout(2, geometryGroup, nvertices, nlines, material, ml, ntris);
    for (var m = 0; m < ml; ++m)
      $.add$1(geometryGroup.get$__morphTargetsArrays(), $._TypedArrayFactoryProvider_Float32Array(t2));
  }
  if (!(geometryGroup.get$numMorphNormals() == null)) {
    geometryGroup.set$__morphNormalsArrays([]);
    ml = geometryGroup.get$numMorphNormals();
    if (typeof ml !== 'number')
      return this.initMeshBuffers$2$bailout(3, geometryGroup, nvertices, nlines, ml, material, ntris);
    for (m = 0; m < ml; ++m)
      $.add$1(geometryGroup.get$__morphNormalsArrays(), $._TypedArrayFactoryProvider_Float32Array(t2));
  }
  geometryGroup.set$__webglFaceCount($.mul(ntris, 3));
  geometryGroup.set$__webglLineCount($.mul(nlines, 2));
  if (!(material.get$attributes() == null)) {
    if (geometryGroup.get$__webglCustomAttributesList() == null)
      geometryGroup.set$__webglCustomAttributesList([]);
    $.forEach(material.get$attributes(), new $.WebGLRenderer_initMeshBuffers_anon(this, nvertices, material, geometryGroup));
  }
  geometryGroup.set$__inittedArrays(true);
},
 initMeshBuffers$2$bailout: function(state, env0, env1, env2, env3, env4, env5) {
  switch (state) {
    case 1:
      var geometryGroup = env0;
      var object = env1;
      nvertices = env2;
      geometry = env3;
      faces3 = env4;
      faces4 = env5;
      break;
    case 2:
      geometryGroup = env0;
      nvertices = env1;
      nlines = env2;
      material = env3;
      ml = env4;
      ntris = env5;
      break;
    case 3:
      geometryGroup = env0;
      nvertices = env1;
      nlines = env2;
      ml = env3;
      material = env4;
      ntris = env5;
      break;
  }
  switch (state) {
    case 0:
      var geometry = object.get$geometry();
      var faces3 = geometryGroup.get$faces3();
      var faces4 = geometryGroup.get$faces4();
      var nvertices = $.add($.mul($.get$length(faces3), 3), $.mul($.get$length(faces4), 4));
    case 1:
      state = 0;
      var ntris = $.add($.mul($.get$length(faces3), 1), $.mul($.get$length(faces4), 2));
      var nlines = $.add($.mul($.get$length(faces3), 3), $.mul($.get$length(faces4), 4));
      var material = this.getBufferMaterial$2(object, geometryGroup);
      var uvType = this.bufferGuessUVType$1(material);
      var normalType = this.bufferGuessNormalType$1(material);
      var vertexColorType = this.bufferGuessVertexColorType$1(material);
      geometryGroup.set$__vertexArray($._TypedArrayFactoryProvider_Float32Array($.mul(nvertices, 3)));
      if (!$.eqB(normalType, 0))
        geometryGroup.set$__normalArray($._TypedArrayFactoryProvider_Float32Array($.mul(nvertices, 3)));
      if (geometry.get$hasTangents() === true)
        geometryGroup.set$__tangentArray($._TypedArrayFactoryProvider_Float32Array($.mul(nvertices, 4)));
      if (vertexColorType === true)
        geometryGroup.set$__colorArray($._TypedArrayFactoryProvider_Float32Array($.mul(nvertices, 3)));
      if (uvType === true) {
        if ($.gtB($.get$length(geometry.get$faceUvs()), 0) || $.gtB($.get$length(geometry.get$faceVertexUvs()), 0))
          geometryGroup.set$__uvArray($._TypedArrayFactoryProvider_Float32Array($.mul(nvertices, 2)));
        if ($.gtB($.get$length(geometry.get$faceUvs()), 1) || $.gtB($.get$length(geometry.get$faceVertexUvs()), 1))
          geometryGroup.set$__uv2Array($._TypedArrayFactoryProvider_Float32Array($.mul(nvertices, 2)));
      }
      if ($.isEmpty(object.get$geometry().get$skinWeights()) !== true && $.isEmpty(object.get$geometry().get$skinIndices()) !== true) {
        geometryGroup.set$__skinVertexAArray($._TypedArrayFactoryProvider_Float32Array($.mul(nvertices, 4)));
        geometryGroup.set$__skinVertexBArray($._TypedArrayFactoryProvider_Float32Array($.mul(nvertices, 4)));
        geometryGroup.set$__skinIndexArray($._TypedArrayFactoryProvider_Float32Array($.mul(nvertices, 4)));
        geometryGroup.set$__skinWeightArray($._TypedArrayFactoryProvider_Float32Array($.mul(nvertices, 4)));
      }
      geometryGroup.set$__faceArray($._TypedArrayFactoryProvider_Uint16Array($.mul(ntris, 3)));
      geometryGroup.set$__lineArray($._TypedArrayFactoryProvider_Uint16Array($.mul(nlines, 2)));
    case 2:
      if (state === 2 || state === 0 && !(geometryGroup.get$numMorphTargets() == null))
        switch (state) {
          case 0:
            geometryGroup.set$__morphTargetsArrays([]);
            var ml = geometryGroup.get$numMorphTargets();
          case 2:
            state = 0;
            for (var m = 0; $.ltB(m, ml); ++m)
              $.add$1(geometryGroup.get$__morphTargetsArrays(), $._TypedArrayFactoryProvider_Float32Array($.mul(nvertices, 3)));
        }
    case 3:
      if (state === 3 || state === 0 && !(geometryGroup.get$numMorphNormals() == null))
        switch (state) {
          case 0:
            geometryGroup.set$__morphNormalsArrays([]);
            ml = geometryGroup.get$numMorphNormals();
          case 3:
            state = 0;
            for (m = 0; $.ltB(m, ml); ++m)
              $.add$1(geometryGroup.get$__morphNormalsArrays(), $._TypedArrayFactoryProvider_Float32Array($.mul(nvertices, 3)));
        }
      geometryGroup.set$__webglFaceCount($.mul(ntris, 3));
      geometryGroup.set$__webglLineCount($.mul(nlines, 2));
      if (!(material.get$attributes() == null)) {
        if (geometryGroup.get$__webglCustomAttributesList() == null)
          geometryGroup.set$__webglCustomAttributesList([]);
        $.forEach(material.get$attributes(), new $.WebGLRenderer_initMeshBuffers_anon(this, nvertices, material, geometryGroup));
      }
      geometryGroup.set$__inittedArrays(true);
  }
},
 getBufferMaterial$2: function(object, geometryGroup) {
  if (!(object.get$material() == null)) {
    var t1 = object.get$material();
    var t2 = !(typeof t1 === 'object' && t1 !== null && !!t1.is$MeshFaceMaterial);
    t1 = t2;
  } else
    t1 = false;
  if (t1)
    var material = object.get$material();
  else
    material = $.geB(geometryGroup.get$materialIndex(), 0) ? $.index(object.get$geometry().get$materials(), geometryGroup.get$materialIndex()) : null;
  return $.WebGLMaterial_WebGLMaterial$from(material);
},
 bufferGuessNormalType$1: function(material) {
  if (material.get$needsNormals() !== true)
    return 0;
  if (material.get$needsSmoothNormals() === true)
    return 2;
  else
    return 1;
},
 bufferGuessVertexColorType$1: function(material) {
  if (!(material.get$vertexColors() == null) && !$.eqB(material.get$vertexColors(), 0))
    return material.get$vertexColors();
  return false;
},
 bufferGuessUVType$1: function(material) {
  if (!(material.get$map() == null) || !(material.get$lightMap() == null) || !(material.get$bumpMap() == null) || !(material.get$specularMap() == null) || material.get$isShaderMaterial() === true)
    return true;
  return false;
},
 initDirectBuffers$1: function(geometry) {
  var t1 = {};
  t1.attribute_1 = null;
  t1.type_2 = null;
  $.forEach(geometry.get$attributes(), new $.WebGLRenderer_initDirectBuffers_anon(this, t1));
},
 setParticleBuffers$3: function(geometry, hint, object) {
  var vertices = geometry.get$vertices();
  if (typeof vertices !== 'string' && (typeof vertices !== 'object' || vertices === null || vertices.constructor !== Array && !vertices.is$JavaScriptIndexingBehavior()))
    return this.setParticleBuffers$3$bailout(1, geometry, hint, object, vertices, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var vl = vertices.length;
  var colors = geometry.get$colors();
  if (typeof colors !== 'string' && (typeof colors !== 'object' || colors === null || colors.constructor !== Array && !colors.is$JavaScriptIndexingBehavior()))
    return this.setParticleBuffers$3$bailout(2, geometry, hint, object, vertices, vl, colors, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var cl = colors.length;
  var vertexArray = geometry.get$__vertexArray();
  if (typeof vertexArray !== 'object' || vertexArray === null || (vertexArray.constructor !== Array || !!vertexArray.immutable$list) && !vertexArray.is$JavaScriptIndexingBehavior())
    return this.setParticleBuffers$3$bailout(3, geometry, hint, object, vertices, vl, colors, cl, vertexArray, 0, 0, 0, 0, 0, 0, 0, 0);
  var colorArray = geometry.get$__colorArray();
  if (typeof colorArray !== 'object' || colorArray === null || (colorArray.constructor !== Array || !!colorArray.immutable$list) && !colorArray.is$JavaScriptIndexingBehavior())
    return this.setParticleBuffers$3$bailout(4, geometry, hint, object, vertices, vl, colors, cl, vertexArray, colorArray, 0, 0, 0, 0, 0, 0, 0);
  var sortArray = geometry.get$__sortArray();
  if (typeof sortArray !== 'object' || sortArray === null || (sortArray.constructor !== Array || !!sortArray.immutable$list) && !sortArray.is$JavaScriptIndexingBehavior())
    return this.setParticleBuffers$3$bailout(5, geometry, hint, object, vertices, vl, colors, cl, vertexArray, colorArray, sortArray, 0, 0, 0, 0, 0, 0);
  var dirtyVertices = geometry.get$verticesNeedUpdate();
  geometry.get$elementsNeedUpdate();
  var dirtyColors = geometry.get$colorsNeedUpdate();
  var customAttributes = geometry.get$__webglCustomAttributesList();
  if (typeof customAttributes !== 'string' && (typeof customAttributes !== 'object' || customAttributes === null || customAttributes.constructor !== Array && !customAttributes.is$JavaScriptIndexingBehavior()))
    return this.setParticleBuffers$3$bailout(6, geometry, hint, object, vertices, vl, colors, cl, vertexArray, colorArray, sortArray, dirtyVertices, dirtyColors, customAttributes, 0, 0, 0);
  var t1 = object.sortParticles === true;
  if (t1) {
    var t2 = this._projScreenMatrixPS;
    t2.copy$1(this._projScreenMatrix);
    t2.multiplySelf$1(object.matrixWorld);
    for (var t3 = this._vector3, v = 0, vertex = null; v < vl; ++v) {
      if (v < 0 || v >= vertices.length)
        throw $.ioore(v);
      vertex = vertices[v];
      t3.copy$1(vertex);
      t2.multiplyVector3$1(t3);
      var t4 = [t3.z, v];
      if (v < 0 || v >= sortArray.length)
        throw $.ioore(v);
      sortArray[v] = t4;
    }
    $.sort(sortArray, new $.WebGLRenderer_setParticleBuffers_function());
    for (var offset = null, v = 0; v < vl; ++v) {
      if (v < 0 || v >= sortArray.length)
        throw $.ioore(v);
      t2 = $.index(sortArray[v], 1);
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= vertices.length)
        throw $.ioore(t2);
      vertex = vertices[t2];
      offset = v * 3;
      t2 = vertex.get$x();
      if (offset < 0 || offset >= vertexArray.length)
        throw $.ioore(offset);
      vertexArray[offset] = t2;
      t2 = offset + 1;
      t3 = vertex.get$y();
      if (t2 < 0 || t2 >= vertexArray.length)
        throw $.ioore(t2);
      vertexArray[t2] = t3;
      t3 = offset + 2;
      t2 = vertex.get$z();
      if (t3 < 0 || t3 >= vertexArray.length)
        throw $.ioore(t3);
      vertexArray[t3] = t2;
    }
    for (var c = 0, color = null; c < cl; ++c) {
      offset = c * 3;
      if (c < 0 || c >= sortArray.length)
        throw $.ioore(c);
      t2 = $.index(sortArray[c], 1);
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= colors.length)
        throw $.ioore(t2);
      color = colors[t2];
      t2 = color.get$r();
      if (offset < 0 || offset >= colorArray.length)
        throw $.ioore(offset);
      colorArray[offset] = t2;
      t2 = offset + 1;
      t3 = color.get$g();
      if (t2 < 0 || t2 >= colorArray.length)
        throw $.ioore(t2);
      colorArray[t2] = t3;
      t3 = offset + 2;
      t2 = color.get$b();
      if (t3 < 0 || t3 >= colorArray.length)
        throw $.ioore(t3);
      colorArray[t3] = t2;
    }
    var il = customAttributes.length;
    for (var cal = null, index = null, value = null, i = 0, customAttribute = null, ca = null; i < il; ++i) {
      if (i < 0 || i >= customAttributes.length)
        throw $.ioore(i);
      customAttribute = customAttributes[i];
      t2 = customAttribute.get$boundTo();
      if (!(t2 == null || t2 === 'vertices'))
        continue;
      cal = $.get$length(customAttribute.get$value());
      if (customAttribute.get$size() === 1) {
        for (ca = 0; $.ltB(ca, cal); ++ca) {
          if (ca < 0 || ca >= sortArray.length)
            throw $.ioore(ca);
          t2 = sortArray[ca];
          if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
            return this.setParticleBuffers$3$bailout(7, geometry, hint, cal, ca, il, customAttribute, vertexArray, sortArray, dirtyVertices, colorArray, dirtyColors, customAttributes, t2, t1, value, i);
          if (1 >= t2.length)
            throw $.ioore(1);
          index = t2[1];
          $.indexSet(customAttribute.get$array(), ca, $.index(customAttribute.get$value(), index));
        }
        offset = 0;
      } else if (customAttribute.get$size() === 2)
        for (offset = 0, ca = 0; $.ltB(ca, cal); ++ca) {
          if (ca < 0 || ca >= sortArray.length)
            throw $.ioore(ca);
          t2 = sortArray[ca];
          if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
            return this.setParticleBuffers$3$bailout(8, offset, i, ca, cal, customAttribute, sortArray, t2, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          if (1 >= t2.length)
            throw $.ioore(1);
          index = t2[1];
          value = $.index(customAttribute.get$value(), index);
          $.indexSet(customAttribute.get$array(), offset, value.get$x());
          $.indexSet(customAttribute.get$array(), offset + 1, value.get$y());
          offset += 2;
        }
      else if (customAttribute.get$size() === 3)
        if (customAttribute.get$type() === 'c')
          for (offset = 0, ca = 0; $.ltB(ca, cal); ++ca) {
            if (ca < 0 || ca >= sortArray.length)
              throw $.ioore(ca);
            t2 = sortArray[ca];
            if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
              return this.setParticleBuffers$3$bailout(9, ca, sortArray, cal, customAttribute, t2, offset, i, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            if (1 >= t2.length)
              throw $.ioore(1);
            index = t2[1];
            value = $.index(customAttribute.get$value(), index);
            $.indexSet(customAttribute.get$array(), offset, value.get$r());
            $.indexSet(customAttribute.get$array(), offset + 1, value.get$g());
            $.indexSet(customAttribute.get$array(), offset + 2, value.get$b());
            offset += 3;
          }
        else
          for (offset = 0, ca = 0; $.ltB(ca, cal); ++ca) {
            if (ca < 0 || ca >= sortArray.length)
              throw $.ioore(ca);
            t2 = sortArray[ca];
            if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
              return this.setParticleBuffers$3$bailout(10, t2, offset, cal, ca, customAttribute, sortArray, i, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            if (1 >= t2.length)
              throw $.ioore(1);
            index = t2[1];
            value = $.index(customAttribute.get$value(), index);
            $.indexSet(customAttribute.get$array(), offset, value.get$x());
            $.indexSet(customAttribute.get$array(), offset + 1, value.get$y());
            $.indexSet(customAttribute.get$array(), offset + 2, value.get$z());
            offset += 3;
          }
      else if (customAttribute.get$size() === 4)
        for (offset = 0, ca = 0; $.ltB(ca, cal); ++ca) {
          if (ca < 0 || ca >= sortArray.length)
            throw $.ioore(ca);
          t2 = sortArray[ca];
          if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
            return this.setParticleBuffers$3$bailout(11, offset, sortArray, ca, cal, customAttribute, i, t2, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          if (1 >= t2.length)
            throw $.ioore(1);
          index = t2[1];
          value = $.index(customAttribute.get$value(), index);
          $.indexSet(customAttribute.get$array(), offset, value.get$x());
          $.indexSet(customAttribute.get$array(), offset + 1, value.get$y());
          $.indexSet(customAttribute.get$array(), offset + 2, value.get$z());
          $.indexSet(customAttribute.get$array(), offset + 3, value.get$w());
          offset += 4;
        }
      else
        offset = 0;
    }
  } else {
    if (dirtyVertices === true)
      for (offset = null, v = 0, vertex = null; v < vl; ++v) {
        if (v < 0 || v >= vertices.length)
          throw $.ioore(v);
        vertex = vertices[v];
        offset = v * 3;
        t2 = vertex.get$x();
        if (offset < 0 || offset >= vertexArray.length)
          throw $.ioore(offset);
        vertexArray[offset] = t2;
        t2 = offset + 1;
        t3 = vertex.get$y();
        if (t2 < 0 || t2 >= vertexArray.length)
          throw $.ioore(t2);
        vertexArray[t2] = t3;
        t3 = offset + 2;
        t2 = vertex.get$z();
        if (t3 < 0 || t3 >= vertexArray.length)
          throw $.ioore(t3);
        vertexArray[t3] = t2;
      }
    else
      offset = null;
    if (dirtyColors === true)
      for (c = 0, color = null; c < cl; ++c) {
        if (c < 0 || c >= colors.length)
          throw $.ioore(c);
        color = colors[c];
        offset = c * 3;
        t2 = color.get$r();
        if (offset < 0 || offset >= colorArray.length)
          throw $.ioore(offset);
        colorArray[offset] = t2;
        t2 = offset + 1;
        t3 = color.get$g();
        if (t2 < 0 || t2 >= colorArray.length)
          throw $.ioore(t2);
        colorArray[t2] = t3;
        t3 = offset + 2;
        t2 = color.get$b();
        if (t3 < 0 || t3 >= colorArray.length)
          throw $.ioore(t3);
        colorArray[t3] = t2;
      }
    il = customAttributes.length;
    for (cal = null, value = null, i = 0, customAttribute = null, ca = null; i < il; ++i) {
      if (i < 0 || i >= customAttributes.length)
        throw $.ioore(i);
      customAttribute = customAttributes[i];
      if (customAttribute.get$needsUpdate() === true) {
        t2 = customAttribute.get$boundTo();
        t2 = t2 == null || $.eqB(t2, 'vertices');
      } else
        t2 = false;
      if (t2) {
        cal = $.get$length(customAttribute.get$value());
        if (customAttribute.get$size() === 1) {
          for (ca = 0; $.ltB(ca, cal); ++ca)
            $.indexSet(customAttribute.get$array(), ca, $.index(customAttribute.get$value(), ca));
          offset = 0;
        } else if (customAttribute.get$size() === 2)
          for (offset = 0, ca = 0; $.ltB(ca, cal); ++ca) {
            value = $.index(customAttribute.get$value(), ca);
            $.indexSet(customAttribute.get$array(), offset, value.get$x());
            $.indexSet(customAttribute.get$array(), offset + 1, value.get$y());
            offset += 2;
          }
        else if (customAttribute.get$size() === 3)
          if (customAttribute.get$type() === 'c')
            for (offset = 0, ca = 0; $.ltB(ca, cal); ++ca) {
              value = $.index(customAttribute.get$value(), ca);
              $.indexSet(customAttribute.get$array(), offset, value.get$r());
              $.indexSet(customAttribute.get$array(), offset + 1, value.get$g());
              $.indexSet(customAttribute.get$array(), offset + 2, value.get$b());
              offset += 3;
            }
          else
            for (offset = 0, ca = 0; $.ltB(ca, cal); ++ca) {
              value = $.index(customAttribute.get$value(), ca);
              $.indexSet(customAttribute.get$array(), offset, value.get$x());
              $.indexSet(customAttribute.get$array(), offset + 1, value.get$y());
              $.indexSet(customAttribute.get$array(), offset + 2, value.get$z());
              offset += 3;
            }
        else if (customAttribute.get$size() === 4)
          for (offset = 0, ca = 0; $.ltB(ca, cal); ++ca) {
            value = $.index(customAttribute.get$value(), ca);
            $.indexSet(customAttribute.get$array(), offset, value.get$x());
            $.indexSet(customAttribute.get$array(), offset + 1, value.get$y());
            $.indexSet(customAttribute.get$array(), offset + 2, value.get$z());
            $.indexSet(customAttribute.get$array(), offset + 3, value.get$w());
            offset += 4;
          }
        else
          offset = 0;
      }
    }
  }
  if (dirtyVertices === true || t1) {
    this._gl.bindBuffer$2(34962, geometry.get$__webglVertexBuffer());
    this._gl.bufferData$3(34962, vertexArray, hint);
  }
  if (dirtyColors === true || t1) {
    this._gl.bindBuffer$2(34962, geometry.get$__webglColorBuffer());
    this._gl.bufferData$3(34962, colorArray, hint);
  }
  il = customAttributes.length;
  for (i = 0; i < il; ++i) {
    if (i < 0 || i >= customAttributes.length)
      throw $.ioore(i);
    customAttribute = customAttributes[i];
    if (customAttribute.get$needsUpdate() === true || t1) {
      this._gl.bindBuffer$2(34962, customAttribute.get$buffer());
      this._gl.bufferData$3(34962, customAttribute.get$array(), hint);
    }
  }
},
 setParticleBuffers$3$bailout: function(state, env0, env1, env2, env3, env4, env5, env6, env7, env8, env9, env10, env11, env12, env13, env14, env15) {
  switch (state) {
    case 1:
      var geometry = env0;
      var hint = env1;
      var object = env2;
      vertices = env3;
      break;
    case 2:
      geometry = env0;
      hint = env1;
      object = env2;
      vertices = env3;
      vl = env4;
      colors = env5;
      break;
    case 3:
      geometry = env0;
      hint = env1;
      object = env2;
      vertices = env3;
      vl = env4;
      colors = env5;
      cl = env6;
      vertexArray = env7;
      break;
    case 4:
      geometry = env0;
      hint = env1;
      object = env2;
      vertices = env3;
      vl = env4;
      colors = env5;
      cl = env6;
      vertexArray = env7;
      colorArray = env8;
      break;
    case 5:
      geometry = env0;
      hint = env1;
      object = env2;
      vertices = env3;
      vl = env4;
      colors = env5;
      cl = env6;
      vertexArray = env7;
      colorArray = env8;
      sortArray = env9;
      break;
    case 6:
      geometry = env0;
      hint = env1;
      object = env2;
      vertices = env3;
      vl = env4;
      colors = env5;
      cl = env6;
      vertexArray = env7;
      colorArray = env8;
      sortArray = env9;
      dirtyVertices = env10;
      dirtyColors = env11;
      customAttributes = env12;
      break;
    case 7:
      geometry = env0;
      hint = env1;
      cal = env2;
      ca = env3;
      il = env4;
      customAttribute = env5;
      vertexArray = env6;
      sortArray = env7;
      dirtyVertices = env8;
      colorArray = env9;
      dirtyColors = env10;
      customAttributes = env11;
      t2 = env12;
      t1 = env13;
      value = env14;
      i = env15;
      break;
    case 8:
      offset = env0;
      i = env1;
      ca = env2;
      cal = env3;
      customAttribute = env4;
      sortArray = env5;
      t2 = env6;
      break;
    case 9:
      ca = env0;
      sortArray = env1;
      cal = env2;
      customAttribute = env3;
      t2 = env4;
      offset = env5;
      i = env6;
      break;
    case 10:
      t2 = env0;
      offset = env1;
      cal = env2;
      ca = env3;
      customAttribute = env4;
      sortArray = env5;
      i = env6;
      break;
    case 11:
      offset = env0;
      sortArray = env1;
      ca = env2;
      cal = env3;
      customAttribute = env4;
      i = env5;
      t2 = env6;
      break;
  }
  switch (state) {
    case 0:
      var vertices = geometry.get$vertices();
    case 1:
      state = 0;
      var vl = $.get$length(vertices);
      var colors = geometry.get$colors();
    case 2:
      state = 0;
      var cl = $.get$length(colors);
      var vertexArray = geometry.get$__vertexArray();
    case 3:
      state = 0;
      var colorArray = geometry.get$__colorArray();
    case 4:
      state = 0;
      var sortArray = geometry.get$__sortArray();
    case 5:
      state = 0;
      var dirtyVertices = geometry.get$verticesNeedUpdate();
      geometry.get$elementsNeedUpdate();
      var dirtyColors = geometry.get$colorsNeedUpdate();
      var customAttributes = geometry.get$__webglCustomAttributesList();
    case 6:
      state = 0;
      var t1 = object.sortParticles === true;
    default:
      if (state === 11 || state === 10 || state === 9 || state === 8 || state === 7 || state === 0 && t1)
        switch (state) {
          case 0:
            var t2 = this._projScreenMatrixPS;
            t2.copy$1(this._projScreenMatrix);
            t2.multiplySelf$1(object.matrixWorld);
            for (var t3 = this._vector3, v = 0, vertex = null; $.ltB(v, vl); ++v) {
              vertex = $.index(vertices, v);
              t3.copy$1(vertex);
              t2.multiplyVector3$1(t3);
              $.indexSet(sortArray, v, [t3.get$z(), v]);
            }
            $.sort(sortArray, new $.WebGLRenderer_setParticleBuffers_function());
            for (var offset = null, v = 0; $.ltB(v, vl); ++v) {
              vertex = $.index(vertices, $.index($.index(sortArray, v), 1));
              offset = v * 3;
              $.indexSet(vertexArray, offset, vertex.get$x());
              $.indexSet(vertexArray, offset + 1, vertex.get$y());
              $.indexSet(vertexArray, offset + 2, vertex.get$z());
            }
            for (var c = 0, color = null; $.ltB(c, cl); ++c) {
              offset = c * 3;
              color = $.index(colors, $.index($.index(sortArray, c), 1));
              $.indexSet(colorArray, offset, color.get$r());
              $.indexSet(colorArray, offset + 1, color.get$g());
              $.indexSet(colorArray, offset + 2, color.get$b());
            }
          default:
            if (state === 11 || state === 10 || state === 9 || state === 8 || state === 7 || state === 0 && !(customAttributes == null))
              switch (state) {
                case 0:
                  var il = $.get$length(customAttributes);
                  var cal = null;
                  var index = null;
                  var value = null;
                  var i = 0;
                  var customAttribute = null;
                  var ca = null;
                default:
                  L0:
                    while (true)
                      switch (state) {
                        case 0:
                          if (!$.ltB(i, il))
                            break L0;
                        default:
                          c$0: {
                            switch (state) {
                              case 0:
                                customAttribute = $.index(customAttributes, i);
                                t2 = customAttribute.get$boundTo();
                                if (!(t2 == null || t2 === 'vertices'))
                                  break c$0;
                                cal = $.get$length(customAttribute.get$value());
                              default:
                                if (state === 7 || state === 0 && customAttribute.get$size() === 1)
                                  switch (state) {
                                    case 0:
                                      ca = 0;
                                    case 7:
                                      L1:
                                        while (true)
                                          switch (state) {
                                            case 0:
                                              if (!$.ltB(ca, cal))
                                                break L1;
                                              t2 = $.index(sortArray, ca);
                                            case 7:
                                              state = 0;
                                              index = $.index(t2, 1);
                                              $.indexSet(customAttribute.get$array(), ca, $.index(customAttribute.get$value(), index));
                                              ++ca;
                                          }
                                      offset = 0;
                                  }
                                else
                                  switch (state) {
                                    case 0:
                                    default:
                                      if (state === 8 || state === 0 && customAttribute.get$size() === 2)
                                        switch (state) {
                                          case 0:
                                            offset = 0;
                                            ca = 0;
                                          case 8:
                                            L2:
                                              while (true)
                                                switch (state) {
                                                  case 0:
                                                    if (!$.ltB(ca, cal))
                                                      break L2;
                                                    t2 = $.index(sortArray, ca);
                                                  case 8:
                                                    state = 0;
                                                    index = $.index(t2, 1);
                                                    value = $.index(customAttribute.get$value(), index);
                                                    $.indexSet(customAttribute.get$array(), offset, value.get$x());
                                                    $.indexSet(customAttribute.get$array(), offset + 1, value.get$y());
                                                    offset += 2;
                                                    ++ca;
                                                }
                                        }
                                      else
                                        switch (state) {
                                          case 0:
                                          default:
                                            if (state === 10 || state === 9 || state === 0 && customAttribute.get$size() === 3)
                                              switch (state) {
                                                case 0:
                                                default:
                                                  if (state === 9 || state === 0 && customAttribute.get$type() === 'c')
                                                    switch (state) {
                                                      case 0:
                                                        offset = 0;
                                                        ca = 0;
                                                      case 9:
                                                        L3:
                                                          while (true)
                                                            switch (state) {
                                                              case 0:
                                                                if (!$.ltB(ca, cal))
                                                                  break L3;
                                                                t2 = $.index(sortArray, ca);
                                                              case 9:
                                                                state = 0;
                                                                index = $.index(t2, 1);
                                                                value = $.index(customAttribute.get$value(), index);
                                                                $.indexSet(customAttribute.get$array(), offset, value.get$r());
                                                                $.indexSet(customAttribute.get$array(), offset + 1, value.get$g());
                                                                $.indexSet(customAttribute.get$array(), offset + 2, value.get$b());
                                                                offset += 3;
                                                                ++ca;
                                                            }
                                                    }
                                                  else
                                                    switch (state) {
                                                      case 0:
                                                        offset = 0;
                                                        ca = 0;
                                                      case 10:
                                                        L4:
                                                          while (true)
                                                            switch (state) {
                                                              case 0:
                                                                if (!$.ltB(ca, cal))
                                                                  break L4;
                                                                t2 = $.index(sortArray, ca);
                                                              case 10:
                                                                state = 0;
                                                                index = $.index(t2, 1);
                                                                value = $.index(customAttribute.get$value(), index);
                                                                $.indexSet(customAttribute.get$array(), offset, value.get$x());
                                                                $.indexSet(customAttribute.get$array(), offset + 1, value.get$y());
                                                                $.indexSet(customAttribute.get$array(), offset + 2, value.get$z());
                                                                offset += 3;
                                                                ++ca;
                                                            }
                                                    }
                                              }
                                            else
                                              switch (state) {
                                                case 0:
                                                case 11:
                                                  if (state === 11 || state === 0 && customAttribute.get$size() === 4)
                                                    switch (state) {
                                                      case 0:
                                                        offset = 0;
                                                        ca = 0;
                                                      case 11:
                                                        L5:
                                                          while (true)
                                                            switch (state) {
                                                              case 0:
                                                                if (!$.ltB(ca, cal))
                                                                  break L5;
                                                                t2 = $.index(sortArray, ca);
                                                              case 11:
                                                                state = 0;
                                                                index = $.index(t2, 1);
                                                                value = $.index(customAttribute.get$value(), index);
                                                                $.indexSet(customAttribute.get$array(), offset, value.get$x());
                                                                $.indexSet(customAttribute.get$array(), offset + 1, value.get$y());
                                                                $.indexSet(customAttribute.get$array(), offset + 2, value.get$z());
                                                                $.indexSet(customAttribute.get$array(), offset + 3, value.get$w());
                                                                offset += 4;
                                                                ++ca;
                                                            }
                                                    }
                                                  else
                                                    offset = 0;
                                              }
                                        }
                                  }
                            }
                          }
                          ++i;
                      }
              }
            else
              customAttribute = null;
        }
      else {
        if (dirtyVertices === true)
          for (offset = null, v = 0, vertex = null; $.ltB(v, vl); ++v) {
            vertex = $.index(vertices, v);
            offset = v * 3;
            $.indexSet(vertexArray, offset, vertex.get$x());
            $.indexSet(vertexArray, offset + 1, vertex.get$y());
            $.indexSet(vertexArray, offset + 2, vertex.get$z());
          }
        else
          offset = null;
        if (dirtyColors === true)
          for (c = 0, color = null; $.ltB(c, cl); ++c) {
            color = $.index(colors, c);
            offset = c * 3;
            $.indexSet(colorArray, offset, color.get$r());
            $.indexSet(colorArray, offset + 1, color.get$g());
            $.indexSet(colorArray, offset + 2, color.get$b());
          }
        if (!(customAttributes == null)) {
          il = $.get$length(customAttributes);
          for (cal = null, value = null, i = 0, customAttribute = null, ca = null; $.ltB(i, il); ++i) {
            customAttribute = $.index(customAttributes, i);
            if (customAttribute.get$needsUpdate() === true) {
              t2 = customAttribute.get$boundTo();
              t2 = t2 == null || $.eqB(t2, 'vertices');
            } else
              t2 = false;
            if (t2) {
              cal = $.get$length(customAttribute.get$value());
              if (customAttribute.get$size() === 1) {
                for (ca = 0; $.ltB(ca, cal); ++ca)
                  $.indexSet(customAttribute.get$array(), ca, $.index(customAttribute.get$value(), ca));
                offset = 0;
              } else if (customAttribute.get$size() === 2)
                for (offset = 0, ca = 0; $.ltB(ca, cal); ++ca) {
                  value = $.index(customAttribute.get$value(), ca);
                  $.indexSet(customAttribute.get$array(), offset, value.get$x());
                  $.indexSet(customAttribute.get$array(), offset + 1, value.get$y());
                  offset += 2;
                }
              else if (customAttribute.get$size() === 3)
                if (customAttribute.get$type() === 'c')
                  for (offset = 0, ca = 0; $.ltB(ca, cal); ++ca) {
                    value = $.index(customAttribute.get$value(), ca);
                    $.indexSet(customAttribute.get$array(), offset, value.get$r());
                    $.indexSet(customAttribute.get$array(), offset + 1, value.get$g());
                    $.indexSet(customAttribute.get$array(), offset + 2, value.get$b());
                    offset += 3;
                  }
                else
                  for (offset = 0, ca = 0; $.ltB(ca, cal); ++ca) {
                    value = $.index(customAttribute.get$value(), ca);
                    $.indexSet(customAttribute.get$array(), offset, value.get$x());
                    $.indexSet(customAttribute.get$array(), offset + 1, value.get$y());
                    $.indexSet(customAttribute.get$array(), offset + 2, value.get$z());
                    offset += 3;
                  }
              else if (customAttribute.get$size() === 4)
                for (offset = 0, ca = 0; $.ltB(ca, cal); ++ca) {
                  value = $.index(customAttribute.get$value(), ca);
                  $.indexSet(customAttribute.get$array(), offset, value.get$x());
                  $.indexSet(customAttribute.get$array(), offset + 1, value.get$y());
                  $.indexSet(customAttribute.get$array(), offset + 2, value.get$z());
                  $.indexSet(customAttribute.get$array(), offset + 3, value.get$w());
                  offset += 4;
                }
              else
                offset = 0;
            }
          }
        } else
          customAttribute = null;
      }
      if (dirtyVertices === true || t1) {
        this._gl.bindBuffer$2(34962, geometry.get$__webglVertexBuffer());
        this._gl.bufferData$3(34962, vertexArray, hint);
      }
      if (dirtyColors === true || t1) {
        this._gl.bindBuffer$2(34962, geometry.get$__webglColorBuffer());
        this._gl.bufferData$3(34962, colorArray, hint);
      }
      if (!(customAttributes == null)) {
        il = $.get$length(customAttributes);
        for (i = 0; $.ltB(i, il); ++i) {
          customAttribute = $.index(customAttributes, i);
          if (customAttribute.get$needsUpdate() === true || t1) {
            this._gl.bindBuffer$2(34962, customAttribute.get$buffer());
            this._gl.bufferData$3(34962, customAttribute.get$array(), hint);
          }
        }
      }
  }
},
 setLineBuffers$2: function(geometry, hint) {
  var vertices = geometry.get$vertices();
  if (typeof vertices !== 'string' && (typeof vertices !== 'object' || vertices === null || vertices.constructor !== Array && !vertices.is$JavaScriptIndexingBehavior()))
    return this.setLineBuffers$2$bailout(1, geometry, hint, vertices, 0, 0, 0, 0, 0, 0, 0, 0);
  var colors = geometry.get$colors();
  if (typeof colors !== 'string' && (typeof colors !== 'object' || colors === null || colors.constructor !== Array && !colors.is$JavaScriptIndexingBehavior()))
    return this.setLineBuffers$2$bailout(2, geometry, hint, vertices, colors, 0, 0, 0, 0, 0, 0, 0);
  var vl = vertices.length;
  var cl = colors.length;
  var vertexArray = geometry.get$__vertexArray();
  if (typeof vertexArray !== 'object' || vertexArray === null || (vertexArray.constructor !== Array || !!vertexArray.immutable$list) && !vertexArray.is$JavaScriptIndexingBehavior())
    return this.setLineBuffers$2$bailout(3, geometry, hint, vertices, colors, vl, cl, vertexArray, 0, 0, 0, 0);
  var colorArray = geometry.get$__colorArray();
  if (typeof colorArray !== 'object' || colorArray === null || (colorArray.constructor !== Array || !!colorArray.immutable$list) && !colorArray.is$JavaScriptIndexingBehavior())
    return this.setLineBuffers$2$bailout(4, geometry, hint, vertices, colors, vl, cl, vertexArray, colorArray, 0, 0, 0);
  var dirtyVertices = geometry.get$verticesNeedUpdate();
  var dirtyColors = geometry.get$colorsNeedUpdate();
  var customAttributes = geometry.get$__webglCustomAttributesList();
  if (typeof customAttributes !== 'string' && (typeof customAttributes !== 'object' || customAttributes === null || customAttributes.constructor !== Array && !customAttributes.is$JavaScriptIndexingBehavior()))
    return this.setLineBuffers$2$bailout(5, geometry, hint, vertices, colors, vl, cl, vertexArray, colorArray, dirtyVertices, dirtyColors, customAttributes);
  if (dirtyVertices === true) {
    for (var offset = null, v = 0, vertex = null; v < vl; ++v) {
      if (v < 0 || v >= vertices.length)
        throw $.ioore(v);
      vertex = vertices[v];
      offset = v * 3;
      var t1 = vertex.get$x();
      if (offset < 0 || offset >= vertexArray.length)
        throw $.ioore(offset);
      vertexArray[offset] = t1;
      t1 = offset + 1;
      var t2 = vertex.get$y();
      if (t1 < 0 || t1 >= vertexArray.length)
        throw $.ioore(t1);
      vertexArray[t1] = t2;
      t2 = offset + 2;
      t1 = vertex.get$z();
      if (t2 < 0 || t2 >= vertexArray.length)
        throw $.ioore(t2);
      vertexArray[t2] = t1;
    }
    this._gl.bindBuffer$2(34962, geometry.get$__webglVertexBuffer());
    this._gl.bufferData$3(34962, vertexArray, hint);
  } else
    offset = null;
  if (dirtyColors === true) {
    for (var c = 0, color = null; c < cl; ++c) {
      if (c < 0 || c >= colors.length)
        throw $.ioore(c);
      color = colors[c];
      offset = c * 3;
      t1 = color.get$r();
      if (offset < 0 || offset >= colorArray.length)
        throw $.ioore(offset);
      colorArray[offset] = t1;
      t1 = offset + 1;
      t2 = color.get$g();
      if (t1 < 0 || t1 >= colorArray.length)
        throw $.ioore(t1);
      colorArray[t1] = t2;
      t2 = offset + 2;
      t1 = color.get$b();
      if (t2 < 0 || t2 >= colorArray.length)
        throw $.ioore(t2);
      colorArray[t2] = t1;
    }
    this._gl.bindBuffer$2(34962, geometry.get$__webglColorBuffer());
    this._gl.bufferData$3(34962, colorArray, hint);
  }
  var il = customAttributes.length;
  for (var cal = null, customAttribute = null, value = null, i = 0, ca = null; i < il; ++i) {
    if (i < 0 || i >= customAttributes.length)
      throw $.ioore(i);
    customAttribute = customAttributes[i];
    if (customAttribute.get$needsUpdate() === true) {
      t1 = customAttribute.get$boundTo();
      t1 = t1 == null || $.eqB(t1, 'vertices');
    } else
      t1 = false;
    if (t1) {
      cal = $.get$length(customAttribute.get$value());
      if (customAttribute.get$size() === 1) {
        for (ca = 0; $.ltB(ca, cal); ++ca)
          $.indexSet(customAttribute.get$array(), ca, $.index(customAttribute.get$value(), ca));
        offset = 0;
      } else if (customAttribute.get$size() === 2)
        for (offset = 0, ca = 0; $.ltB(ca, cal); ++ca) {
          value = $.index(customAttribute.get$value(), ca);
          $.indexSet(customAttribute.get$array(), offset, value.get$x());
          $.indexSet(customAttribute.get$array(), offset + 1, value.get$y());
          offset += 2;
        }
      else if (customAttribute.get$size() === 3)
        if (customAttribute.get$type() === 'c')
          for (offset = 0, ca = 0; $.ltB(ca, cal); ++ca) {
            value = $.index(customAttribute.get$value(), ca);
            $.indexSet(customAttribute.get$array(), offset, value.get$r());
            $.indexSet(customAttribute.get$array(), offset + 1, value.get$g());
            $.indexSet(customAttribute.get$array(), offset + 2, value.get$b());
            offset += 3;
          }
        else
          for (offset = 0, ca = 0; $.ltB(ca, cal); ++ca) {
            value = $.index(customAttribute.get$value(), ca);
            $.indexSet(customAttribute.get$array(), offset, value.get$x());
            $.indexSet(customAttribute.get$array(), offset + 1, value.get$y());
            $.indexSet(customAttribute.get$array(), offset + 2, value.get$z());
            offset += 3;
          }
      else if (customAttribute.get$size() === 4)
        for (offset = 0, ca = 0; $.ltB(ca, cal); ++ca) {
          value = $.index(customAttribute.get$value(), ca);
          $.indexSet(customAttribute.get$array(), offset, value.get$x());
          $.indexSet(customAttribute.get$array(), offset + 1, value.get$y());
          $.indexSet(customAttribute.get$array(), offset + 2, value.get$z());
          $.indexSet(customAttribute.get$array(), offset + 3, value.get$w());
          offset += 4;
        }
      else
        offset = 0;
      this._gl.bindBuffer$2(34962, customAttribute.get$buffer());
      this._gl.bufferData$3(34962, customAttribute.get$array(), hint);
    }
  }
},
 setLineBuffers$2$bailout: function(state, env0, env1, env2, env3, env4, env5, env6, env7, env8, env9, env10) {
  switch (state) {
    case 1:
      var geometry = env0;
      var hint = env1;
      vertices = env2;
      break;
    case 2:
      geometry = env0;
      hint = env1;
      vertices = env2;
      colors = env3;
      break;
    case 3:
      geometry = env0;
      hint = env1;
      vertices = env2;
      colors = env3;
      vl = env4;
      cl = env5;
      vertexArray = env6;
      break;
    case 4:
      geometry = env0;
      hint = env1;
      vertices = env2;
      colors = env3;
      vl = env4;
      cl = env5;
      vertexArray = env6;
      colorArray = env7;
      break;
    case 5:
      geometry = env0;
      hint = env1;
      vertices = env2;
      colors = env3;
      vl = env4;
      cl = env5;
      vertexArray = env6;
      colorArray = env7;
      dirtyVertices = env8;
      dirtyColors = env9;
      customAttributes = env10;
      break;
  }
  switch (state) {
    case 0:
      var vertices = geometry.get$vertices();
    case 1:
      state = 0;
      var colors = geometry.get$colors();
    case 2:
      state = 0;
      var vl = $.get$length(vertices);
      var cl = $.get$length(colors);
      var vertexArray = geometry.get$__vertexArray();
    case 3:
      state = 0;
      var colorArray = geometry.get$__colorArray();
    case 4:
      state = 0;
      var dirtyVertices = geometry.get$verticesNeedUpdate();
      var dirtyColors = geometry.get$colorsNeedUpdate();
      var customAttributes = geometry.get$__webglCustomAttributesList();
    case 5:
      state = 0;
      if (dirtyVertices === true) {
        for (var offset = null, v = 0, vertex = null; $.ltB(v, vl); ++v) {
          vertex = $.index(vertices, v);
          offset = v * 3;
          $.indexSet(vertexArray, offset, vertex.get$x());
          $.indexSet(vertexArray, offset + 1, vertex.get$y());
          $.indexSet(vertexArray, offset + 2, vertex.get$z());
        }
        this._gl.bindBuffer$2(34962, geometry.get$__webglVertexBuffer());
        this._gl.bufferData$3(34962, vertexArray, hint);
      } else
        offset = null;
      if (dirtyColors === true) {
        for (var c = 0, color = null; $.ltB(c, cl); ++c) {
          color = $.index(colors, c);
          offset = c * 3;
          $.indexSet(colorArray, offset, color.get$r());
          $.indexSet(colorArray, offset + 1, color.get$g());
          $.indexSet(colorArray, offset + 2, color.get$b());
        }
        this._gl.bindBuffer$2(34962, geometry.get$__webglColorBuffer());
        this._gl.bufferData$3(34962, colorArray, hint);
      }
      if (!(customAttributes == null)) {
        var il = $.get$length(customAttributes);
        for (var cal = null, customAttribute = null, value = null, i = 0, ca = null; $.ltB(i, il); ++i) {
          customAttribute = $.index(customAttributes, i);
          if (customAttribute.get$needsUpdate() === true) {
            var t1 = customAttribute.get$boundTo();
            t1 = t1 == null || $.eqB(t1, 'vertices');
          } else
            t1 = false;
          if (t1) {
            cal = $.get$length(customAttribute.get$value());
            if (customAttribute.get$size() === 1) {
              for (ca = 0; $.ltB(ca, cal); ++ca)
                $.indexSet(customAttribute.get$array(), ca, $.index(customAttribute.get$value(), ca));
              offset = 0;
            } else if (customAttribute.get$size() === 2)
              for (offset = 0, ca = 0; $.ltB(ca, cal); ++ca) {
                value = $.index(customAttribute.get$value(), ca);
                $.indexSet(customAttribute.get$array(), offset, value.get$x());
                $.indexSet(customAttribute.get$array(), offset + 1, value.get$y());
                offset += 2;
              }
            else if (customAttribute.get$size() === 3)
              if (customAttribute.get$type() === 'c')
                for (offset = 0, ca = 0; $.ltB(ca, cal); ++ca) {
                  value = $.index(customAttribute.get$value(), ca);
                  $.indexSet(customAttribute.get$array(), offset, value.get$r());
                  $.indexSet(customAttribute.get$array(), offset + 1, value.get$g());
                  $.indexSet(customAttribute.get$array(), offset + 2, value.get$b());
                  offset += 3;
                }
              else
                for (offset = 0, ca = 0; $.ltB(ca, cal); ++ca) {
                  value = $.index(customAttribute.get$value(), ca);
                  $.indexSet(customAttribute.get$array(), offset, value.get$x());
                  $.indexSet(customAttribute.get$array(), offset + 1, value.get$y());
                  $.indexSet(customAttribute.get$array(), offset + 2, value.get$z());
                  offset += 3;
                }
            else if (customAttribute.get$size() === 4)
              for (offset = 0, ca = 0; $.ltB(ca, cal); ++ca) {
                value = $.index(customAttribute.get$value(), ca);
                $.indexSet(customAttribute.get$array(), offset, value.get$x());
                $.indexSet(customAttribute.get$array(), offset + 1, value.get$y());
                $.indexSet(customAttribute.get$array(), offset + 2, value.get$z());
                $.indexSet(customAttribute.get$array(), offset + 3, value.get$w());
                offset += 4;
              }
            else
              offset = 0;
            this._gl.bindBuffer$2(34962, customAttribute.get$buffer());
            this._gl.bufferData$3(34962, customAttribute.get$array(), hint);
          }
        }
      }
  }
},
 setRibbonBuffers$2: function(geometry, hint) {
  var vertices = geometry.get$vertices();
  if (typeof vertices !== 'string' && (typeof vertices !== 'object' || vertices === null || vertices.constructor !== Array && !vertices.is$JavaScriptIndexingBehavior()))
    return this.setRibbonBuffers$2$bailout(1, geometry, hint, vertices, 0, 0, 0, 0, 0);
  var colors = geometry.get$colors();
  if (typeof colors !== 'string' && (typeof colors !== 'object' || colors === null || colors.constructor !== Array && !colors.is$JavaScriptIndexingBehavior()))
    return this.setRibbonBuffers$2$bailout(2, geometry, hint, vertices, colors, 0, 0, 0, 0);
  var vl = vertices.length;
  var cl = colors.length;
  var vertexArray = geometry.get$__vertexArray();
  if (typeof vertexArray !== 'object' || vertexArray === null || (vertexArray.constructor !== Array || !!vertexArray.immutable$list) && !vertexArray.is$JavaScriptIndexingBehavior())
    return this.setRibbonBuffers$2$bailout(3, geometry, hint, vertices, colors, vl, cl, vertexArray, 0);
  var colorArray = geometry.get$__colorArray();
  if (typeof colorArray !== 'object' || colorArray === null || (colorArray.constructor !== Array || !!colorArray.immutable$list) && !colorArray.is$JavaScriptIndexingBehavior())
    return this.setRibbonBuffers$2$bailout(4, geometry, hint, vertices, colors, vl, cl, vertexArray, colorArray);
  var dirtyVertices = geometry.get$verticesNeedUpdate();
  var dirtyColors = geometry.get$colorsNeedUpdate();
  if (dirtyVertices === true) {
    for (var vertex = null, offset = null, v = 0; v < vl; ++v) {
      if (v < 0 || v >= vertices.length)
        throw $.ioore(v);
      vertex = vertices[v];
      offset = v * 3;
      var t1 = vertex.get$x();
      if (offset < 0 || offset >= vertexArray.length)
        throw $.ioore(offset);
      vertexArray[offset] = t1;
      t1 = offset + 1;
      var t2 = vertex.get$y();
      if (t1 < 0 || t1 >= vertexArray.length)
        throw $.ioore(t1);
      vertexArray[t1] = t2;
      t2 = offset + 2;
      t1 = vertex.get$z();
      if (t2 < 0 || t2 >= vertexArray.length)
        throw $.ioore(t2);
      vertexArray[t2] = t1;
    }
    this._gl.bindBuffer$2(34962, geometry.get$__webglVertexBuffer());
    this._gl.bufferData$3(34962, vertexArray, hint);
  } else
    offset = null;
  if (dirtyColors === true) {
    for (var color = null, c = 0; c < cl; ++c) {
      if (c < 0 || c >= colors.length)
        throw $.ioore(c);
      color = colors[c];
      offset = c * 3;
      t1 = color.get$r();
      if (offset < 0 || offset >= colorArray.length)
        throw $.ioore(offset);
      colorArray[offset] = t1;
      t1 = offset + 1;
      t2 = color.get$g();
      if (t1 < 0 || t1 >= colorArray.length)
        throw $.ioore(t1);
      colorArray[t1] = t2;
      t2 = offset + 2;
      t1 = color.get$b();
      if (t2 < 0 || t2 >= colorArray.length)
        throw $.ioore(t2);
      colorArray[t2] = t1;
    }
    this._gl.bindBuffer$2(34962, geometry.get$__webglColorBuffer());
    this._gl.bufferData$3(34962, colorArray, hint);
  }
},
 setRibbonBuffers$2$bailout: function(state, env0, env1, env2, env3, env4, env5, env6, env7) {
  switch (state) {
    case 1:
      var geometry = env0;
      var hint = env1;
      vertices = env2;
      break;
    case 2:
      geometry = env0;
      hint = env1;
      vertices = env2;
      colors = env3;
      break;
    case 3:
      geometry = env0;
      hint = env1;
      vertices = env2;
      colors = env3;
      vl = env4;
      cl = env5;
      vertexArray = env6;
      break;
    case 4:
      geometry = env0;
      hint = env1;
      vertices = env2;
      colors = env3;
      vl = env4;
      cl = env5;
      vertexArray = env6;
      colorArray = env7;
      break;
  }
  switch (state) {
    case 0:
      var vertices = geometry.get$vertices();
    case 1:
      state = 0;
      var colors = geometry.get$colors();
    case 2:
      state = 0;
      var vl = $.get$length(vertices);
      var cl = $.get$length(colors);
      var vertexArray = geometry.get$__vertexArray();
    case 3:
      state = 0;
      var colorArray = geometry.get$__colorArray();
    case 4:
      state = 0;
      var dirtyVertices = geometry.get$verticesNeedUpdate();
      var dirtyColors = geometry.get$colorsNeedUpdate();
      if (dirtyVertices === true) {
        for (var vertex = null, offset = null, v = 0; $.ltB(v, vl); ++v) {
          vertex = $.index(vertices, v);
          offset = v * 3;
          $.indexSet(vertexArray, offset, vertex.get$x());
          $.indexSet(vertexArray, offset + 1, vertex.get$y());
          $.indexSet(vertexArray, offset + 2, vertex.get$z());
        }
        this._gl.bindBuffer$2(34962, geometry.get$__webglVertexBuffer());
        this._gl.bufferData$3(34962, vertexArray, hint);
      } else
        offset = null;
      if (dirtyColors === true) {
        for (var color = null, c = 0; $.ltB(c, cl); ++c) {
          color = $.index(colors, c);
          offset = c * 3;
          $.indexSet(colorArray, offset, color.get$r());
          $.indexSet(colorArray, offset + 1, color.get$g());
          $.indexSet(colorArray, offset + 2, color.get$b());
        }
        this._gl.bindBuffer$2(34962, geometry.get$__webglColorBuffer());
        this._gl.bufferData$3(34962, colorArray, hint);
      }
  }
},
 setMeshBuffers$5: function(geometryGroup, object, hint, dispose, material) {
  if (geometryGroup.get$__inittedArrays() !== true)
    return;
  var normalType = this.bufferGuessNormalType$1(material);
  if (typeof normalType !== 'number')
    return this.setMeshBuffers$5$bailout(1, geometryGroup, object, hint, dispose, material, normalType, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var vertexColorType = this.bufferGuessVertexColorType$1(material);
  var uvType = this.bufferGuessUVType$1(material);
  var needsSmoothNormals = normalType === 2;
  var vertexArray = geometryGroup.get$__vertexArray();
  if (typeof vertexArray !== 'object' || vertexArray === null || (vertexArray.constructor !== Array || !!vertexArray.immutable$list) && !vertexArray.is$JavaScriptIndexingBehavior())
    return this.setMeshBuffers$5$bailout(2, geometryGroup, object, hint, dispose, material, uvType, normalType, vertexColorType, needsSmoothNormals, vertexArray, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var uvArray = geometryGroup.get$__uvArray();
  if (typeof uvArray !== 'object' || uvArray === null || (uvArray.constructor !== Array || !!uvArray.immutable$list) && !uvArray.is$JavaScriptIndexingBehavior())
    return this.setMeshBuffers$5$bailout(3, geometryGroup, object, hint, dispose, material, uvType, normalType, vertexColorType, needsSmoothNormals, uvArray, vertexArray, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var uv2Array = geometryGroup.get$__uv2Array();
  if (typeof uv2Array !== 'object' || uv2Array === null || (uv2Array.constructor !== Array || !!uv2Array.immutable$list) && !uv2Array.is$JavaScriptIndexingBehavior())
    return this.setMeshBuffers$5$bailout(4, geometryGroup, object, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var normalArray = geometryGroup.get$__normalArray();
  if (typeof normalArray !== 'object' || normalArray === null || (normalArray.constructor !== Array || !!normalArray.immutable$list) && !normalArray.is$JavaScriptIndexingBehavior())
    return this.setMeshBuffers$5$bailout(5, geometryGroup, object, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var tangentArray = geometryGroup.get$__tangentArray();
  if (typeof tangentArray !== 'object' || tangentArray === null || (tangentArray.constructor !== Array || !!tangentArray.immutable$list) && !tangentArray.is$JavaScriptIndexingBehavior())
    return this.setMeshBuffers$5$bailout(6, geometryGroup, object, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var colorArray = geometryGroup.get$__colorArray();
  if (typeof colorArray !== 'object' || colorArray === null || (colorArray.constructor !== Array || !!colorArray.immutable$list) && !colorArray.is$JavaScriptIndexingBehavior())
    return this.setMeshBuffers$5$bailout(7, geometryGroup, object, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var skinVertexAArray = geometryGroup.get$__skinVertexAArray();
  if (typeof skinVertexAArray !== 'object' || skinVertexAArray === null || (skinVertexAArray.constructor !== Array || !!skinVertexAArray.immutable$list) && !skinVertexAArray.is$JavaScriptIndexingBehavior())
    return this.setMeshBuffers$5$bailout(8, geometryGroup, object, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var skinVertexBArray = geometryGroup.get$__skinVertexBArray();
  if (typeof skinVertexBArray !== 'object' || skinVertexBArray === null || (skinVertexBArray.constructor !== Array || !!skinVertexBArray.immutable$list) && !skinVertexBArray.is$JavaScriptIndexingBehavior())
    return this.setMeshBuffers$5$bailout(9, geometryGroup, object, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var skinIndexArray = geometryGroup.get$__skinIndexArray();
  if (typeof skinIndexArray !== 'object' || skinIndexArray === null || (skinIndexArray.constructor !== Array || !!skinIndexArray.immutable$list) && !skinIndexArray.is$JavaScriptIndexingBehavior())
    return this.setMeshBuffers$5$bailout(10, geometryGroup, object, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var skinWeightArray = geometryGroup.get$__skinWeightArray();
  if (typeof skinWeightArray !== 'object' || skinWeightArray === null || (skinWeightArray.constructor !== Array || !!skinWeightArray.immutable$list) && !skinWeightArray.is$JavaScriptIndexingBehavior())
    return this.setMeshBuffers$5$bailout(11, geometryGroup, object, hint, dispose, material, skinWeightArray, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var morphTargetsArrays = geometryGroup.get$__morphTargetsArrays();
  if (typeof morphTargetsArrays !== 'string' && (typeof morphTargetsArrays !== 'object' || morphTargetsArrays === null || morphTargetsArrays.constructor !== Array && !morphTargetsArrays.is$JavaScriptIndexingBehavior()))
    return this.setMeshBuffers$5$bailout(12, geometryGroup, object, hint, dispose, material, skinWeightArray, morphTargetsArrays, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var morphNormalsArrays = geometryGroup.get$__morphNormalsArrays();
  if (typeof morphNormalsArrays !== 'string' && (typeof morphNormalsArrays !== 'object' || morphNormalsArrays === null || morphNormalsArrays.constructor !== Array && !morphNormalsArrays.is$JavaScriptIndexingBehavior()))
    return this.setMeshBuffers$5$bailout(13, geometryGroup, object, hint, dispose, material, morphNormalsArrays, skinWeightArray, morphTargetsArrays, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var customAttributes = geometryGroup.get$__webglCustomAttributesList();
  if (typeof customAttributes !== 'string' && (typeof customAttributes !== 'object' || customAttributes === null || customAttributes.constructor !== Array && !customAttributes.is$JavaScriptIndexingBehavior()))
    return this.setMeshBuffers$5$bailout(14, geometryGroup, object, hint, dispose, material, morphNormalsArrays, skinWeightArray, morphTargetsArrays, customAttributes, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var faceArray = geometryGroup.get$__faceArray();
  if (typeof faceArray !== 'object' || faceArray === null || (faceArray.constructor !== Array || !!faceArray.immutable$list) && !faceArray.is$JavaScriptIndexingBehavior())
    return this.setMeshBuffers$5$bailout(15, geometryGroup, object, hint, dispose, material, morphNormalsArrays, skinWeightArray, morphTargetsArrays, customAttributes, faceArray, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var lineArray = geometryGroup.get$__lineArray();
  if (typeof lineArray !== 'object' || lineArray === null || (lineArray.constructor !== Array || !!lineArray.immutable$list) && !lineArray.is$JavaScriptIndexingBehavior())
    return this.setMeshBuffers$5$bailout(16, geometryGroup, object, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var geometry = object.get$webglgeometry();
  var dirtyVertices = geometry.get$verticesNeedUpdate();
  var dirtyElements = geometry.get$elementsNeedUpdate();
  var dirtyUvs = geometry.get$uvsNeedUpdate();
  var dirtyNormals = geometry.get$normalsNeedUpdate();
  var dirtyTangents = geometry.get$tangentsNeedUpdate();
  var dirtyColors = geometry.get$colorsNeedUpdate();
  var dirtyMorphTargets = geometry.get$morphTargetsNeedUpdate();
  var vertices = geometry.get$vertices();
  if (typeof vertices !== 'string' && (typeof vertices !== 'object' || vertices === null || vertices.constructor !== Array && !vertices.is$JavaScriptIndexingBehavior()))
    return this.setMeshBuffers$5$bailout(17, geometryGroup, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var chunk_faces3 = geometryGroup.get$faces3();
  if (typeof chunk_faces3 !== 'string' && (typeof chunk_faces3 !== 'object' || chunk_faces3 === null || chunk_faces3.constructor !== Array && !chunk_faces3.is$JavaScriptIndexingBehavior()))
    return this.setMeshBuffers$5$bailout(18, geometryGroup, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var chunk_faces4 = geometryGroup.get$faces4();
  if (typeof chunk_faces4 !== 'string' && (typeof chunk_faces4 !== 'object' || chunk_faces4 === null || chunk_faces4.constructor !== Array && !chunk_faces4.is$JavaScriptIndexingBehavior()))
    return this.setMeshBuffers$5$bailout(19, geometryGroup, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var obj_faces = geometry.get$faces();
  if (typeof obj_faces !== 'string' && (typeof obj_faces !== 'object' || obj_faces === null || obj_faces.constructor !== Array && !obj_faces.is$JavaScriptIndexingBehavior()))
    return this.setMeshBuffers$5$bailout(20, geometryGroup, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, obj_faces, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var t21 = geometry.get$faceVertexUvs();
  if (typeof t21 !== 'string' && (typeof t21 !== 'object' || t21 === null || t21.constructor !== Array && !t21.is$JavaScriptIndexingBehavior()))
    return this.setMeshBuffers$5$bailout(21, geometryGroup, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, obj_faces, t21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  if (0 >= t21.length)
    throw $.ioore(0);
  var obj_uvs = t21[0];
  var t1 = $.get$length(geometry.get$faceVertexUvs());
  if (typeof t1 !== 'number')
    return this.setMeshBuffers$5$bailout(22, geometryGroup, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, obj_faces, obj_uvs, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  if (t1 > 1) {
    t1 = geometry.get$faceVertexUvs();
    if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.setMeshBuffers$5$bailout(23, geometryGroup, hint, dispose, material, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, obj_faces, obj_uvs, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    if (1 >= t1.length)
      throw $.ioore(1);
    var obj_uvs2 = t1[1];
  } else
    obj_uvs2 = null;
  geometry.get$colors();
  var obj_skinVerticesA = geometry.get$skinVerticesA();
  if (typeof obj_skinVerticesA !== 'string' && (typeof obj_skinVerticesA !== 'object' || obj_skinVerticesA === null || obj_skinVerticesA.constructor !== Array && !obj_skinVerticesA.is$JavaScriptIndexingBehavior()))
    return this.setMeshBuffers$5$bailout(24, geometryGroup, hint, dispose, material, obj_skinVerticesA, obj_uvs2, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, obj_faces, obj_uvs, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var obj_skinVerticesB = geometry.get$skinVerticesB();
  if (typeof obj_skinVerticesB !== 'string' && (typeof obj_skinVerticesB !== 'object' || obj_skinVerticesB === null || obj_skinVerticesB.constructor !== Array && !obj_skinVerticesB.is$JavaScriptIndexingBehavior()))
    return this.setMeshBuffers$5$bailout(25, geometryGroup, hint, dispose, material, obj_skinVerticesA, obj_uvs2, obj_skinVerticesB, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, obj_faces, obj_uvs, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var obj_skinIndices = geometry.get$skinIndices();
  if (typeof obj_skinIndices !== 'string' && (typeof obj_skinIndices !== 'object' || obj_skinIndices === null || obj_skinIndices.constructor !== Array && !obj_skinIndices.is$JavaScriptIndexingBehavior()))
    return this.setMeshBuffers$5$bailout(26, geometryGroup, hint, dispose, material, obj_skinVerticesA, obj_uvs2, obj_skinVerticesB, obj_skinIndices, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, obj_faces, obj_uvs, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var obj_skinWeights = geometry.get$skinWeights();
  if (typeof obj_skinWeights !== 'string' && (typeof obj_skinWeights !== 'object' || obj_skinWeights === null || obj_skinWeights.constructor !== Array && !obj_skinWeights.is$JavaScriptIndexingBehavior()))
    return this.setMeshBuffers$5$bailout(27, geometryGroup, hint, dispose, material, obj_skinVerticesA, obj_uvs2, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, obj_faces, obj_uvs, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var morphTargets = geometry.get$morphTargets();
  if (typeof morphTargets !== 'string' && (typeof morphTargets !== 'object' || morphTargets === null || morphTargets.constructor !== Array && !morphTargets.is$JavaScriptIndexingBehavior()))
    return this.setMeshBuffers$5$bailout(28, geometryGroup, hint, dispose, material, obj_skinVerticesA, obj_uvs2, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, obj_faces, obj_uvs, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var morphNormals = geometry.get$morphNormals();
  if (typeof morphNormals !== 'string' && (typeof morphNormals !== 'object' || morphNormals === null || morphNormals.constructor !== Array && !morphNormals.is$JavaScriptIndexingBehavior()))
    return this.setMeshBuffers$5$bailout(29, geometryGroup, hint, dispose, material, obj_skinVerticesA, obj_uvs2, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, normalType, vertexColorType, uvType, needsSmoothNormals, vertexArray, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, morphNormalsArrays, customAttributes, faceArray, lineArray, geometry, dirtyVertices, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, dirtyColors, dirtyMorphTargets, vertices, chunk_faces3, chunk_faces4, obj_faces, obj_uvs, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  if (dirtyVertices === true) {
    var fl = chunk_faces3.length;
    for (var offset = 0, v1 = null, v2 = null, v3 = null, face = null, f = 0; f < fl; ++f) {
      if (f < 0 || f >= chunk_faces3.length)
        throw $.ioore(f);
      t1 = chunk_faces3[f];
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= obj_faces.length)
        throw $.ioore(t1);
      face = obj_faces[t1];
      t1 = face.get$a();
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      var t2 = vertices.length;
      if (t1 < 0 || t1 >= t2)
        throw $.ioore(t1);
      v1 = vertices[t1];
      t1 = face.get$b();
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= t2)
        throw $.ioore(t1);
      v2 = vertices[t1];
      t1 = face.get$c();
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= t2)
        throw $.ioore(t1);
      v3 = vertices[t1];
      t1 = v1.get$x();
      if (offset < 0 || offset >= vertexArray.length)
        throw $.ioore(offset);
      vertexArray[offset] = t1;
      t1 = offset + 1;
      var t3 = v1.get$y();
      if (t1 < 0 || t1 >= vertexArray.length)
        throw $.ioore(t1);
      vertexArray[t1] = t3;
      t3 = offset + 2;
      t1 = v1.get$z();
      if (t3 < 0 || t3 >= vertexArray.length)
        throw $.ioore(t3);
      vertexArray[t3] = t1;
      t1 = offset + 3;
      t3 = v2.get$x();
      if (t1 < 0 || t1 >= vertexArray.length)
        throw $.ioore(t1);
      vertexArray[t1] = t3;
      t3 = offset + 4;
      t1 = v2.get$y();
      if (t3 < 0 || t3 >= vertexArray.length)
        throw $.ioore(t3);
      vertexArray[t3] = t1;
      t1 = offset + 5;
      t3 = v2.get$z();
      if (t1 < 0 || t1 >= vertexArray.length)
        throw $.ioore(t1);
      vertexArray[t1] = t3;
      t3 = offset + 6;
      t1 = v3.get$x();
      if (t3 < 0 || t3 >= vertexArray.length)
        throw $.ioore(t3);
      vertexArray[t3] = t1;
      t1 = offset + 7;
      t3 = v3.get$y();
      if (t1 < 0 || t1 >= vertexArray.length)
        throw $.ioore(t1);
      vertexArray[t1] = t3;
      t3 = offset + 8;
      t1 = v3.get$z();
      if (t3 < 0 || t3 >= vertexArray.length)
        throw $.ioore(t3);
      vertexArray[t3] = t1;
      offset += 9;
    }
    fl = chunk_faces4.length;
    for (var v4 = null, f = 0; f < fl; ++f) {
      if (f < 0 || f >= chunk_faces4.length)
        throw $.ioore(f);
      t1 = chunk_faces4[f];
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= obj_faces.length)
        throw $.ioore(t1);
      face = obj_faces[t1];
      t1 = face.get$a();
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      t2 = vertices.length;
      if (t1 < 0 || t1 >= t2)
        throw $.ioore(t1);
      v1 = vertices[t1];
      t1 = face.get$b();
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= t2)
        throw $.ioore(t1);
      v2 = vertices[t1];
      t1 = face.get$c();
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= t2)
        throw $.ioore(t1);
      v3 = vertices[t1];
      t1 = face.get$d();
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= t2)
        throw $.ioore(t1);
      v4 = vertices[t1];
      t1 = v1.get$x();
      if (offset < 0 || offset >= vertexArray.length)
        throw $.ioore(offset);
      vertexArray[offset] = t1;
      t1 = offset + 1;
      t3 = v1.get$y();
      if (t1 < 0 || t1 >= vertexArray.length)
        throw $.ioore(t1);
      vertexArray[t1] = t3;
      t3 = offset + 2;
      t1 = v1.get$z();
      if (t3 < 0 || t3 >= vertexArray.length)
        throw $.ioore(t3);
      vertexArray[t3] = t1;
      t1 = offset + 3;
      t3 = v2.get$x();
      if (t1 < 0 || t1 >= vertexArray.length)
        throw $.ioore(t1);
      vertexArray[t1] = t3;
      t3 = offset + 4;
      t1 = v2.get$y();
      if (t3 < 0 || t3 >= vertexArray.length)
        throw $.ioore(t3);
      vertexArray[t3] = t1;
      t1 = offset + 5;
      t3 = v2.get$z();
      if (t1 < 0 || t1 >= vertexArray.length)
        throw $.ioore(t1);
      vertexArray[t1] = t3;
      t3 = offset + 6;
      t1 = v3.get$x();
      if (t3 < 0 || t3 >= vertexArray.length)
        throw $.ioore(t3);
      vertexArray[t3] = t1;
      t1 = offset + 7;
      t3 = v3.get$y();
      if (t1 < 0 || t1 >= vertexArray.length)
        throw $.ioore(t1);
      vertexArray[t1] = t3;
      t3 = offset + 8;
      t1 = v3.get$z();
      if (t3 < 0 || t3 >= vertexArray.length)
        throw $.ioore(t3);
      vertexArray[t3] = t1;
      t1 = offset + 9;
      t3 = v4.get$x();
      if (t1 < 0 || t1 >= vertexArray.length)
        throw $.ioore(t1);
      vertexArray[t1] = t3;
      t3 = offset + 10;
      t1 = v4.get$y();
      if (t3 < 0 || t3 >= vertexArray.length)
        throw $.ioore(t3);
      vertexArray[t3] = t1;
      t1 = offset + 11;
      t3 = v4.get$z();
      if (t1 < 0 || t1 >= vertexArray.length)
        throw $.ioore(t1);
      vertexArray[t1] = t3;
      offset += 12;
    }
    this._gl.bindBuffer$2(34962, geometryGroup.get$__webglVertexBuffer());
    this._gl.bufferData$3(34962, vertexArray, hint);
  } else {
    v1 = null;
    v2 = null;
    v3 = null;
    fl = null;
    face = null;
    v4 = null;
    f = null;
  }
  if (dirtyMorphTargets === true) {
    var vkl = morphTargets.length;
    for (var n2 = null, offset_morphTarget = 0, n4 = null, n1 = null, faceVertexNormals = null, nka = null, vk = 0, chf = null, n3 = null, vka = null; vk < vkl; ++vk) {
      fl = chunk_faces3.length;
      for (offset_morphTarget = 0, f = 0; f < fl; ++f) {
        if (f < 0 || f >= chunk_faces3.length)
          throw $.ioore(f);
        chf = chunk_faces3[f];
        if (chf !== (chf | 0))
          throw $.iae(chf);
        if (chf < 0 || chf >= obj_faces.length)
          throw $.ioore(chf);
        face = obj_faces[chf];
        if (vk < 0 || vk >= morphTargets.length)
          throw $.ioore(vk);
        t1 = morphTargets[vk].get$vertices();
        if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
          return this.setMeshBuffers$5$bailout(30, geometryGroup, offset_morphTarget, t1, material, hint, dispose, n4, n1, normalType, vertexColorType, uvType, needsSmoothNormals, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, faceVertexNormals, morphNormalsArrays, customAttributes, morphTargetsArrays, faceArray, geometry, dirtyElements, dirtyUvs, dirtyNormals, lineArray, dirtyTangents, dirtyColors, chunk_faces3, chunk_faces4, obj_faces, obj_uvs, obj_uvs2, obj_skinVerticesA, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, nka, vk, v4, n3, f, vkl, fl, chf, face, n2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        t3 = face.get$a();
        if (t3 !== (t3 | 0))
          throw $.iae(t3);
        if (t3 < 0 || t3 >= t1.length)
          throw $.ioore(t3);
        v1 = t1[t3];
        if (vk < 0 || vk >= morphTargets.length)
          throw $.ioore(vk);
        t3 = morphTargets[vk].get$vertices();
        if (typeof t3 !== 'string' && (typeof t3 !== 'object' || t3 === null || t3.constructor !== Array && !t3.is$JavaScriptIndexingBehavior()))
          return this.setMeshBuffers$5$bailout(31, geometryGroup, offset_morphTarget, hint, v1, material, dispose, t3, n4, n1, normalType, vertexColorType, uvType, needsSmoothNormals, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, faceVertexNormals, morphNormalsArrays, customAttributes, morphTargetsArrays, faceArray, geometry, dirtyElements, dirtyUvs, dirtyNormals, lineArray, dirtyTangents, dirtyColors, chunk_faces3, chunk_faces4, obj_faces, obj_uvs, obj_uvs2, obj_skinVerticesA, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, nka, vk, v4, n3, f, vkl, fl, chf, face, n2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        var t4 = face.get$b();
        if (t4 !== (t4 | 0))
          throw $.iae(t4);
        if (t4 < 0 || t4 >= t3.length)
          throw $.ioore(t4);
        v2 = t3[t4];
        if (vk < 0 || vk >= morphTargets.length)
          throw $.ioore(vk);
        t4 = morphTargets[vk].get$vertices();
        if (typeof t4 !== 'string' && (typeof t4 !== 'object' || t4 === null || t4.constructor !== Array && !t4.is$JavaScriptIndexingBehavior()))
          return this.setMeshBuffers$5$bailout(32, geometryGroup, offset_morphTarget, hint, v1, material, dispose, n4, v2, t4, n1, normalType, vertexColorType, uvType, needsSmoothNormals, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, faceVertexNormals, morphNormalsArrays, customAttributes, morphTargetsArrays, faceArray, geometry, dirtyElements, dirtyUvs, dirtyNormals, lineArray, dirtyTangents, dirtyColors, chunk_faces3, chunk_faces4, obj_faces, obj_uvs, obj_uvs2, obj_skinVerticesA, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, nka, vk, v4, n3, f, vkl, fl, chf, face, n2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        var t5 = face.get$c();
        if (t5 !== (t5 | 0))
          throw $.iae(t5);
        if (t5 < 0 || t5 >= t4.length)
          throw $.ioore(t5);
        v3 = t4[t5];
        if (vk < 0 || vk >= morphTargetsArrays.length)
          throw $.ioore(vk);
        vka = morphTargetsArrays[vk];
        if (typeof vka !== 'object' || vka === null || (vka.constructor !== Array || !!vka.immutable$list) && !vka.is$JavaScriptIndexingBehavior())
          return this.setMeshBuffers$5$bailout(33, geometryGroup, offset_morphTarget, hint, v1, material, dispose, n4, v2, n1, v3, normalType, vka, uvType, vertexColorType, needsSmoothNormals, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, faceVertexNormals, morphNormalsArrays, customAttributes, morphTargetsArrays, faceArray, geometry, dirtyElements, dirtyUvs, dirtyNormals, lineArray, dirtyTangents, dirtyColors, chunk_faces3, chunk_faces4, obj_faces, obj_uvs, obj_uvs2, obj_skinVerticesA, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, nka, vk, v4, n3, f, vkl, fl, chf, face, n2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        t4 = v1.get$x();
        if (offset_morphTarget < 0 || offset_morphTarget >= vka.length)
          throw $.ioore(offset_morphTarget);
        vka[offset_morphTarget] = t4;
        t4 = offset_morphTarget + 1;
        var t6 = v1.get$y();
        if (t4 < 0 || t4 >= vka.length)
          throw $.ioore(t4);
        vka[t4] = t6;
        t6 = offset_morphTarget + 2;
        var t7 = v1.get$z();
        if (t6 < 0 || t6 >= vka.length)
          throw $.ioore(t6);
        vka[t6] = t7;
        t7 = offset_morphTarget + 3;
        var t8 = v2.get$x();
        if (t7 < 0 || t7 >= vka.length)
          throw $.ioore(t7);
        vka[t7] = t8;
        t8 = offset_morphTarget + 4;
        var t9 = v2.get$y();
        if (t8 < 0 || t8 >= vka.length)
          throw $.ioore(t8);
        vka[t8] = t9;
        t9 = offset_morphTarget + 5;
        var t10 = v2.get$z();
        if (t9 < 0 || t9 >= vka.length)
          throw $.ioore(t9);
        vka[t9] = t10;
        t10 = offset_morphTarget + 6;
        var t11 = v3.get$x();
        if (t10 < 0 || t10 >= vka.length)
          throw $.ioore(t10);
        vka[t10] = t11;
        t11 = offset_morphTarget + 7;
        var t12 = v3.get$y();
        if (t11 < 0 || t11 >= vka.length)
          throw $.ioore(t11);
        vka[t11] = t12;
        t12 = offset_morphTarget + 8;
        var t13 = v3.get$z();
        if (t12 < 0 || t12 >= vka.length)
          throw $.ioore(t12);
        vka[t12] = t13;
        if (material.get$morphNormals() === true) {
          t1 = morphNormals.length;
          if (needsSmoothNormals) {
            if (vk < 0 || vk >= t1)
              throw $.ioore(vk);
            faceVertexNormals = $.index(morphNormals[vk].get$vertexNormals(), chf);
            n1 = faceVertexNormals.get$a();
            n2 = faceVertexNormals.get$b();
            n3 = faceVertexNormals.get$c();
          } else {
            if (vk < 0 || vk >= t1)
              throw $.ioore(vk);
            n1 = $.index(morphNormals[vk].get$faceNormals(), chf);
            n3 = n1;
            n2 = n3;
          }
          if (vk < 0 || vk >= morphNormalsArrays.length)
            throw $.ioore(vk);
          nka = morphNormalsArrays[vk];
          if (typeof nka !== 'object' || nka === null || (nka.constructor !== Array || !!nka.immutable$list) && !nka.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(34, geometryGroup, offset_morphTarget, hint, v1, material, dispose, n4, v2, v3, normalType, vka, uvType, vertexColorType, needsSmoothNormals, t4, uv2Array, normalArray, tangentArray, colorArray, t6, uvArray, skinIndexArray, skinVertexAArray, morphTargetsArrays, t7, morphNormalsArrays, skinVertexBArray, faceArray, skinWeightArray, t8, lineArray, customAttributes, dirtyUvs, dirtyElements, t9, dirtyNormals, dirtyTangents, chunk_faces3, chunk_faces4, t10, obj_faces, obj_uvs, geometry, t11, t12, dirtyColors, obj_uvs2, obj_skinVerticesA, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, vk, n2, n1, faceVertexNormals, n3, nka, v4, f, vkl, fl, chf, face, 0, 0, 0);
          t2 = n1.get$x();
          if (offset_morphTarget < 0 || offset_morphTarget >= nka.length)
            throw $.ioore(offset_morphTarget);
          nka[offset_morphTarget] = t2;
          t2 = n1.get$y();
          if (t4 < 0 || t4 >= nka.length)
            throw $.ioore(t4);
          nka[t4] = t2;
          t2 = n1.get$z();
          if (t6 < 0 || t6 >= nka.length)
            throw $.ioore(t6);
          nka[t6] = t2;
          t2 = n2.get$x();
          if (t7 < 0 || t7 >= nka.length)
            throw $.ioore(t7);
          nka[t7] = t2;
          t2 = n2.get$y();
          if (t8 < 0 || t8 >= nka.length)
            throw $.ioore(t8);
          nka[t8] = t2;
          t2 = n2.get$z();
          if (t9 < 0 || t9 >= nka.length)
            throw $.ioore(t9);
          nka[t9] = t2;
          t2 = n3.get$x();
          if (t10 < 0 || t10 >= nka.length)
            throw $.ioore(t10);
          nka[t10] = t2;
          t2 = n3.get$y();
          if (t11 < 0 || t11 >= nka.length)
            throw $.ioore(t11);
          nka[t11] = t2;
          t2 = n3.get$z();
          if (t12 < 0 || t12 >= nka.length)
            throw $.ioore(t12);
          nka[t12] = t2;
        }
        offset_morphTarget += 9;
      }
      fl = chunk_faces4.length;
      for (f = 0; f < fl; ++f) {
        if (f < 0 || f >= chunk_faces4.length)
          throw $.ioore(f);
        chf = chunk_faces4[f];
        if (chf !== (chf | 0))
          throw $.iae(chf);
        if (chf < 0 || chf >= obj_faces.length)
          throw $.ioore(chf);
        face = obj_faces[chf];
        if (vk < 0 || vk >= morphTargets.length)
          throw $.ioore(vk);
        t1 = morphTargets[vk].get$vertices();
        if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
          return this.setMeshBuffers$5$bailout(35, geometryGroup, hint, n3, material, dispose, normalType, vertexColorType, uvType, f, needsSmoothNormals, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, chf, morphNormalsArrays, face, n2, customAttributes, fl, offset_morphTarget, t1, n4, lineArray, geometry, dirtyNormals, faceArray, dirtyUvs, chunk_faces4, obj_faces, dirtyElements, n1, dirtyTangents, dirtyColors, obj_uvs, chunk_faces3, obj_uvs2, obj_skinVerticesA, obj_skinVerticesB, faceVertexNormals, obj_skinIndices, morphTargets, morphNormals, obj_skinWeights, vk, nka, vkl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        t3 = face.get$a();
        if (t3 !== (t3 | 0))
          throw $.iae(t3);
        if (t3 < 0 || t3 >= t1.length)
          throw $.ioore(t3);
        v1 = t1[t3];
        if (vk < 0 || vk >= morphTargets.length)
          throw $.ioore(vk);
        t3 = morphTargets[vk].get$vertices();
        if (typeof t3 !== 'string' && (typeof t3 !== 'object' || t3 === null || t3.constructor !== Array && !t3.is$JavaScriptIndexingBehavior()))
          return this.setMeshBuffers$5$bailout(36, geometryGroup, hint, n3, material, dispose, normalType, vertexColorType, uvType, f, needsSmoothNormals, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, chf, morphNormalsArrays, face, n2, customAttributes, fl, offset_morphTarget, n4, v1, lineArray, geometry, dirtyNormals, t3, dirtyUvs, chunk_faces4, obj_faces, dirtyElements, faceArray, n1, dirtyTangents, dirtyColors, obj_uvs, chunk_faces3, obj_uvs2, obj_skinVerticesA, obj_skinVerticesB, faceVertexNormals, obj_skinIndices, morphTargets, morphNormals, obj_skinWeights, vk, nka, vkl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        t4 = face.get$b();
        if (t4 !== (t4 | 0))
          throw $.iae(t4);
        if (t4 < 0 || t4 >= t3.length)
          throw $.ioore(t4);
        v2 = t3[t4];
        if (vk < 0 || vk >= morphTargets.length)
          throw $.ioore(vk);
        t4 = morphTargets[vk].get$vertices();
        if (typeof t4 !== 'string' && (typeof t4 !== 'object' || t4 === null || t4.constructor !== Array && !t4.is$JavaScriptIndexingBehavior()))
          return this.setMeshBuffers$5$bailout(37, geometryGroup, hint, n3, material, dispose, normalType, vertexColorType, uvType, f, needsSmoothNormals, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, chf, morphNormalsArrays, face, n2, customAttributes, fl, offset_morphTarget, n4, v1, lineArray, geometry, dirtyNormals, faceArray, dirtyUvs, v2, chunk_faces4, obj_faces, n1, t4, dirtyColors, dirtyElements, chunk_faces3, dirtyTangents, obj_uvs, obj_uvs2, obj_skinVerticesA, obj_skinVerticesB, faceVertexNormals, obj_skinIndices, morphTargets, morphNormals, obj_skinWeights, vk, nka, vkl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        t5 = face.get$c();
        if (t5 !== (t5 | 0))
          throw $.iae(t5);
        if (t5 < 0 || t5 >= t4.length)
          throw $.ioore(t5);
        v3 = t4[t5];
        if (vk < 0 || vk >= morphTargets.length)
          throw $.ioore(vk);
        t5 = morphTargets[vk].get$vertices();
        if (typeof t5 !== 'string' && (typeof t5 !== 'object' || t5 === null || t5.constructor !== Array && !t5.is$JavaScriptIndexingBehavior()))
          return this.setMeshBuffers$5$bailout(38, geometryGroup, hint, n3, material, dispose, normalType, vertexColorType, uvType, f, needsSmoothNormals, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, chf, morphNormalsArrays, face, n2, customAttributes, fl, offset_morphTarget, n4, v1, lineArray, geometry, dirtyNormals, faceArray, dirtyUvs, v2, chunk_faces4, obj_faces, n1, dirtyTangents, v3, dirtyElements, chunk_faces3, t5, dirtyColors, obj_uvs, obj_uvs2, obj_skinVerticesA, obj_skinVerticesB, faceVertexNormals, obj_skinIndices, morphTargets, morphNormals, obj_skinWeights, vk, nka, vkl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        t6 = face.get$d();
        if (t6 !== (t6 | 0))
          throw $.iae(t6);
        if (t6 < 0 || t6 >= t5.length)
          throw $.ioore(t6);
        v4 = t5[t6];
        if (vk < 0 || vk >= morphTargetsArrays.length)
          throw $.ioore(vk);
        vka = morphTargetsArrays[vk];
        if (typeof vka !== 'object' || vka === null || (vka.constructor !== Array || !!vka.immutable$list) && !vka.is$JavaScriptIndexingBehavior())
          return this.setMeshBuffers$5$bailout(39, geometryGroup, hint, n3, material, dispose, normalType, vertexColorType, uvType, f, needsSmoothNormals, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, morphTargetsArrays, chf, morphNormalsArrays, face, n2, customAttributes, fl, offset_morphTarget, n4, v1, lineArray, geometry, dirtyNormals, faceArray, dirtyUvs, v2, chunk_faces4, obj_faces, n1, dirtyTangents, v3, dirtyElements, chunk_faces3, obj_uvs, dirtyColors, v4, vka, obj_uvs2, obj_skinVerticesA, obj_skinVerticesB, faceVertexNormals, obj_skinIndices, morphTargets, morphNormals, obj_skinWeights, vk, nka, vkl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        t5 = v1.get$x();
        if (offset_morphTarget < 0 || offset_morphTarget >= vka.length)
          throw $.ioore(offset_morphTarget);
        vka[offset_morphTarget] = t5;
        t5 = offset_morphTarget + 1;
        t7 = v1.get$y();
        if (t5 < 0 || t5 >= vka.length)
          throw $.ioore(t5);
        vka[t5] = t7;
        t7 = offset_morphTarget + 2;
        t8 = v1.get$z();
        if (t7 < 0 || t7 >= vka.length)
          throw $.ioore(t7);
        vka[t7] = t8;
        t8 = offset_morphTarget + 3;
        t9 = v2.get$x();
        if (t8 < 0 || t8 >= vka.length)
          throw $.ioore(t8);
        vka[t8] = t9;
        t9 = offset_morphTarget + 4;
        t10 = v2.get$y();
        if (t9 < 0 || t9 >= vka.length)
          throw $.ioore(t9);
        vka[t9] = t10;
        t10 = offset_morphTarget + 5;
        t11 = v2.get$z();
        if (t10 < 0 || t10 >= vka.length)
          throw $.ioore(t10);
        vka[t10] = t11;
        t11 = offset_morphTarget + 6;
        t12 = v3.get$x();
        if (t11 < 0 || t11 >= vka.length)
          throw $.ioore(t11);
        vka[t11] = t12;
        t12 = offset_morphTarget + 7;
        t13 = v3.get$y();
        if (t12 < 0 || t12 >= vka.length)
          throw $.ioore(t12);
        vka[t12] = t13;
        t13 = offset_morphTarget + 8;
        var t14 = v3.get$z();
        if (t13 < 0 || t13 >= vka.length)
          throw $.ioore(t13);
        vka[t13] = t14;
        t14 = offset_morphTarget + 9;
        var t15 = v4.get$x();
        if (t14 < 0 || t14 >= vka.length)
          throw $.ioore(t14);
        vka[t14] = t15;
        t15 = offset_morphTarget + 10;
        var t16 = v4.get$y();
        if (t15 < 0 || t15 >= vka.length)
          throw $.ioore(t15);
        vka[t15] = t16;
        t16 = offset_morphTarget + 11;
        var t17 = v4.get$z();
        if (t16 < 0 || t16 >= vka.length)
          throw $.ioore(t16);
        vka[t16] = t17;
        if (material.get$morphNormals() === true) {
          t1 = morphNormals.length;
          if (needsSmoothNormals) {
            if (vk < 0 || vk >= t1)
              throw $.ioore(vk);
            faceVertexNormals = $.index(morphNormals[vk].get$vertexNormals(), chf);
            n1 = faceVertexNormals.get$a();
            n2 = faceVertexNormals.get$b();
            n3 = faceVertexNormals.get$c();
            n4 = faceVertexNormals.get$d();
          } else {
            if (vk < 0 || vk >= t1)
              throw $.ioore(vk);
            n1 = $.index(morphNormals[vk].get$faceNormals(), chf);
            n3 = n1;
            n4 = n3;
            n2 = n4;
          }
          if (vk < 0 || vk >= morphNormalsArrays.length)
            throw $.ioore(vk);
          nka = morphNormalsArrays[vk];
          if (typeof nka !== 'object' || nka === null || (nka.constructor !== Array || !!nka.immutable$list) && !nka.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(40, geometryGroup, hint, dispose, material, n2, n4, n1, f, n3, needsSmoothNormals, nka, vertexColorType, uvType, faceVertexNormals, normalType, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, morphTargetsArrays, chf, morphNormalsArrays, face, skinIndexArray, skinWeightArray, fl, offset_morphTarget, customAttributes, v1, lineArray, geometry, skinVertexBArray, faceArray, dirtyUvs, v2, obj_faces, dirtyElements, chunk_faces4, dirtyNormals, dirtyTangents, v3, obj_uvs, chunk_faces3, dirtyColors, v4, vka, obj_uvs2, t5, obj_skinVerticesA, obj_skinVerticesB, obj_skinIndices, obj_skinWeights, t7, morphTargets, morphNormals, t8, vk, t9, t10, t11, t12, t13, t14, t15, t16, vkl);
          t2 = n1.get$x();
          if (offset_morphTarget < 0 || offset_morphTarget >= nka.length)
            throw $.ioore(offset_morphTarget);
          nka[offset_morphTarget] = t2;
          t2 = n1.get$y();
          if (t5 < 0 || t5 >= nka.length)
            throw $.ioore(t5);
          nka[t5] = t2;
          t2 = n1.get$z();
          if (t7 < 0 || t7 >= nka.length)
            throw $.ioore(t7);
          nka[t7] = t2;
          t2 = n2.get$x();
          if (t8 < 0 || t8 >= nka.length)
            throw $.ioore(t8);
          nka[t8] = t2;
          t2 = n2.get$y();
          if (t9 < 0 || t9 >= nka.length)
            throw $.ioore(t9);
          nka[t9] = t2;
          t2 = n2.get$z();
          if (t10 < 0 || t10 >= nka.length)
            throw $.ioore(t10);
          nka[t10] = t2;
          t2 = n3.get$x();
          if (t11 < 0 || t11 >= nka.length)
            throw $.ioore(t11);
          nka[t11] = t2;
          t2 = n3.get$y();
          if (t12 < 0 || t12 >= nka.length)
            throw $.ioore(t12);
          nka[t12] = t2;
          t2 = n3.get$z();
          if (t13 < 0 || t13 >= nka.length)
            throw $.ioore(t13);
          nka[t13] = t2;
          t2 = n4.get$x();
          if (t14 < 0 || t14 >= nka.length)
            throw $.ioore(t14);
          nka[t14] = t2;
          t2 = n4.get$y();
          if (t15 < 0 || t15 >= nka.length)
            throw $.ioore(t15);
          nka[t15] = t2;
          t2 = n4.get$z();
          if (t16 < 0 || t16 >= nka.length)
            throw $.ioore(t16);
          nka[t16] = t2;
        }
        offset_morphTarget += 12;
      }
      t1 = this._gl;
      t2 = geometryGroup.get$__webglMorphTargetsBuffers();
      if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
        return this.setMeshBuffers$5$bailout(41, geometryGroup, hint, n3, v4, material, dispose, vka, normalType, vertexColorType, uvType, f, needsSmoothNormals, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, fl, morphTargetsArrays, morphNormalsArrays, faceArray, n2, customAttributes, geometry, offset_morphTarget, n4, dirtyUvs, lineArray, dirtyTangents, dirtyNormals, dirtyElements, chunk_faces3, chunk_faces4, obj_faces, dirtyColors, n1, obj_uvs, v1, t1, obj_uvs2, obj_skinVerticesA, obj_skinVerticesB, faceVertexNormals, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, vk, v3, v2, t2, nka, face, vkl, chf, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      if (vk < 0 || vk >= t2.length)
        throw $.ioore(vk);
      t1.bindBuffer$2(34962, t2[vk]);
      t1 = this._gl;
      if (vk < 0 || vk >= morphTargetsArrays.length)
        throw $.ioore(vk);
      t1.bufferData$3(34962, morphTargetsArrays[vk], hint);
      if (material.get$morphNormals() === true) {
        t1 = this._gl;
        t2 = geometryGroup.get$__webglMorphNormalsBuffers();
        if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
          return this.setMeshBuffers$5$bailout(42, geometryGroup, hint, n3, v4, material, dispose, vka, normalType, vertexColorType, uvType, f, needsSmoothNormals, uvArray, uv2Array, normalArray, tangentArray, colorArray, skinVertexAArray, skinVertexBArray, skinIndexArray, skinWeightArray, fl, morphNormalsArrays, customAttributes, morphTargetsArrays, n2, geometry, faceArray, offset_morphTarget, n4, dirtyUvs, lineArray, dirtyTangents, dirtyNormals, dirtyElements, chunk_faces3, chunk_faces4, obj_faces, dirtyColors, n1, obj_uvs, v1, obj_uvs2, t1, obj_skinVerticesA, obj_skinVerticesB, faceVertexNormals, obj_skinIndices, obj_skinWeights, morphTargets, morphNormals, vk, v3, v2, nka, face, vkl, chf, t2, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        if (vk < 0 || vk >= t2.length)
          throw $.ioore(vk);
        t1.bindBuffer$2(34962, t2[vk]);
        t1 = this._gl;
        if (vk < 0 || vk >= morphNormalsArrays.length)
          throw $.ioore(vk);
        t1.bufferData$3(34962, morphNormalsArrays[vk], hint);
      }
    }
  }
  if ($.isEmpty(obj_skinWeights) !== true) {
    fl = chunk_faces3.length;
    for (var offset_skin = 0, sa2 = null, sb1 = null, si1 = null, sb3 = null, sw2 = null, sb2 = null, sw1 = null, si2 = null, sa3 = null, si3 = null, f = 0, sw3 = null, sa1 = null; f < fl; ++f) {
      if (f < 0 || f >= chunk_faces3.length)
        throw $.ioore(f);
      t1 = chunk_faces3[f];
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= obj_faces.length)
        throw $.ioore(t1);
      face = obj_faces[t1];
      t1 = face.get$a();
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      t2 = obj_skinWeights.length;
      if (t1 < 0 || t1 >= t2)
        throw $.ioore(t1);
      sw1 = obj_skinWeights[t1];
      t1 = face.get$b();
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= t2)
        throw $.ioore(t1);
      sw2 = obj_skinWeights[t1];
      t1 = face.get$c();
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= t2)
        throw $.ioore(t1);
      sw3 = obj_skinWeights[t1];
      t1 = sw1.get$x();
      if (offset_skin < 0 || offset_skin >= skinWeightArray.length)
        throw $.ioore(offset_skin);
      skinWeightArray[offset_skin] = t1;
      t1 = offset_skin + 1;
      t3 = sw1.get$y();
      if (t1 < 0 || t1 >= skinWeightArray.length)
        throw $.ioore(t1);
      skinWeightArray[t1] = t3;
      t3 = offset_skin + 2;
      t4 = sw1.get$z();
      if (t3 < 0 || t3 >= skinWeightArray.length)
        throw $.ioore(t3);
      skinWeightArray[t3] = t4;
      t4 = offset_skin + 3;
      t5 = sw1.get$w();
      if (t4 < 0 || t4 >= skinWeightArray.length)
        throw $.ioore(t4);
      skinWeightArray[t4] = t5;
      t5 = offset_skin + 4;
      t6 = sw2.get$x();
      if (t5 < 0 || t5 >= skinWeightArray.length)
        throw $.ioore(t5);
      skinWeightArray[t5] = t6;
      t6 = offset_skin + 5;
      t7 = sw2.get$y();
      if (t6 < 0 || t6 >= skinWeightArray.length)
        throw $.ioore(t6);
      skinWeightArray[t6] = t7;
      t7 = offset_skin + 6;
      t8 = sw2.get$z();
      if (t7 < 0 || t7 >= skinWeightArray.length)
        throw $.ioore(t7);
      skinWeightArray[t7] = t8;
      t8 = offset_skin + 7;
      t9 = sw2.get$w();
      if (t8 < 0 || t8 >= skinWeightArray.length)
        throw $.ioore(t8);
      skinWeightArray[t8] = t9;
      t9 = offset_skin + 8;
      t10 = sw3.get$x();
      if (t9 < 0 || t9 >= skinWeightArray.length)
        throw $.ioore(t9);
      skinWeightArray[t9] = t10;
      t10 = offset_skin + 9;
      t11 = sw3.get$y();
      if (t10 < 0 || t10 >= skinWeightArray.length)
        throw $.ioore(t10);
      skinWeightArray[t10] = t11;
      t11 = offset_skin + 10;
      t12 = sw3.get$z();
      if (t11 < 0 || t11 >= skinWeightArray.length)
        throw $.ioore(t11);
      skinWeightArray[t11] = t12;
      t12 = offset_skin + 11;
      t13 = sw3.get$w();
      if (t12 < 0 || t12 >= skinWeightArray.length)
        throw $.ioore(t12);
      skinWeightArray[t12] = t13;
      t13 = face.get$a();
      if (t13 !== (t13 | 0))
        throw $.iae(t13);
      t14 = obj_skinIndices.length;
      if (t13 < 0 || t13 >= t14)
        throw $.ioore(t13);
      si1 = obj_skinIndices[t13];
      t13 = face.get$b();
      if (t13 !== (t13 | 0))
        throw $.iae(t13);
      if (t13 < 0 || t13 >= t14)
        throw $.ioore(t13);
      si2 = obj_skinIndices[t13];
      t13 = face.get$c();
      if (t13 !== (t13 | 0))
        throw $.iae(t13);
      if (t13 < 0 || t13 >= t14)
        throw $.ioore(t13);
      si3 = obj_skinIndices[t13];
      t13 = si1.get$x();
      if (offset_skin < 0 || offset_skin >= skinIndexArray.length)
        throw $.ioore(offset_skin);
      skinIndexArray[offset_skin] = t13;
      t13 = si1.get$y();
      if (t1 < 0 || t1 >= skinIndexArray.length)
        throw $.ioore(t1);
      skinIndexArray[t1] = t13;
      t13 = si1.get$z();
      if (t3 < 0 || t3 >= skinIndexArray.length)
        throw $.ioore(t3);
      skinIndexArray[t3] = t13;
      t13 = si1.get$w();
      if (t4 < 0 || t4 >= skinIndexArray.length)
        throw $.ioore(t4);
      skinIndexArray[t4] = t13;
      t13 = si2.get$x();
      if (t5 < 0 || t5 >= skinIndexArray.length)
        throw $.ioore(t5);
      skinIndexArray[t5] = t13;
      t13 = si2.get$y();
      if (t6 < 0 || t6 >= skinIndexArray.length)
        throw $.ioore(t6);
      skinIndexArray[t6] = t13;
      t13 = si2.get$z();
      if (t7 < 0 || t7 >= skinIndexArray.length)
        throw $.ioore(t7);
      skinIndexArray[t7] = t13;
      t13 = si2.get$w();
      if (t8 < 0 || t8 >= skinIndexArray.length)
        throw $.ioore(t8);
      skinIndexArray[t8] = t13;
      t13 = si3.get$x();
      if (t9 < 0 || t9 >= skinIndexArray.length)
        throw $.ioore(t9);
      skinIndexArray[t9] = t13;
      t13 = si3.get$y();
      if (t10 < 0 || t10 >= skinIndexArray.length)
        throw $.ioore(t10);
      skinIndexArray[t10] = t13;
      t13 = si3.get$z();
      if (t11 < 0 || t11 >= skinIndexArray.length)
        throw $.ioore(t11);
      skinIndexArray[t11] = t13;
      t13 = si3.get$w();
      if (t12 < 0 || t12 >= skinIndexArray.length)
        throw $.ioore(t12);
      skinIndexArray[t12] = t13;
      t13 = face.get$a();
      if (t13 !== (t13 | 0))
        throw $.iae(t13);
      t15 = obj_skinVerticesA.length;
      if (t13 < 0 || t13 >= t15)
        throw $.ioore(t13);
      sa1 = obj_skinVerticesA[t13];
      t13 = face.get$b();
      if (t13 !== (t13 | 0))
        throw $.iae(t13);
      if (t13 < 0 || t13 >= t15)
        throw $.ioore(t13);
      sa2 = obj_skinVerticesA[t13];
      t13 = face.get$c();
      if (t13 !== (t13 | 0))
        throw $.iae(t13);
      if (t13 < 0 || t13 >= t15)
        throw $.ioore(t13);
      sa3 = obj_skinVerticesA[t13];
      t13 = sa1.get$x();
      if (offset_skin < 0 || offset_skin >= skinVertexAArray.length)
        throw $.ioore(offset_skin);
      skinVertexAArray[offset_skin] = t13;
      t13 = sa1.get$y();
      if (t1 < 0 || t1 >= skinVertexAArray.length)
        throw $.ioore(t1);
      skinVertexAArray[t1] = t13;
      t13 = sa1.get$z();
      if (t3 < 0 || t3 >= skinVertexAArray.length)
        throw $.ioore(t3);
      skinVertexAArray[t3] = t13;
      if (t4 < 0 || t4 >= skinVertexAArray.length)
        throw $.ioore(t4);
      skinVertexAArray[t4] = 1;
      t13 = sa2.get$x();
      if (t5 < 0 || t5 >= skinVertexAArray.length)
        throw $.ioore(t5);
      skinVertexAArray[t5] = t13;
      t13 = sa2.get$y();
      if (t6 < 0 || t6 >= skinVertexAArray.length)
        throw $.ioore(t6);
      skinVertexAArray[t6] = t13;
      t13 = sa2.get$z();
      if (t7 < 0 || t7 >= skinVertexAArray.length)
        throw $.ioore(t7);
      skinVertexAArray[t7] = t13;
      if (t8 < 0 || t8 >= skinVertexAArray.length)
        throw $.ioore(t8);
      skinVertexAArray[t8] = 1;
      t13 = sa3.get$x();
      if (t9 < 0 || t9 >= skinVertexAArray.length)
        throw $.ioore(t9);
      skinVertexAArray[t9] = t13;
      t13 = sa3.get$y();
      if (t10 < 0 || t10 >= skinVertexAArray.length)
        throw $.ioore(t10);
      skinVertexAArray[t10] = t13;
      t13 = sa3.get$z();
      if (t11 < 0 || t11 >= skinVertexAArray.length)
        throw $.ioore(t11);
      skinVertexAArray[t11] = t13;
      if (t12 < 0 || t12 >= skinVertexAArray.length)
        throw $.ioore(t12);
      skinVertexAArray[t12] = 1;
      t13 = face.get$a();
      if (t13 !== (t13 | 0))
        throw $.iae(t13);
      t16 = obj_skinVerticesB.length;
      if (t13 < 0 || t13 >= t16)
        throw $.ioore(t13);
      sb1 = obj_skinVerticesB[t13];
      t13 = face.get$b();
      if (t13 !== (t13 | 0))
        throw $.iae(t13);
      if (t13 < 0 || t13 >= t16)
        throw $.ioore(t13);
      sb2 = obj_skinVerticesB[t13];
      t13 = face.get$c();
      if (t13 !== (t13 | 0))
        throw $.iae(t13);
      if (t13 < 0 || t13 >= t16)
        throw $.ioore(t13);
      sb3 = obj_skinVerticesB[t13];
      t13 = sb1.get$x();
      if (offset_skin < 0 || offset_skin >= skinVertexBArray.length)
        throw $.ioore(offset_skin);
      skinVertexBArray[offset_skin] = t13;
      t13 = sb1.get$y();
      if (t1 < 0 || t1 >= skinVertexBArray.length)
        throw $.ioore(t1);
      skinVertexBArray[t1] = t13;
      t13 = sb1.get$z();
      if (t3 < 0 || t3 >= skinVertexBArray.length)
        throw $.ioore(t3);
      skinVertexBArray[t3] = t13;
      if (t4 < 0 || t4 >= skinVertexBArray.length)
        throw $.ioore(t4);
      skinVertexBArray[t4] = 1;
      t4 = sb2.get$x();
      if (t5 < 0 || t5 >= skinVertexBArray.length)
        throw $.ioore(t5);
      skinVertexBArray[t5] = t4;
      t4 = sb2.get$y();
      if (t6 < 0 || t6 >= skinVertexBArray.length)
        throw $.ioore(t6);
      skinVertexBArray[t6] = t4;
      t4 = sb2.get$z();
      if (t7 < 0 || t7 >= skinVertexBArray.length)
        throw $.ioore(t7);
      skinVertexBArray[t7] = t4;
      if (t8 < 0 || t8 >= skinVertexBArray.length)
        throw $.ioore(t8);
      skinVertexBArray[t8] = 1;
      t8 = sb3.get$x();
      if (t9 < 0 || t9 >= skinVertexBArray.length)
        throw $.ioore(t9);
      skinVertexBArray[t9] = t8;
      t8 = sb3.get$y();
      if (t10 < 0 || t10 >= skinVertexBArray.length)
        throw $.ioore(t10);
      skinVertexBArray[t10] = t8;
      t8 = sb3.get$z();
      if (t11 < 0 || t11 >= skinVertexBArray.length)
        throw $.ioore(t11);
      skinVertexBArray[t11] = t8;
      if (t12 < 0 || t12 >= skinVertexBArray.length)
        throw $.ioore(t12);
      skinVertexBArray[t12] = 1;
      offset_skin += 12;
    }
    fl = chunk_faces4.length;
    for (var sa4 = null, sw4 = null, sb4 = null, si4 = null, f = 0; f < fl; ++f) {
      if (f < 0 || f >= chunk_faces4.length)
        throw $.ioore(f);
      t1 = chunk_faces4[f];
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= obj_faces.length)
        throw $.ioore(t1);
      face = obj_faces[t1];
      t1 = face.get$a();
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      t2 = obj_skinWeights.length;
      if (t1 < 0 || t1 >= t2)
        throw $.ioore(t1);
      sw1 = obj_skinWeights[t1];
      t1 = face.get$b();
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= t2)
        throw $.ioore(t1);
      sw2 = obj_skinWeights[t1];
      t1 = face.get$c();
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= t2)
        throw $.ioore(t1);
      sw3 = obj_skinWeights[t1];
      t1 = face.get$d();
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= t2)
        throw $.ioore(t1);
      sw4 = obj_skinWeights[t1];
      t1 = sw1.get$x();
      if (offset_skin < 0 || offset_skin >= skinWeightArray.length)
        throw $.ioore(offset_skin);
      skinWeightArray[offset_skin] = t1;
      t1 = offset_skin + 1;
      t3 = sw1.get$y();
      if (t1 < 0 || t1 >= skinWeightArray.length)
        throw $.ioore(t1);
      skinWeightArray[t1] = t3;
      t3 = offset_skin + 2;
      t4 = sw1.get$z();
      if (t3 < 0 || t3 >= skinWeightArray.length)
        throw $.ioore(t3);
      skinWeightArray[t3] = t4;
      t4 = offset_skin + 3;
      t5 = sw1.get$w();
      if (t4 < 0 || t4 >= skinWeightArray.length)
        throw $.ioore(t4);
      skinWeightArray[t4] = t5;
      t5 = offset_skin + 4;
      t6 = sw2.get$x();
      if (t5 < 0 || t5 >= skinWeightArray.length)
        throw $.ioore(t5);
      skinWeightArray[t5] = t6;
      t6 = offset_skin + 5;
      t7 = sw2.get$y();
      if (t6 < 0 || t6 >= skinWeightArray.length)
        throw $.ioore(t6);
      skinWeightArray[t6] = t7;
      t7 = offset_skin + 6;
      t8 = sw2.get$z();
      if (t7 < 0 || t7 >= skinWeightArray.length)
        throw $.ioore(t7);
      skinWeightArray[t7] = t8;
      t8 = offset_skin + 7;
      t9 = sw2.get$w();
      if (t8 < 0 || t8 >= skinWeightArray.length)
        throw $.ioore(t8);
      skinWeightArray[t8] = t9;
      t9 = offset_skin + 8;
      t10 = sw3.get$x();
      if (t9 < 0 || t9 >= skinWeightArray.length)
        throw $.ioore(t9);
      skinWeightArray[t9] = t10;
      t10 = offset_skin + 9;
      t11 = sw3.get$y();
      if (t10 < 0 || t10 >= skinWeightArray.length)
        throw $.ioore(t10);
      skinWeightArray[t10] = t11;
      t11 = offset_skin + 10;
      t12 = sw3.get$z();
      if (t11 < 0 || t11 >= skinWeightArray.length)
        throw $.ioore(t11);
      skinWeightArray[t11] = t12;
      t12 = offset_skin + 11;
      t13 = sw3.get$w();
      if (t12 < 0 || t12 >= skinWeightArray.length)
        throw $.ioore(t12);
      skinWeightArray[t12] = t13;
      t13 = offset_skin + 12;
      t14 = sw4.get$x();
      if (t13 < 0 || t13 >= skinWeightArray.length)
        throw $.ioore(t13);
      skinWeightArray[t13] = t14;
      t14 = offset_skin + 13;
      t15 = sw4.get$y();
      if (t14 < 0 || t14 >= skinWeightArray.length)
        throw $.ioore(t14);
      skinWeightArray[t14] = t15;
      t15 = offset_skin + 14;
      t16 = sw4.get$z();
      if (t15 < 0 || t15 >= skinWeightArray.length)
        throw $.ioore(t15);
      skinWeightArray[t15] = t16;
      t16 = offset_skin + 15;
      t17 = sw4.get$w();
      if (t16 < 0 || t16 >= skinWeightArray.length)
        throw $.ioore(t16);
      skinWeightArray[t16] = t17;
      t17 = face.get$a();
      if (t17 !== (t17 | 0))
        throw $.iae(t17);
      var t18 = obj_skinIndices.length;
      if (t17 < 0 || t17 >= t18)
        throw $.ioore(t17);
      si1 = obj_skinIndices[t17];
      t17 = face.get$b();
      if (t17 !== (t17 | 0))
        throw $.iae(t17);
      if (t17 < 0 || t17 >= t18)
        throw $.ioore(t17);
      si2 = obj_skinIndices[t17];
      t17 = face.get$c();
      if (t17 !== (t17 | 0))
        throw $.iae(t17);
      if (t17 < 0 || t17 >= t18)
        throw $.ioore(t17);
      si3 = obj_skinIndices[t17];
      t17 = face.get$d();
      if (t17 !== (t17 | 0))
        throw $.iae(t17);
      if (t17 < 0 || t17 >= t18)
        throw $.ioore(t17);
      si4 = obj_skinIndices[t17];
      t17 = si1.get$x();
      if (offset_skin < 0 || offset_skin >= skinIndexArray.length)
        throw $.ioore(offset_skin);
      skinIndexArray[offset_skin] = t17;
      t17 = si1.get$y();
      if (t1 < 0 || t1 >= skinIndexArray.length)
        throw $.ioore(t1);
      skinIndexArray[t1] = t17;
      t17 = si1.get$z();
      if (t3 < 0 || t3 >= skinIndexArray.length)
        throw $.ioore(t3);
      skinIndexArray[t3] = t17;
      t17 = si1.get$w();
      if (t4 < 0 || t4 >= skinIndexArray.length)
        throw $.ioore(t4);
      skinIndexArray[t4] = t17;
      t17 = si2.get$x();
      if (t5 < 0 || t5 >= skinIndexArray.length)
        throw $.ioore(t5);
      skinIndexArray[t5] = t17;
      t17 = si2.get$y();
      if (t6 < 0 || t6 >= skinIndexArray.length)
        throw $.ioore(t6);
      skinIndexArray[t6] = t17;
      t17 = si2.get$z();
      if (t7 < 0 || t7 >= skinIndexArray.length)
        throw $.ioore(t7);
      skinIndexArray[t7] = t17;
      t17 = si2.get$w();
      if (t8 < 0 || t8 >= skinIndexArray.length)
        throw $.ioore(t8);
      skinIndexArray[t8] = t17;
      t17 = si3.get$x();
      if (t9 < 0 || t9 >= skinIndexArray.length)
        throw $.ioore(t9);
      skinIndexArray[t9] = t17;
      t17 = si3.get$y();
      if (t10 < 0 || t10 >= skinIndexArray.length)
        throw $.ioore(t10);
      skinIndexArray[t10] = t17;
      t17 = si3.get$z();
      if (t11 < 0 || t11 >= skinIndexArray.length)
        throw $.ioore(t11);
      skinIndexArray[t11] = t17;
      t17 = si3.get$w();
      if (t12 < 0 || t12 >= skinIndexArray.length)
        throw $.ioore(t12);
      skinIndexArray[t12] = t17;
      t17 = si4.get$x();
      if (t13 < 0 || t13 >= skinIndexArray.length)
        throw $.ioore(t13);
      skinIndexArray[t13] = t17;
      t17 = si4.get$y();
      if (t14 < 0 || t14 >= skinIndexArray.length)
        throw $.ioore(t14);
      skinIndexArray[t14] = t17;
      t17 = si4.get$z();
      if (t15 < 0 || t15 >= skinIndexArray.length)
        throw $.ioore(t15);
      skinIndexArray[t15] = t17;
      t17 = si4.get$w();
      if (t16 < 0 || t16 >= skinIndexArray.length)
        throw $.ioore(t16);
      skinIndexArray[t16] = t17;
      t17 = face.get$a();
      if (t17 !== (t17 | 0))
        throw $.iae(t17);
      var t19 = obj_skinVerticesA.length;
      if (t17 < 0 || t17 >= t19)
        throw $.ioore(t17);
      sa1 = obj_skinVerticesA[t17];
      t17 = face.get$b();
      if (t17 !== (t17 | 0))
        throw $.iae(t17);
      if (t17 < 0 || t17 >= t19)
        throw $.ioore(t17);
      sa2 = obj_skinVerticesA[t17];
      t17 = face.get$c();
      if (t17 !== (t17 | 0))
        throw $.iae(t17);
      if (t17 < 0 || t17 >= t19)
        throw $.ioore(t17);
      sa3 = obj_skinVerticesA[t17];
      t17 = face.get$d();
      if (t17 !== (t17 | 0))
        throw $.iae(t17);
      if (t17 < 0 || t17 >= t19)
        throw $.ioore(t17);
      sa4 = obj_skinVerticesA[t17];
      t17 = sa1.get$x();
      if (offset_skin < 0 || offset_skin >= skinVertexAArray.length)
        throw $.ioore(offset_skin);
      skinVertexAArray[offset_skin] = t17;
      t17 = sa1.get$y();
      if (t1 < 0 || t1 >= skinVertexAArray.length)
        throw $.ioore(t1);
      skinVertexAArray[t1] = t17;
      t17 = sa1.get$z();
      if (t3 < 0 || t3 >= skinVertexAArray.length)
        throw $.ioore(t3);
      skinVertexAArray[t3] = t17;
      if (t4 < 0 || t4 >= skinVertexAArray.length)
        throw $.ioore(t4);
      skinVertexAArray[t4] = 1;
      t17 = sa2.get$x();
      if (t5 < 0 || t5 >= skinVertexAArray.length)
        throw $.ioore(t5);
      skinVertexAArray[t5] = t17;
      t17 = sa2.get$y();
      if (t6 < 0 || t6 >= skinVertexAArray.length)
        throw $.ioore(t6);
      skinVertexAArray[t6] = t17;
      t17 = sa2.get$z();
      if (t7 < 0 || t7 >= skinVertexAArray.length)
        throw $.ioore(t7);
      skinVertexAArray[t7] = t17;
      if (t8 < 0 || t8 >= skinVertexAArray.length)
        throw $.ioore(t8);
      skinVertexAArray[t8] = 1;
      t17 = sa3.get$x();
      if (t9 < 0 || t9 >= skinVertexAArray.length)
        throw $.ioore(t9);
      skinVertexAArray[t9] = t17;
      t17 = sa3.get$y();
      if (t10 < 0 || t10 >= skinVertexAArray.length)
        throw $.ioore(t10);
      skinVertexAArray[t10] = t17;
      t17 = sa3.get$z();
      if (t11 < 0 || t11 >= skinVertexAArray.length)
        throw $.ioore(t11);
      skinVertexAArray[t11] = t17;
      if (t12 < 0 || t12 >= skinVertexAArray.length)
        throw $.ioore(t12);
      skinVertexAArray[t12] = 1;
      t17 = sa4.get$x();
      if (t13 < 0 || t13 >= skinVertexAArray.length)
        throw $.ioore(t13);
      skinVertexAArray[t13] = t17;
      t17 = sa4.get$y();
      if (t14 < 0 || t14 >= skinVertexAArray.length)
        throw $.ioore(t14);
      skinVertexAArray[t14] = t17;
      t17 = sa4.get$z();
      if (t15 < 0 || t15 >= skinVertexAArray.length)
        throw $.ioore(t15);
      skinVertexAArray[t15] = t17;
      if (t16 < 0 || t16 >= skinVertexAArray.length)
        throw $.ioore(t16);
      skinVertexAArray[t16] = 1;
      t17 = face.get$a();
      if (t17 !== (t17 | 0))
        throw $.iae(t17);
      var t20 = obj_skinVerticesB.length;
      if (t17 < 0 || t17 >= t20)
        throw $.ioore(t17);
      sb1 = obj_skinVerticesB[t17];
      t17 = face.get$b();
      if (t17 !== (t17 | 0))
        throw $.iae(t17);
      if (t17 < 0 || t17 >= t20)
        throw $.ioore(t17);
      sb2 = obj_skinVerticesB[t17];
      t17 = face.get$c();
      if (t17 !== (t17 | 0))
        throw $.iae(t17);
      if (t17 < 0 || t17 >= t20)
        throw $.ioore(t17);
      sb3 = obj_skinVerticesB[t17];
      t17 = face.get$d();
      if (t17 !== (t17 | 0))
        throw $.iae(t17);
      if (t17 < 0 || t17 >= t20)
        throw $.ioore(t17);
      sb4 = obj_skinVerticesB[t17];
      t17 = sb1.get$x();
      if (offset_skin < 0 || offset_skin >= skinVertexBArray.length)
        throw $.ioore(offset_skin);
      skinVertexBArray[offset_skin] = t17;
      t17 = sb1.get$y();
      if (t1 < 0 || t1 >= skinVertexBArray.length)
        throw $.ioore(t1);
      skinVertexBArray[t1] = t17;
      t17 = sb1.get$z();
      if (t3 < 0 || t3 >= skinVertexBArray.length)
        throw $.ioore(t3);
      skinVertexBArray[t3] = t17;
      if (t4 < 0 || t4 >= skinVertexBArray.length)
        throw $.ioore(t4);
      skinVertexBArray[t4] = 1;
      t4 = sb2.get$x();
      if (t5 < 0 || t5 >= skinVertexBArray.length)
        throw $.ioore(t5);
      skinVertexBArray[t5] = t4;
      t4 = sb2.get$y();
      if (t6 < 0 || t6 >= skinVertexBArray.length)
        throw $.ioore(t6);
      skinVertexBArray[t6] = t4;
      t4 = sb2.get$z();
      if (t7 < 0 || t7 >= skinVertexBArray.length)
        throw $.ioore(t7);
      skinVertexBArray[t7] = t4;
      if (t8 < 0 || t8 >= skinVertexBArray.length)
        throw $.ioore(t8);
      skinVertexBArray[t8] = 1;
      t8 = sb3.get$x();
      if (t9 < 0 || t9 >= skinVertexBArray.length)
        throw $.ioore(t9);
      skinVertexBArray[t9] = t8;
      t8 = sb3.get$y();
      if (t10 < 0 || t10 >= skinVertexBArray.length)
        throw $.ioore(t10);
      skinVertexBArray[t10] = t8;
      t8 = sb3.get$z();
      if (t11 < 0 || t11 >= skinVertexBArray.length)
        throw $.ioore(t11);
      skinVertexBArray[t11] = t8;
      if (t12 < 0 || t12 >= skinVertexBArray.length)
        throw $.ioore(t12);
      skinVertexBArray[t12] = 1;
      t12 = sb4.get$x();
      if (t13 < 0 || t13 >= skinVertexBArray.length)
        throw $.ioore(t13);
      skinVertexBArray[t13] = t12;
      t12 = sb4.get$y();
      if (t14 < 0 || t14 >= skinVertexBArray.length)
        throw $.ioore(t14);
      skinVertexBArray[t14] = t12;
      t12 = sb4.get$z();
      if (t15 < 0 || t15 >= skinVertexBArray.length)
        throw $.ioore(t15);
      skinVertexBArray[t15] = t12;
      if (t16 < 0 || t16 >= skinVertexBArray.length)
        throw $.ioore(t16);
      skinVertexBArray[t16] = 1;
      offset_skin += 16;
    }
    if (offset_skin > 0) {
      this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinVertexABuffer());
      this._gl.bufferData$3(34962, skinVertexAArray, hint);
      this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinVertexBBuffer());
      this._gl.bufferData$3(34962, skinVertexBArray, hint);
      this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinIndicesBuffer());
      this._gl.bufferData$3(34962, skinIndexArray, hint);
      this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinWeightsBuffer());
      this._gl.bufferData$3(34962, skinWeightArray, hint);
    }
  }
  if (dirtyColors === true && vertexColorType === true) {
    fl = chunk_faces3.length;
    for (var t1 = vertexColorType === 2, faceColor = null, offset_color = 0, c1 = null, c3 = null, vertexColors = null, c2 = null, f = 0; f < fl; ++f) {
      if (f < 0 || f >= chunk_faces3.length)
        throw $.ioore(f);
      t2 = chunk_faces3[f];
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= obj_faces.length)
        throw $.ioore(t2);
      face = obj_faces[t2];
      vertexColors = face.get$vertexColors();
      if (typeof vertexColors !== 'string' && (typeof vertexColors !== 'object' || vertexColors === null || vertexColors.constructor !== Array && !vertexColors.is$JavaScriptIndexingBehavior()))
        return this.setMeshBuffers$5$bailout(43, geometryGroup, hint, obj_uvs2, dispose, fl, face, vertexColors, normalType, uvType, needsSmoothNormals, t1, uvArray, uv2Array, normalArray, tangentArray, colorArray, v1, v2, customAttributes, faceArray, lineArray, offset_color, geometry, dirtyElements, dirtyUvs, dirtyNormals, dirtyTangents, chunk_faces3, chunk_faces4, obj_faces, v3, v4, obj_uvs, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      faceColor = face.get$color();
      t2 = vertexColors.length;
      if (t2 === 3 && t1) {
        if (0 >= t2)
          throw $.ioore(0);
        c1 = vertexColors[0];
        if (1 >= t2)
          throw $.ioore(1);
        c2 = vertexColors[1];
        if (2 >= t2)
          throw $.ioore(2);
        c3 = vertexColors[2];
      } else {
        c2 = faceColor;
        c3 = c2;
        c1 = c3;
      }
      t2 = c1.get$r();
      if (offset_color < 0 || offset_color >= colorArray.length)
        throw $.ioore(offset_color);
      colorArray[offset_color] = t2;
      t2 = offset_color + 1;
      t3 = c1.get$g();
      if (t2 < 0 || t2 >= colorArray.length)
        throw $.ioore(t2);
      colorArray[t2] = t3;
      t3 = offset_color + 2;
      t2 = c1.get$b();
      if (t3 < 0 || t3 >= colorArray.length)
        throw $.ioore(t3);
      colorArray[t3] = t2;
      t2 = offset_color + 3;
      t3 = c2.get$r();
      if (t2 < 0 || t2 >= colorArray.length)
        throw $.ioore(t2);
      colorArray[t2] = t3;
      t3 = offset_color + 4;
      t2 = c2.get$g();
      if (t3 < 0 || t3 >= colorArray.length)
        throw $.ioore(t3);
      colorArray[t3] = t2;
      t2 = offset_color + 5;
      t3 = c2.get$b();
      if (t2 < 0 || t2 >= colorArray.length)
        throw $.ioore(t2);
      colorArray[t2] = t3;
      t3 = offset_color + 6;
      t2 = c3.get$r();
      if (t3 < 0 || t3 >= colorArray.length)
        throw $.ioore(t3);
      colorArray[t3] = t2;
      t2 = offset_color + 7;
      t3 = c3.get$g();
      if (t2 < 0 || t2 >= colorArray.length)
        throw $.ioore(t2);
      colorArray[t2] = t3;
      t3 = offset_color + 8;
      t2 = c3.get$b();
      if (t3 < 0 || t3 >= colorArray.length)
        throw $.ioore(t3);
      colorArray[t3] = t2;
      offset_color += 9;
    }
    fl = chunk_faces4.length;
    for (var c4 = null, f = 0; f < fl; ++f) {
      if (f < 0 || f >= chunk_faces4.length)
        throw $.ioore(f);
      t2 = chunk_faces4[f];
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= obj_faces.length)
        throw $.ioore(t2);
      face = obj_faces[t2];
      vertexColors = face.get$vertexColors();
      if (typeof vertexColors !== 'string' && (typeof vertexColors !== 'object' || vertexColors === null || vertexColors.constructor !== Array && !vertexColors.is$JavaScriptIndexingBehavior()))
        return this.setMeshBuffers$5$bailout(44, geometryGroup, hint, offset_color, obj_uvs2, dispose, normalType, uvType, f, t1, uvArray, uv2Array, normalArray, tangentArray, colorArray, v1, v2, customAttributes, faceArray, lineArray, face, vertexColors, dirtyElements, geometry, needsSmoothNormals, dirtyNormals, dirtyUvs, fl, dirtyTangents, v4, chunk_faces4, obj_faces, chunk_faces3, v3, obj_uvs, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      faceColor = face.get$color();
      t2 = vertexColors.length;
      if (t2 === 4 && t1) {
        if (0 >= t2)
          throw $.ioore(0);
        c1 = vertexColors[0];
        if (1 >= t2)
          throw $.ioore(1);
        c2 = vertexColors[1];
        if (2 >= t2)
          throw $.ioore(2);
        c3 = vertexColors[2];
        if (3 >= t2)
          throw $.ioore(3);
        c4 = vertexColors[3];
      } else {
        c2 = faceColor;
        c3 = c2;
        c1 = c3;
        c4 = c1;
      }
      t2 = c1.get$r();
      if (offset_color < 0 || offset_color >= colorArray.length)
        throw $.ioore(offset_color);
      colorArray[offset_color] = t2;
      t2 = offset_color + 1;
      t3 = c1.get$g();
      if (t2 < 0 || t2 >= colorArray.length)
        throw $.ioore(t2);
      colorArray[t2] = t3;
      t3 = offset_color + 2;
      t2 = c1.get$b();
      if (t3 < 0 || t3 >= colorArray.length)
        throw $.ioore(t3);
      colorArray[t3] = t2;
      t2 = offset_color + 3;
      t3 = c2.get$r();
      if (t2 < 0 || t2 >= colorArray.length)
        throw $.ioore(t2);
      colorArray[t2] = t3;
      t3 = offset_color + 4;
      t2 = c2.get$g();
      if (t3 < 0 || t3 >= colorArray.length)
        throw $.ioore(t3);
      colorArray[t3] = t2;
      t2 = offset_color + 5;
      t3 = c2.get$b();
      if (t2 < 0 || t2 >= colorArray.length)
        throw $.ioore(t2);
      colorArray[t2] = t3;
      t3 = offset_color + 6;
      t2 = c3.get$r();
      if (t3 < 0 || t3 >= colorArray.length)
        throw $.ioore(t3);
      colorArray[t3] = t2;
      t2 = offset_color + 7;
      t3 = c3.get$g();
      if (t2 < 0 || t2 >= colorArray.length)
        throw $.ioore(t2);
      colorArray[t2] = t3;
      t3 = offset_color + 8;
      t2 = c3.get$b();
      if (t3 < 0 || t3 >= colorArray.length)
        throw $.ioore(t3);
      colorArray[t3] = t2;
      t2 = offset_color + 9;
      t3 = c4.get$r();
      if (t2 < 0 || t2 >= colorArray.length)
        throw $.ioore(t2);
      colorArray[t2] = t3;
      t3 = offset_color + 10;
      t2 = c4.get$g();
      if (t3 < 0 || t3 >= colorArray.length)
        throw $.ioore(t3);
      colorArray[t3] = t2;
      t2 = offset_color + 11;
      t3 = c4.get$b();
      if (t2 < 0 || t2 >= colorArray.length)
        throw $.ioore(t2);
      colorArray[t2] = t3;
      offset_color += 12;
    }
    if (offset_color > 0) {
      this._gl.bindBuffer$2(34962, geometryGroup.get$__webglColorBuffer());
      this._gl.bufferData$3(34962, colorArray, hint);
    }
  }
  if (dirtyTangents === true && geometry.get$hasTangents() === true) {
    fl = chunk_faces3.length;
    for (var t3 = null, vertexTangents = null, t2 = null, offset_tangent = 0, t1 = null, f = 0; f < fl; ++f) {
      if (f < 0 || f >= chunk_faces3.length)
        throw $.ioore(f);
      t1 = chunk_faces3[f];
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= obj_faces.length)
        throw $.ioore(t1);
      face = obj_faces[t1];
      vertexTangents = face.get$vertexTangents();
      if (typeof vertexTangents !== 'string' && (typeof vertexTangents !== 'object' || vertexTangents === null || vertexTangents.constructor !== Array && !vertexTangents.is$JavaScriptIndexingBehavior()))
        return this.setMeshBuffers$5$bailout(45, geometryGroup, hint, obj_uvs2, dispose, offset_tangent, normalType, uvType, f, needsSmoothNormals, uvArray, uv2Array, normalArray, tangentArray, v1, v2, customAttributes, faceArray, lineArray, face, vertexTangents, v4, dirtyUvs, dirtyNormals, dirtyElements, fl, chunk_faces3, chunk_faces4, obj_faces, v3, obj_uvs, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      t2 = vertexTangents.length;
      if (0 >= t2)
        throw $.ioore(0);
      t10 = vertexTangents[0];
      if (1 >= t2)
        throw $.ioore(1);
      t20 = vertexTangents[1];
      if (2 >= t2)
        throw $.ioore(2);
      t3 = vertexTangents[2];
      t4 = t10.get$x();
      if (offset_tangent < 0 || offset_tangent >= tangentArray.length)
        throw $.ioore(offset_tangent);
      tangentArray[offset_tangent] = t4;
      t4 = offset_tangent + 1;
      t5 = t10.get$y();
      if (t4 < 0 || t4 >= tangentArray.length)
        throw $.ioore(t4);
      tangentArray[t4] = t5;
      t5 = offset_tangent + 2;
      t4 = t10.get$z();
      if (t5 < 0 || t5 >= tangentArray.length)
        throw $.ioore(t5);
      tangentArray[t5] = t4;
      t4 = offset_tangent + 3;
      t5 = t10.get$w();
      if (t4 < 0 || t4 >= tangentArray.length)
        throw $.ioore(t4);
      tangentArray[t4] = t5;
      t5 = offset_tangent + 4;
      t4 = t20.get$x();
      if (t5 < 0 || t5 >= tangentArray.length)
        throw $.ioore(t5);
      tangentArray[t5] = t4;
      t4 = offset_tangent + 5;
      t5 = t20.get$y();
      if (t4 < 0 || t4 >= tangentArray.length)
        throw $.ioore(t4);
      tangentArray[t4] = t5;
      t5 = offset_tangent + 6;
      t4 = t20.get$z();
      if (t5 < 0 || t5 >= tangentArray.length)
        throw $.ioore(t5);
      tangentArray[t5] = t4;
      t4 = offset_tangent + 7;
      t5 = t20.get$w();
      if (t4 < 0 || t4 >= tangentArray.length)
        throw $.ioore(t4);
      tangentArray[t4] = t5;
      t5 = offset_tangent + 8;
      t4 = t3.get$x();
      if (t5 < 0 || t5 >= tangentArray.length)
        throw $.ioore(t5);
      tangentArray[t5] = t4;
      t4 = offset_tangent + 9;
      t5 = t3.get$y();
      if (t4 < 0 || t4 >= tangentArray.length)
        throw $.ioore(t4);
      tangentArray[t4] = t5;
      t5 = offset_tangent + 10;
      t4 = t3.get$z();
      if (t5 < 0 || t5 >= tangentArray.length)
        throw $.ioore(t5);
      tangentArray[t5] = t4;
      t4 = offset_tangent + 11;
      t5 = t3.get$w();
      if (t4 < 0 || t4 >= tangentArray.length)
        throw $.ioore(t4);
      tangentArray[t4] = t5;
      offset_tangent += 12;
      t1 = t10;
      t2 = t20;
    }
    fl = chunk_faces4.length;
    for (t4 = null, f = 0; f < fl; ++f) {
      if (f < 0 || f >= chunk_faces4.length)
        throw $.ioore(f);
      t1 = chunk_faces4[f];
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= obj_faces.length)
        throw $.ioore(t1);
      face = obj_faces[t1];
      vertexTangents = face.get$vertexTangents();
      if (typeof vertexTangents !== 'string' && (typeof vertexTangents !== 'object' || vertexTangents === null || vertexTangents.constructor !== Array && !vertexTangents.is$JavaScriptIndexingBehavior()))
        return this.setMeshBuffers$5$bailout(46, geometryGroup, hint, obj_uvs2, dispose, normalType, uvType, needsSmoothNormals, uvArray, uv2Array, normalArray, tangentArray, offset_tangent, v1, v2, customAttributes, faceArray, lineArray, v4, dirtyElements, f, dirtyUvs, dirtyNormals, chunk_faces3, chunk_faces4, obj_faces, v3, obj_uvs, fl, face, vertexTangents, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      t2 = vertexTangents.length;
      if (0 >= t2)
        throw $.ioore(0);
      t10 = vertexTangents[0];
      if (1 >= t2)
        throw $.ioore(1);
      t20 = vertexTangents[1];
      if (2 >= t2)
        throw $.ioore(2);
      t3 = vertexTangents[2];
      if (3 >= t2)
        throw $.ioore(3);
      t4 = vertexTangents[3];
      t5 = t10.get$x();
      if (offset_tangent < 0 || offset_tangent >= tangentArray.length)
        throw $.ioore(offset_tangent);
      tangentArray[offset_tangent] = t5;
      t5 = offset_tangent + 1;
      t6 = t10.get$y();
      if (t5 < 0 || t5 >= tangentArray.length)
        throw $.ioore(t5);
      tangentArray[t5] = t6;
      t6 = offset_tangent + 2;
      t5 = t10.get$z();
      if (t6 < 0 || t6 >= tangentArray.length)
        throw $.ioore(t6);
      tangentArray[t6] = t5;
      t5 = offset_tangent + 3;
      t6 = t10.get$w();
      if (t5 < 0 || t5 >= tangentArray.length)
        throw $.ioore(t5);
      tangentArray[t5] = t6;
      t6 = offset_tangent + 4;
      t5 = t20.get$x();
      if (t6 < 0 || t6 >= tangentArray.length)
        throw $.ioore(t6);
      tangentArray[t6] = t5;
      t5 = offset_tangent + 5;
      t6 = t20.get$y();
      if (t5 < 0 || t5 >= tangentArray.length)
        throw $.ioore(t5);
      tangentArray[t5] = t6;
      t6 = offset_tangent + 6;
      t5 = t20.get$z();
      if (t6 < 0 || t6 >= tangentArray.length)
        throw $.ioore(t6);
      tangentArray[t6] = t5;
      t5 = offset_tangent + 7;
      t6 = t20.get$w();
      if (t5 < 0 || t5 >= tangentArray.length)
        throw $.ioore(t5);
      tangentArray[t5] = t6;
      t6 = offset_tangent + 8;
      t5 = t3.get$x();
      if (t6 < 0 || t6 >= tangentArray.length)
        throw $.ioore(t6);
      tangentArray[t6] = t5;
      t5 = offset_tangent + 9;
      t6 = t3.get$y();
      if (t5 < 0 || t5 >= tangentArray.length)
        throw $.ioore(t5);
      tangentArray[t5] = t6;
      t6 = offset_tangent + 10;
      t5 = t3.get$z();
      if (t6 < 0 || t6 >= tangentArray.length)
        throw $.ioore(t6);
      tangentArray[t6] = t5;
      t5 = offset_tangent + 11;
      t6 = t3.get$w();
      if (t5 < 0 || t5 >= tangentArray.length)
        throw $.ioore(t5);
      tangentArray[t5] = t6;
      t6 = offset_tangent + 12;
      t5 = t4.get$x();
      if (t6 < 0 || t6 >= tangentArray.length)
        throw $.ioore(t6);
      tangentArray[t6] = t5;
      t5 = offset_tangent + 13;
      t6 = t4.get$y();
      if (t5 < 0 || t5 >= tangentArray.length)
        throw $.ioore(t5);
      tangentArray[t5] = t6;
      t6 = offset_tangent + 14;
      t5 = t4.get$z();
      if (t6 < 0 || t6 >= tangentArray.length)
        throw $.ioore(t6);
      tangentArray[t6] = t5;
      t5 = offset_tangent + 15;
      t6 = t4.get$w();
      if (t5 < 0 || t5 >= tangentArray.length)
        throw $.ioore(t5);
      tangentArray[t5] = t6;
      offset_tangent += 16;
      t1 = t10;
      t2 = t20;
    }
    this._gl.bindBuffer$2(34962, geometryGroup.get$__webglTangentBuffer());
    this._gl.bufferData$3(34962, tangentArray, hint);
  }
  if (dirtyNormals === true && !(normalType === 0)) {
    fl = chunk_faces3.length;
    for (var vertexNormals = null, offset_normal = 0, i = null, faceNormal = null, f = 0, vn = null; f < fl; ++f) {
      if (f < 0 || f >= chunk_faces3.length)
        throw $.ioore(f);
      t1 = chunk_faces3[f];
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= obj_faces.length)
        throw $.ioore(t1);
      face = obj_faces[t1];
      vertexNormals = face.get$vertexNormals();
      faceNormal = face.get$normal();
      if ($.get$length(vertexNormals) === 3 && needsSmoothNormals)
        for (i = 0; i < 3; ++i) {
          vn = $.index(vertexNormals, i);
          t1 = vn.get$x();
          if (offset_normal < 0 || offset_normal >= normalArray.length)
            throw $.ioore(offset_normal);
          normalArray[offset_normal] = t1;
          t1 = offset_normal + 1;
          t2 = vn.get$y();
          if (t1 < 0 || t1 >= normalArray.length)
            throw $.ioore(t1);
          normalArray[t1] = t2;
          t2 = offset_normal + 2;
          t1 = vn.get$z();
          if (t2 < 0 || t2 >= normalArray.length)
            throw $.ioore(t2);
          normalArray[t2] = t1;
          offset_normal += 3;
        }
      else
        for (i = 0; i < 3; ++i) {
          t1 = faceNormal.get$x();
          if (offset_normal < 0 || offset_normal >= normalArray.length)
            throw $.ioore(offset_normal);
          normalArray[offset_normal] = t1;
          t1 = offset_normal + 1;
          t2 = faceNormal.get$y();
          if (t1 < 0 || t1 >= normalArray.length)
            throw $.ioore(t1);
          normalArray[t1] = t2;
          t2 = offset_normal + 2;
          t1 = faceNormal.get$z();
          if (t2 < 0 || t2 >= normalArray.length)
            throw $.ioore(t2);
          normalArray[t2] = t1;
          offset_normal += 3;
        }
    }
    fl = chunk_faces4.length;
    for (f = 0; f < fl; ++f) {
      if (f < 0 || f >= chunk_faces4.length)
        throw $.ioore(f);
      t1 = chunk_faces4[f];
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= obj_faces.length)
        throw $.ioore(t1);
      face = obj_faces[t1];
      vertexNormals = face.get$vertexNormals();
      faceNormal = face.get$normal();
      if ($.get$length(vertexNormals) === 4 && needsSmoothNormals)
        for (i = 0; i < 4; ++i) {
          vn = $.index(vertexNormals, i);
          t1 = vn.get$x();
          if (offset_normal < 0 || offset_normal >= normalArray.length)
            throw $.ioore(offset_normal);
          normalArray[offset_normal] = t1;
          t1 = offset_normal + 1;
          t2 = vn.get$y();
          if (t1 < 0 || t1 >= normalArray.length)
            throw $.ioore(t1);
          normalArray[t1] = t2;
          t2 = offset_normal + 2;
          t1 = vn.get$z();
          if (t2 < 0 || t2 >= normalArray.length)
            throw $.ioore(t2);
          normalArray[t2] = t1;
          offset_normal += 3;
        }
      else
        for (i = 0; i < 4; ++i) {
          t1 = faceNormal.get$x();
          if (offset_normal < 0 || offset_normal >= normalArray.length)
            throw $.ioore(offset_normal);
          normalArray[offset_normal] = t1;
          t1 = offset_normal + 1;
          t2 = faceNormal.get$y();
          if (t1 < 0 || t1 >= normalArray.length)
            throw $.ioore(t1);
          normalArray[t1] = t2;
          t2 = offset_normal + 2;
          t1 = faceNormal.get$z();
          if (t2 < 0 || t2 >= normalArray.length)
            throw $.ioore(t2);
          normalArray[t2] = t1;
          offset_normal += 3;
        }
    }
    this._gl.bindBuffer$2(34962, geometryGroup.get$__webglNormalBuffer());
    this._gl.bufferData$3(34962, normalArray, hint);
  } else
    i = null;
  t1 = dirtyUvs === true;
  if (t1 && $.isEmpty(obj_uvs) !== true && uvType === true) {
    fl = chunk_faces3.length;
    for (var uv = null, fi = null, uvi = null, offset_uv = 0, f = 0; f < fl; ++f) {
      if (f < 0 || f >= chunk_faces3.length)
        throw $.ioore(f);
      fi = chunk_faces3[f];
      if (fi !== (fi | 0))
        throw $.iae(fi);
      if (fi < 0 || fi >= obj_faces.length)
        throw $.ioore(fi);
      face = obj_faces[fi];
      uv = $.index(obj_uvs, fi);
      if (uv == null)
        continue;
      for (i = 0; i < 3; ++i) {
        uvi = $.index(uv, i);
        t2 = uvi.get$u();
        if (offset_uv < 0 || offset_uv >= uvArray.length)
          throw $.ioore(offset_uv);
        uvArray[offset_uv] = t2;
        t2 = offset_uv + 1;
        t3 = uvi.get$v();
        if (t2 < 0 || t2 >= uvArray.length)
          throw $.ioore(t2);
        uvArray[t2] = t3;
        offset_uv += 2;
      }
    }
    fl = chunk_faces4.length;
    for (f = 0; f < fl; ++f) {
      if (f < 0 || f >= chunk_faces4.length)
        throw $.ioore(f);
      fi = chunk_faces4[f];
      if (fi !== (fi | 0))
        throw $.iae(fi);
      if (fi < 0 || fi >= obj_faces.length)
        throw $.ioore(fi);
      face = obj_faces[fi];
      uv = $.index(obj_uvs, fi);
      if (uv == null)
        continue;
      for (i = 0; i < 4; ++i) {
        uvi = $.index(uv, i);
        t2 = uvi.get$u();
        if (offset_uv < 0 || offset_uv >= uvArray.length)
          throw $.ioore(offset_uv);
        uvArray[offset_uv] = t2;
        t2 = offset_uv + 1;
        t3 = uvi.get$v();
        if (t2 < 0 || t2 >= uvArray.length)
          throw $.ioore(t2);
        uvArray[t2] = t3;
        offset_uv += 2;
      }
    }
    if (offset_uv > 0) {
      this._gl.bindBuffer$2(34962, geometryGroup.get$__webglUVBuffer());
      this._gl.bufferData$3(34962, uvArray, hint);
    }
  } else
    fi = null;
  if (t1 && !(obj_uvs2 == null) && uvType === true) {
    fl = chunk_faces3.length;
    for (var uv2 = null, uv2i = null, offset_uv2 = 0, f = 0; f < fl; ++f) {
      if (f < 0 || f >= chunk_faces3.length)
        throw $.ioore(f);
      fi = chunk_faces3[f];
      if (fi !== (fi | 0))
        throw $.iae(fi);
      if (fi < 0 || fi >= obj_faces.length)
        throw $.ioore(fi);
      face = obj_faces[fi];
      uv2 = $.index(obj_uvs2, fi);
      if (uv2 == null)
        continue;
      for (i = 0; i < 3; ++i) {
        uv2i = $.index(uv2, i);
        t1 = uv2i.get$u();
        if (offset_uv2 < 0 || offset_uv2 >= uv2Array.length)
          throw $.ioore(offset_uv2);
        uv2Array[offset_uv2] = t1;
        t1 = offset_uv2 + 1;
        t2 = uv2i.get$v();
        if (t1 < 0 || t1 >= uv2Array.length)
          throw $.ioore(t1);
        uv2Array[t1] = t2;
        offset_uv2 += 2;
      }
    }
    fl = chunk_faces4.length;
    for (f = 0; f < fl; ++f) {
      if (f < 0 || f >= chunk_faces4.length)
        throw $.ioore(f);
      fi = chunk_faces4[f];
      if (fi !== (fi | 0))
        throw $.iae(fi);
      if (fi < 0 || fi >= obj_faces.length)
        throw $.ioore(fi);
      face = obj_faces[fi];
      uv2 = $.index(obj_uvs2, fi);
      if (uv2 == null)
        continue;
      for (i = 0; i < 4; ++i) {
        uv2i = $.index(uv2, i);
        t1 = uv2i.get$u();
        if (offset_uv2 < 0 || offset_uv2 >= uv2Array.length)
          throw $.ioore(offset_uv2);
        uv2Array[offset_uv2] = t1;
        t1 = offset_uv2 + 1;
        t2 = uv2i.get$v();
        if (t1 < 0 || t1 >= uv2Array.length)
          throw $.ioore(t1);
        uv2Array[t1] = t2;
        offset_uv2 += 2;
      }
    }
    if (offset_uv2 > 0) {
      this._gl.bindBuffer$2(34962, geometryGroup.get$__webglUV2Buffer());
      this._gl.bufferData$3(34962, uv2Array, hint);
    }
  }
  if (dirtyElements === true) {
    fl = chunk_faces3.length;
    for (var offset_face = 0, vertexIndex = 0, offset_line = 0, f = 0; f < fl; ++f) {
      if (f < 0 || f >= chunk_faces3.length)
        throw $.ioore(f);
      t1 = chunk_faces3[f];
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= obj_faces.length)
        throw $.ioore(t1);
      face = obj_faces[t1];
      if (offset_face < 0 || offset_face >= faceArray.length)
        throw $.ioore(offset_face);
      faceArray[offset_face] = vertexIndex;
      t1 = offset_face + 1;
      t2 = vertexIndex + 1;
      if (t1 < 0 || t1 >= faceArray.length)
        throw $.ioore(t1);
      faceArray[t1] = t2;
      t1 = offset_face + 2;
      t3 = vertexIndex + 2;
      if (t1 < 0 || t1 >= faceArray.length)
        throw $.ioore(t1);
      faceArray[t1] = t3;
      offset_face += 3;
      if (offset_line < 0 || offset_line >= lineArray.length)
        throw $.ioore(offset_line);
      lineArray[offset_line] = vertexIndex;
      t1 = offset_line + 1;
      if (t1 < 0 || t1 >= lineArray.length)
        throw $.ioore(t1);
      lineArray[t1] = t2;
      t1 = offset_line + 2;
      if (t1 < 0 || t1 >= lineArray.length)
        throw $.ioore(t1);
      lineArray[t1] = vertexIndex;
      t1 = offset_line + 3;
      if (t1 < 0 || t1 >= lineArray.length)
        throw $.ioore(t1);
      lineArray[t1] = t3;
      t1 = offset_line + 4;
      if (t1 < 0 || t1 >= lineArray.length)
        throw $.ioore(t1);
      lineArray[t1] = t2;
      t2 = offset_line + 5;
      if (t2 < 0 || t2 >= lineArray.length)
        throw $.ioore(t2);
      lineArray[t2] = t3;
      offset_line += 6;
      vertexIndex += 3;
    }
    fl = chunk_faces4.length;
    for (f = 0; f < fl; ++f) {
      if (f < 0 || f >= chunk_faces4.length)
        throw $.ioore(f);
      t1 = chunk_faces4[f];
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= obj_faces.length)
        throw $.ioore(t1);
      face = obj_faces[t1];
      if (offset_face < 0 || offset_face >= faceArray.length)
        throw $.ioore(offset_face);
      faceArray[offset_face] = vertexIndex;
      t1 = offset_face + 1;
      t2 = vertexIndex + 1;
      if (t1 < 0 || t1 >= faceArray.length)
        throw $.ioore(t1);
      faceArray[t1] = t2;
      t1 = offset_face + 2;
      t3 = vertexIndex + 3;
      if (t1 < 0 || t1 >= faceArray.length)
        throw $.ioore(t1);
      faceArray[t1] = t3;
      t1 = offset_face + 3;
      if (t1 < 0 || t1 >= faceArray.length)
        throw $.ioore(t1);
      faceArray[t1] = t2;
      t1 = offset_face + 4;
      t4 = vertexIndex + 2;
      if (t1 < 0 || t1 >= faceArray.length)
        throw $.ioore(t1);
      faceArray[t1] = t4;
      t1 = offset_face + 5;
      if (t1 < 0 || t1 >= faceArray.length)
        throw $.ioore(t1);
      faceArray[t1] = t3;
      offset_face += 6;
      if (offset_line < 0 || offset_line >= lineArray.length)
        throw $.ioore(offset_line);
      lineArray[offset_line] = vertexIndex;
      t1 = offset_line + 1;
      if (t1 < 0 || t1 >= lineArray.length)
        throw $.ioore(t1);
      lineArray[t1] = t2;
      t1 = offset_line + 2;
      if (t1 < 0 || t1 >= lineArray.length)
        throw $.ioore(t1);
      lineArray[t1] = vertexIndex;
      t1 = offset_line + 3;
      if (t1 < 0 || t1 >= lineArray.length)
        throw $.ioore(t1);
      lineArray[t1] = t3;
      t1 = offset_line + 4;
      if (t1 < 0 || t1 >= lineArray.length)
        throw $.ioore(t1);
      lineArray[t1] = t2;
      t2 = offset_line + 5;
      if (t2 < 0 || t2 >= lineArray.length)
        throw $.ioore(t2);
      lineArray[t2] = t4;
      t2 = offset_line + 6;
      if (t2 < 0 || t2 >= lineArray.length)
        throw $.ioore(t2);
      lineArray[t2] = t4;
      t4 = offset_line + 7;
      if (t4 < 0 || t4 >= lineArray.length)
        throw $.ioore(t4);
      lineArray[t4] = t3;
      offset_line += 8;
      vertexIndex += 4;
    }
    this._gl.bindBuffer$2(34963, geometryGroup.get$__webglFaceBuffer());
    this._gl.bufferData$3(34963, faceArray, hint);
    this._gl.bindBuffer$2(34963, geometryGroup.get$__webglLineBuffer());
    this._gl.bufferData$3(34963, lineArray, hint);
  }
  var il = customAttributes.length;
  for (var customAttribute = null, i = 0, offset_customSrc = 0, value = null, offset_custom = 0; i < il; ++i) {
    if (i < 0 || i >= customAttributes.length)
      throw $.ioore(i);
    customAttribute = customAttributes[i];
    if (customAttribute.get$__original().get$needsUpdate() !== true)
      continue;
    if (customAttribute.get$size() === 1) {
      t1 = customAttribute.get$boundTo();
      if (t1 == null || t1 === 'vertices') {
        fl = chunk_faces3.length;
        for (offset_custom = 0, f = 0; f < fl; ++f) {
          if (f < 0 || f >= chunk_faces3.length)
            throw $.ioore(f);
          t1 = chunk_faces3[f];
          if (t1 !== (t1 | 0))
            throw $.iae(t1);
          if (t1 < 0 || t1 >= obj_faces.length)
            throw $.ioore(t1);
          face = obj_faces[t1];
          t1 = customAttribute.get$array();
          if (typeof t1 !== 'object' || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(47, value, hint, v1, i, v2, customAttribute, v4, fl, chunk_faces3, face, chunk_faces4, t1, offset_custom, obj_faces, v3, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t3 = customAttribute.get$value();
          if (typeof t3 !== 'string' && (typeof t3 !== 'object' || t3 === null || t3.constructor !== Array && !t3.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(48, value, hint, v1, i, v2, customAttribute, v4, fl, chunk_faces3, face, chunk_faces4, t1, offset_custom, t3, obj_faces, v3, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t5 = face.get$a();
          if (t5 !== (t5 | 0))
            throw $.iae(t5);
          if (t5 < 0 || t5 >= t3.length)
            throw $.ioore(t5);
          t5 = t3[t5];
          if (offset_custom < 0 || offset_custom >= t1.length)
            throw $.ioore(offset_custom);
          t1[offset_custom] = t5;
          t5 = customAttribute.get$array();
          if (typeof t5 !== 'object' || t5 === null || (t5.constructor !== Array || !!t5.immutable$list) && !t5.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(49, value, hint, v1, i, v2, customAttribute, v4, fl, chunk_faces3, face, chunk_faces4, obj_faces, offset_custom, t5, v3, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t3 = offset_custom + 1;
          t6 = customAttribute.get$value();
          if (typeof t6 !== 'string' && (typeof t6 !== 'object' || t6 === null || t6.constructor !== Array && !t6.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(50, value, hint, v1, i, v2, customAttribute, v4, fl, chunk_faces3, face, chunk_faces4, obj_faces, offset_custom, t5, v3, t3, t6, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t8 = face.get$b();
          if (t8 !== (t8 | 0))
            throw $.iae(t8);
          if (t8 < 0 || t8 >= t6.length)
            throw $.ioore(t8);
          t8 = t6[t8];
          if (t3 < 0 || t3 >= t5.length)
            throw $.ioore(t3);
          t5[t3] = t8;
          t8 = customAttribute.get$array();
          if (typeof t8 !== 'object' || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(51, value, t8, hint, v1, i, v2, customAttribute, v4, fl, chunk_faces3, face, chunk_faces4, obj_faces, offset_custom, v3, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t5 = offset_custom + 2;
          t6 = customAttribute.get$value();
          if (typeof t6 !== 'string' && (typeof t6 !== 'object' || t6 === null || t6.constructor !== Array && !t6.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(52, value, t8, hint, t5, v1, t6, i, v2, customAttribute, v4, fl, chunk_faces3, face, chunk_faces4, obj_faces, offset_custom, v3, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t10 = face.get$c();
          if (t10 !== (t10 | 0))
            throw $.iae(t10);
          if (t10 < 0 || t10 >= t6.length)
            throw $.ioore(t10);
          t10 = t6[t10];
          if (t5 < 0 || t5 >= t8.length)
            throw $.ioore(t5);
          t8[t5] = t10;
          offset_custom += 3;
        }
        fl = chunk_faces4.length;
        for (f = 0; f < fl; ++f) {
          if (f < 0 || f >= chunk_faces4.length)
            throw $.ioore(f);
          t1 = chunk_faces4[f];
          if (t1 !== (t1 | 0))
            throw $.iae(t1);
          if (t1 < 0 || t1 >= obj_faces.length)
            throw $.ioore(t1);
          face = obj_faces[t1];
          t1 = customAttribute.get$array();
          if (typeof t1 !== 'object' || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(53, value, hint, v1, i, f, customAttribute, v4, v2, chunk_faces4, obj_faces, fl, face, v3, t1, offset_custom, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t3 = customAttribute.get$value();
          if (typeof t3 !== 'string' && (typeof t3 !== 'object' || t3 === null || t3.constructor !== Array && !t3.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(54, value, hint, v1, v2, i, f, customAttribute, v4, chunk_faces4, obj_faces, fl, face, v3, t1, offset_custom, t3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t5 = face.get$a();
          if (t5 !== (t5 | 0))
            throw $.iae(t5);
          if (t5 < 0 || t5 >= t3.length)
            throw $.ioore(t5);
          t5 = t3[t5];
          if (offset_custom < 0 || offset_custom >= t1.length)
            throw $.ioore(offset_custom);
          t1[offset_custom] = t5;
          t5 = customAttribute.get$array();
          if (typeof t5 !== 'object' || t5 === null || (t5.constructor !== Array || !!t5.immutable$list) && !t5.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(55, t5, value, hint, v1, i, f, customAttribute, v4, v2, chunk_faces4, obj_faces, fl, face, v3, offset_custom, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t3 = offset_custom + 1;
          t6 = customAttribute.get$value();
          if (typeof t6 !== 'string' && (typeof t6 !== 'object' || t6 === null || t6.constructor !== Array && !t6.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(56, t5, value, t3, t6, i, f, v1, customAttribute, v4, hint, v2, chunk_faces4, obj_faces, fl, face, v3, offset_custom, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t8 = face.get$b();
          if (t8 !== (t8 | 0))
            throw $.iae(t8);
          if (t8 < 0 || t8 >= t6.length)
            throw $.ioore(t8);
          t8 = t6[t8];
          if (t3 < 0 || t3 >= t5.length)
            throw $.ioore(t3);
          t5[t3] = t8;
          t8 = customAttribute.get$array();
          if (typeof t8 !== 'object' || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(57, value, hint, v1, i, f, customAttribute, t8, v4, v2, chunk_faces4, obj_faces, fl, face, v3, offset_custom, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t5 = offset_custom + 2;
          t6 = customAttribute.get$value();
          if (typeof t6 !== 'string' && (typeof t6 !== 'object' || t6 === null || t6.constructor !== Array && !t6.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(58, value, hint, v1, i, f, customAttribute, t8, v4, t5, t6, v2, chunk_faces4, obj_faces, fl, face, v3, offset_custom, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t10 = face.get$c();
          if (t10 !== (t10 | 0))
            throw $.iae(t10);
          if (t10 < 0 || t10 >= t6.length)
            throw $.ioore(t10);
          t10 = t6[t10];
          if (t5 < 0 || t5 >= t8.length)
            throw $.ioore(t5);
          t8[t5] = t10;
          t10 = customAttribute.get$array();
          if (typeof t10 !== 'object' || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(59, value, hint, v1, i, f, customAttribute, v4, v2, chunk_faces4, obj_faces, t10, fl, face, v3, offset_custom, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t8 = offset_custom + 3;
          t6 = customAttribute.get$value();
          if (typeof t6 !== 'string' && (typeof t6 !== 'object' || t6 === null || t6.constructor !== Array && !t6.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(60, value, hint, v1, i, f, customAttribute, v4, v2, chunk_faces4, obj_faces, t10, t8, fl, t6, face, v3, offset_custom, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t12 = face.get$d();
          if (t12 !== (t12 | 0))
            throw $.iae(t12);
          if (t12 < 0 || t12 >= t6.length)
            throw $.ioore(t12);
          t12 = t6[t12];
          if (t8 < 0 || t8 >= t10.length)
            throw $.ioore(t8);
          t10[t8] = t12;
          offset_custom += 4;
        }
      } else if (t1 === 'faces') {
        fl = chunk_faces3.length;
        for (offset_custom = 0, f = 0; f < fl; ++f) {
          t1 = customAttribute.get$value();
          if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(61, f, geometryGroup, hint, customAttributes, dispose, v1, i, v2, il, customAttribute, v4, fl, chunk_faces3, t1, chunk_faces4, obj_faces, offset_custom, v3, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          if (f < 0 || f >= chunk_faces3.length)
            throw $.ioore(f);
          t3 = chunk_faces3[f];
          if (t3 !== (t3 | 0))
            throw $.iae(t3);
          if (t3 < 0 || t3 >= t1.length)
            throw $.ioore(t3);
          value = t1[t3];
          t3 = customAttribute.get$array();
          if (typeof t3 !== 'object' || t3 === null || (t3.constructor !== Array || !!t3.immutable$list) && !t3.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(62, f, geometryGroup, hint, customAttributes, dispose, v1, i, v2, il, customAttribute, v4, fl, chunk_faces3, chunk_faces4, obj_faces, value, offset_custom, t3, v3, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          if (offset_custom < 0 || offset_custom >= t3.length)
            throw $.ioore(offset_custom);
          t3[offset_custom] = value;
          t3 = customAttribute.get$array();
          if (typeof t3 !== 'object' || t3 === null || (t3.constructor !== Array || !!t3.immutable$list) && !t3.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(63, f, geometryGroup, hint, customAttributes, dispose, v1, i, v2, il, customAttribute, v4, fl, chunk_faces3, chunk_faces4, obj_faces, value, offset_custom, t3, v3, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t5 = offset_custom + 1;
          if (t5 < 0 || t5 >= t3.length)
            throw $.ioore(t5);
          t3[t5] = value;
          t5 = customAttribute.get$array();
          if (typeof t5 !== 'object' || t5 === null || (t5.constructor !== Array || !!t5.immutable$list) && !t5.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(64, f, geometryGroup, hint, customAttributes, dispose, v1, i, v2, il, customAttribute, v4, fl, chunk_faces3, chunk_faces4, obj_faces, value, offset_custom, v3, t5, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t6 = offset_custom + 2;
          if (t6 < 0 || t6 >= t5.length)
            throw $.ioore(t6);
          t5[t6] = value;
          offset_custom += 3;
        }
        fl = chunk_faces4.length;
        for (f = 0; f < fl; ++f) {
          t1 = customAttribute.get$value();
          if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(65, geometryGroup, hint, customAttributes, dispose, v1, i, v2, il, customAttribute, v4, t1, fl, chunk_faces3, chunk_faces4, offset_custom, obj_faces, v3, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          if (f < 0 || f >= chunk_faces4.length)
            throw $.ioore(f);
          t3 = chunk_faces4[f];
          if (t3 !== (t3 | 0))
            throw $.iae(t3);
          if (t3 < 0 || t3 >= t1.length)
            throw $.ioore(t3);
          value = t1[t3];
          t3 = customAttribute.get$array();
          if (typeof t3 !== 'object' || t3 === null || (t3.constructor !== Array || !!t3.immutable$list) && !t3.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(66, geometryGroup, hint, customAttributes, dispose, v1, i, v2, il, customAttribute, v4, fl, value, chunk_faces4, offset_custom, t3, obj_faces, chunk_faces3, v3, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          if (offset_custom < 0 || offset_custom >= t3.length)
            throw $.ioore(offset_custom);
          t3[offset_custom] = value;
          t3 = customAttribute.get$array();
          if (typeof t3 !== 'object' || t3 === null || (t3.constructor !== Array || !!t3.immutable$list) && !t3.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(67, geometryGroup, hint, customAttributes, dispose, v1, i, v2, il, customAttribute, v4, fl, value, chunk_faces4, offset_custom, chunk_faces3, t3, obj_faces, v3, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t5 = offset_custom + 1;
          if (t5 < 0 || t5 >= t3.length)
            throw $.ioore(t5);
          t3[t5] = value;
          t5 = customAttribute.get$array();
          if (typeof t5 !== 'object' || t5 === null || (t5.constructor !== Array || !!t5.immutable$list) && !t5.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(68, geometryGroup, hint, customAttributes, dispose, v1, i, v2, il, customAttribute, v4, fl, value, chunk_faces4, offset_custom, chunk_faces3, obj_faces, t5, v3, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t6 = offset_custom + 2;
          if (t6 < 0 || t6 >= t5.length)
            throw $.ioore(t6);
          t5[t6] = value;
          t6 = customAttribute.get$array();
          if (typeof t6 !== 'object' || t6 === null || (t6.constructor !== Array || !!t6.immutable$list) && !t6.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(69, geometryGroup, hint, customAttributes, dispose, v1, i, v2, il, customAttribute, v4, fl, value, chunk_faces4, offset_custom, chunk_faces3, obj_faces, v3, f, t6, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t7 = offset_custom + 3;
          if (t7 < 0 || t7 >= t6.length)
            throw $.ioore(t7);
          t6[t7] = value;
          offset_custom += 4;
        }
      } else
        offset_custom = 0;
    } else if (customAttribute.get$size() === 2) {
      t1 = customAttribute.get$boundTo();
      if (typeof t1 !== 'string')
        return this.setMeshBuffers$5$bailout(70, geometryGroup, value, hint, customAttributes, t1, v1, i, v2, fl, customAttribute, v4, dispose, il, chunk_faces3, chunk_faces4, obj_faces, v3, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      if (t1 === 'vertices') {
        fl = chunk_faces3.length;
        for (offset_custom = 0, f = 0; f < fl; ++f) {
          if (f < 0 || f >= chunk_faces3.length)
            throw $.ioore(f);
          t1 = chunk_faces3[f];
          if (t1 !== (t1 | 0))
            throw $.iae(t1);
          if (t1 < 0 || t1 >= obj_faces.length)
            throw $.ioore(t1);
          face = obj_faces[t1];
          t1 = customAttribute.get$value();
          if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(71, geometryGroup, value, hint, customAttributes, dispose, i, f, il, customAttribute, v4, chunk_faces3, chunk_faces4, obj_faces, fl, face, t1, offset_custom, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t3 = face.get$a();
          if (t3 !== (t3 | 0))
            throw $.iae(t3);
          if (t3 < 0 || t3 >= t1.length)
            throw $.ioore(t3);
          v1 = t1[t3];
          t3 = customAttribute.get$value();
          if (typeof t3 !== 'string' && (typeof t3 !== 'object' || t3 === null || t3.constructor !== Array && !t3.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(72, geometryGroup, value, hint, customAttributes, dispose, i, f, il, customAttribute, v4, chunk_faces3, chunk_faces4, obj_faces, fl, face, offset_custom, v1, t3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t4 = face.get$b();
          if (t4 !== (t4 | 0))
            throw $.iae(t4);
          if (t4 < 0 || t4 >= t3.length)
            throw $.ioore(t4);
          v2 = t3[t4];
          t4 = customAttribute.get$value();
          if (typeof t4 !== 'string' && (typeof t4 !== 'object' || t4 === null || t4.constructor !== Array && !t4.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(73, v2, value, t4, hint, customAttributes, i, f, il, customAttribute, geometryGroup, v4, dispose, chunk_faces3, chunk_faces4, obj_faces, fl, face, offset_custom, v1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t5 = face.get$c();
          if (t5 !== (t5 | 0))
            throw $.iae(t5);
          if (t5 < 0 || t5 >= t4.length)
            throw $.ioore(t5);
          v3 = t4[t5];
          t5 = customAttribute.get$array();
          if (typeof t5 !== 'object' || t5 === null || (t5.constructor !== Array || !!t5.immutable$list) && !t5.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(74, v2, value, hint, geometryGroup, v3, i, t5, f, customAttribute, v4, customAttributes, il, chunk_faces3, chunk_faces4, obj_faces, dispose, fl, face, offset_custom, v1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t6 = v1.get$x();
          if (offset_custom < 0 || offset_custom >= t5.length)
            throw $.ioore(offset_custom);
          t5[offset_custom] = t6;
          t6 = customAttribute.get$array();
          if (typeof t6 !== 'object' || t6 === null || (t6.constructor !== Array || !!t6.immutable$list) && !t6.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(75, v2, value, hint, geometryGroup, v3, i, f, il, customAttribute, t6, v4, customAttributes, chunk_faces3, chunk_faces4, obj_faces, dispose, fl, face, offset_custom, v1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t7 = offset_custom + 1;
          t8 = v1.get$y();
          if (t7 < 0 || t7 >= t6.length)
            throw $.ioore(t7);
          t6[t7] = t8;
          t8 = customAttribute.get$array();
          if (typeof t8 !== 'object' || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(76, v2, value, hint, geometryGroup, v3, i, f, il, customAttribute, v4, customAttributes, chunk_faces3, t8, chunk_faces4, obj_faces, fl, face, offset_custom, v1, dispose, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t6 = offset_custom + 2;
          t9 = v2.get$x();
          if (t6 < 0 || t6 >= t8.length)
            throw $.ioore(t6);
          t8[t6] = t9;
          t9 = customAttribute.get$array();
          if (typeof t9 !== 'object' || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(77, v2, value, hint, geometryGroup, v3, i, f, il, customAttribute, v4, customAttributes, chunk_faces3, chunk_faces4, obj_faces, dispose, fl, t9, face, offset_custom, v1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t8 = offset_custom + 3;
          t10 = v2.get$y();
          if (t8 < 0 || t8 >= t9.length)
            throw $.ioore(t8);
          t9[t8] = t10;
          t10 = customAttribute.get$array();
          if (typeof t10 !== 'object' || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(78, v2, value, hint, geometryGroup, v3, i, f, il, customAttribute, v4, customAttributes, chunk_faces3, chunk_faces4, obj_faces, dispose, fl, face, offset_custom, v1, t10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t9 = offset_custom + 4;
          t11 = v3.get$x();
          if (t9 < 0 || t9 >= t10.length)
            throw $.ioore(t9);
          t10[t9] = t11;
          t11 = customAttribute.get$array();
          if (typeof t11 !== 'object' || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(79, v2, value, t11, hint, v3, i, f, il, customAttribute, geometryGroup, v4, customAttributes, chunk_faces3, chunk_faces4, obj_faces, dispose, fl, face, offset_custom, v1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t10 = offset_custom + 5;
          t12 = v3.get$y();
          if (t10 < 0 || t10 >= t11.length)
            throw $.ioore(t10);
          t11[t10] = t12;
          offset_custom += 6;
        }
        fl = chunk_faces4.length;
        for (f = 0; f < fl; ++f) {
          if (f < 0 || f >= chunk_faces4.length)
            throw $.ioore(f);
          t1 = chunk_faces4[f];
          if (t1 !== (t1 | 0))
            throw $.iae(t1);
          if (t1 < 0 || t1 >= obj_faces.length)
            throw $.ioore(t1);
          face = obj_faces[t1];
          t1 = customAttribute.get$value();
          if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(80, geometryGroup, value, hint, customAttributes, dispose, i, f, il, customAttribute, chunk_faces3, chunk_faces4, obj_faces, fl, face, t1, offset_custom, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t3 = face.get$a();
          if (t3 !== (t3 | 0))
            throw $.iae(t3);
          if (t3 < 0 || t3 >= t1.length)
            throw $.ioore(t3);
          v1 = t1[t3];
          t3 = customAttribute.get$value();
          if (typeof t3 !== 'string' && (typeof t3 !== 'object' || t3 === null || t3.constructor !== Array && !t3.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(81, geometryGroup, value, hint, customAttributes, dispose, i, f, il, customAttribute, chunk_faces3, chunk_faces4, obj_faces, fl, face, offset_custom, v1, t3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t4 = face.get$b();
          if (t4 !== (t4 | 0))
            throw $.iae(t4);
          if (t4 < 0 || t4 >= t3.length)
            throw $.ioore(t4);
          v2 = t3[t4];
          t4 = customAttribute.get$value();
          if (typeof t4 !== 'string' && (typeof t4 !== 'object' || t4 === null || t4.constructor !== Array && !t4.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(82, v2, value, t4, hint, customAttributes, i, f, il, customAttribute, geometryGroup, dispose, chunk_faces3, chunk_faces4, obj_faces, fl, face, offset_custom, v1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t5 = face.get$c();
          if (t5 !== (t5 | 0))
            throw $.iae(t5);
          if (t5 < 0 || t5 >= t4.length)
            throw $.ioore(t5);
          v3 = t4[t5];
          t5 = customAttribute.get$value();
          if (typeof t5 !== 'string' && (typeof t5 !== 'object' || t5 === null || t5.constructor !== Array && !t5.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(83, v2, value, hint, geometryGroup, v3, i, t5, f, customAttribute, il, customAttributes, chunk_faces3, chunk_faces4, obj_faces, dispose, fl, face, offset_custom, v1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t6 = face.get$d();
          if (t6 !== (t6 | 0))
            throw $.iae(t6);
          if (t6 < 0 || t6 >= t5.length)
            throw $.ioore(t6);
          v4 = t5[t6];
          t6 = customAttribute.get$array();
          if (typeof t6 !== 'object' || t6 === null || (t6.constructor !== Array || !!t6.immutable$list) && !t6.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(84, v2, value, hint, geometryGroup, v3, i, f, v4, customAttribute, t6, il, customAttributes, chunk_faces3, chunk_faces4, obj_faces, dispose, fl, face, offset_custom, v1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t7 = v1.get$x();
          if (offset_custom < 0 || offset_custom >= t6.length)
            throw $.ioore(offset_custom);
          t6[offset_custom] = t7;
          t7 = customAttribute.get$array();
          if (typeof t7 !== 'object' || t7 === null || (t7.constructor !== Array || !!t7.immutable$list) && !t7.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(85, v2, value, hint, geometryGroup, v3, i, f, v4, customAttribute, il, customAttributes, t7, chunk_faces3, chunk_faces4, obj_faces, dispose, fl, face, offset_custom, v1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t8 = offset_custom + 1;
          t9 = v1.get$y();
          if (t8 < 0 || t8 >= t7.length)
            throw $.ioore(t8);
          t7[t8] = t9;
          t9 = customAttribute.get$array();
          if (typeof t9 !== 'object' || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(86, v2, value, hint, geometryGroup, v3, i, f, v4, customAttribute, il, customAttributes, chunk_faces3, chunk_faces4, obj_faces, dispose, t9, fl, face, offset_custom, v1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t7 = offset_custom + 2;
          t10 = v2.get$x();
          if (t7 < 0 || t7 >= t9.length)
            throw $.ioore(t7);
          t9[t7] = t10;
          t10 = customAttribute.get$array();
          if (typeof t10 !== 'object' || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(87, v2, value, hint, geometryGroup, v3, i, f, v4, customAttribute, il, customAttributes, chunk_faces3, chunk_faces4, obj_faces, dispose, fl, face, t10, offset_custom, v1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t9 = offset_custom + 3;
          t11 = v2.get$y();
          if (t9 < 0 || t9 >= t10.length)
            throw $.ioore(t9);
          t10[t9] = t11;
          t11 = customAttribute.get$array();
          if (typeof t11 !== 'object' || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(88, v2, t11, value, hint, v3, i, f, v4, customAttribute, geometryGroup, il, customAttributes, chunk_faces3, chunk_faces4, obj_faces, dispose, fl, face, offset_custom, v1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t10 = offset_custom + 4;
          t12 = v3.get$x();
          if (t10 < 0 || t10 >= t11.length)
            throw $.ioore(t10);
          t11[t10] = t12;
          t12 = customAttribute.get$array();
          if (typeof t12 !== 'object' || t12 === null || (t12.constructor !== Array || !!t12.immutable$list) && !t12.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(89, v2, value, hint, geometryGroup, v3, t12, f, v4, customAttribute, il, i, customAttributes, chunk_faces3, chunk_faces4, obj_faces, dispose, fl, face, offset_custom, v1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t11 = offset_custom + 5;
          t13 = v3.get$y();
          if (t11 < 0 || t11 >= t12.length)
            throw $.ioore(t11);
          t12[t11] = t13;
          t13 = customAttribute.get$array();
          if (typeof t13 !== 'object' || t13 === null || (t13.constructor !== Array || !!t13.immutable$list) && !t13.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(90, v2, value, hint, geometryGroup, v3, i, f, v4, customAttribute, il, t13, customAttributes, chunk_faces3, chunk_faces4, obj_faces, dispose, fl, face, offset_custom, v1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t12 = offset_custom + 6;
          t14 = v4.get$x();
          if (t12 < 0 || t12 >= t13.length)
            throw $.ioore(t12);
          t13[t12] = t14;
          t14 = customAttribute.get$array();
          if (typeof t14 !== 'object' || t14 === null || (t14.constructor !== Array || !!t14.immutable$list) && !t14.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(91, v2, value, hint, geometryGroup, v3, i, f, v4, customAttribute, il, customAttributes, chunk_faces3, chunk_faces4, obj_faces, t14, fl, face, offset_custom, v1, dispose, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t13 = offset_custom + 7;
          t15 = v4.get$y();
          if (t13 < 0 || t13 >= t14.length)
            throw $.ioore(t13);
          t14[t13] = t15;
          offset_custom += 8;
        }
      } else if (t1 === 'faces') {
        fl = chunk_faces3.length;
        for (offset_custom = 0, f = 0; f < fl; ++f) {
          t1 = customAttribute.get$value();
          if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(92, chunk_faces3, chunk_faces4, hint, offset_custom, face, i, customAttribute, v4, fl, t1, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          if (f < 0 || f >= chunk_faces3.length)
            throw $.ioore(f);
          t3 = chunk_faces3[f];
          if (t3 !== (t3 | 0))
            throw $.iae(t3);
          if (t3 < 0 || t3 >= t1.length)
            throw $.ioore(t3);
          value = t1[t3];
          t3 = customAttribute.get$array();
          if (typeof t3 !== 'object' || t3 === null || (t3.constructor !== Array || !!t3.immutable$list) && !t3.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(93, hint, i, customAttribute, v4, fl, chunk_faces3, chunk_faces4, value, offset_custom, t3, face, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t4 = value.get$x();
          if (offset_custom < 0 || offset_custom >= t3.length)
            throw $.ioore(offset_custom);
          t3[offset_custom] = t4;
          t4 = customAttribute.get$array();
          if (typeof t4 !== 'object' || t4 === null || (t4.constructor !== Array || !!t4.immutable$list) && !t4.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(94, hint, i, customAttribute, v4, fl, chunk_faces3, chunk_faces4, value, offset_custom, t4, face, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t5 = offset_custom + 1;
          t6 = value.get$y();
          if (t5 < 0 || t5 >= t4.length)
            throw $.ioore(t5);
          t4[t5] = t6;
          t6 = customAttribute.get$array();
          if (typeof t6 !== 'object' || t6 === null || (t6.constructor !== Array || !!t6.immutable$list) && !t6.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(95, hint, i, customAttribute, v4, fl, chunk_faces3, chunk_faces4, value, offset_custom, t6, face, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t4 = offset_custom + 2;
          t7 = value.get$x();
          if (t4 < 0 || t4 >= t6.length)
            throw $.ioore(t4);
          t6[t4] = t7;
          t7 = customAttribute.get$array();
          if (typeof t7 !== 'object' || t7 === null || (t7.constructor !== Array || !!t7.immutable$list) && !t7.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(96, hint, t7, i, customAttribute, v4, fl, chunk_faces3, chunk_faces4, value, offset_custom, face, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t6 = offset_custom + 3;
          t8 = value.get$y();
          if (t6 < 0 || t6 >= t7.length)
            throw $.ioore(t6);
          t7[t6] = t8;
          t8 = customAttribute.get$array();
          if (typeof t8 !== 'object' || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(97, hint, i, customAttribute, t8, v4, fl, chunk_faces3, chunk_faces4, value, offset_custom, face, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t7 = offset_custom + 4;
          t9 = value.get$x();
          if (t7 < 0 || t7 >= t8.length)
            throw $.ioore(t7);
          t8[t7] = t9;
          t9 = customAttribute.get$array();
          if (typeof t9 !== 'object' || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(98, hint, i, customAttribute, v4, fl, chunk_faces3, chunk_faces4, value, t9, offset_custom, face, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t8 = offset_custom + 5;
          t10 = value.get$y();
          if (t8 < 0 || t8 >= t9.length)
            throw $.ioore(t8);
          t9[t8] = t10;
          offset_custom += 6;
          v3 = value;
          v2 = v3;
          v1 = v2;
        }
        fl = chunk_faces4.length;
        for (f = 0; f < fl; ++f) {
          t1 = customAttribute.get$value();
          if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(99, chunk_faces4, hint, t1, f, fl, i, offset_custom, customAttribute, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          if (f < 0 || f >= chunk_faces4.length)
            throw $.ioore(f);
          t3 = chunk_faces4[f];
          if (t3 !== (t3 | 0))
            throw $.iae(t3);
          if (t3 < 0 || t3 >= t1.length)
            throw $.ioore(t3);
          value = t1[t3];
          t3 = customAttribute.get$array();
          if (typeof t3 !== 'object' || t3 === null || (t3.constructor !== Array || !!t3.immutable$list) && !t3.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(100, chunk_faces4, hint, fl, f, value, i, offset_custom, customAttribute, t3, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t4 = value.get$x();
          if (offset_custom < 0 || offset_custom >= t3.length)
            throw $.ioore(offset_custom);
          t3[offset_custom] = t4;
          t4 = customAttribute.get$array();
          if (typeof t4 !== 'object' || t4 === null || (t4.constructor !== Array || !!t4.immutable$list) && !t4.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(101, chunk_faces4, hint, fl, f, value, i, offset_custom, customAttribute, t4, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t5 = offset_custom + 1;
          t6 = value.get$y();
          if (t5 < 0 || t5 >= t4.length)
            throw $.ioore(t5);
          t4[t5] = t6;
          t6 = customAttribute.get$array();
          if (typeof t6 !== 'object' || t6 === null || (t6.constructor !== Array || !!t6.immutable$list) && !t6.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(102, chunk_faces4, t6, hint, f, fl, value, i, offset_custom, customAttribute, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t4 = offset_custom + 2;
          t7 = value.get$x();
          if (t4 < 0 || t4 >= t6.length)
            throw $.ioore(t4);
          t6[t4] = t7;
          t7 = customAttribute.get$array();
          if (typeof t7 !== 'object' || t7 === null || (t7.constructor !== Array || !!t7.immutable$list) && !t7.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(103, chunk_faces4, hint, fl, f, value, i, offset_custom, customAttribute, t7, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t6 = offset_custom + 3;
          t8 = value.get$y();
          if (t6 < 0 || t6 >= t7.length)
            throw $.ioore(t6);
          t7[t6] = t8;
          t8 = customAttribute.get$array();
          if (typeof t8 !== 'object' || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(104, chunk_faces4, hint, fl, f, value, i, offset_custom, customAttribute, t8, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t7 = offset_custom + 4;
          t9 = value.get$x();
          if (t7 < 0 || t7 >= t8.length)
            throw $.ioore(t7);
          t8[t7] = t9;
          t9 = customAttribute.get$array();
          if (typeof t9 !== 'object' || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(105, chunk_faces4, hint, fl, f, t9, value, i, offset_custom, customAttribute, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t8 = offset_custom + 5;
          t10 = value.get$y();
          if (t8 < 0 || t8 >= t9.length)
            throw $.ioore(t8);
          t9[t8] = t10;
          t10 = customAttribute.get$array();
          if (typeof t10 !== 'object' || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(106, chunk_faces4, hint, fl, f, value, i, offset_custom, customAttribute, t10, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t9 = offset_custom + 6;
          t11 = value.get$x();
          if (t9 < 0 || t9 >= t10.length)
            throw $.ioore(t9);
          t10[t9] = t11;
          t11 = customAttribute.get$array();
          if (typeof t11 !== 'object' || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(107, t11, chunk_faces4, hint, fl, f, value, i, offset_custom, customAttribute, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t10 = offset_custom + 7;
          t12 = value.get$y();
          if (t10 < 0 || t10 >= t11.length)
            throw $.ioore(t10);
          t11[t10] = t12;
          offset_custom += 8;
          v4 = value;
          v3 = v4;
          v2 = v3;
          v1 = v2;
        }
      } else
        offset_custom = 0;
    } else if (customAttribute.get$size() === 3) {
      var pp = customAttribute.get$type() === 'c' ? ['r', 'g', 'b'] : ['x', 'y', 'z'];
      t1 = customAttribute.get$boundTo();
      if (typeof t1 !== 'string')
        return this.setMeshBuffers$5$bailout(108, geometryGroup, value, hint, customAttributes, dispose, v1, i, v2, fl, customAttribute, pp, v4, t1, il, chunk_faces3, chunk_faces4, obj_faces, v3, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      if (t1 === 'vertices') {
        fl = chunk_faces3.length;
        for (offset_custom = 0, f = 0; f < fl; ++f) {
          if (f < 0 || f >= chunk_faces3.length)
            throw $.ioore(f);
          t1 = chunk_faces3[f];
          if (t1 !== (t1 | 0))
            throw $.iae(t1);
          if (t1 < 0 || t1 >= obj_faces.length)
            throw $.ioore(t1);
          face = obj_faces[t1];
          t1 = customAttribute.get$value();
          if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(109, value, face, hint, t1, offset_custom, i, customAttribute, pp, v4, chunk_faces3, chunk_faces4, f, obj_faces, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t3 = face.get$a();
          if (t3 !== (t3 | 0))
            throw $.iae(t3);
          if (t3 < 0 || t3 >= t1.length)
            throw $.ioore(t3);
          v1 = t1[t3];
          if (typeof v1 !== 'string' && (typeof v1 !== 'object' || v1 === null || v1.constructor !== Array && !v1.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(110, value, face, hint, offset_custom, v1, i, customAttribute, pp, v4, chunk_faces3, chunk_faces4, f, obj_faces, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t1 = customAttribute.get$value();
          if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(111, value, face, hint, offset_custom, v1, i, t1, customAttribute, pp, v4, chunk_faces3, chunk_faces4, f, obj_faces, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t5 = face.get$b();
          if (t5 !== (t5 | 0))
            throw $.iae(t5);
          if (t5 < 0 || t5 >= t1.length)
            throw $.ioore(t5);
          v2 = t1[t5];
          if (typeof v2 !== 'string' && (typeof v2 !== 'object' || v2 === null || v2.constructor !== Array && !v2.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(112, value, face, hint, offset_custom, v1, i, customAttribute, v2, pp, v4, chunk_faces3, chunk_faces4, f, obj_faces, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t1 = customAttribute.get$value();
          if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(113, value, face, hint, offset_custom, v1, i, customAttribute, v2, pp, t1, v4, chunk_faces3, chunk_faces4, f, obj_faces, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t7 = face.get$c();
          if (t7 !== (t7 | 0))
            throw $.iae(t7);
          if (t7 < 0 || t7 >= t1.length)
            throw $.ioore(t7);
          v3 = t1[t7];
          if (typeof v3 !== 'string' && (typeof v3 !== 'object' || v3 === null || v3.constructor !== Array && !v3.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(114, value, face, hint, offset_custom, v1, i, customAttribute, v2, pp, v4, v3, chunk_faces3, chunk_faces4, f, obj_faces, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t1 = customAttribute.get$array();
          if (typeof t1 !== 'object' || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(115, value, face, hint, offset_custom, v1, i, customAttribute, v2, pp, v4, v3, chunk_faces3, t1, f, obj_faces, chunk_faces4, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          if (0 >= pp.length)
            throw $.ioore(0);
          t9 = pp[0];
          if (t9 !== (t9 | 0))
            throw $.iae(t9);
          if (t9 < 0 || t9 >= v1.length)
            throw $.ioore(t9);
          t9 = v1[t9];
          if (offset_custom < 0 || offset_custom >= t1.length)
            throw $.ioore(offset_custom);
          t1[offset_custom] = t9;
          t9 = customAttribute.get$array();
          if (typeof t9 !== 'object' || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(116, value, face, hint, offset_custom, v1, i, customAttribute, v2, pp, v4, v3, chunk_faces3, chunk_faces4, f, obj_faces, t9, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t10 = offset_custom + 1;
          if (1 >= pp.length)
            throw $.ioore(1);
          t11 = pp[1];
          if (t11 !== (t11 | 0))
            throw $.iae(t11);
          if (t11 < 0 || t11 >= v1.length)
            throw $.ioore(t11);
          t11 = v1[t11];
          if (t10 < 0 || t10 >= t9.length)
            throw $.ioore(t10);
          t9[t10] = t11;
          t11 = customAttribute.get$array();
          if (typeof t11 !== 'object' || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(117, t11, value, face, hint, offset_custom, v1, i, customAttribute, v2, pp, v4, v3, chunk_faces3, chunk_faces4, f, obj_faces, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t9 = offset_custom + 2;
          if (2 >= pp.length)
            throw $.ioore(2);
          t12 = pp[2];
          if (t12 !== (t12 | 0))
            throw $.iae(t12);
          if (t12 < 0 || t12 >= v1.length)
            throw $.ioore(t12);
          t12 = v1[t12];
          if (t9 < 0 || t9 >= t11.length)
            throw $.ioore(t9);
          t11[t9] = t12;
          t12 = customAttribute.get$array();
          if (typeof t12 !== 'object' || t12 === null || (t12.constructor !== Array || !!t12.immutable$list) && !t12.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(118, value, face, hint, offset_custom, v1, i, customAttribute, v2, pp, t12, v3, chunk_faces3, chunk_faces4, f, obj_faces, v4, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t11 = offset_custom + 3;
          if (0 >= pp.length)
            throw $.ioore(0);
          t13 = pp[0];
          if (t13 !== (t13 | 0))
            throw $.iae(t13);
          if (t13 < 0 || t13 >= v2.length)
            throw $.ioore(t13);
          t13 = v2[t13];
          if (t11 < 0 || t11 >= t12.length)
            throw $.ioore(t11);
          t12[t11] = t13;
          t13 = customAttribute.get$array();
          if (typeof t13 !== 'object' || t13 === null || (t13.constructor !== Array || !!t13.immutable$list) && !t13.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(119, value, face, hint, offset_custom, v1, i, customAttribute, v2, pp, v4, v3, chunk_faces3, chunk_faces4, f, t13, obj_faces, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t12 = offset_custom + 4;
          if (1 >= pp.length)
            throw $.ioore(1);
          t14 = pp[1];
          if (t14 !== (t14 | 0))
            throw $.iae(t14);
          if (t14 < 0 || t14 >= v2.length)
            throw $.ioore(t14);
          t14 = v2[t14];
          if (t12 < 0 || t12 >= t13.length)
            throw $.ioore(t12);
          t13[t12] = t14;
          t14 = customAttribute.get$array();
          if (typeof t14 !== 'object' || t14 === null || (t14.constructor !== Array || !!t14.immutable$list) && !t14.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(120, value, face, hint, offset_custom, v1, i, customAttribute, v2, pp, v4, v3, chunk_faces3, chunk_faces4, f, obj_faces, t14, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t13 = offset_custom + 5;
          if (2 >= pp.length)
            throw $.ioore(2);
          t15 = pp[2];
          if (t15 !== (t15 | 0))
            throw $.iae(t15);
          if (t15 < 0 || t15 >= v2.length)
            throw $.ioore(t15);
          t15 = v2[t15];
          if (t13 < 0 || t13 >= t14.length)
            throw $.ioore(t13);
          t14[t13] = t15;
          t15 = customAttribute.get$array();
          if (typeof t15 !== 'object' || t15 === null || (t15.constructor !== Array || !!t15.immutable$list) && !t15.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(121, value, face, hint, t15, offset_custom, v1, i, customAttribute, v2, pp, v4, v3, chunk_faces3, chunk_faces4, f, obj_faces, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t14 = offset_custom + 6;
          if (0 >= pp.length)
            throw $.ioore(0);
          t16 = pp[0];
          if (t16 !== (t16 | 0))
            throw $.iae(t16);
          if (t16 < 0 || t16 >= v3.length)
            throw $.ioore(t16);
          t16 = v3[t16];
          if (t14 < 0 || t14 >= t15.length)
            throw $.ioore(t14);
          t15[t14] = t16;
          t16 = customAttribute.get$array();
          if (typeof t16 !== 'object' || t16 === null || (t16.constructor !== Array || !!t16.immutable$list) && !t16.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(122, value, face, hint, offset_custom, v1, i, customAttribute, v2, pp, v4, t16, v3, chunk_faces3, chunk_faces4, f, obj_faces, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t15 = offset_custom + 7;
          if (1 >= pp.length)
            throw $.ioore(1);
          t17 = pp[1];
          if (t17 !== (t17 | 0))
            throw $.iae(t17);
          if (t17 < 0 || t17 >= v3.length)
            throw $.ioore(t17);
          t17 = v3[t17];
          if (t15 < 0 || t15 >= t16.length)
            throw $.ioore(t15);
          t16[t15] = t17;
          t17 = customAttribute.get$array();
          if (typeof t17 !== 'object' || t17 === null || (t17.constructor !== Array || !!t17.immutable$list) && !t17.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(123, value, face, hint, offset_custom, v1, i, customAttribute, v2, pp, v4, v3, chunk_faces3, chunk_faces4, f, obj_faces, t17, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t16 = offset_custom + 8;
          if (2 >= pp.length)
            throw $.ioore(2);
          t18 = pp[2];
          if (t18 !== (t18 | 0))
            throw $.iae(t18);
          if (t18 < 0 || t18 >= v3.length)
            throw $.ioore(t18);
          t18 = v3[t18];
          if (t16 < 0 || t16 >= t17.length)
            throw $.ioore(t16);
          t17[t16] = t18;
          offset_custom += 9;
        }
        fl = chunk_faces4.length;
        for (f = 0; f < fl; ++f) {
          if (f < 0 || f >= chunk_faces4.length)
            throw $.ioore(f);
          t1 = chunk_faces4[f];
          if (t1 !== (t1 | 0))
            throw $.iae(t1);
          if (t1 < 0 || t1 >= obj_faces.length)
            throw $.ioore(t1);
          face = obj_faces[t1];
          t1 = customAttribute.get$value();
          if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(124, geometryGroup, value, hint, customAttributes, dispose, i, il, customAttribute, pp, fl, chunk_faces3, face, chunk_faces4, t1, offset_custom, obj_faces, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t3 = face.get$a();
          if (t3 !== (t3 | 0))
            throw $.iae(t3);
          if (t3 < 0 || t3 >= t1.length)
            throw $.ioore(t3);
          v1 = t1[t3];
          if (typeof v1 !== 'string' && (typeof v1 !== 'object' || v1 === null || v1.constructor !== Array && !v1.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(125, geometryGroup, value, hint, customAttributes, dispose, i, il, customAttribute, pp, fl, chunk_faces3, face, chunk_faces4, obj_faces, offset_custom, v1, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t1 = customAttribute.get$value();
          if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(126, geometryGroup, value, hint, customAttributes, dispose, i, il, customAttribute, pp, fl, chunk_faces3, face, chunk_faces4, obj_faces, offset_custom, v1, t1, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t5 = face.get$b();
          if (t5 !== (t5 | 0))
            throw $.iae(t5);
          if (t5 < 0 || t5 >= t1.length)
            throw $.ioore(t5);
          v2 = t1[t5];
          if (typeof v2 !== 'string' && (typeof v2 !== 'object' || v2 === null || v2.constructor !== Array && !v2.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(127, geometryGroup, value, hint, customAttributes, dispose, i, il, customAttribute, pp, fl, chunk_faces3, face, chunk_faces4, obj_faces, offset_custom, v1, v2, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t1 = customAttribute.get$value();
          if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(128, geometryGroup, value, hint, customAttributes, dispose, i, il, customAttribute, pp, fl, chunk_faces3, face, chunk_faces4, obj_faces, offset_custom, v1, v2, t1, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t7 = face.get$c();
          if (t7 !== (t7 | 0))
            throw $.iae(t7);
          if (t7 < 0 || t7 >= t1.length)
            throw $.ioore(t7);
          v3 = t1[t7];
          if (typeof v3 !== 'string' && (typeof v3 !== 'object' || v3 === null || v3.constructor !== Array && !v3.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(129, geometryGroup, value, hint, customAttributes, dispose, i, il, customAttribute, pp, fl, chunk_faces3, face, chunk_faces4, obj_faces, offset_custom, v1, v2, v3, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t1 = customAttribute.get$value();
          if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(130, geometryGroup, value, hint, customAttributes, dispose, i, il, customAttribute, pp, fl, chunk_faces3, face, chunk_faces4, obj_faces, offset_custom, v1, v2, v3, t1, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t9 = face.get$d();
          if (t9 !== (t9 | 0))
            throw $.iae(t9);
          if (t9 < 0 || t9 >= t1.length)
            throw $.ioore(t9);
          v4 = t1[t9];
          if (typeof v4 !== 'string' && (typeof v4 !== 'object' || v4 === null || v4.constructor !== Array && !v4.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(131, v4, value, hint, geometryGroup, customAttributes, i, il, customAttribute, pp, fl, dispose, chunk_faces3, face, chunk_faces4, obj_faces, offset_custom, v1, v2, v3, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t1 = customAttribute.get$array();
          if (typeof t1 !== 'object' || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(132, v4, value, t1, hint, customAttributes, i, il, customAttribute, pp, fl, dispose, geometryGroup, face, chunk_faces4, obj_faces, offset_custom, v1, chunk_faces3, v2, v3, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          if (0 >= pp.length)
            throw $.ioore(0);
          t11 = pp[0];
          if (t11 !== (t11 | 0))
            throw $.iae(t11);
          if (t11 < 0 || t11 >= v1.length)
            throw $.ioore(t11);
          t11 = v1[t11];
          if (offset_custom < 0 || offset_custom >= t1.length)
            throw $.ioore(offset_custom);
          t1[offset_custom] = t11;
          t11 = customAttribute.get$array();
          if (typeof t11 !== 'object' || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(133, v4, value, hint, geometryGroup, customAttributes, i, dispose, il, customAttribute, pp, t11, fl, chunk_faces3, face, chunk_faces4, obj_faces, offset_custom, v1, v2, v3, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t12 = offset_custom + 1;
          if (1 >= pp.length)
            throw $.ioore(1);
          t13 = pp[1];
          if (t13 !== (t13 | 0))
            throw $.iae(t13);
          if (t13 < 0 || t13 >= v1.length)
            throw $.ioore(t13);
          t13 = v1[t13];
          if (t12 < 0 || t12 >= t11.length)
            throw $.ioore(t12);
          t11[t12] = t13;
          t13 = customAttribute.get$array();
          if (typeof t13 !== 'object' || t13 === null || (t13.constructor !== Array || !!t13.immutable$list) && !t13.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(134, v4, value, hint, geometryGroup, customAttributes, i, il, customAttribute, pp, fl, dispose, chunk_faces3, face, chunk_faces4, t13, offset_custom, v1, obj_faces, v2, v3, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t11 = offset_custom + 2;
          if (2 >= pp.length)
            throw $.ioore(2);
          t14 = pp[2];
          if (t14 !== (t14 | 0))
            throw $.iae(t14);
          if (t14 < 0 || t14 >= v1.length)
            throw $.ioore(t14);
          t14 = v1[t14];
          if (t11 < 0 || t11 >= t13.length)
            throw $.ioore(t11);
          t13[t11] = t14;
          t14 = customAttribute.get$array();
          if (typeof t14 !== 'object' || t14 === null || (t14.constructor !== Array || !!t14.immutable$list) && !t14.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(135, v4, value, hint, geometryGroup, customAttributes, i, il, customAttribute, pp, fl, dispose, chunk_faces3, face, chunk_faces4, obj_faces, offset_custom, v1, v2, t14, v3, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t13 = offset_custom + 3;
          if (0 >= pp.length)
            throw $.ioore(0);
          t15 = pp[0];
          if (t15 !== (t15 | 0))
            throw $.iae(t15);
          if (t15 < 0 || t15 >= v2.length)
            throw $.ioore(t15);
          t15 = v2[t15];
          if (t13 < 0 || t13 >= t14.length)
            throw $.ioore(t13);
          t14[t13] = t15;
          t15 = customAttribute.get$array();
          if (typeof t15 !== 'object' || t15 === null || (t15.constructor !== Array || !!t15.immutable$list) && !t15.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(136, v4, value, hint, geometryGroup, t15, i, dispose, il, customAttribute, pp, fl, customAttributes, chunk_faces3, face, chunk_faces4, obj_faces, offset_custom, v1, v2, v3, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t14 = offset_custom + 4;
          if (1 >= pp.length)
            throw $.ioore(1);
          t16 = pp[1];
          if (t16 !== (t16 | 0))
            throw $.iae(t16);
          if (t16 < 0 || t16 >= v2.length)
            throw $.ioore(t16);
          t16 = v2[t16];
          if (t14 < 0 || t14 >= t15.length)
            throw $.ioore(t14);
          t15[t14] = t16;
          t16 = customAttribute.get$array();
          if (typeof t16 !== 'object' || t16 === null || (t16.constructor !== Array || !!t16.immutable$list) && !t16.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(137, v4, value, hint, geometryGroup, customAttributes, i, dispose, il, customAttribute, pp, fl, t16, chunk_faces3, face, chunk_faces4, obj_faces, offset_custom, v1, v2, v3, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t15 = offset_custom + 5;
          if (2 >= pp.length)
            throw $.ioore(2);
          t17 = pp[2];
          if (t17 !== (t17 | 0))
            throw $.iae(t17);
          if (t17 < 0 || t17 >= v2.length)
            throw $.ioore(t17);
          t17 = v2[t17];
          if (t15 < 0 || t15 >= t16.length)
            throw $.ioore(t15);
          t16[t15] = t17;
          t17 = customAttribute.get$array();
          if (typeof t17 !== 'object' || t17 === null || (t17.constructor !== Array || !!t17.immutable$list) && !t17.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(138, v4, value, hint, geometryGroup, customAttributes, i, il, customAttribute, pp, fl, dispose, chunk_faces3, face, chunk_faces4, obj_faces, offset_custom, v1, t17, v2, v3, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t16 = offset_custom + 6;
          if (0 >= pp.length)
            throw $.ioore(0);
          t18 = pp[0];
          if (t18 !== (t18 | 0))
            throw $.iae(t18);
          if (t18 < 0 || t18 >= v3.length)
            throw $.ioore(t18);
          t18 = v3[t18];
          if (t16 < 0 || t16 >= t17.length)
            throw $.ioore(t16);
          t17[t16] = t18;
          t18 = customAttribute.get$array();
          if (typeof t18 !== 'object' || t18 === null || (t18.constructor !== Array || !!t18.immutable$list) && !t18.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(139, v4, value, f, hint, customAttributes, i, il, customAttribute, pp, fl, dispose, geometryGroup, face, chunk_faces4, obj_faces, offset_custom, v1, chunk_faces3, v2, v3, t18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t17 = offset_custom + 7;
          if (1 >= pp.length)
            throw $.ioore(1);
          t19 = pp[1];
          if (t19 !== (t19 | 0))
            throw $.iae(t19);
          if (t19 < 0 || t19 >= v3.length)
            throw $.ioore(t19);
          t19 = v3[t19];
          if (t17 < 0 || t17 >= t18.length)
            throw $.ioore(t17);
          t18[t17] = t19;
          t19 = customAttribute.get$array();
          if (typeof t19 !== 'object' || t19 === null || (t19.constructor !== Array || !!t19.immutable$list) && !t19.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(140, v4, value, hint, geometryGroup, customAttributes, i, t19, customAttribute, pp, il, fl, dispose, chunk_faces3, face, chunk_faces4, obj_faces, offset_custom, v1, v2, v3, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t18 = offset_custom + 8;
          if (2 >= pp.length)
            throw $.ioore(2);
          t20 = pp[2];
          if (t20 !== (t20 | 0))
            throw $.iae(t20);
          if (t20 < 0 || t20 >= v3.length)
            throw $.ioore(t20);
          t20 = v3[t20];
          if (t18 < 0 || t18 >= t19.length)
            throw $.ioore(t18);
          t19[t18] = t20;
          t20 = customAttribute.get$array();
          if (typeof t20 !== 'object' || t20 === null || (t20.constructor !== Array || !!t20.immutable$list) && !t20.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(141, v4, value, hint, geometryGroup, customAttributes, i, il, customAttribute, pp, fl, dispose, chunk_faces3, face, t20, obj_faces, offset_custom, v1, chunk_faces4, v2, v3, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t19 = offset_custom + 9;
          if (0 >= pp.length)
            throw $.ioore(0);
          t21 = pp[0];
          if (t21 !== (t21 | 0))
            throw $.iae(t21);
          if (t21 < 0 || t21 >= v4.length)
            throw $.ioore(t21);
          t21 = v4[t21];
          if (t19 < 0 || t19 >= t20.length)
            throw $.ioore(t19);
          t20[t19] = t21;
          t21 = customAttribute.get$array();
          if (typeof t21 !== 'object' || t21 === null || (t21.constructor !== Array || !!t21.immutable$list) && !t21.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(142, v4, value, hint, geometryGroup, customAttributes, i, il, customAttribute, pp, fl, dispose, chunk_faces3, face, chunk_faces4, obj_faces, offset_custom, v1, v2, t21, v3, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t20 = offset_custom + 10;
          if (1 >= pp.length)
            throw $.ioore(1);
          var t22 = pp[1];
          if (t22 !== (t22 | 0))
            throw $.iae(t22);
          if (t22 < 0 || t22 >= v4.length)
            throw $.ioore(t22);
          t22 = v4[t22];
          if (t20 < 0 || t20 >= t21.length)
            throw $.ioore(t20);
          t21[t20] = t22;
          t22 = customAttribute.get$array();
          if (typeof t22 !== 'object' || t22 === null || (t22.constructor !== Array || !!t22.immutable$list) && !t22.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(143, v4, value, hint, t22, customAttributes, i, il, customAttribute, pp, fl, dispose, geometryGroup, face, chunk_faces4, obj_faces, offset_custom, v1, chunk_faces3, v2, v3, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t21 = offset_custom + 11;
          if (2 >= pp.length)
            throw $.ioore(2);
          var t23 = pp[2];
          if (t23 !== (t23 | 0))
            throw $.iae(t23);
          if (t23 < 0 || t23 >= v4.length)
            throw $.ioore(t23);
          t23 = v4[t23];
          if (t21 < 0 || t21 >= t22.length)
            throw $.ioore(t21);
          t22[t21] = t23;
          offset_custom += 12;
        }
      } else if (t1 === 'faces') {
        fl = chunk_faces3.length;
        for (offset_custom = 0, f = 0; f < fl; ++f) {
          t1 = customAttribute.get$value();
          if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(144, fl, hint, t1, i, offset_custom, customAttribute, pp, v4, chunk_faces3, chunk_faces4, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          if (f < 0 || f >= chunk_faces3.length)
            throw $.ioore(f);
          t3 = chunk_faces3[f];
          if (t3 !== (t3 | 0))
            throw $.iae(t3);
          if (t3 < 0 || t3 >= t1.length)
            throw $.ioore(t3);
          value = t1[t3];
          if (typeof value !== 'string' && (typeof value !== 'object' || value === null || value.constructor !== Array && !value.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(145, fl, hint, value, i, offset_custom, customAttribute, pp, v4, chunk_faces3, chunk_faces4, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t1 = customAttribute.get$array();
          if (typeof t1 !== 'object' || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(146, fl, hint, value, i, offset_custom, customAttribute, pp, t1, v4, chunk_faces3, chunk_faces4, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          if (0 >= pp.length)
            throw $.ioore(0);
          t5 = pp[0];
          if (t5 !== (t5 | 0))
            throw $.iae(t5);
          if (t5 < 0 || t5 >= value.length)
            throw $.ioore(t5);
          t5 = value[t5];
          if (offset_custom < 0 || offset_custom >= t1.length)
            throw $.ioore(offset_custom);
          t1[offset_custom] = t5;
          t5 = customAttribute.get$array();
          if (typeof t5 !== 'object' || t5 === null || (t5.constructor !== Array || !!t5.immutable$list) && !t5.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(147, fl, hint, value, i, offset_custom, customAttribute, pp, v4, t5, chunk_faces3, chunk_faces4, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t6 = offset_custom + 1;
          if (1 >= pp.length)
            throw $.ioore(1);
          t7 = pp[1];
          if (t7 !== (t7 | 0))
            throw $.iae(t7);
          if (t7 < 0 || t7 >= value.length)
            throw $.ioore(t7);
          t7 = value[t7];
          if (t6 < 0 || t6 >= t5.length)
            throw $.ioore(t6);
          t5[t6] = t7;
          t7 = customAttribute.get$array();
          if (typeof t7 !== 'object' || t7 === null || (t7.constructor !== Array || !!t7.immutable$list) && !t7.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(148, fl, hint, value, i, offset_custom, customAttribute, pp, v4, chunk_faces3, chunk_faces4, f, t7, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t5 = offset_custom + 2;
          if (2 >= pp.length)
            throw $.ioore(2);
          t8 = pp[2];
          if (t8 !== (t8 | 0))
            throw $.iae(t8);
          if (t8 < 0 || t8 >= value.length)
            throw $.ioore(t8);
          t8 = value[t8];
          if (t5 < 0 || t5 >= t7.length)
            throw $.ioore(t5);
          t7[t5] = t8;
          t8 = customAttribute.get$array();
          if (typeof t8 !== 'object' || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(149, t8, hint, fl, value, i, offset_custom, customAttribute, pp, v4, chunk_faces3, chunk_faces4, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t7 = offset_custom + 3;
          if (0 >= pp.length)
            throw $.ioore(0);
          t9 = pp[0];
          if (t9 !== (t9 | 0))
            throw $.iae(t9);
          if (t9 < 0 || t9 >= value.length)
            throw $.ioore(t9);
          t9 = value[t9];
          if (t7 < 0 || t7 >= t8.length)
            throw $.ioore(t7);
          t8[t7] = t9;
          t9 = customAttribute.get$array();
          if (typeof t9 !== 'object' || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(150, fl, hint, value, i, offset_custom, customAttribute, pp, t9, v4, chunk_faces3, chunk_faces4, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t8 = offset_custom + 4;
          if (1 >= pp.length)
            throw $.ioore(1);
          t10 = pp[1];
          if (t10 !== (t10 | 0))
            throw $.iae(t10);
          if (t10 < 0 || t10 >= value.length)
            throw $.ioore(t10);
          t10 = value[t10];
          if (t8 < 0 || t8 >= t9.length)
            throw $.ioore(t8);
          t9[t8] = t10;
          t10 = customAttribute.get$array();
          if (typeof t10 !== 'object' || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(151, fl, hint, value, i, offset_custom, customAttribute, pp, v4, chunk_faces3, chunk_faces4, t10, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t9 = offset_custom + 5;
          if (2 >= pp.length)
            throw $.ioore(2);
          t11 = pp[2];
          if (t11 !== (t11 | 0))
            throw $.iae(t11);
          if (t11 < 0 || t11 >= value.length)
            throw $.ioore(t11);
          t11 = value[t11];
          if (t9 < 0 || t9 >= t10.length)
            throw $.ioore(t9);
          t10[t9] = t11;
          t11 = customAttribute.get$array();
          if (typeof t11 !== 'object' || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(152, fl, hint, value, i, offset_custom, customAttribute, pp, v4, chunk_faces3, chunk_faces4, f, t11, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t10 = offset_custom + 6;
          if (0 >= pp.length)
            throw $.ioore(0);
          t12 = pp[0];
          if (t12 !== (t12 | 0))
            throw $.iae(t12);
          if (t12 < 0 || t12 >= value.length)
            throw $.ioore(t12);
          t12 = value[t12];
          if (t10 < 0 || t10 >= t11.length)
            throw $.ioore(t10);
          t11[t10] = t12;
          t12 = customAttribute.get$array();
          if (typeof t12 !== 'object' || t12 === null || (t12.constructor !== Array || !!t12.immutable$list) && !t12.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(153, fl, hint, t12, value, i, offset_custom, customAttribute, pp, v4, chunk_faces3, chunk_faces4, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t11 = offset_custom + 7;
          if (1 >= pp.length)
            throw $.ioore(1);
          t13 = pp[1];
          if (t13 !== (t13 | 0))
            throw $.iae(t13);
          if (t13 < 0 || t13 >= value.length)
            throw $.ioore(t13);
          t13 = value[t13];
          if (t11 < 0 || t11 >= t12.length)
            throw $.ioore(t11);
          t12[t11] = t13;
          t13 = customAttribute.get$array();
          if (typeof t13 !== 'object' || t13 === null || (t13.constructor !== Array || !!t13.immutable$list) && !t13.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(154, fl, hint, value, i, offset_custom, customAttribute, pp, v4, t13, chunk_faces3, chunk_faces4, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t12 = offset_custom + 8;
          if (2 >= pp.length)
            throw $.ioore(2);
          t14 = pp[2];
          if (t14 !== (t14 | 0))
            throw $.iae(t14);
          if (t14 < 0 || t14 >= value.length)
            throw $.ioore(t14);
          t14 = value[t14];
          if (t12 < 0 || t12 >= t13.length)
            throw $.ioore(t12);
          t13[t12] = t14;
          offset_custom += 9;
          v3 = value;
          v2 = v3;
          v1 = v2;
        }
        fl = chunk_faces4.length;
        for (f = 0; f < fl; ++f) {
          t1 = customAttribute.get$value();
          if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(155, chunk_faces4, hint, fl, t1, f, customAttribute, pp, offset_custom, i, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          if (f < 0 || f >= chunk_faces4.length)
            throw $.ioore(f);
          t3 = chunk_faces4[f];
          if (t3 !== (t3 | 0))
            throw $.iae(t3);
          if (t3 < 0 || t3 >= t1.length)
            throw $.ioore(t3);
          value = t1[t3];
          if (typeof value !== 'string' && (typeof value !== 'object' || value === null || value.constructor !== Array && !value.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(156, chunk_faces4, hint, fl, i, f, value, pp, offset_custom, customAttribute, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t1 = customAttribute.get$array();
          if (typeof t1 !== 'object' || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(157, chunk_faces4, hint, fl, i, f, value, pp, offset_custom, customAttribute, t1, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          if (0 >= pp.length)
            throw $.ioore(0);
          t5 = pp[0];
          if (t5 !== (t5 | 0))
            throw $.iae(t5);
          if (t5 < 0 || t5 >= value.length)
            throw $.ioore(t5);
          t5 = value[t5];
          if (offset_custom < 0 || offset_custom >= t1.length)
            throw $.ioore(offset_custom);
          t1[offset_custom] = t5;
          t5 = customAttribute.get$array();
          if (typeof t5 !== 'object' || t5 === null || (t5.constructor !== Array || !!t5.immutable$list) && !t5.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(158, chunk_faces4, t5, hint, fl, i, f, value, pp, offset_custom, customAttribute, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t6 = offset_custom + 1;
          if (1 >= pp.length)
            throw $.ioore(1);
          t7 = pp[1];
          if (t7 !== (t7 | 0))
            throw $.iae(t7);
          if (t7 < 0 || t7 >= value.length)
            throw $.ioore(t7);
          t7 = value[t7];
          if (t6 < 0 || t6 >= t5.length)
            throw $.ioore(t6);
          t5[t6] = t7;
          t7 = customAttribute.get$array();
          if (typeof t7 !== 'object' || t7 === null || (t7.constructor !== Array || !!t7.immutable$list) && !t7.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(159, chunk_faces4, hint, fl, i, f, value, pp, offset_custom, customAttribute, t7, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t5 = offset_custom + 2;
          if (2 >= pp.length)
            throw $.ioore(2);
          t8 = pp[2];
          if (t8 !== (t8 | 0))
            throw $.iae(t8);
          if (t8 < 0 || t8 >= value.length)
            throw $.ioore(t8);
          t8 = value[t8];
          if (t5 < 0 || t5 >= t7.length)
            throw $.ioore(t5);
          t7[t5] = t8;
          t8 = customAttribute.get$array();
          if (typeof t8 !== 'object' || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(160, chunk_faces4, hint, t8, fl, i, f, value, pp, offset_custom, customAttribute, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t7 = offset_custom + 3;
          if (0 >= pp.length)
            throw $.ioore(0);
          t9 = pp[0];
          if (t9 !== (t9 | 0))
            throw $.iae(t9);
          if (t9 < 0 || t9 >= value.length)
            throw $.ioore(t9);
          t9 = value[t9];
          if (t7 < 0 || t7 >= t8.length)
            throw $.ioore(t7);
          t8[t7] = t9;
          t9 = customAttribute.get$array();
          if (typeof t9 !== 'object' || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(161, chunk_faces4, hint, fl, i, f, value, pp, offset_custom, customAttribute, t9, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t8 = offset_custom + 4;
          if (1 >= pp.length)
            throw $.ioore(1);
          t10 = pp[1];
          if (t10 !== (t10 | 0))
            throw $.iae(t10);
          if (t10 < 0 || t10 >= value.length)
            throw $.ioore(t10);
          t10 = value[t10];
          if (t8 < 0 || t8 >= t9.length)
            throw $.ioore(t8);
          t9[t8] = t10;
          t10 = customAttribute.get$array();
          if (typeof t10 !== 'object' || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(162, i, chunk_faces4, hint, fl, t10, f, value, pp, offset_custom, customAttribute, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t9 = offset_custom + 5;
          if (2 >= pp.length)
            throw $.ioore(2);
          t11 = pp[2];
          if (t11 !== (t11 | 0))
            throw $.iae(t11);
          if (t11 < 0 || t11 >= value.length)
            throw $.ioore(t11);
          t11 = value[t11];
          if (t9 < 0 || t9 >= t10.length)
            throw $.ioore(t9);
          t10[t9] = t11;
          t11 = customAttribute.get$array();
          if (typeof t11 !== 'object' || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(163, chunk_faces4, hint, fl, i, f, value, pp, offset_custom, customAttribute, face, t11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t10 = offset_custom + 6;
          if (0 >= pp.length)
            throw $.ioore(0);
          t12 = pp[0];
          if (t12 !== (t12 | 0))
            throw $.iae(t12);
          if (t12 < 0 || t12 >= value.length)
            throw $.ioore(t12);
          t12 = value[t12];
          if (t10 < 0 || t10 >= t11.length)
            throw $.ioore(t10);
          t11[t10] = t12;
          t12 = customAttribute.get$array();
          if (typeof t12 !== 'object' || t12 === null || (t12.constructor !== Array || !!t12.immutable$list) && !t12.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(164, chunk_faces4, hint, fl, i, f, t12, value, pp, offset_custom, customAttribute, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t11 = offset_custom + 7;
          if (1 >= pp.length)
            throw $.ioore(1);
          t13 = pp[1];
          if (t13 !== (t13 | 0))
            throw $.iae(t13);
          if (t13 < 0 || t13 >= value.length)
            throw $.ioore(t13);
          t13 = value[t13];
          if (t11 < 0 || t11 >= t12.length)
            throw $.ioore(t11);
          t12[t11] = t13;
          t13 = customAttribute.get$array();
          if (typeof t13 !== 'object' || t13 === null || (t13.constructor !== Array || !!t13.immutable$list) && !t13.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(165, chunk_faces4, t13, hint, fl, i, f, value, pp, offset_custom, customAttribute, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t12 = offset_custom + 8;
          if (2 >= pp.length)
            throw $.ioore(2);
          t14 = pp[2];
          if (t14 !== (t14 | 0))
            throw $.iae(t14);
          if (t14 < 0 || t14 >= value.length)
            throw $.ioore(t14);
          t14 = value[t14];
          if (t12 < 0 || t12 >= t13.length)
            throw $.ioore(t12);
          t13[t12] = t14;
          t14 = customAttribute.get$array();
          if (typeof t14 !== 'object' || t14 === null || (t14.constructor !== Array || !!t14.immutable$list) && !t14.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(166, chunk_faces4, hint, fl, i, f, value, pp, offset_custom, customAttribute, t14, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t13 = offset_custom + 9;
          if (0 >= pp.length)
            throw $.ioore(0);
          t15 = pp[0];
          if (t15 !== (t15 | 0))
            throw $.iae(t15);
          if (t15 < 0 || t15 >= value.length)
            throw $.ioore(t15);
          t15 = value[t15];
          if (t13 < 0 || t13 >= t14.length)
            throw $.ioore(t13);
          t14[t13] = t15;
          t15 = customAttribute.get$array();
          if (typeof t15 !== 'object' || t15 === null || (t15.constructor !== Array || !!t15.immutable$list) && !t15.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(167, chunk_faces4, hint, t15, fl, i, f, value, pp, offset_custom, customAttribute, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t14 = offset_custom + 10;
          if (1 >= pp.length)
            throw $.ioore(1);
          t16 = pp[1];
          if (t16 !== (t16 | 0))
            throw $.iae(t16);
          if (t16 < 0 || t16 >= value.length)
            throw $.ioore(t16);
          t16 = value[t16];
          if (t14 < 0 || t14 >= t15.length)
            throw $.ioore(t14);
          t15[t14] = t16;
          t16 = customAttribute.get$array();
          if (typeof t16 !== 'object' || t16 === null || (t16.constructor !== Array || !!t16.immutable$list) && !t16.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(168, chunk_faces4, hint, fl, i, f, value, pp, offset_custom, t16, face, customAttribute, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t15 = offset_custom + 11;
          if (2 >= pp.length)
            throw $.ioore(2);
          t17 = pp[2];
          if (t17 !== (t17 | 0))
            throw $.iae(t17);
          if (t17 < 0 || t17 >= value.length)
            throw $.ioore(t17);
          t17 = value[t17];
          if (t15 < 0 || t15 >= t16.length)
            throw $.ioore(t15);
          t16[t15] = t17;
          offset_custom += 12;
          v4 = value;
          v3 = v4;
          v2 = v3;
          v1 = v2;
        }
      } else if (t1 === 'faceVertices') {
        fl = chunk_faces3.length;
        for (offset_custom = 0, f = 0; f < fl; ++f) {
          t1 = customAttribute.get$value();
          if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(169, geometryGroup, hint, customAttributes, dispose, i, il, customAttribute, pp, v4, fl, t1, chunk_faces3, chunk_faces4, obj_faces, offset_custom, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          if (f < 0 || f >= chunk_faces3.length)
            throw $.ioore(f);
          t3 = chunk_faces3[f];
          if (t3 !== (t3 | 0))
            throw $.iae(t3);
          if (t3 < 0 || t3 >= t1.length)
            throw $.ioore(t3);
          value = t1[t3];
          if (typeof value !== 'string' && (typeof value !== 'object' || value === null || value.constructor !== Array && !value.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(170, geometryGroup, hint, customAttributes, dispose, i, il, customAttribute, pp, v4, fl, chunk_faces3, value, chunk_faces4, offset_custom, obj_faces, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t1 = value.length;
          if (0 >= t1)
            throw $.ioore(0);
          v1 = value[0];
          if (typeof v1 !== 'string' && (typeof v1 !== 'object' || v1 === null || v1.constructor !== Array && !v1.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(171, geometryGroup, hint, customAttributes, dispose, i, il, customAttribute, pp, v4, fl, chunk_faces3, value, chunk_faces4, v1, offset_custom, obj_faces, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          if (1 >= t1)
            throw $.ioore(1);
          v2 = value[1];
          if (typeof v2 !== 'string' && (typeof v2 !== 'object' || v2 === null || v2.constructor !== Array && !v2.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(172, geometryGroup, hint, customAttributes, dispose, i, il, customAttribute, pp, v4, fl, chunk_faces3, value, chunk_faces4, v1, offset_custom, v2, obj_faces, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          if (2 >= t1)
            throw $.ioore(2);
          v3 = value[2];
          if (typeof v3 !== 'string' && (typeof v3 !== 'object' || v3 === null || v3.constructor !== Array && !v3.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(173, geometryGroup, hint, customAttributes, dispose, i, il, customAttribute, pp, v4, fl, chunk_faces3, value, chunk_faces4, v1, offset_custom, v2, v3, obj_faces, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t7 = customAttribute.get$array();
          if (typeof t7 !== 'object' || t7 === null || (t7.constructor !== Array || !!t7.immutable$list) && !t7.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(174, geometryGroup, hint, customAttributes, dispose, i, il, customAttribute, pp, v4, fl, chunk_faces3, value, chunk_faces4, v1, offset_custom, v2, v3, obj_faces, t7, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          if (0 >= pp.length)
            throw $.ioore(0);
          t9 = pp[0];
          if (t9 !== (t9 | 0))
            throw $.iae(t9);
          if (t9 < 0 || t9 >= v1.length)
            throw $.ioore(t9);
          t9 = v1[t9];
          if (offset_custom < 0 || offset_custom >= t7.length)
            throw $.ioore(offset_custom);
          t7[offset_custom] = t9;
          t9 = customAttribute.get$array();
          if (typeof t9 !== 'object' || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(175, geometryGroup, face, hint, customAttributes, dispose, i, il, customAttribute, pp, v4, fl, chunk_faces3, value, chunk_faces4, v1, offset_custom, v2, v3, obj_faces, f, t9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t10 = offset_custom + 1;
          if (1 >= pp.length)
            throw $.ioore(1);
          t11 = pp[1];
          if (t11 !== (t11 | 0))
            throw $.iae(t11);
          if (t11 < 0 || t11 >= v1.length)
            throw $.ioore(t11);
          t11 = v1[t11];
          if (t10 < 0 || t10 >= t9.length)
            throw $.ioore(t10);
          t9[t10] = t11;
          t11 = customAttribute.get$array();
          if (typeof t11 !== 'object' || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(176, geometryGroup, hint, customAttributes, dispose, i, t11, customAttribute, pp, v4, fl, il, chunk_faces3, value, chunk_faces4, v1, offset_custom, v2, v3, obj_faces, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t9 = offset_custom + 2;
          if (2 >= pp.length)
            throw $.ioore(2);
          t12 = pp[2];
          if (t12 !== (t12 | 0))
            throw $.iae(t12);
          if (t12 < 0 || t12 >= v1.length)
            throw $.ioore(t12);
          t12 = v1[t12];
          if (t9 < 0 || t9 >= t11.length)
            throw $.ioore(t9);
          t11[t9] = t12;
          t12 = customAttribute.get$array();
          if (typeof t12 !== 'object' || t12 === null || (t12.constructor !== Array || !!t12.immutable$list) && !t12.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(177, geometryGroup, hint, customAttributes, dispose, i, il, customAttribute, pp, v4, fl, chunk_faces3, value, t12, v1, offset_custom, v2, v3, obj_faces, chunk_faces4, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t11 = offset_custom + 3;
          if (0 >= pp.length)
            throw $.ioore(0);
          t13 = pp[0];
          if (t13 !== (t13 | 0))
            throw $.iae(t13);
          if (t13 < 0 || t13 >= v2.length)
            throw $.ioore(t13);
          t13 = v2[t13];
          if (t11 < 0 || t11 >= t12.length)
            throw $.ioore(t11);
          t12[t11] = t13;
          t13 = customAttribute.get$array();
          if (typeof t13 !== 'object' || t13 === null || (t13.constructor !== Array || !!t13.immutable$list) && !t13.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(178, geometryGroup, hint, customAttributes, dispose, i, il, customAttribute, pp, v4, fl, chunk_faces3, value, chunk_faces4, v1, offset_custom, v2, v3, obj_faces, t13, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t12 = offset_custom + 4;
          if (1 >= pp.length)
            throw $.ioore(1);
          t14 = pp[1];
          if (t14 !== (t14 | 0))
            throw $.iae(t14);
          if (t14 < 0 || t14 >= v2.length)
            throw $.ioore(t14);
          t14 = v2[t14];
          if (t12 < 0 || t12 >= t13.length)
            throw $.ioore(t12);
          t13[t12] = t14;
          t14 = customAttribute.get$array();
          if (typeof t14 !== 'object' || t14 === null || (t14.constructor !== Array || !!t14.immutable$list) && !t14.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(179, geometryGroup, hint, t14, customAttributes, i, il, customAttribute, pp, v4, fl, dispose, chunk_faces3, value, chunk_faces4, v1, offset_custom, v2, v3, obj_faces, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t13 = offset_custom + 5;
          if (2 >= pp.length)
            throw $.ioore(2);
          t15 = pp[2];
          if (t15 !== (t15 | 0))
            throw $.iae(t15);
          if (t15 < 0 || t15 >= v2.length)
            throw $.ioore(t15);
          t15 = v2[t15];
          if (t13 < 0 || t13 >= t14.length)
            throw $.ioore(t13);
          t14[t13] = t15;
          t15 = customAttribute.get$array();
          if (typeof t15 !== 'object' || t15 === null || (t15.constructor !== Array || !!t15.immutable$list) && !t15.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(180, geometryGroup, hint, customAttributes, dispose, i, il, customAttribute, pp, v4, t15, fl, chunk_faces3, value, chunk_faces4, v1, offset_custom, v2, v3, obj_faces, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t14 = offset_custom + 6;
          if (0 >= pp.length)
            throw $.ioore(0);
          t16 = pp[0];
          if (t16 !== (t16 | 0))
            throw $.iae(t16);
          if (t16 < 0 || t16 >= v3.length)
            throw $.ioore(t16);
          t16 = v3[t16];
          if (t14 < 0 || t14 >= t15.length)
            throw $.ioore(t14);
          t15[t14] = t16;
          t16 = customAttribute.get$array();
          if (typeof t16 !== 'object' || t16 === null || (t16.constructor !== Array || !!t16.immutable$list) && !t16.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(181, geometryGroup, hint, customAttributes, dispose, i, il, customAttribute, pp, v4, fl, chunk_faces3, value, chunk_faces4, v1, offset_custom, v2, t16, v3, obj_faces, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t15 = offset_custom + 7;
          if (1 >= pp.length)
            throw $.ioore(1);
          t17 = pp[1];
          if (t17 !== (t17 | 0))
            throw $.iae(t17);
          if (t17 < 0 || t17 >= v3.length)
            throw $.ioore(t17);
          t17 = v3[t17];
          if (t15 < 0 || t15 >= t16.length)
            throw $.ioore(t15);
          t16[t15] = t17;
          t17 = customAttribute.get$array();
          if (typeof t17 !== 'object' || t17 === null || (t17.constructor !== Array || !!t17.immutable$list) && !t17.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(182, geometryGroup, face, hint, customAttributes, dispose, i, il, customAttribute, pp, v4, fl, chunk_faces3, value, chunk_faces4, v1, offset_custom, v2, v3, obj_faces, f, t17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t16 = offset_custom + 8;
          if (2 >= pp.length)
            throw $.ioore(2);
          t18 = pp[2];
          if (t18 !== (t18 | 0))
            throw $.iae(t18);
          if (t18 < 0 || t18 >= v3.length)
            throw $.ioore(t18);
          t18 = v3[t18];
          if (t16 < 0 || t16 >= t17.length)
            throw $.ioore(t16);
          t17[t16] = t18;
          offset_custom += 9;
        }
        fl = chunk_faces4.length;
        for (f = 0; f < fl; ++f) {
          t1 = customAttribute.get$value();
          if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(183, geometryGroup, hint, customAttributes, dispose, i, f, il, customAttribute, pp, chunk_faces3, chunk_faces4, obj_faces, fl, t1, offset_custom, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          if (f < 0 || f >= chunk_faces4.length)
            throw $.ioore(f);
          t3 = chunk_faces4[f];
          if (t3 !== (t3 | 0))
            throw $.iae(t3);
          if (t3 < 0 || t3 >= t1.length)
            throw $.ioore(t3);
          value = t1[t3];
          if (typeof value !== 'string' && (typeof value !== 'object' || value === null || value.constructor !== Array && !value.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(184, geometryGroup, hint, customAttributes, dispose, i, f, il, customAttribute, pp, chunk_faces3, chunk_faces4, obj_faces, fl, value, offset_custom, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t1 = value.length;
          if (0 >= t1)
            throw $.ioore(0);
          v1 = value[0];
          if (typeof v1 !== 'string' && (typeof v1 !== 'object' || v1 === null || v1.constructor !== Array && !v1.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(185, geometryGroup, hint, customAttributes, dispose, i, f, il, customAttribute, pp, chunk_faces3, chunk_faces4, obj_faces, fl, value, v1, offset_custom, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          if (1 >= t1)
            throw $.ioore(1);
          v2 = value[1];
          if (typeof v2 !== 'string' && (typeof v2 !== 'object' || v2 === null || v2.constructor !== Array && !v2.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(186, geometryGroup, hint, customAttributes, dispose, i, f, il, customAttribute, pp, chunk_faces3, chunk_faces4, obj_faces, fl, value, v1, offset_custom, v2, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          if (2 >= t1)
            throw $.ioore(2);
          v3 = value[2];
          if (typeof v3 !== 'string' && (typeof v3 !== 'object' || v3 === null || v3.constructor !== Array && !v3.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(187, geometryGroup, hint, customAttributes, dispose, i, f, il, customAttribute, pp, chunk_faces3, chunk_faces4, obj_faces, fl, value, v1, offset_custom, v2, face, v3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          if (3 >= t1)
            throw $.ioore(3);
          v4 = value[3];
          if (typeof v4 !== 'string' && (typeof v4 !== 'object' || v4 === null || v4.constructor !== Array && !v4.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(188, geometryGroup, v4, hint, customAttributes, dispose, i, f, il, customAttribute, pp, chunk_faces3, chunk_faces4, obj_faces, fl, value, v1, offset_custom, v2, face, v3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t8 = customAttribute.get$array();
          if (typeof t8 !== 'object' || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(189, geometryGroup, v4, hint, t8, customAttributes, i, f, il, customAttribute, pp, dispose, chunk_faces3, chunk_faces4, obj_faces, fl, value, v1, offset_custom, v2, face, v3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          if (0 >= pp.length)
            throw $.ioore(0);
          t10 = pp[0];
          if (t10 !== (t10 | 0))
            throw $.iae(t10);
          if (t10 < 0 || t10 >= v1.length)
            throw $.ioore(t10);
          t10 = v1[t10];
          if (offset_custom < 0 || offset_custom >= t8.length)
            throw $.ioore(offset_custom);
          t8[offset_custom] = t10;
          t10 = customAttribute.get$array();
          if (typeof t10 !== 'object' || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(190, geometryGroup, v4, hint, customAttributes, dispose, i, f, il, customAttribute, pp, t10, chunk_faces3, chunk_faces4, obj_faces, fl, value, offset_custom, v1, v2, face, v3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t11 = offset_custom + 1;
          if (1 >= pp.length)
            throw $.ioore(1);
          t12 = pp[1];
          if (t12 !== (t12 | 0))
            throw $.iae(t12);
          if (t12 < 0 || t12 >= v1.length)
            throw $.ioore(t12);
          t12 = v1[t12];
          if (t11 < 0 || t11 >= t10.length)
            throw $.ioore(t11);
          t10[t11] = t12;
          t12 = customAttribute.get$array();
          if (typeof t12 !== 'object' || t12 === null || (t12.constructor !== Array || !!t12.immutable$list) && !t12.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(191, geometryGroup, v4, hint, customAttributes, dispose, i, f, il, customAttribute, pp, chunk_faces3, chunk_faces4, obj_faces, t12, fl, value, v1, offset_custom, v2, face, v3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t10 = offset_custom + 2;
          if (2 >= pp.length)
            throw $.ioore(2);
          t13 = pp[2];
          if (t13 !== (t13 | 0))
            throw $.iae(t13);
          if (t13 < 0 || t13 >= v1.length)
            throw $.ioore(t13);
          t13 = v1[t13];
          if (t10 < 0 || t10 >= t12.length)
            throw $.ioore(t10);
          t12[t10] = t13;
          t13 = customAttribute.get$array();
          if (typeof t13 !== 'object' || t13 === null || (t13.constructor !== Array || !!t13.immutable$list) && !t13.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(192, geometryGroup, v4, hint, customAttributes, face, i, f, il, customAttribute, pp, dispose, chunk_faces3, chunk_faces4, obj_faces, fl, value, v1, t13, v2, offset_custom, v3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t12 = offset_custom + 3;
          if (0 >= pp.length)
            throw $.ioore(0);
          t14 = pp[0];
          if (t14 !== (t14 | 0))
            throw $.iae(t14);
          if (t14 < 0 || t14 >= v2.length)
            throw $.ioore(t14);
          t14 = v2[t14];
          if (t12 < 0 || t12 >= t13.length)
            throw $.ioore(t12);
          t13[t12] = t14;
          t14 = customAttribute.get$array();
          if (typeof t14 !== 'object' || t14 === null || (t14.constructor !== Array || !!t14.immutable$list) && !t14.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(193, geometryGroup, v4, hint, customAttributes, dispose, t14, i, f, il, customAttribute, pp, chunk_faces3, chunk_faces4, obj_faces, fl, value, v1, offset_custom, v2, face, v3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t13 = offset_custom + 4;
          if (1 >= pp.length)
            throw $.ioore(1);
          t15 = pp[1];
          if (t15 !== (t15 | 0))
            throw $.iae(t15);
          if (t15 < 0 || t15 >= v2.length)
            throw $.ioore(t15);
          t15 = v2[t15];
          if (t13 < 0 || t13 >= t14.length)
            throw $.ioore(t13);
          t14[t13] = t15;
          t15 = customAttribute.get$array();
          if (typeof t15 !== 'object' || t15 === null || (t15.constructor !== Array || !!t15.immutable$list) && !t15.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(194, geometryGroup, v4, hint, customAttributes, dispose, i, f, il, customAttribute, pp, t15, chunk_faces3, chunk_faces4, obj_faces, fl, value, offset_custom, v1, v2, face, v3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t14 = offset_custom + 5;
          if (2 >= pp.length)
            throw $.ioore(2);
          t16 = pp[2];
          if (t16 !== (t16 | 0))
            throw $.iae(t16);
          if (t16 < 0 || t16 >= v2.length)
            throw $.ioore(t16);
          t16 = v2[t16];
          if (t14 < 0 || t14 >= t15.length)
            throw $.ioore(t14);
          t15[t14] = t16;
          t16 = customAttribute.get$array();
          if (typeof t16 !== 'object' || t16 === null || (t16.constructor !== Array || !!t16.immutable$list) && !t16.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(195, geometryGroup, v4, hint, customAttributes, dispose, i, f, il, customAttribute, pp, chunk_faces3, chunk_faces4, obj_faces, fl, t16, value, v1, offset_custom, v2, face, v3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t15 = offset_custom + 6;
          if (0 >= pp.length)
            throw $.ioore(0);
          t17 = pp[0];
          if (t17 !== (t17 | 0))
            throw $.iae(t17);
          if (t17 < 0 || t17 >= v3.length)
            throw $.ioore(t17);
          t17 = v3[t17];
          if (t15 < 0 || t15 >= t16.length)
            throw $.ioore(t15);
          t16[t15] = t17;
          t17 = customAttribute.get$array();
          if (typeof t17 !== 'object' || t17 === null || (t17.constructor !== Array || !!t17.immutable$list) && !t17.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(196, t17, v4, hint, geometryGroup, customAttributes, i, f, il, customAttribute, pp, dispose, chunk_faces3, chunk_faces4, obj_faces, fl, value, v1, offset_custom, v2, face, v3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t16 = offset_custom + 7;
          if (1 >= pp.length)
            throw $.ioore(1);
          t18 = pp[1];
          if (t18 !== (t18 | 0))
            throw $.iae(t18);
          if (t18 < 0 || t18 >= v3.length)
            throw $.ioore(t18);
          t18 = v3[t18];
          if (t16 < 0 || t16 >= t17.length)
            throw $.ioore(t16);
          t17[t16] = t18;
          t18 = customAttribute.get$array();
          if (typeof t18 !== 'object' || t18 === null || (t18.constructor !== Array || !!t18.immutable$list) && !t18.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(197, geometryGroup, v4, hint, customAttributes, dispose, i, f, il, customAttribute, pp, t18, chunk_faces3, chunk_faces4, obj_faces, fl, value, v1, offset_custom, v2, face, v3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t17 = offset_custom + 8;
          if (2 >= pp.length)
            throw $.ioore(2);
          t19 = pp[2];
          if (t19 !== (t19 | 0))
            throw $.iae(t19);
          if (t19 < 0 || t19 >= v3.length)
            throw $.ioore(t19);
          t19 = v3[t19];
          if (t17 < 0 || t17 >= t18.length)
            throw $.ioore(t17);
          t18[t17] = t19;
          t19 = customAttribute.get$array();
          if (typeof t19 !== 'object' || t19 === null || (t19.constructor !== Array || !!t19.immutable$list) && !t19.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(198, geometryGroup, v4, hint, customAttributes, dispose, i, f, il, customAttribute, pp, chunk_faces3, chunk_faces4, obj_faces, t19, fl, value, v1, offset_custom, v2, face, v3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t18 = offset_custom + 9;
          if (0 >= pp.length)
            throw $.ioore(0);
          t20 = pp[0];
          if (t20 !== (t20 | 0))
            throw $.iae(t20);
          if (t20 < 0 || t20 >= v4.length)
            throw $.ioore(t20);
          t20 = v4[t20];
          if (t18 < 0 || t18 >= t19.length)
            throw $.ioore(t18);
          t19[t18] = t20;
          t20 = customAttribute.get$array();
          if (typeof t20 !== 'object' || t20 === null || (t20.constructor !== Array || !!t20.immutable$list) && !t20.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(199, geometryGroup, v4, hint, customAttributes, face, i, f, il, customAttribute, pp, dispose, chunk_faces3, chunk_faces4, obj_faces, fl, value, offset_custom, t20, v2, v1, v3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t19 = offset_custom + 10;
          if (1 >= pp.length)
            throw $.ioore(1);
          t21 = pp[1];
          if (t21 !== (t21 | 0))
            throw $.iae(t21);
          if (t21 < 0 || t21 >= v4.length)
            throw $.ioore(t21);
          t21 = v4[t21];
          if (t19 < 0 || t19 >= t20.length)
            throw $.ioore(t19);
          t20[t19] = t21;
          t21 = customAttribute.get$array();
          if (typeof t21 !== 'object' || t21 === null || (t21.constructor !== Array || !!t21.immutable$list) && !t21.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(200, geometryGroup, v4, hint, customAttributes, t21, i, f, il, customAttribute, pp, dispose, chunk_faces3, chunk_faces4, obj_faces, fl, value, v1, offset_custom, v2, face, v3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t20 = offset_custom + 11;
          if (2 >= pp.length)
            throw $.ioore(2);
          t22 = pp[2];
          if (t22 !== (t22 | 0))
            throw $.iae(t22);
          if (t22 < 0 || t22 >= v4.length)
            throw $.ioore(t22);
          t22 = v4[t22];
          if (t20 < 0 || t20 >= t21.length)
            throw $.ioore(t20);
          t21[t20] = t22;
          offset_custom += 12;
        }
      } else
        offset_custom = 0;
    } else if (customAttribute.get$size() === 4) {
      t1 = customAttribute.get$boundTo();
      if (typeof t1 !== 'string')
        return this.setMeshBuffers$5$bailout(201, geometryGroup, value, hint, customAttributes, dispose, v1, i, v2, fl, customAttribute, v4, t1, il, chunk_faces3, chunk_faces4, obj_faces, v3, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      if (t1 === 'vertices') {
        fl = chunk_faces3.length;
        for (offset_custom = 0, f = 0; f < fl; ++f) {
          if (f < 0 || f >= chunk_faces3.length)
            throw $.ioore(f);
          t1 = chunk_faces3[f];
          if (t1 !== (t1 | 0))
            throw $.iae(t1);
          if (t1 < 0 || t1 >= obj_faces.length)
            throw $.ioore(t1);
          face = obj_faces[t1];
          t1 = customAttribute.get$value();
          if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(202, face, value, t1, offset_custom, customAttributes, hint, i, il, customAttribute, geometryGroup, v4, dispose, chunk_faces3, f, obj_faces, chunk_faces4, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t3 = face.get$a();
          if (t3 !== (t3 | 0))
            throw $.iae(t3);
          if (t3 < 0 || t3 >= t1.length)
            throw $.ioore(t3);
          v1 = t1[t3];
          t3 = customAttribute.get$value();
          if (typeof t3 !== 'string' && (typeof t3 !== 'object' || t3 === null || t3.constructor !== Array && !t3.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(203, face, value, hint, offset_custom, v1, t3, i, il, customAttribute, geometryGroup, v4, customAttributes, chunk_faces3, f, obj_faces, dispose, chunk_faces4, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t4 = face.get$b();
          if (t4 !== (t4 | 0))
            throw $.iae(t4);
          if (t4 < 0 || t4 >= t3.length)
            throw $.ioore(t4);
          v2 = t3[t4];
          t4 = customAttribute.get$value();
          if (typeof t4 !== 'string' && (typeof t4 !== 'object' || t4 === null || t4.constructor !== Array && !t4.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(204, face, value, hint, offset_custom, v1, i, v2, customAttribute, t4, v4, customAttributes, il, f, chunk_faces3, obj_faces, dispose, chunk_faces4, geometryGroup, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t5 = face.get$c();
          if (t5 !== (t5 | 0))
            throw $.iae(t5);
          if (t5 < 0 || t5 >= t4.length)
            throw $.ioore(t5);
          v3 = t4[t5];
          t5 = customAttribute.get$array();
          if (typeof t5 !== 'object' || t5 === null || (t5.constructor !== Array || !!t5.immutable$list) && !t5.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(205, face, value, hint, offset_custom, v1, i, v2, customAttribute, geometryGroup, v4, v3, customAttributes, t5, f, chunk_faces3, obj_faces, dispose, chunk_faces4, il, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t6 = v1.get$x();
          if (offset_custom < 0 || offset_custom >= t5.length)
            throw $.ioore(offset_custom);
          t5[offset_custom] = t6;
          t6 = customAttribute.get$array();
          if (typeof t6 !== 'object' || t6 === null || (t6.constructor !== Array || !!t6.immutable$list) && !t6.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(206, face, value, hint, offset_custom, v1, i, v2, customAttribute, geometryGroup, v4, v3, customAttributes, il, f, chunk_faces3, obj_faces, t6, chunk_faces4, dispose, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t7 = offset_custom + 1;
          t8 = v1.get$y();
          if (t7 < 0 || t7 >= t6.length)
            throw $.ioore(t7);
          t6[t7] = t8;
          t8 = customAttribute.get$array();
          if (typeof t8 !== 'object' || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(207, face, value, hint, offset_custom, v1, i, v2, customAttribute, geometryGroup, v4, v3, customAttributes, il, f, chunk_faces3, obj_faces, dispose, chunk_faces4, t8, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t6 = offset_custom + 2;
          t9 = v1.get$z();
          if (t6 < 0 || t6 >= t8.length)
            throw $.ioore(t6);
          t8[t6] = t9;
          t9 = customAttribute.get$array();
          if (typeof t9 !== 'object' || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(208, face, value, hint, offset_custom, v1, i, v2, customAttribute, geometryGroup, v4, v3, customAttributes, il, f, chunk_faces3, obj_faces, dispose, chunk_faces4, fl, t9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t8 = offset_custom + 3;
          t10 = v1.get$w();
          if (t8 < 0 || t8 >= t9.length)
            throw $.ioore(t8);
          t9[t8] = t10;
          t10 = customAttribute.get$array();
          if (typeof t10 !== 'object' || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(209, face, value, hint, offset_custom, v1, t10, i, v2, customAttribute, geometryGroup, v4, v3, customAttributes, il, f, chunk_faces3, obj_faces, dispose, chunk_faces4, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t9 = offset_custom + 4;
          t11 = v2.get$x();
          if (t9 < 0 || t9 >= t10.length)
            throw $.ioore(t9);
          t10[t9] = t11;
          t11 = customAttribute.get$array();
          if (typeof t11 !== 'object' || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(210, face, value, hint, offset_custom, v1, i, v2, customAttribute, t11, v4, v3, customAttributes, il, f, chunk_faces3, obj_faces, dispose, chunk_faces4, geometryGroup, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t10 = offset_custom + 5;
          t12 = v2.get$y();
          if (t10 < 0 || t10 >= t11.length)
            throw $.ioore(t10);
          t11[t10] = t12;
          t12 = customAttribute.get$array();
          if (typeof t12 !== 'object' || t12 === null || (t12.constructor !== Array || !!t12.immutable$list) && !t12.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(211, face, value, hint, offset_custom, v1, i, v2, customAttribute, geometryGroup, v4, v3, customAttributes, il, f, t12, obj_faces, chunk_faces3, chunk_faces4, dispose, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t11 = offset_custom + 6;
          t13 = v2.get$z();
          if (t11 < 0 || t11 >= t12.length)
            throw $.ioore(t11);
          t12[t11] = t13;
          t13 = customAttribute.get$array();
          if (typeof t13 !== 'object' || t13 === null || (t13.constructor !== Array || !!t13.immutable$list) && !t13.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(212, face, value, hint, offset_custom, v1, i, v2, customAttribute, geometryGroup, v4, v3, customAttributes, il, f, chunk_faces3, obj_faces, dispose, chunk_faces4, t13, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t12 = offset_custom + 7;
          t14 = v2.get$w();
          if (t12 < 0 || t12 >= t13.length)
            throw $.ioore(t12);
          t13[t12] = t14;
          t14 = customAttribute.get$array();
          if (typeof t14 !== 'object' || t14 === null || (t14.constructor !== Array || !!t14.immutable$list) && !t14.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(213, face, value, hint, offset_custom, v1, i, v2, customAttribute, geometryGroup, v4, v3, customAttributes, il, f, chunk_faces3, obj_faces, dispose, chunk_faces4, t14, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t13 = offset_custom + 8;
          t15 = v3.get$x();
          if (t13 < 0 || t13 >= t14.length)
            throw $.ioore(t13);
          t14[t13] = t15;
          t15 = customAttribute.get$array();
          if (typeof t15 !== 'object' || t15 === null || (t15.constructor !== Array || !!t15.immutable$list) && !t15.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(214, face, value, t15, offset_custom, v1, hint, i, v2, customAttribute, geometryGroup, v4, v3, customAttributes, il, f, chunk_faces3, obj_faces, dispose, chunk_faces4, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t14 = offset_custom + 9;
          t16 = v3.get$y();
          if (t14 < 0 || t14 >= t15.length)
            throw $.ioore(t14);
          t15[t14] = t16;
          t16 = customAttribute.get$array();
          if (typeof t16 !== 'object' || t16 === null || (t16.constructor !== Array || !!t16.immutable$list) && !t16.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(215, face, value, hint, offset_custom, v1, i, v2, customAttribute, geometryGroup, t16, v3, customAttributes, v4, f, chunk_faces3, obj_faces, dispose, chunk_faces4, il, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t15 = offset_custom + 10;
          t17 = v3.get$z();
          if (t15 < 0 || t15 >= t16.length)
            throw $.ioore(t15);
          t16[t15] = t17;
          t17 = customAttribute.get$array();
          if (typeof t17 !== 'object' || t17 === null || (t17.constructor !== Array || !!t17.immutable$list) && !t17.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(216, face, value, hint, offset_custom, v1, i, v2, customAttribute, geometryGroup, v4, v3, customAttributes, t17, f, chunk_faces3, obj_faces, dispose, chunk_faces4, il, fl, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t16 = offset_custom + 11;
          t18 = v3.get$w();
          if (t16 < 0 || t16 >= t17.length)
            throw $.ioore(t16);
          t17[t16] = t18;
          offset_custom += 12;
        }
        fl = chunk_faces4.length;
        for (f = 0; f < fl; ++f) {
          if (f < 0 || f >= chunk_faces4.length)
            throw $.ioore(f);
          t1 = chunk_faces4[f];
          if (t1 !== (t1 | 0))
            throw $.iae(t1);
          if (t1 < 0 || t1 >= obj_faces.length)
            throw $.ioore(t1);
          face = obj_faces[t1];
          t1 = customAttribute.get$value();
          if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(217, geometryGroup, fl, hint, customAttributes, face, t1, offset_custom, il, customAttribute, value, i, dispose, chunk_faces3, chunk_faces4, obj_faces, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t3 = face.get$a();
          if (t3 !== (t3 | 0))
            throw $.iae(t3);
          if (t3 < 0 || t3 >= t1.length)
            throw $.ioore(t3);
          v1 = t1[t3];
          t3 = customAttribute.get$value();
          if (typeof t3 !== 'string' && (typeof t3 !== 'object' || t3 === null || t3.constructor !== Array && !t3.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(218, geometryGroup, fl, hint, customAttributes, face, i, offset_custom, v1, customAttribute, t3, value, dispose, il, chunk_faces3, chunk_faces4, obj_faces, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t4 = face.get$b();
          if (t4 !== (t4 | 0))
            throw $.iae(t4);
          if (t4 < 0 || t4 >= t3.length)
            throw $.ioore(t4);
          v2 = t3[t4];
          t4 = customAttribute.get$value();
          if (typeof t4 !== 'string' && (typeof t4 !== 'object' || t4 === null || t4.constructor !== Array && !t4.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(219, geometryGroup, fl, hint, customAttributes, face, i, offset_custom, v1, customAttribute, value, v2, dispose, t4, chunk_faces3, chunk_faces4, obj_faces, il, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t5 = face.get$c();
          if (t5 !== (t5 | 0))
            throw $.iae(t5);
          if (t5 < 0 || t5 >= t4.length)
            throw $.ioore(t5);
          v3 = t4[t5];
          t5 = customAttribute.get$value();
          if (typeof t5 !== 'string' && (typeof t5 !== 'object' || t5 === null || t5.constructor !== Array && !t5.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(220, geometryGroup, fl, hint, customAttributes, face, i, offset_custom, v1, customAttribute, value, v2, dispose, il, chunk_faces3, v3, chunk_faces4, t5, f, obj_faces, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t6 = face.get$d();
          if (t6 !== (t6 | 0))
            throw $.iae(t6);
          if (t6 < 0 || t6 >= t5.length)
            throw $.ioore(t6);
          v4 = t5[t6];
          t6 = customAttribute.get$array();
          if (typeof t6 !== 'object' || t6 === null || (t6.constructor !== Array || !!t6.immutable$list) && !t6.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(221, geometryGroup, fl, hint, customAttributes, face, i, offset_custom, v1, customAttribute, value, v2, dispose, il, chunk_faces3, v3, chunk_faces4, obj_faces, f, v4, t6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t7 = v1.get$x();
          if (offset_custom < 0 || offset_custom >= t6.length)
            throw $.ioore(offset_custom);
          t6[offset_custom] = t7;
          t7 = customAttribute.get$array();
          if (typeof t7 !== 'object' || t7 === null || (t7.constructor !== Array || !!t7.immutable$list) && !t7.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(222, geometryGroup, fl, hint, customAttributes, face, i, offset_custom, v1, customAttribute, value, v2, dispose, il, chunk_faces3, v3, chunk_faces4, obj_faces, f, v4, t7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t8 = offset_custom + 1;
          t9 = v1.get$y();
          if (t8 < 0 || t8 >= t7.length)
            throw $.ioore(t8);
          t7[t8] = t9;
          t9 = customAttribute.get$array();
          if (typeof t9 !== 'object' || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(223, t9, fl, hint, geometryGroup, face, i, offset_custom, v1, customAttribute, value, v2, customAttributes, il, chunk_faces3, v3, chunk_faces4, obj_faces, f, v4, dispose, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t7 = offset_custom + 2;
          t10 = v1.get$z();
          if (t7 < 0 || t7 >= t9.length)
            throw $.ioore(t7);
          t9[t7] = t10;
          t10 = customAttribute.get$array();
          if (typeof t10 !== 'object' || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(224, geometryGroup, fl, hint, customAttributes, face, t10, offset_custom, v1, customAttribute, value, v2, dispose, il, chunk_faces3, v3, chunk_faces4, obj_faces, f, v4, i, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t9 = offset_custom + 3;
          t11 = v1.get$w();
          if (t9 < 0 || t9 >= t10.length)
            throw $.ioore(t9);
          t10[t9] = t11;
          t11 = customAttribute.get$array();
          if (typeof t11 !== 'object' || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(225, geometryGroup, fl, hint, customAttributes, face, i, offset_custom, v1, customAttribute, value, v2, t11, il, chunk_faces3, v3, chunk_faces4, obj_faces, f, v4, dispose, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t10 = offset_custom + 4;
          t12 = v2.get$x();
          if (t10 < 0 || t10 >= t11.length)
            throw $.ioore(t10);
          t11[t10] = t12;
          t12 = customAttribute.get$array();
          if (typeof t12 !== 'object' || t12 === null || (t12.constructor !== Array || !!t12.immutable$list) && !t12.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(226, geometryGroup, fl, hint, customAttributes, face, i, offset_custom, v1, customAttribute, value, v2, dispose, il, chunk_faces3, v3, chunk_faces4, t12, f, v4, obj_faces, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t11 = offset_custom + 5;
          t13 = v2.get$y();
          if (t11 < 0 || t11 >= t12.length)
            throw $.ioore(t11);
          t12[t11] = t13;
          t13 = customAttribute.get$array();
          if (typeof t13 !== 'object' || t13 === null || (t13.constructor !== Array || !!t13.immutable$list) && !t13.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(227, geometryGroup, fl, hint, customAttributes, face, i, offset_custom, v1, customAttribute, value, v2, dispose, il, chunk_faces3, v3, chunk_faces4, obj_faces, f, v4, t13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t12 = offset_custom + 6;
          t14 = v2.get$z();
          if (t12 < 0 || t12 >= t13.length)
            throw $.ioore(t12);
          t13[t12] = t14;
          t14 = customAttribute.get$array();
          if (typeof t14 !== 'object' || t14 === null || (t14.constructor !== Array || !!t14.immutable$list) && !t14.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(228, geometryGroup, fl, hint, customAttributes, face, i, offset_custom, v1, customAttribute, value, v2, dispose, il, chunk_faces3, v3, chunk_faces4, obj_faces, f, v4, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t13 = offset_custom + 7;
          t15 = v2.get$w();
          if (t13 < 0 || t13 >= t14.length)
            throw $.ioore(t13);
          t14[t13] = t15;
          t15 = customAttribute.get$array();
          if (typeof t15 !== 'object' || t15 === null || (t15.constructor !== Array || !!t15.immutable$list) && !t15.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(229, geometryGroup, fl, hint, customAttributes, face, t15, i, offset_custom, v1, customAttribute, value, v2, dispose, il, chunk_faces3, v3, chunk_faces4, obj_faces, f, v4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t14 = offset_custom + 8;
          t16 = v3.get$x();
          if (t14 < 0 || t14 >= t15.length)
            throw $.ioore(t14);
          t15[t14] = t16;
          t16 = customAttribute.get$array();
          if (typeof t16 !== 'object' || t16 === null || (t16.constructor !== Array || !!t16.immutable$list) && !t16.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(230, geometryGroup, fl, hint, customAttributes, face, i, offset_custom, v1, customAttribute, t16, value, v2, dispose, il, chunk_faces3, v3, chunk_faces4, obj_faces, f, v4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t15 = offset_custom + 9;
          t17 = v3.get$y();
          if (t15 < 0 || t15 >= t16.length)
            throw $.ioore(t15);
          t16[t15] = t17;
          t17 = customAttribute.get$array();
          if (typeof t17 !== 'object' || t17 === null || (t17.constructor !== Array || !!t17.immutable$list) && !t17.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(231, geometryGroup, fl, hint, customAttributes, face, i, offset_custom, v1, customAttribute, value, v2, dispose, il, chunk_faces3, v3, t17, obj_faces, f, v4, chunk_faces4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t16 = offset_custom + 10;
          t18 = v3.get$z();
          if (t16 < 0 || t16 >= t17.length)
            throw $.ioore(t16);
          t17[t16] = t18;
          t18 = customAttribute.get$array();
          if (typeof t18 !== 'object' || t18 === null || (t18.constructor !== Array || !!t18.immutable$list) && !t18.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(232, geometryGroup, fl, hint, customAttributes, face, i, offset_custom, v1, customAttribute, value, v2, dispose, il, chunk_faces3, v3, chunk_faces4, obj_faces, f, v4, t18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t17 = offset_custom + 11;
          t19 = v3.get$w();
          if (t17 < 0 || t17 >= t18.length)
            throw $.ioore(t17);
          t18[t17] = t19;
          t19 = customAttribute.get$array();
          if (typeof t19 !== 'object' || t19 === null || (t19.constructor !== Array || !!t19.immutable$list) && !t19.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(233, geometryGroup, fl, hint, customAttributes, face, i, offset_custom, v1, customAttribute, value, v2, dispose, il, chunk_faces3, v3, chunk_faces4, obj_faces, f, v4, t19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t18 = offset_custom + 12;
          t20 = v4.get$x();
          if (t18 < 0 || t18 >= t19.length)
            throw $.ioore(t18);
          t19[t18] = t20;
          t20 = customAttribute.get$array();
          if (typeof t20 !== 'object' || t20 === null || (t20.constructor !== Array || !!t20.immutable$list) && !t20.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(234, geometryGroup, fl, t20, hint, face, i, offset_custom, v1, customAttribute, value, v2, customAttributes, il, chunk_faces3, v3, chunk_faces4, obj_faces, f, v4, dispose, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t19 = offset_custom + 13;
          t21 = v4.get$y();
          if (t19 < 0 || t19 >= t20.length)
            throw $.ioore(t19);
          t20[t19] = t21;
          t21 = customAttribute.get$array();
          if (typeof t21 !== 'object' || t21 === null || (t21.constructor !== Array || !!t21.immutable$list) && !t21.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(235, geometryGroup, fl, hint, customAttributes, face, i, offset_custom, v1, customAttribute, t21, v2, dispose, il, chunk_faces3, v3, chunk_faces4, obj_faces, f, v4, value, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t20 = offset_custom + 14;
          t22 = v4.get$z();
          if (t20 < 0 || t20 >= t21.length)
            throw $.ioore(t20);
          t21[t20] = t22;
          t22 = customAttribute.get$array();
          if (typeof t22 !== 'object' || t22 === null || (t22.constructor !== Array || !!t22.immutable$list) && !t22.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(236, geometryGroup, fl, hint, customAttributes, face, i, offset_custom, v1, customAttribute, value, v2, dispose, t22, chunk_faces3, v3, chunk_faces4, obj_faces, f, v4, il, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t21 = offset_custom + 15;
          t23 = v4.get$w();
          if (t21 < 0 || t21 >= t22.length)
            throw $.ioore(t21);
          t22[t21] = t23;
          offset_custom += 16;
        }
      } else if (t1 === 'faces') {
        fl = chunk_faces3.length;
        for (offset_custom = 0, f = 0; f < fl; ++f) {
          t1 = customAttribute.get$value();
          if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(237, chunk_faces3, chunk_faces4, hint, face, i, customAttribute, t1, f, fl, v4, offset_custom, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          if (f < 0 || f >= chunk_faces3.length)
            throw $.ioore(f);
          t3 = chunk_faces3[f];
          if (t3 !== (t3 | 0))
            throw $.iae(t3);
          if (t3 < 0 || t3 >= t1.length)
            throw $.ioore(t3);
          value = t1[t3];
          t3 = customAttribute.get$array();
          if (typeof t3 !== 'object' || t3 === null || (t3.constructor !== Array || !!t3.immutable$list) && !t3.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(238, hint, i, customAttribute, fl, v4, value, t3, chunk_faces4, chunk_faces3, offset_custom, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t4 = value.get$x();
          if (offset_custom < 0 || offset_custom >= t3.length)
            throw $.ioore(offset_custom);
          t3[offset_custom] = t4;
          t4 = customAttribute.get$array();
          if (typeof t4 !== 'object' || t4 === null || (t4.constructor !== Array || !!t4.immutable$list) && !t4.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(239, hint, i, customAttribute, fl, v4, value, chunk_faces3, chunk_faces4, offset_custom, t4, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t5 = offset_custom + 1;
          t6 = value.get$y();
          if (t5 < 0 || t5 >= t4.length)
            throw $.ioore(t5);
          t4[t5] = t6;
          t6 = customAttribute.get$array();
          if (typeof t6 !== 'object' || t6 === null || (t6.constructor !== Array || !!t6.immutable$list) && !t6.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(240, hint, i, customAttribute, fl, v4, value, chunk_faces3, chunk_faces4, offset_custom, t6, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t4 = offset_custom + 2;
          t7 = value.get$z();
          if (t4 < 0 || t4 >= t6.length)
            throw $.ioore(t4);
          t6[t4] = t7;
          t7 = customAttribute.get$array();
          if (typeof t7 !== 'object' || t7 === null || (t7.constructor !== Array || !!t7.immutable$list) && !t7.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(241, hint, i, customAttribute, fl, v4, value, chunk_faces3, chunk_faces4, offset_custom, f, face, t7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t6 = offset_custom + 3;
          t8 = value.get$w();
          if (t6 < 0 || t6 >= t7.length)
            throw $.ioore(t6);
          t7[t6] = t8;
          t8 = customAttribute.get$array();
          if (typeof t8 !== 'object' || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(242, hint, t8, i, customAttribute, fl, v4, value, chunk_faces3, chunk_faces4, offset_custom, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t7 = offset_custom + 4;
          t9 = value.get$x();
          if (t7 < 0 || t7 >= t8.length)
            throw $.ioore(t7);
          t8[t7] = t9;
          t9 = customAttribute.get$array();
          if (typeof t9 !== 'object' || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(243, hint, i, customAttribute, fl, t9, v4, value, chunk_faces3, chunk_faces4, offset_custom, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t8 = offset_custom + 5;
          t10 = value.get$y();
          if (t8 < 0 || t8 >= t9.length)
            throw $.ioore(t8);
          t9[t8] = t10;
          t10 = customAttribute.get$array();
          if (typeof t10 !== 'object' || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(244, hint, i, customAttribute, fl, v4, value, chunk_faces3, chunk_faces4, t10, offset_custom, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t9 = offset_custom + 6;
          t11 = value.get$z();
          if (t9 < 0 || t9 >= t10.length)
            throw $.ioore(t9);
          t10[t9] = t11;
          t11 = customAttribute.get$array();
          if (typeof t11 !== 'object' || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(245, hint, i, customAttribute, fl, v4, value, chunk_faces3, chunk_faces4, offset_custom, t11, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t10 = offset_custom + 7;
          t12 = value.get$w();
          if (t10 < 0 || t10 >= t11.length)
            throw $.ioore(t10);
          t11[t10] = t12;
          t12 = customAttribute.get$array();
          if (typeof t12 !== 'object' || t12 === null || (t12.constructor !== Array || !!t12.immutable$list) && !t12.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(246, hint, i, customAttribute, fl, v4, value, chunk_faces3, chunk_faces4, offset_custom, f, t12, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t11 = offset_custom + 8;
          t13 = value.get$x();
          if (t11 < 0 || t11 >= t12.length)
            throw $.ioore(t11);
          t12[t11] = t13;
          t13 = customAttribute.get$array();
          if (typeof t13 !== 'object' || t13 === null || (t13.constructor !== Array || !!t13.immutable$list) && !t13.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(247, hint, t13, i, customAttribute, fl, v4, value, chunk_faces3, chunk_faces4, offset_custom, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t12 = offset_custom + 9;
          t14 = value.get$y();
          if (t12 < 0 || t12 >= t13.length)
            throw $.ioore(t12);
          t13[t12] = t14;
          t14 = customAttribute.get$array();
          if (typeof t14 !== 'object' || t14 === null || (t14.constructor !== Array || !!t14.immutable$list) && !t14.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(248, hint, i, customAttribute, t14, v4, fl, value, chunk_faces3, chunk_faces4, offset_custom, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t13 = offset_custom + 10;
          t15 = value.get$z();
          if (t13 < 0 || t13 >= t14.length)
            throw $.ioore(t13);
          t14[t13] = t15;
          t15 = customAttribute.get$array();
          if (typeof t15 !== 'object' || t15 === null || (t15.constructor !== Array || !!t15.immutable$list) && !t15.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(249, hint, i, customAttribute, fl, v4, value, offset_custom, chunk_faces4, chunk_faces3, t15, f, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t14 = offset_custom + 11;
          t16 = value.get$w();
          if (t14 < 0 || t14 >= t15.length)
            throw $.ioore(t14);
          t15[t14] = t16;
          offset_custom += 12;
          v2 = value;
          v3 = v2;
          v1 = v3;
        }
        fl = chunk_faces4.length;
        for (f = 0; f < fl; ++f) {
          t1 = customAttribute.get$value();
          if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(250, chunk_faces4, hint, t1, f, fl, i, offset_custom, customAttribute, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          if (f < 0 || f >= chunk_faces4.length)
            throw $.ioore(f);
          t3 = chunk_faces4[f];
          if (t3 !== (t3 | 0))
            throw $.iae(t3);
          if (t3 < 0 || t3 >= t1.length)
            throw $.ioore(t3);
          value = t1[t3];
          t3 = customAttribute.get$array();
          if (typeof t3 !== 'object' || t3 === null || (t3.constructor !== Array || !!t3.immutable$list) && !t3.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(251, chunk_faces4, hint, fl, f, value, i, offset_custom, customAttribute, t3, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t4 = value.get$x();
          if (offset_custom < 0 || offset_custom >= t3.length)
            throw $.ioore(offset_custom);
          t3[offset_custom] = t4;
          t4 = customAttribute.get$array();
          if (typeof t4 !== 'object' || t4 === null || (t4.constructor !== Array || !!t4.immutable$list) && !t4.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(252, chunk_faces4, hint, fl, f, value, i, offset_custom, customAttribute, t4, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t5 = offset_custom + 1;
          t6 = value.get$y();
          if (t5 < 0 || t5 >= t4.length)
            throw $.ioore(t5);
          t4[t5] = t6;
          t6 = customAttribute.get$array();
          if (typeof t6 !== 'object' || t6 === null || (t6.constructor !== Array || !!t6.immutable$list) && !t6.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(253, chunk_faces4, t6, hint, f, fl, value, i, offset_custom, customAttribute, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t4 = offset_custom + 2;
          t7 = value.get$z();
          if (t4 < 0 || t4 >= t6.length)
            throw $.ioore(t4);
          t6[t4] = t7;
          t7 = customAttribute.get$array();
          if (typeof t7 !== 'object' || t7 === null || (t7.constructor !== Array || !!t7.immutable$list) && !t7.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(254, chunk_faces4, hint, fl, f, value, i, offset_custom, customAttribute, t7, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t6 = offset_custom + 3;
          t8 = value.get$w();
          if (t6 < 0 || t6 >= t7.length)
            throw $.ioore(t6);
          t7[t6] = t8;
          t8 = customAttribute.get$array();
          if (typeof t8 !== 'object' || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(255, chunk_faces4, hint, fl, f, value, i, offset_custom, customAttribute, t8, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t7 = offset_custom + 4;
          t9 = value.get$x();
          if (t7 < 0 || t7 >= t8.length)
            throw $.ioore(t7);
          t8[t7] = t9;
          t9 = customAttribute.get$array();
          if (typeof t9 !== 'object' || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(256, chunk_faces4, hint, fl, f, t9, value, i, offset_custom, customAttribute, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t8 = offset_custom + 5;
          t10 = value.get$y();
          if (t8 < 0 || t8 >= t9.length)
            throw $.ioore(t8);
          t9[t8] = t10;
          t10 = customAttribute.get$array();
          if (typeof t10 !== 'object' || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(257, chunk_faces4, hint, fl, f, value, i, offset_custom, customAttribute, t10, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t9 = offset_custom + 6;
          t11 = value.get$z();
          if (t9 < 0 || t9 >= t10.length)
            throw $.ioore(t9);
          t10[t9] = t11;
          t11 = customAttribute.get$array();
          if (typeof t11 !== 'object' || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(258, t11, chunk_faces4, hint, fl, f, value, i, offset_custom, customAttribute, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t10 = offset_custom + 7;
          t12 = value.get$w();
          if (t10 < 0 || t10 >= t11.length)
            throw $.ioore(t10);
          t11[t10] = t12;
          t12 = customAttribute.get$array();
          if (typeof t12 !== 'object' || t12 === null || (t12.constructor !== Array || !!t12.immutable$list) && !t12.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(259, chunk_faces4, hint, fl, f, value, t12, offset_custom, customAttribute, i, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t11 = offset_custom + 8;
          t13 = value.get$x();
          if (t11 < 0 || t11 >= t12.length)
            throw $.ioore(t11);
          t12[t11] = t13;
          t13 = customAttribute.get$array();
          if (typeof t13 !== 'object' || t13 === null || (t13.constructor !== Array || !!t13.immutable$list) && !t13.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(260, chunk_faces4, hint, fl, f, value, i, offset_custom, customAttribute, t13, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t12 = offset_custom + 9;
          t14 = value.get$y();
          if (t12 < 0 || t12 >= t13.length)
            throw $.ioore(t12);
          t13[t12] = t14;
          t14 = customAttribute.get$array();
          if (typeof t14 !== 'object' || t14 === null || (t14.constructor !== Array || !!t14.immutable$list) && !t14.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(261, chunk_faces4, t14, hint, f, fl, value, i, offset_custom, customAttribute, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t13 = offset_custom + 10;
          t15 = value.get$z();
          if (t13 < 0 || t13 >= t14.length)
            throw $.ioore(t13);
          t14[t13] = t15;
          t15 = customAttribute.get$array();
          if (typeof t15 !== 'object' || t15 === null || (t15.constructor !== Array || !!t15.immutable$list) && !t15.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(262, chunk_faces4, hint, fl, f, value, i, offset_custom, customAttribute, t15, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t14 = offset_custom + 11;
          t16 = value.get$w();
          if (t14 < 0 || t14 >= t15.length)
            throw $.ioore(t14);
          t15[t14] = t16;
          t16 = customAttribute.get$array();
          if (typeof t16 !== 'object' || t16 === null || (t16.constructor !== Array || !!t16.immutable$list) && !t16.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(263, chunk_faces4, hint, fl, f, value, i, offset_custom, customAttribute, t16, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t15 = offset_custom + 12;
          t17 = value.get$x();
          if (t15 < 0 || t15 >= t16.length)
            throw $.ioore(t15);
          t16[t15] = t17;
          t17 = customAttribute.get$array();
          if (typeof t17 !== 'object' || t17 === null || (t17.constructor !== Array || !!t17.immutable$list) && !t17.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(264, chunk_faces4, hint, fl, f, t17, value, i, offset_custom, customAttribute, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t16 = offset_custom + 13;
          t18 = value.get$y();
          if (t16 < 0 || t16 >= t17.length)
            throw $.ioore(t16);
          t17[t16] = t18;
          t18 = customAttribute.get$array();
          if (typeof t18 !== 'object' || t18 === null || (t18.constructor !== Array || !!t18.immutable$list) && !t18.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(265, chunk_faces4, hint, fl, f, value, i, offset_custom, customAttribute, t18, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t17 = offset_custom + 14;
          t19 = value.get$z();
          if (t17 < 0 || t17 >= t18.length)
            throw $.ioore(t17);
          t18[t17] = t19;
          t19 = customAttribute.get$array();
          if (typeof t19 !== 'object' || t19 === null || (t19.constructor !== Array || !!t19.immutable$list) && !t19.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(266, t19, chunk_faces4, hint, fl, f, value, i, offset_custom, customAttribute, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t18 = offset_custom + 15;
          t20 = value.get$w();
          if (t18 < 0 || t18 >= t19.length)
            throw $.ioore(t18);
          t19[t18] = t20;
          offset_custom += 16;
          v4 = value;
          v3 = v4;
          v2 = v3;
          v1 = v2;
        }
      } else if (t1 === 'faceVertices') {
        fl = chunk_faces3.length;
        for (offset_custom = 0, f = 0; f < fl; ++f) {
          t1 = customAttribute.get$value();
          if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(267, geometryGroup, offset_custom, hint, customAttributes, dispose, i, il, customAttribute, v4, f, chunk_faces3, chunk_faces4, obj_faces, fl, t1, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          if (f < 0 || f >= chunk_faces3.length)
            throw $.ioore(f);
          t3 = chunk_faces3[f];
          if (t3 !== (t3 | 0))
            throw $.iae(t3);
          if (t3 < 0 || t3 >= t1.length)
            throw $.ioore(t3);
          value = t1[t3];
          if (typeof value !== 'string' && (typeof value !== 'object' || value === null || value.constructor !== Array && !value.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(268, geometryGroup, offset_custom, hint, customAttributes, dispose, i, il, customAttribute, v4, f, chunk_faces3, chunk_faces4, obj_faces, fl, face, value, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t1 = value.length;
          if (0 >= t1)
            throw $.ioore(0);
          v1 = value[0];
          if (1 >= t1)
            throw $.ioore(1);
          v2 = value[1];
          if (2 >= t1)
            throw $.ioore(2);
          v3 = value[2];
          t4 = customAttribute.get$array();
          if (typeof t4 !== 'object' || t4 === null || (t4.constructor !== Array || !!t4.immutable$list) && !t4.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(269, geometryGroup, v1, offset_custom, v2, customAttributes, v3, i, t4, hint, customAttribute, v4, f, il, chunk_faces3, chunk_faces4, obj_faces, dispose, fl, face, value, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t6 = v1.get$x();
          if (offset_custom < 0 || offset_custom >= t4.length)
            throw $.ioore(offset_custom);
          t4[offset_custom] = t6;
          t6 = customAttribute.get$array();
          if (typeof t6 !== 'object' || t6 === null || (t6.constructor !== Array || !!t6.immutable$list) && !t6.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(270, geometryGroup, v1, offset_custom, v2, customAttributes, v3, i, hint, customAttribute, t6, v4, f, il, chunk_faces3, chunk_faces4, obj_faces, dispose, fl, face, value, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t7 = offset_custom + 1;
          t8 = v1.get$y();
          if (t7 < 0 || t7 >= t6.length)
            throw $.ioore(t7);
          t6[t7] = t8;
          t8 = customAttribute.get$array();
          if (typeof t8 !== 'object' || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(271, geometryGroup, v1, offset_custom, v2, customAttributes, v3, i, hint, customAttribute, v4, f, il, chunk_faces3, chunk_faces4, t8, dispose, obj_faces, fl, face, value, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t6 = offset_custom + 2;
          t9 = v1.get$z();
          if (t6 < 0 || t6 >= t8.length)
            throw $.ioore(t6);
          t8[t6] = t9;
          t9 = customAttribute.get$array();
          if (typeof t9 !== 'object' || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(272, geometryGroup, v1, offset_custom, v2, customAttributes, v3, i, hint, customAttribute, v4, f, il, chunk_faces3, chunk_faces4, obj_faces, dispose, t9, fl, face, value, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t8 = offset_custom + 3;
          t10 = v1.get$w();
          if (t8 < 0 || t8 >= t9.length)
            throw $.ioore(t8);
          t9[t8] = t10;
          t10 = customAttribute.get$array();
          if (typeof t10 !== 'object' || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(273, geometryGroup, v1, offset_custom, v2, customAttributes, v3, i, hint, customAttribute, v4, f, il, chunk_faces3, chunk_faces4, obj_faces, dispose, fl, t10, face, value, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t9 = offset_custom + 4;
          t11 = v2.get$x();
          if (t9 < 0 || t9 >= t10.length)
            throw $.ioore(t9);
          t10[t9] = t11;
          t11 = customAttribute.get$array();
          if (typeof t11 !== 'object' || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(274, geometryGroup, v1, offset_custom, v2, t11, v3, i, hint, customAttribute, v4, f, il, chunk_faces3, chunk_faces4, obj_faces, customAttributes, dispose, fl, face, value, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t10 = offset_custom + 5;
          t12 = v2.get$y();
          if (t10 < 0 || t10 >= t11.length)
            throw $.ioore(t10);
          t11[t10] = t12;
          t12 = customAttribute.get$array();
          if (typeof t12 !== 'object' || t12 === null || (t12.constructor !== Array || !!t12.immutable$list) && !t12.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(275, geometryGroup, v1, offset_custom, v2, customAttributes, v3, i, hint, customAttribute, t12, v4, f, il, chunk_faces3, chunk_faces4, obj_faces, dispose, fl, face, value, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t11 = offset_custom + 6;
          t13 = v2.get$z();
          if (t11 < 0 || t11 >= t12.length)
            throw $.ioore(t11);
          t12[t11] = t13;
          t13 = customAttribute.get$array();
          if (typeof t13 !== 'object' || t13 === null || (t13.constructor !== Array || !!t13.immutable$list) && !t13.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(276, geometryGroup, v1, offset_custom, v2, customAttributes, v3, i, hint, customAttribute, v4, f, il, t13, chunk_faces3, chunk_faces4, dispose, obj_faces, fl, face, value, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t12 = offset_custom + 7;
          t14 = v2.get$w();
          if (t12 < 0 || t12 >= t13.length)
            throw $.ioore(t12);
          t13[t12] = t14;
          t14 = customAttribute.get$array();
          if (typeof t14 !== 'object' || t14 === null || (t14.constructor !== Array || !!t14.immutable$list) && !t14.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(277, geometryGroup, v1, offset_custom, v2, customAttributes, v3, i, hint, customAttribute, v4, f, il, chunk_faces3, chunk_faces4, obj_faces, dispose, t14, fl, face, value, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t13 = offset_custom + 8;
          t15 = v3.get$x();
          if (t13 < 0 || t13 >= t14.length)
            throw $.ioore(t13);
          t14[t13] = t15;
          t15 = customAttribute.get$array();
          if (typeof t15 !== 'object' || t15 === null || (t15.constructor !== Array || !!t15.immutable$list) && !t15.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(278, geometryGroup, v1, offset_custom, v2, customAttributes, v3, i, hint, customAttribute, v4, f, il, chunk_faces3, chunk_faces4, obj_faces, dispose, t15, fl, face, value, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t14 = offset_custom + 9;
          t16 = v3.get$y();
          if (t14 < 0 || t14 >= t15.length)
            throw $.ioore(t14);
          t15[t14] = t16;
          t16 = customAttribute.get$array();
          if (typeof t16 !== 'object' || t16 === null || (t16.constructor !== Array || !!t16.immutable$list) && !t16.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(279, geometryGroup, v1, offset_custom, v2, t16, v3, i, hint, customAttribute, v4, f, il, chunk_faces3, chunk_faces4, obj_faces, customAttributes, dispose, fl, face, value, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t15 = offset_custom + 10;
          t17 = v3.get$z();
          if (t15 < 0 || t15 >= t16.length)
            throw $.ioore(t15);
          t16[t15] = t17;
          t17 = customAttribute.get$array();
          if (typeof t17 !== 'object' || t17 === null || (t17.constructor !== Array || !!t17.immutable$list) && !t17.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(280, geometryGroup, v1, offset_custom, v2, customAttributes, v3, i, t17, hint, customAttribute, v4, f, il, chunk_faces3, chunk_faces4, obj_faces, dispose, fl, face, value, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t16 = offset_custom + 11;
          t18 = v3.get$w();
          if (t16 < 0 || t16 >= t17.length)
            throw $.ioore(t16);
          t17[t16] = t18;
          offset_custom += 12;
        }
        fl = chunk_faces4.length;
        for (f = 0; f < fl; ++f) {
          t1 = customAttribute.get$value();
          if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(281, offset_custom, geometryGroup, hint, customAttributes, dispose, i, il, customAttribute, f, chunk_faces3, chunk_faces4, obj_faces, fl, t1, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          if (f < 0 || f >= chunk_faces4.length)
            throw $.ioore(f);
          t3 = chunk_faces4[f];
          if (t3 !== (t3 | 0))
            throw $.iae(t3);
          if (t3 < 0 || t3 >= t1.length)
            throw $.ioore(t3);
          value = t1[t3];
          if (typeof value !== 'string' && (typeof value !== 'object' || value === null || value.constructor !== Array && !value.is$JavaScriptIndexingBehavior()))
            return this.setMeshBuffers$5$bailout(282, offset_custom, geometryGroup, hint, customAttributes, dispose, i, il, customAttribute, f, chunk_faces3, chunk_faces4, obj_faces, fl, value, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t1 = value.length;
          if (0 >= t1)
            throw $.ioore(0);
          v1 = value[0];
          if (1 >= t1)
            throw $.ioore(1);
          v2 = value[1];
          if (2 >= t1)
            throw $.ioore(2);
          v3 = value[2];
          if (3 >= t1)
            throw $.ioore(3);
          v4 = value[3];
          t4 = customAttribute.get$array();
          if (typeof t4 !== 'object' || t4 === null || (t4.constructor !== Array || !!t4.immutable$list) && !t4.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(283, v1, offset_custom, v2, hint, v3, v4, i, t4, customAttribute, geometryGroup, il, f, customAttributes, chunk_faces3, chunk_faces4, obj_faces, dispose, fl, value, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t6 = v1.get$x();
          if (offset_custom < 0 || offset_custom >= t4.length)
            throw $.ioore(offset_custom);
          t4[offset_custom] = t6;
          t6 = customAttribute.get$array();
          if (typeof t6 !== 'object' || t6 === null || (t6.constructor !== Array || !!t6.immutable$list) && !t6.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(284, v1, offset_custom, v2, hint, v3, v4, i, il, customAttribute, geometryGroup, f, t6, chunk_faces3, chunk_faces4, obj_faces, customAttributes, dispose, fl, value, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t7 = offset_custom + 1;
          t8 = v1.get$y();
          if (t7 < 0 || t7 >= t6.length)
            throw $.ioore(t7);
          t6[t7] = t8;
          t8 = customAttribute.get$array();
          if (typeof t8 !== 'object' || t8 === null || (t8.constructor !== Array || !!t8.immutable$list) && !t8.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(285, v1, offset_custom, v2, hint, v3, v4, i, il, customAttribute, geometryGroup, f, customAttributes, chunk_faces3, chunk_faces4, obj_faces, t8, dispose, fl, value, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t6 = offset_custom + 2;
          t9 = v1.get$z();
          if (t6 < 0 || t6 >= t8.length)
            throw $.ioore(t6);
          t8[t6] = t9;
          t9 = customAttribute.get$array();
          if (typeof t9 !== 'object' || t9 === null || (t9.constructor !== Array || !!t9.immutable$list) && !t9.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(286, v1, offset_custom, v2, hint, v3, v4, i, il, customAttribute, geometryGroup, f, customAttributes, chunk_faces3, chunk_faces4, obj_faces, dispose, t9, fl, value, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t8 = offset_custom + 3;
          t10 = v1.get$w();
          if (t8 < 0 || t8 >= t9.length)
            throw $.ioore(t8);
          t9[t8] = t10;
          t10 = customAttribute.get$array();
          if (typeof t10 !== 'object' || t10 === null || (t10.constructor !== Array || !!t10.immutable$list) && !t10.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(287, v1, offset_custom, v2, hint, v3, v4, i, face, customAttribute, geometryGroup, il, f, customAttributes, chunk_faces3, chunk_faces4, obj_faces, dispose, fl, value, t10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t9 = offset_custom + 4;
          t11 = v2.get$x();
          if (t9 < 0 || t9 >= t10.length)
            throw $.ioore(t9);
          t10[t9] = t11;
          t11 = customAttribute.get$array();
          if (typeof t11 !== 'object' || t11 === null || (t11.constructor !== Array || !!t11.immutable$list) && !t11.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(288, v1, offset_custom, v2, hint, v3, t11, v4, i, il, customAttribute, geometryGroup, f, customAttributes, chunk_faces3, chunk_faces4, obj_faces, dispose, fl, value, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t10 = offset_custom + 5;
          t12 = v2.get$y();
          if (t10 < 0 || t10 >= t11.length)
            throw $.ioore(t10);
          t11[t10] = t12;
          t12 = customAttribute.get$array();
          if (typeof t12 !== 'object' || t12 === null || (t12.constructor !== Array || !!t12.immutable$list) && !t12.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(289, v1, offset_custom, v2, hint, v3, v4, i, il, customAttribute, t12, f, customAttributes, geometryGroup, chunk_faces4, obj_faces, dispose, chunk_faces3, fl, value, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t11 = offset_custom + 6;
          t13 = v2.get$z();
          if (t11 < 0 || t11 >= t12.length)
            throw $.ioore(t11);
          t12[t11] = t13;
          t13 = customAttribute.get$array();
          if (typeof t13 !== 'object' || t13 === null || (t13.constructor !== Array || !!t13.immutable$list) && !t13.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(290, v1, offset_custom, v2, hint, v3, v4, i, il, customAttribute, geometryGroup, f, customAttributes, chunk_faces3, t13, chunk_faces4, dispose, obj_faces, fl, value, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t12 = offset_custom + 7;
          t14 = v2.get$w();
          if (t12 < 0 || t12 >= t13.length)
            throw $.ioore(t12);
          t13[t12] = t14;
          t14 = customAttribute.get$array();
          if (typeof t14 !== 'object' || t14 === null || (t14.constructor !== Array || !!t14.immutable$list) && !t14.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(291, v1, offset_custom, v2, hint, v3, i, v4, il, customAttribute, geometryGroup, f, customAttributes, chunk_faces3, chunk_faces4, obj_faces, dispose, t14, fl, value, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t13 = offset_custom + 8;
          t15 = v3.get$x();
          if (t13 < 0 || t13 >= t14.length)
            throw $.ioore(t13);
          t14[t13] = t15;
          t15 = customAttribute.get$array();
          if (typeof t15 !== 'object' || t15 === null || (t15.constructor !== Array || !!t15.immutable$list) && !t15.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(292, v1, offset_custom, v2, hint, v3, v4, i, il, customAttribute, geometryGroup, f, customAttributes, chunk_faces3, chunk_faces4, obj_faces, dispose, fl, t15, value, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t14 = offset_custom + 9;
          t16 = v3.get$y();
          if (t14 < 0 || t14 >= t15.length)
            throw $.ioore(t14);
          t15[t14] = t16;
          t16 = customAttribute.get$array();
          if (typeof t16 !== 'object' || t16 === null || (t16.constructor !== Array || !!t16.immutable$list) && !t16.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(293, v1, offset_custom, v2, t16, v3, hint, v4, i, il, customAttribute, geometryGroup, f, customAttributes, chunk_faces3, chunk_faces4, obj_faces, dispose, fl, value, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t15 = offset_custom + 10;
          t17 = v3.get$z();
          if (t15 < 0 || t15 >= t16.length)
            throw $.ioore(t15);
          t16[t15] = t17;
          t17 = customAttribute.get$array();
          if (typeof t17 !== 'object' || t17 === null || (t17.constructor !== Array || !!t17.immutable$list) && !t17.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(294, v1, offset_custom, v2, hint, v3, v4, i, t17, customAttribute, geometryGroup, il, f, customAttributes, chunk_faces3, chunk_faces4, obj_faces, dispose, fl, value, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t16 = offset_custom + 11;
          t18 = v3.get$w();
          if (t16 < 0 || t16 >= t17.length)
            throw $.ioore(t16);
          t17[t16] = t18;
          t18 = customAttribute.get$array();
          if (typeof t18 !== 'object' || t18 === null || (t18.constructor !== Array || !!t18.immutable$list) && !t18.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(295, v1, offset_custom, v2, hint, v3, v4, i, il, customAttribute, geometryGroup, f, customAttributes, t18, chunk_faces3, chunk_faces4, obj_faces, dispose, fl, value, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t17 = offset_custom + 12;
          t19 = v4.get$x();
          if (t17 < 0 || t17 >= t18.length)
            throw $.ioore(t17);
          t18[t17] = t19;
          t19 = customAttribute.get$array();
          if (typeof t19 !== 'object' || t19 === null || (t19.constructor !== Array || !!t19.immutable$list) && !t19.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(296, v1, offset_custom, v2, hint, v3, v4, i, il, customAttribute, geometryGroup, f, customAttributes, chunk_faces3, chunk_faces4, obj_faces, dispose, t19, fl, value, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t18 = offset_custom + 13;
          t20 = v4.get$y();
          if (t18 < 0 || t18 >= t19.length)
            throw $.ioore(t18);
          t19[t18] = t20;
          t20 = customAttribute.get$array();
          if (typeof t20 !== 'object' || t20 === null || (t20.constructor !== Array || !!t20.immutable$list) && !t20.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(297, v1, offset_custom, v2, hint, v3, v4, i, il, customAttribute, geometryGroup, f, customAttributes, chunk_faces3, chunk_faces4, obj_faces, dispose, t20, fl, value, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t19 = offset_custom + 14;
          t21 = v4.get$z();
          if (t19 < 0 || t19 >= t20.length)
            throw $.ioore(t19);
          t20[t19] = t21;
          t21 = customAttribute.get$array();
          if (typeof t21 !== 'object' || t21 === null || (t21.constructor !== Array || !!t21.immutable$list) && !t21.is$JavaScriptIndexingBehavior())
            return this.setMeshBuffers$5$bailout(298, v1, offset_custom, v2, t21, v3, hint, v4, i, il, customAttribute, geometryGroup, f, customAttributes, chunk_faces3, chunk_faces4, obj_faces, dispose, fl, value, face, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          t20 = offset_custom + 15;
          t22 = v4.get$w();
          if (t20 < 0 || t20 >= t21.length)
            throw $.ioore(t20);
          t21[t20] = t22;
          offset_custom += 16;
        }
      } else
        offset_custom = 0;
    } else
      offset_custom = 0;
    this._gl.bindBuffer$2(34962, customAttribute.get$buffer());
    this._gl.bufferData$3(34962, customAttribute.get$array(), hint);
    offset_customSrc = 0;
  }
  if (dispose) {
    geometryGroup.set$__inittedArrays(null);
    geometryGroup.set$__colorArray(null);
    geometryGroup.set$__normalArray(null);
    geometryGroup.set$__tangentArray(null);
    geometryGroup.set$__uvArray(null);
    geometryGroup.set$__uv2Array(null);
    geometryGroup.set$__faceArray(null);
    geometryGroup.set$__vertexArray(null);
    geometryGroup.set$__lineArray(null);
    geometryGroup.set$__skinVertexAArray(null);
    geometryGroup.set$__skinVertexBArray(null);
    geometryGroup.set$__skinIndexArray(null);
    geometryGroup.set$__skinWeightArray(null);
  }
},
 setMeshBuffers$5$bailout: function(state, env0, env1, env2, env3, env4, env5, env6, env7, env8, env9, env10, env11, env12, env13, env14, env15, env16, env17, env18, env19, env20, env21, env22, env23, env24, env25, env26, env27, env28, env29, env30, env31, env32, env33, env34, env35, env36, env37, env38, env39, env40, env41, env42, env43, env44, env45, env46, env47, env48, env49, env50, env51, env52, env53, env54, env55, env56, env57, env58, env59, env60, env61, env62, env63, env64, env65, env66, env67) {
  switch (state) {
    case 1:
      var geometryGroup = env0;
      var object = env1;
      var hint = env2;
      var dispose = env3;
      var material = env4;
      normalType = env5;
      break;
    case 2:
      geometryGroup = env0;
      object = env1;
      hint = env2;
      dispose = env3;
      material = env4;
      uvType = env5;
      normalType = env6;
      vertexColorType = env7;
      needsSmoothNormals = env8;
      vertexArray = env9;
      break;
    case 3:
      geometryGroup = env0;
      object = env1;
      hint = env2;
      dispose = env3;
      material = env4;
      uvType = env5;
      normalType = env6;
      vertexColorType = env7;
      needsSmoothNormals = env8;
      uvArray = env9;
      vertexArray = env10;
      break;
    case 4:
      geometryGroup = env0;
      object = env1;
      hint = env2;
      dispose = env3;
      material = env4;
      normalType = env5;
      vertexColorType = env6;
      uvType = env7;
      needsSmoothNormals = env8;
      vertexArray = env9;
      uvArray = env10;
      uv2Array = env11;
      break;
    case 5:
      geometryGroup = env0;
      object = env1;
      hint = env2;
      dispose = env3;
      material = env4;
      normalType = env5;
      vertexColorType = env6;
      uvType = env7;
      needsSmoothNormals = env8;
      vertexArray = env9;
      uvArray = env10;
      uv2Array = env11;
      normalArray = env12;
      break;
    case 6:
      geometryGroup = env0;
      object = env1;
      hint = env2;
      dispose = env3;
      material = env4;
      normalType = env5;
      vertexColorType = env6;
      uvType = env7;
      needsSmoothNormals = env8;
      vertexArray = env9;
      uvArray = env10;
      uv2Array = env11;
      normalArray = env12;
      tangentArray = env13;
      break;
    case 7:
      geometryGroup = env0;
      object = env1;
      hint = env2;
      dispose = env3;
      material = env4;
      normalType = env5;
      vertexColorType = env6;
      uvType = env7;
      needsSmoothNormals = env8;
      vertexArray = env9;
      uvArray = env10;
      uv2Array = env11;
      normalArray = env12;
      tangentArray = env13;
      colorArray = env14;
      break;
    case 8:
      geometryGroup = env0;
      object = env1;
      hint = env2;
      dispose = env3;
      material = env4;
      normalType = env5;
      vertexColorType = env6;
      uvType = env7;
      needsSmoothNormals = env8;
      vertexArray = env9;
      uvArray = env10;
      uv2Array = env11;
      normalArray = env12;
      tangentArray = env13;
      colorArray = env14;
      skinVertexAArray = env15;
      break;
    case 9:
      geometryGroup = env0;
      object = env1;
      hint = env2;
      dispose = env3;
      material = env4;
      normalType = env5;
      vertexColorType = env6;
      uvType = env7;
      needsSmoothNormals = env8;
      vertexArray = env9;
      uvArray = env10;
      uv2Array = env11;
      normalArray = env12;
      tangentArray = env13;
      colorArray = env14;
      skinVertexAArray = env15;
      skinVertexBArray = env16;
      break;
    case 10:
      geometryGroup = env0;
      object = env1;
      hint = env2;
      dispose = env3;
      material = env4;
      normalType = env5;
      vertexColorType = env6;
      uvType = env7;
      needsSmoothNormals = env8;
      vertexArray = env9;
      uvArray = env10;
      uv2Array = env11;
      normalArray = env12;
      tangentArray = env13;
      colorArray = env14;
      skinVertexAArray = env15;
      skinVertexBArray = env16;
      skinIndexArray = env17;
      break;
    case 11:
      geometryGroup = env0;
      object = env1;
      hint = env2;
      dispose = env3;
      material = env4;
      skinWeightArray = env5;
      normalType = env6;
      vertexColorType = env7;
      uvType = env8;
      needsSmoothNormals = env9;
      vertexArray = env10;
      uvArray = env11;
      uv2Array = env12;
      normalArray = env13;
      tangentArray = env14;
      colorArray = env15;
      skinVertexAArray = env16;
      skinVertexBArray = env17;
      skinIndexArray = env18;
      break;
    case 12:
      geometryGroup = env0;
      object = env1;
      hint = env2;
      dispose = env3;
      material = env4;
      skinWeightArray = env5;
      morphTargetsArrays = env6;
      normalType = env7;
      vertexColorType = env8;
      uvType = env9;
      needsSmoothNormals = env10;
      vertexArray = env11;
      uvArray = env12;
      uv2Array = env13;
      normalArray = env14;
      tangentArray = env15;
      colorArray = env16;
      skinVertexAArray = env17;
      skinVertexBArray = env18;
      skinIndexArray = env19;
      break;
    case 13:
      geometryGroup = env0;
      object = env1;
      hint = env2;
      dispose = env3;
      material = env4;
      morphNormalsArrays = env5;
      skinWeightArray = env6;
      morphTargetsArrays = env7;
      normalType = env8;
      vertexColorType = env9;
      uvType = env10;
      needsSmoothNormals = env11;
      vertexArray = env12;
      uvArray = env13;
      uv2Array = env14;
      normalArray = env15;
      tangentArray = env16;
      colorArray = env17;
      skinVertexAArray = env18;
      skinVertexBArray = env19;
      skinIndexArray = env20;
      break;
    case 14:
      geometryGroup = env0;
      object = env1;
      hint = env2;
      dispose = env3;
      material = env4;
      morphNormalsArrays = env5;
      skinWeightArray = env6;
      morphTargetsArrays = env7;
      customAttributes = env8;
      normalType = env9;
      vertexColorType = env10;
      uvType = env11;
      needsSmoothNormals = env12;
      vertexArray = env13;
      uvArray = env14;
      uv2Array = env15;
      normalArray = env16;
      tangentArray = env17;
      colorArray = env18;
      skinVertexAArray = env19;
      skinVertexBArray = env20;
      skinIndexArray = env21;
      break;
    case 15:
      geometryGroup = env0;
      object = env1;
      hint = env2;
      dispose = env3;
      material = env4;
      morphNormalsArrays = env5;
      skinWeightArray = env6;
      morphTargetsArrays = env7;
      customAttributes = env8;
      faceArray = env9;
      normalType = env10;
      vertexColorType = env11;
      uvType = env12;
      needsSmoothNormals = env13;
      vertexArray = env14;
      uvArray = env15;
      uv2Array = env16;
      normalArray = env17;
      tangentArray = env18;
      colorArray = env19;
      skinVertexAArray = env20;
      skinVertexBArray = env21;
      skinIndexArray = env22;
      break;
    case 16:
      geometryGroup = env0;
      object = env1;
      hint = env2;
      dispose = env3;
      material = env4;
      normalType = env5;
      vertexColorType = env6;
      uvType = env7;
      needsSmoothNormals = env8;
      vertexArray = env9;
      uvArray = env10;
      uv2Array = env11;
      normalArray = env12;
      tangentArray = env13;
      colorArray = env14;
      skinVertexAArray = env15;
      skinVertexBArray = env16;
      skinIndexArray = env17;
      skinWeightArray = env18;
      morphTargetsArrays = env19;
      morphNormalsArrays = env20;
      customAttributes = env21;
      faceArray = env22;
      lineArray = env23;
      break;
    case 17:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      material = env3;
      normalType = env4;
      vertexColorType = env5;
      uvType = env6;
      needsSmoothNormals = env7;
      vertexArray = env8;
      uvArray = env9;
      uv2Array = env10;
      normalArray = env11;
      tangentArray = env12;
      colorArray = env13;
      skinVertexAArray = env14;
      skinVertexBArray = env15;
      skinIndexArray = env16;
      skinWeightArray = env17;
      morphTargetsArrays = env18;
      morphNormalsArrays = env19;
      customAttributes = env20;
      faceArray = env21;
      lineArray = env22;
      geometry = env23;
      dirtyVertices = env24;
      dirtyElements = env25;
      dirtyUvs = env26;
      dirtyNormals = env27;
      dirtyTangents = env28;
      dirtyColors = env29;
      dirtyMorphTargets = env30;
      vertices = env31;
      break;
    case 18:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      material = env3;
      normalType = env4;
      vertexColorType = env5;
      uvType = env6;
      needsSmoothNormals = env7;
      vertexArray = env8;
      uvArray = env9;
      uv2Array = env10;
      normalArray = env11;
      tangentArray = env12;
      colorArray = env13;
      skinVertexAArray = env14;
      skinVertexBArray = env15;
      skinIndexArray = env16;
      skinWeightArray = env17;
      morphTargetsArrays = env18;
      morphNormalsArrays = env19;
      customAttributes = env20;
      faceArray = env21;
      lineArray = env22;
      geometry = env23;
      dirtyVertices = env24;
      dirtyElements = env25;
      dirtyUvs = env26;
      dirtyNormals = env27;
      dirtyTangents = env28;
      dirtyColors = env29;
      dirtyMorphTargets = env30;
      vertices = env31;
      chunk_faces3 = env32;
      break;
    case 19:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      material = env3;
      normalType = env4;
      vertexColorType = env5;
      uvType = env6;
      needsSmoothNormals = env7;
      vertexArray = env8;
      uvArray = env9;
      uv2Array = env10;
      normalArray = env11;
      tangentArray = env12;
      colorArray = env13;
      skinVertexAArray = env14;
      skinVertexBArray = env15;
      skinIndexArray = env16;
      skinWeightArray = env17;
      morphTargetsArrays = env18;
      morphNormalsArrays = env19;
      customAttributes = env20;
      faceArray = env21;
      lineArray = env22;
      geometry = env23;
      dirtyVertices = env24;
      dirtyElements = env25;
      dirtyUvs = env26;
      dirtyNormals = env27;
      dirtyTangents = env28;
      dirtyColors = env29;
      dirtyMorphTargets = env30;
      vertices = env31;
      chunk_faces3 = env32;
      chunk_faces4 = env33;
      break;
    case 20:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      material = env3;
      normalType = env4;
      vertexColorType = env5;
      uvType = env6;
      needsSmoothNormals = env7;
      vertexArray = env8;
      uvArray = env9;
      uv2Array = env10;
      normalArray = env11;
      tangentArray = env12;
      colorArray = env13;
      skinVertexAArray = env14;
      skinVertexBArray = env15;
      skinIndexArray = env16;
      skinWeightArray = env17;
      morphTargetsArrays = env18;
      morphNormalsArrays = env19;
      customAttributes = env20;
      faceArray = env21;
      lineArray = env22;
      geometry = env23;
      dirtyVertices = env24;
      dirtyElements = env25;
      dirtyUvs = env26;
      dirtyNormals = env27;
      dirtyTangents = env28;
      dirtyColors = env29;
      dirtyMorphTargets = env30;
      vertices = env31;
      chunk_faces3 = env32;
      chunk_faces4 = env33;
      obj_faces = env34;
      break;
    case 21:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      material = env3;
      normalType = env4;
      vertexColorType = env5;
      uvType = env6;
      needsSmoothNormals = env7;
      vertexArray = env8;
      uvArray = env9;
      uv2Array = env10;
      normalArray = env11;
      tangentArray = env12;
      colorArray = env13;
      skinVertexAArray = env14;
      skinVertexBArray = env15;
      skinIndexArray = env16;
      skinWeightArray = env17;
      morphTargetsArrays = env18;
      morphNormalsArrays = env19;
      customAttributes = env20;
      faceArray = env21;
      lineArray = env22;
      geometry = env23;
      dirtyVertices = env24;
      dirtyElements = env25;
      dirtyUvs = env26;
      dirtyNormals = env27;
      dirtyTangents = env28;
      dirtyColors = env29;
      dirtyMorphTargets = env30;
      vertices = env31;
      chunk_faces3 = env32;
      chunk_faces4 = env33;
      obj_faces = env34;
      t21 = env35;
      break;
    case 22:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      material = env3;
      normalType = env4;
      vertexColorType = env5;
      uvType = env6;
      needsSmoothNormals = env7;
      vertexArray = env8;
      uvArray = env9;
      uv2Array = env10;
      normalArray = env11;
      tangentArray = env12;
      colorArray = env13;
      skinVertexAArray = env14;
      skinVertexBArray = env15;
      skinIndexArray = env16;
      skinWeightArray = env17;
      morphTargetsArrays = env18;
      morphNormalsArrays = env19;
      customAttributes = env20;
      faceArray = env21;
      lineArray = env22;
      geometry = env23;
      dirtyVertices = env24;
      dirtyElements = env25;
      dirtyUvs = env26;
      dirtyNormals = env27;
      dirtyTangents = env28;
      dirtyColors = env29;
      dirtyMorphTargets = env30;
      vertices = env31;
      chunk_faces3 = env32;
      chunk_faces4 = env33;
      obj_faces = env34;
      obj_uvs = env35;
      t1 = env36;
      break;
    case 23:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      material = env3;
      normalType = env4;
      vertexColorType = env5;
      uvType = env6;
      needsSmoothNormals = env7;
      vertexArray = env8;
      uvArray = env9;
      uv2Array = env10;
      normalArray = env11;
      tangentArray = env12;
      colorArray = env13;
      skinVertexAArray = env14;
      skinVertexBArray = env15;
      skinIndexArray = env16;
      skinWeightArray = env17;
      morphTargetsArrays = env18;
      morphNormalsArrays = env19;
      customAttributes = env20;
      faceArray = env21;
      lineArray = env22;
      geometry = env23;
      dirtyVertices = env24;
      dirtyElements = env25;
      dirtyUvs = env26;
      dirtyNormals = env27;
      dirtyTangents = env28;
      dirtyColors = env29;
      dirtyMorphTargets = env30;
      vertices = env31;
      chunk_faces3 = env32;
      chunk_faces4 = env33;
      obj_faces = env34;
      obj_uvs = env35;
      t1 = env36;
      break;
    case 24:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      material = env3;
      obj_skinVerticesA = env4;
      obj_uvs2 = env5;
      normalType = env6;
      vertexColorType = env7;
      uvType = env8;
      needsSmoothNormals = env9;
      vertexArray = env10;
      uvArray = env11;
      uv2Array = env12;
      normalArray = env13;
      tangentArray = env14;
      colorArray = env15;
      skinVertexAArray = env16;
      skinVertexBArray = env17;
      skinIndexArray = env18;
      skinWeightArray = env19;
      morphTargetsArrays = env20;
      morphNormalsArrays = env21;
      customAttributes = env22;
      faceArray = env23;
      lineArray = env24;
      geometry = env25;
      dirtyVertices = env26;
      dirtyElements = env27;
      dirtyUvs = env28;
      dirtyNormals = env29;
      dirtyTangents = env30;
      dirtyColors = env31;
      dirtyMorphTargets = env32;
      vertices = env33;
      chunk_faces3 = env34;
      chunk_faces4 = env35;
      obj_faces = env36;
      obj_uvs = env37;
      break;
    case 25:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      material = env3;
      obj_skinVerticesA = env4;
      obj_uvs2 = env5;
      obj_skinVerticesB = env6;
      normalType = env7;
      vertexColorType = env8;
      uvType = env9;
      needsSmoothNormals = env10;
      vertexArray = env11;
      uvArray = env12;
      uv2Array = env13;
      normalArray = env14;
      tangentArray = env15;
      colorArray = env16;
      skinVertexAArray = env17;
      skinVertexBArray = env18;
      skinIndexArray = env19;
      skinWeightArray = env20;
      morphTargetsArrays = env21;
      morphNormalsArrays = env22;
      customAttributes = env23;
      faceArray = env24;
      lineArray = env25;
      geometry = env26;
      dirtyVertices = env27;
      dirtyElements = env28;
      dirtyUvs = env29;
      dirtyNormals = env30;
      dirtyTangents = env31;
      dirtyColors = env32;
      dirtyMorphTargets = env33;
      vertices = env34;
      chunk_faces3 = env35;
      chunk_faces4 = env36;
      obj_faces = env37;
      obj_uvs = env38;
      break;
    case 26:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      material = env3;
      obj_skinVerticesA = env4;
      obj_uvs2 = env5;
      obj_skinVerticesB = env6;
      obj_skinIndices = env7;
      normalType = env8;
      vertexColorType = env9;
      uvType = env10;
      needsSmoothNormals = env11;
      vertexArray = env12;
      uvArray = env13;
      uv2Array = env14;
      normalArray = env15;
      tangentArray = env16;
      colorArray = env17;
      skinVertexAArray = env18;
      skinVertexBArray = env19;
      skinIndexArray = env20;
      skinWeightArray = env21;
      morphTargetsArrays = env22;
      morphNormalsArrays = env23;
      customAttributes = env24;
      faceArray = env25;
      lineArray = env26;
      geometry = env27;
      dirtyVertices = env28;
      dirtyElements = env29;
      dirtyUvs = env30;
      dirtyNormals = env31;
      dirtyTangents = env32;
      dirtyColors = env33;
      dirtyMorphTargets = env34;
      vertices = env35;
      chunk_faces3 = env36;
      chunk_faces4 = env37;
      obj_faces = env38;
      obj_uvs = env39;
      break;
    case 27:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      material = env3;
      obj_skinVerticesA = env4;
      obj_uvs2 = env5;
      obj_skinVerticesB = env6;
      obj_skinIndices = env7;
      obj_skinWeights = env8;
      normalType = env9;
      vertexColorType = env10;
      uvType = env11;
      needsSmoothNormals = env12;
      vertexArray = env13;
      uvArray = env14;
      uv2Array = env15;
      normalArray = env16;
      tangentArray = env17;
      colorArray = env18;
      skinVertexAArray = env19;
      skinVertexBArray = env20;
      skinIndexArray = env21;
      skinWeightArray = env22;
      morphTargetsArrays = env23;
      morphNormalsArrays = env24;
      customAttributes = env25;
      faceArray = env26;
      lineArray = env27;
      geometry = env28;
      dirtyVertices = env29;
      dirtyElements = env30;
      dirtyUvs = env31;
      dirtyNormals = env32;
      dirtyTangents = env33;
      dirtyColors = env34;
      dirtyMorphTargets = env35;
      vertices = env36;
      chunk_faces3 = env37;
      chunk_faces4 = env38;
      obj_faces = env39;
      obj_uvs = env40;
      break;
    case 28:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      material = env3;
      obj_skinVerticesA = env4;
      obj_uvs2 = env5;
      obj_skinVerticesB = env6;
      obj_skinIndices = env7;
      obj_skinWeights = env8;
      morphTargets = env9;
      normalType = env10;
      vertexColorType = env11;
      uvType = env12;
      needsSmoothNormals = env13;
      vertexArray = env14;
      uvArray = env15;
      uv2Array = env16;
      normalArray = env17;
      tangentArray = env18;
      colorArray = env19;
      skinVertexAArray = env20;
      skinVertexBArray = env21;
      skinIndexArray = env22;
      skinWeightArray = env23;
      morphTargetsArrays = env24;
      morphNormalsArrays = env25;
      customAttributes = env26;
      faceArray = env27;
      lineArray = env28;
      geometry = env29;
      dirtyVertices = env30;
      dirtyElements = env31;
      dirtyUvs = env32;
      dirtyNormals = env33;
      dirtyTangents = env34;
      dirtyColors = env35;
      dirtyMorphTargets = env36;
      vertices = env37;
      chunk_faces3 = env38;
      chunk_faces4 = env39;
      obj_faces = env40;
      obj_uvs = env41;
      break;
    case 29:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      material = env3;
      obj_skinVerticesA = env4;
      obj_uvs2 = env5;
      obj_skinVerticesB = env6;
      obj_skinIndices = env7;
      obj_skinWeights = env8;
      morphTargets = env9;
      morphNormals = env10;
      normalType = env11;
      vertexColorType = env12;
      uvType = env13;
      needsSmoothNormals = env14;
      vertexArray = env15;
      uvArray = env16;
      uv2Array = env17;
      normalArray = env18;
      tangentArray = env19;
      colorArray = env20;
      skinVertexAArray = env21;
      skinVertexBArray = env22;
      skinIndexArray = env23;
      skinWeightArray = env24;
      morphTargetsArrays = env25;
      morphNormalsArrays = env26;
      customAttributes = env27;
      faceArray = env28;
      lineArray = env29;
      geometry = env30;
      dirtyVertices = env31;
      dirtyElements = env32;
      dirtyUvs = env33;
      dirtyNormals = env34;
      dirtyTangents = env35;
      dirtyColors = env36;
      dirtyMorphTargets = env37;
      vertices = env38;
      chunk_faces3 = env39;
      chunk_faces4 = env40;
      obj_faces = env41;
      obj_uvs = env42;
      break;
    case 30:
      geometryGroup = env0;
      offset_morphTarget = env1;
      t1 = env2;
      material = env3;
      hint = env4;
      dispose = env5;
      n4 = env6;
      n1 = env7;
      normalType = env8;
      vertexColorType = env9;
      uvType = env10;
      needsSmoothNormals = env11;
      uvArray = env12;
      uv2Array = env13;
      normalArray = env14;
      tangentArray = env15;
      colorArray = env16;
      skinVertexAArray = env17;
      skinVertexBArray = env18;
      skinIndexArray = env19;
      skinWeightArray = env20;
      faceVertexNormals = env21;
      morphNormalsArrays = env22;
      customAttributes = env23;
      morphTargetsArrays = env24;
      faceArray = env25;
      geometry = env26;
      dirtyElements = env27;
      dirtyUvs = env28;
      dirtyNormals = env29;
      lineArray = env30;
      dirtyTangents = env31;
      dirtyColors = env32;
      chunk_faces3 = env33;
      chunk_faces4 = env34;
      obj_faces = env35;
      obj_uvs = env36;
      obj_uvs2 = env37;
      obj_skinVerticesA = env38;
      obj_skinVerticesB = env39;
      obj_skinIndices = env40;
      obj_skinWeights = env41;
      morphTargets = env42;
      morphNormals = env43;
      nka = env44;
      vk = env45;
      v4 = env46;
      n3 = env47;
      f = env48;
      vkl = env49;
      fl = env50;
      chf = env51;
      face = env52;
      n2 = env53;
      break;
    case 31:
      geometryGroup = env0;
      offset_morphTarget = env1;
      hint = env2;
      v1 = env3;
      material = env4;
      dispose = env5;
      t1 = env6;
      n4 = env7;
      n1 = env8;
      normalType = env9;
      vertexColorType = env10;
      uvType = env11;
      needsSmoothNormals = env12;
      uvArray = env13;
      uv2Array = env14;
      normalArray = env15;
      tangentArray = env16;
      colorArray = env17;
      skinVertexAArray = env18;
      skinVertexBArray = env19;
      skinIndexArray = env20;
      skinWeightArray = env21;
      faceVertexNormals = env22;
      morphNormalsArrays = env23;
      customAttributes = env24;
      morphTargetsArrays = env25;
      faceArray = env26;
      geometry = env27;
      dirtyElements = env28;
      dirtyUvs = env29;
      dirtyNormals = env30;
      lineArray = env31;
      dirtyTangents = env32;
      dirtyColors = env33;
      chunk_faces3 = env34;
      chunk_faces4 = env35;
      obj_faces = env36;
      obj_uvs = env37;
      obj_uvs2 = env38;
      obj_skinVerticesA = env39;
      obj_skinVerticesB = env40;
      obj_skinIndices = env41;
      obj_skinWeights = env42;
      morphTargets = env43;
      morphNormals = env44;
      nka = env45;
      vk = env46;
      v4 = env47;
      n3 = env48;
      f = env49;
      vkl = env50;
      fl = env51;
      chf = env52;
      face = env53;
      n2 = env54;
      break;
    case 32:
      geometryGroup = env0;
      offset_morphTarget = env1;
      hint = env2;
      v1 = env3;
      material = env4;
      dispose = env5;
      n4 = env6;
      v2 = env7;
      t1 = env8;
      n1 = env9;
      normalType = env10;
      vertexColorType = env11;
      uvType = env12;
      needsSmoothNormals = env13;
      uvArray = env14;
      uv2Array = env15;
      normalArray = env16;
      tangentArray = env17;
      colorArray = env18;
      skinVertexAArray = env19;
      skinVertexBArray = env20;
      skinIndexArray = env21;
      skinWeightArray = env22;
      faceVertexNormals = env23;
      morphNormalsArrays = env24;
      customAttributes = env25;
      morphTargetsArrays = env26;
      faceArray = env27;
      geometry = env28;
      dirtyElements = env29;
      dirtyUvs = env30;
      dirtyNormals = env31;
      lineArray = env32;
      dirtyTangents = env33;
      dirtyColors = env34;
      chunk_faces3 = env35;
      chunk_faces4 = env36;
      obj_faces = env37;
      obj_uvs = env38;
      obj_uvs2 = env39;
      obj_skinVerticesA = env40;
      obj_skinVerticesB = env41;
      obj_skinIndices = env42;
      obj_skinWeights = env43;
      morphTargets = env44;
      morphNormals = env45;
      nka = env46;
      vk = env47;
      v4 = env48;
      n3 = env49;
      f = env50;
      vkl = env51;
      fl = env52;
      chf = env53;
      face = env54;
      n2 = env55;
      break;
    case 33:
      geometryGroup = env0;
      offset_morphTarget = env1;
      hint = env2;
      v1 = env3;
      material = env4;
      dispose = env5;
      n4 = env6;
      v2 = env7;
      n1 = env8;
      v3 = env9;
      normalType = env10;
      vka = env11;
      uvType = env12;
      vertexColorType = env13;
      needsSmoothNormals = env14;
      uvArray = env15;
      uv2Array = env16;
      normalArray = env17;
      tangentArray = env18;
      colorArray = env19;
      skinVertexAArray = env20;
      skinVertexBArray = env21;
      skinIndexArray = env22;
      skinWeightArray = env23;
      faceVertexNormals = env24;
      morphNormalsArrays = env25;
      customAttributes = env26;
      morphTargetsArrays = env27;
      faceArray = env28;
      geometry = env29;
      dirtyElements = env30;
      dirtyUvs = env31;
      dirtyNormals = env32;
      lineArray = env33;
      dirtyTangents = env34;
      dirtyColors = env35;
      chunk_faces3 = env36;
      chunk_faces4 = env37;
      obj_faces = env38;
      obj_uvs = env39;
      obj_uvs2 = env40;
      obj_skinVerticesA = env41;
      obj_skinVerticesB = env42;
      obj_skinIndices = env43;
      obj_skinWeights = env44;
      morphTargets = env45;
      morphNormals = env46;
      nka = env47;
      vk = env48;
      v4 = env49;
      n3 = env50;
      f = env51;
      vkl = env52;
      fl = env53;
      chf = env54;
      face = env55;
      n2 = env56;
      break;
    case 34:
      geometryGroup = env0;
      offset_morphTarget = env1;
      hint = env2;
      v1 = env3;
      material = env4;
      dispose = env5;
      n4 = env6;
      v2 = env7;
      v3 = env8;
      normalType = env9;
      vka = env10;
      uvType = env11;
      vertexColorType = env12;
      needsSmoothNormals = env13;
      t5 = env14;
      uv2Array = env15;
      normalArray = env16;
      tangentArray = env17;
      colorArray = env18;
      t6 = env19;
      uvArray = env20;
      skinIndexArray = env21;
      skinVertexAArray = env22;
      morphTargetsArrays = env23;
      t7 = env24;
      morphNormalsArrays = env25;
      skinVertexBArray = env26;
      faceArray = env27;
      skinWeightArray = env28;
      t8 = env29;
      lineArray = env30;
      customAttributes = env31;
      dirtyUvs = env32;
      dirtyElements = env33;
      t9 = env34;
      dirtyNormals = env35;
      dirtyTangents = env36;
      chunk_faces3 = env37;
      chunk_faces4 = env38;
      t10 = env39;
      obj_faces = env40;
      obj_uvs = env41;
      geometry = env42;
      t11 = env43;
      t12 = env44;
      dirtyColors = env45;
      obj_uvs2 = env46;
      obj_skinVerticesA = env47;
      obj_skinVerticesB = env48;
      obj_skinIndices = env49;
      obj_skinWeights = env50;
      morphTargets = env51;
      morphNormals = env52;
      vk = env53;
      n2 = env54;
      n1 = env55;
      faceVertexNormals = env56;
      n3 = env57;
      nka = env58;
      v4 = env59;
      f = env60;
      vkl = env61;
      fl = env62;
      chf = env63;
      face = env64;
      break;
    case 35:
      geometryGroup = env0;
      hint = env1;
      n3 = env2;
      material = env3;
      dispose = env4;
      normalType = env5;
      vertexColorType = env6;
      uvType = env7;
      f = env8;
      needsSmoothNormals = env9;
      uvArray = env10;
      uv2Array = env11;
      normalArray = env12;
      tangentArray = env13;
      colorArray = env14;
      skinVertexAArray = env15;
      skinVertexBArray = env16;
      skinIndexArray = env17;
      skinWeightArray = env18;
      morphTargetsArrays = env19;
      chf = env20;
      morphNormalsArrays = env21;
      face = env22;
      n2 = env23;
      customAttributes = env24;
      fl = env25;
      offset_morphTarget = env26;
      t1 = env27;
      n4 = env28;
      lineArray = env29;
      geometry = env30;
      dirtyNormals = env31;
      faceArray = env32;
      dirtyUvs = env33;
      chunk_faces4 = env34;
      obj_faces = env35;
      dirtyElements = env36;
      n1 = env37;
      dirtyTangents = env38;
      dirtyColors = env39;
      obj_uvs = env40;
      chunk_faces3 = env41;
      obj_uvs2 = env42;
      obj_skinVerticesA = env43;
      obj_skinVerticesB = env44;
      faceVertexNormals = env45;
      obj_skinIndices = env46;
      morphTargets = env47;
      morphNormals = env48;
      obj_skinWeights = env49;
      vk = env50;
      nka = env51;
      vkl = env52;
      break;
    case 36:
      geometryGroup = env0;
      hint = env1;
      n3 = env2;
      material = env3;
      dispose = env4;
      normalType = env5;
      vertexColorType = env6;
      uvType = env7;
      f = env8;
      needsSmoothNormals = env9;
      uvArray = env10;
      uv2Array = env11;
      normalArray = env12;
      tangentArray = env13;
      colorArray = env14;
      skinVertexAArray = env15;
      skinVertexBArray = env16;
      skinIndexArray = env17;
      skinWeightArray = env18;
      morphTargetsArrays = env19;
      chf = env20;
      morphNormalsArrays = env21;
      face = env22;
      n2 = env23;
      customAttributes = env24;
      fl = env25;
      offset_morphTarget = env26;
      n4 = env27;
      v1 = env28;
      lineArray = env29;
      geometry = env30;
      dirtyNormals = env31;
      t1 = env32;
      dirtyUvs = env33;
      chunk_faces4 = env34;
      obj_faces = env35;
      dirtyElements = env36;
      faceArray = env37;
      n1 = env38;
      dirtyTangents = env39;
      dirtyColors = env40;
      obj_uvs = env41;
      chunk_faces3 = env42;
      obj_uvs2 = env43;
      obj_skinVerticesA = env44;
      obj_skinVerticesB = env45;
      faceVertexNormals = env46;
      obj_skinIndices = env47;
      morphTargets = env48;
      morphNormals = env49;
      obj_skinWeights = env50;
      vk = env51;
      nka = env52;
      vkl = env53;
      break;
    case 37:
      geometryGroup = env0;
      hint = env1;
      n3 = env2;
      material = env3;
      dispose = env4;
      normalType = env5;
      vertexColorType = env6;
      uvType = env7;
      f = env8;
      needsSmoothNormals = env9;
      uvArray = env10;
      uv2Array = env11;
      normalArray = env12;
      tangentArray = env13;
      colorArray = env14;
      skinVertexAArray = env15;
      skinVertexBArray = env16;
      skinIndexArray = env17;
      skinWeightArray = env18;
      morphTargetsArrays = env19;
      chf = env20;
      morphNormalsArrays = env21;
      face = env22;
      n2 = env23;
      customAttributes = env24;
      fl = env25;
      offset_morphTarget = env26;
      n4 = env27;
      v1 = env28;
      lineArray = env29;
      geometry = env30;
      dirtyNormals = env31;
      faceArray = env32;
      dirtyUvs = env33;
      v2 = env34;
      chunk_faces4 = env35;
      obj_faces = env36;
      n1 = env37;
      t1 = env38;
      dirtyColors = env39;
      dirtyElements = env40;
      chunk_faces3 = env41;
      dirtyTangents = env42;
      obj_uvs = env43;
      obj_uvs2 = env44;
      obj_skinVerticesA = env45;
      obj_skinVerticesB = env46;
      faceVertexNormals = env47;
      obj_skinIndices = env48;
      morphTargets = env49;
      morphNormals = env50;
      obj_skinWeights = env51;
      vk = env52;
      nka = env53;
      vkl = env54;
      break;
    case 38:
      geometryGroup = env0;
      hint = env1;
      n3 = env2;
      material = env3;
      dispose = env4;
      normalType = env5;
      vertexColorType = env6;
      uvType = env7;
      f = env8;
      needsSmoothNormals = env9;
      uvArray = env10;
      uv2Array = env11;
      normalArray = env12;
      tangentArray = env13;
      colorArray = env14;
      skinVertexAArray = env15;
      skinVertexBArray = env16;
      skinIndexArray = env17;
      skinWeightArray = env18;
      morphTargetsArrays = env19;
      chf = env20;
      morphNormalsArrays = env21;
      face = env22;
      n2 = env23;
      customAttributes = env24;
      fl = env25;
      offset_morphTarget = env26;
      n4 = env27;
      v1 = env28;
      lineArray = env29;
      geometry = env30;
      dirtyNormals = env31;
      faceArray = env32;
      dirtyUvs = env33;
      v2 = env34;
      chunk_faces4 = env35;
      obj_faces = env36;
      n1 = env37;
      dirtyTangents = env38;
      v3 = env39;
      dirtyElements = env40;
      chunk_faces3 = env41;
      t1 = env42;
      dirtyColors = env43;
      obj_uvs = env44;
      obj_uvs2 = env45;
      obj_skinVerticesA = env46;
      obj_skinVerticesB = env47;
      faceVertexNormals = env48;
      obj_skinIndices = env49;
      morphTargets = env50;
      morphNormals = env51;
      obj_skinWeights = env52;
      vk = env53;
      nka = env54;
      vkl = env55;
      break;
    case 39:
      geometryGroup = env0;
      hint = env1;
      n3 = env2;
      material = env3;
      dispose = env4;
      normalType = env5;
      vertexColorType = env6;
      uvType = env7;
      f = env8;
      needsSmoothNormals = env9;
      uvArray = env10;
      uv2Array = env11;
      normalArray = env12;
      tangentArray = env13;
      colorArray = env14;
      skinVertexAArray = env15;
      skinVertexBArray = env16;
      skinIndexArray = env17;
      skinWeightArray = env18;
      morphTargetsArrays = env19;
      chf = env20;
      morphNormalsArrays = env21;
      face = env22;
      n2 = env23;
      customAttributes = env24;
      fl = env25;
      offset_morphTarget = env26;
      n4 = env27;
      v1 = env28;
      lineArray = env29;
      geometry = env30;
      dirtyNormals = env31;
      faceArray = env32;
      dirtyUvs = env33;
      v2 = env34;
      chunk_faces4 = env35;
      obj_faces = env36;
      n1 = env37;
      dirtyTangents = env38;
      v3 = env39;
      dirtyElements = env40;
      chunk_faces3 = env41;
      obj_uvs = env42;
      dirtyColors = env43;
      v4 = env44;
      vka = env45;
      obj_uvs2 = env46;
      obj_skinVerticesA = env47;
      obj_skinVerticesB = env48;
      faceVertexNormals = env49;
      obj_skinIndices = env50;
      morphTargets = env51;
      morphNormals = env52;
      obj_skinWeights = env53;
      vk = env54;
      nka = env55;
      vkl = env56;
      break;
    case 40:
      geometryGroup = env0;
      hint = env1;
      dispose = env2;
      material = env3;
      n2 = env4;
      n4 = env5;
      n1 = env6;
      f = env7;
      n3 = env8;
      needsSmoothNormals = env9;
      nka = env10;
      vertexColorType = env11;
      uvType = env12;
      faceVertexNormals = env13;
      normalType = env14;
      uvArray = env15;
      uv2Array = env16;
      normalArray = env17;
      tangentArray = env18;
      colorArray = env19;
      skinVertexAArray = env20;
      morphTargetsArrays = env21;
      chf = env22;
      morphNormalsArrays = env23;
      face = env24;
      skinIndexArray = env25;
      skinWeightArray = env26;
      fl = env27;
      offset_morphTarget = env28;
      customAttributes = env29;
      v1 = env30;
      lineArray = env31;
      geometry = env32;
      skinVertexBArray = env33;
      faceArray = env34;
      dirtyUvs = env35;
      v2 = env36;
      obj_faces = env37;
      dirtyElements = env38;
      chunk_faces4 = env39;
      dirtyNormals = env40;
      dirtyTangents = env41;
      v3 = env42;
      obj_uvs = env43;
      chunk_faces3 = env44;
      dirtyColors = env45;
      v4 = env46;
      vka = env47;
      obj_uvs2 = env48;
      t6 = env49;
      obj_skinVerticesA = env50;
      obj_skinVerticesB = env51;
      obj_skinIndices = env52;
      obj_skinWeights = env53;
      t7 = env54;
      morphTargets = env55;
      morphNormals = env56;
      t8 = env57;
      vk = env58;
      t9 = env59;
      t10 = env60;
      t11 = env61;
      t12 = env62;
      t13 = env63;
      t14 = env64;
      t15 = env65;
      t16 = env66;
      vkl = env67;
      break;
    case 41:
      geometryGroup = env0;
      hint = env1;
      n3 = env2;
      v4 = env3;
      material = env4;
      dispose = env5;
      vka = env6;
      normalType = env7;
      vertexColorType = env8;
      uvType = env9;
      f = env10;
      needsSmoothNormals = env11;
      uvArray = env12;
      uv2Array = env13;
      normalArray = env14;
      tangentArray = env15;
      colorArray = env16;
      skinVertexAArray = env17;
      skinVertexBArray = env18;
      skinIndexArray = env19;
      skinWeightArray = env20;
      fl = env21;
      morphTargetsArrays = env22;
      morphNormalsArrays = env23;
      faceArray = env24;
      n2 = env25;
      customAttributes = env26;
      geometry = env27;
      offset_morphTarget = env28;
      n4 = env29;
      dirtyUvs = env30;
      lineArray = env31;
      dirtyTangents = env32;
      dirtyNormals = env33;
      dirtyElements = env34;
      chunk_faces3 = env35;
      chunk_faces4 = env36;
      obj_faces = env37;
      dirtyColors = env38;
      n1 = env39;
      obj_uvs = env40;
      v1 = env41;
      t1 = env42;
      obj_uvs2 = env43;
      obj_skinVerticesA = env44;
      obj_skinVerticesB = env45;
      faceVertexNormals = env46;
      obj_skinIndices = env47;
      obj_skinWeights = env48;
      morphTargets = env49;
      morphNormals = env50;
      vk = env51;
      v3 = env52;
      v2 = env53;
      t2 = env54;
      nka = env55;
      face = env56;
      vkl = env57;
      chf = env58;
      break;
    case 42:
      geometryGroup = env0;
      hint = env1;
      n3 = env2;
      v4 = env3;
      material = env4;
      dispose = env5;
      vka = env6;
      normalType = env7;
      vertexColorType = env8;
      uvType = env9;
      f = env10;
      needsSmoothNormals = env11;
      uvArray = env12;
      uv2Array = env13;
      normalArray = env14;
      tangentArray = env15;
      colorArray = env16;
      skinVertexAArray = env17;
      skinVertexBArray = env18;
      skinIndexArray = env19;
      skinWeightArray = env20;
      fl = env21;
      morphNormalsArrays = env22;
      customAttributes = env23;
      morphTargetsArrays = env24;
      n2 = env25;
      geometry = env26;
      faceArray = env27;
      offset_morphTarget = env28;
      n4 = env29;
      dirtyUvs = env30;
      lineArray = env31;
      dirtyTangents = env32;
      dirtyNormals = env33;
      dirtyElements = env34;
      chunk_faces3 = env35;
      chunk_faces4 = env36;
      obj_faces = env37;
      dirtyColors = env38;
      n1 = env39;
      obj_uvs = env40;
      v1 = env41;
      obj_uvs2 = env42;
      t1 = env43;
      obj_skinVerticesA = env44;
      obj_skinVerticesB = env45;
      faceVertexNormals = env46;
      obj_skinIndices = env47;
      obj_skinWeights = env48;
      morphTargets = env49;
      morphNormals = env50;
      vk = env51;
      v3 = env52;
      v2 = env53;
      nka = env54;
      face = env55;
      vkl = env56;
      chf = env57;
      t2 = env58;
      break;
    case 43:
      geometryGroup = env0;
      hint = env1;
      obj_uvs2 = env2;
      dispose = env3;
      fl = env4;
      face = env5;
      vertexColors = env6;
      normalType = env7;
      uvType = env8;
      needsSmoothNormals = env9;
      t1 = env10;
      uvArray = env11;
      uv2Array = env12;
      normalArray = env13;
      tangentArray = env14;
      colorArray = env15;
      v1 = env16;
      v2 = env17;
      customAttributes = env18;
      faceArray = env19;
      lineArray = env20;
      offset_color = env21;
      geometry = env22;
      dirtyElements = env23;
      dirtyUvs = env24;
      dirtyNormals = env25;
      dirtyTangents = env26;
      chunk_faces3 = env27;
      chunk_faces4 = env28;
      obj_faces = env29;
      v3 = env30;
      v4 = env31;
      obj_uvs = env32;
      f = env33;
      break;
    case 44:
      geometryGroup = env0;
      hint = env1;
      offset_color = env2;
      obj_uvs2 = env3;
      dispose = env4;
      normalType = env5;
      uvType = env6;
      f = env7;
      t1 = env8;
      uvArray = env9;
      uv2Array = env10;
      normalArray = env11;
      tangentArray = env12;
      colorArray = env13;
      v1 = env14;
      v2 = env15;
      customAttributes = env16;
      faceArray = env17;
      lineArray = env18;
      face = env19;
      vertexColors = env20;
      dirtyElements = env21;
      geometry = env22;
      needsSmoothNormals = env23;
      dirtyNormals = env24;
      dirtyUvs = env25;
      fl = env26;
      dirtyTangents = env27;
      v4 = env28;
      chunk_faces4 = env29;
      obj_faces = env30;
      chunk_faces3 = env31;
      v3 = env32;
      obj_uvs = env33;
      break;
    case 45:
      geometryGroup = env0;
      hint = env1;
      obj_uvs2 = env2;
      dispose = env3;
      offset_tangent = env4;
      normalType = env5;
      uvType = env6;
      f = env7;
      needsSmoothNormals = env8;
      uvArray = env9;
      uv2Array = env10;
      normalArray = env11;
      tangentArray = env12;
      v1 = env13;
      v2 = env14;
      customAttributes = env15;
      faceArray = env16;
      lineArray = env17;
      face = env18;
      vertexTangents = env19;
      v4 = env20;
      dirtyUvs = env21;
      dirtyNormals = env22;
      dirtyElements = env23;
      fl = env24;
      chunk_faces3 = env25;
      chunk_faces4 = env26;
      obj_faces = env27;
      v3 = env28;
      obj_uvs = env29;
      break;
    case 46:
      geometryGroup = env0;
      hint = env1;
      obj_uvs2 = env2;
      dispose = env3;
      normalType = env4;
      uvType = env5;
      needsSmoothNormals = env6;
      uvArray = env7;
      uv2Array = env8;
      normalArray = env9;
      tangentArray = env10;
      offset_tangent = env11;
      v1 = env12;
      v2 = env13;
      customAttributes = env14;
      faceArray = env15;
      lineArray = env16;
      v4 = env17;
      dirtyElements = env18;
      f = env19;
      dirtyUvs = env20;
      dirtyNormals = env21;
      chunk_faces3 = env22;
      chunk_faces4 = env23;
      obj_faces = env24;
      v3 = env25;
      obj_uvs = env26;
      fl = env27;
      face = env28;
      vertexTangents = env29;
      break;
    case 47:
      value = env0;
      hint = env1;
      v1 = env2;
      i = env3;
      v2 = env4;
      customAttribute = env5;
      v4 = env6;
      fl = env7;
      chunk_faces3 = env8;
      face = env9;
      chunk_faces4 = env10;
      t1 = env11;
      offset_custom = env12;
      obj_faces = env13;
      v3 = env14;
      f = env15;
      break;
    case 48:
      value = env0;
      hint = env1;
      v1 = env2;
      i = env3;
      v2 = env4;
      customAttribute = env5;
      v4 = env6;
      fl = env7;
      chunk_faces3 = env8;
      face = env9;
      chunk_faces4 = env10;
      t1 = env11;
      offset_custom = env12;
      t3 = env13;
      obj_faces = env14;
      v3 = env15;
      f = env16;
      break;
    case 49:
      value = env0;
      hint = env1;
      v1 = env2;
      i = env3;
      v2 = env4;
      customAttribute = env5;
      v4 = env6;
      fl = env7;
      chunk_faces3 = env8;
      face = env9;
      chunk_faces4 = env10;
      obj_faces = env11;
      offset_custom = env12;
      t1 = env13;
      v3 = env14;
      f = env15;
      break;
    case 50:
      value = env0;
      hint = env1;
      v1 = env2;
      i = env3;
      v2 = env4;
      customAttribute = env5;
      v4 = env6;
      fl = env7;
      chunk_faces3 = env8;
      face = env9;
      chunk_faces4 = env10;
      obj_faces = env11;
      offset_custom = env12;
      t1 = env13;
      v3 = env14;
      t6 = env15;
      t7 = env16;
      f = env17;
      break;
    case 51:
      value = env0;
      t6 = env1;
      hint = env2;
      v1 = env3;
      i = env4;
      v2 = env5;
      customAttribute = env6;
      v4 = env7;
      fl = env8;
      chunk_faces3 = env9;
      face = env10;
      chunk_faces4 = env11;
      obj_faces = env12;
      offset_custom = env13;
      v3 = env14;
      f = env15;
      break;
    case 52:
      value = env0;
      t6 = env1;
      hint = env2;
      t9 = env3;
      v1 = env4;
      t10 = env5;
      i = env6;
      v2 = env7;
      customAttribute = env8;
      v4 = env9;
      fl = env10;
      chunk_faces3 = env11;
      face = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      offset_custom = env15;
      v3 = env16;
      f = env17;
      break;
    case 53:
      value = env0;
      hint = env1;
      v1 = env2;
      i = env3;
      f = env4;
      customAttribute = env5;
      v4 = env6;
      v2 = env7;
      chunk_faces4 = env8;
      obj_faces = env9;
      fl = env10;
      face = env11;
      v3 = env12;
      t1 = env13;
      offset_custom = env14;
      break;
    case 54:
      value = env0;
      hint = env1;
      v1 = env2;
      v2 = env3;
      i = env4;
      f = env5;
      customAttribute = env6;
      v4 = env7;
      chunk_faces4 = env8;
      obj_faces = env9;
      fl = env10;
      face = env11;
      v3 = env12;
      t1 = env13;
      offset_custom = env14;
      t3 = env15;
      break;
    case 55:
      t1 = env0;
      value = env1;
      hint = env2;
      v1 = env3;
      i = env4;
      f = env5;
      customAttribute = env6;
      v4 = env7;
      v2 = env8;
      chunk_faces4 = env9;
      obj_faces = env10;
      fl = env11;
      face = env12;
      v3 = env13;
      offset_custom = env14;
      break;
    case 56:
      t1 = env0;
      value = env1;
      t6 = env2;
      t7 = env3;
      i = env4;
      f = env5;
      v1 = env6;
      customAttribute = env7;
      v4 = env8;
      hint = env9;
      v2 = env10;
      chunk_faces4 = env11;
      obj_faces = env12;
      fl = env13;
      face = env14;
      v3 = env15;
      offset_custom = env16;
      break;
    case 57:
      value = env0;
      hint = env1;
      v1 = env2;
      i = env3;
      f = env4;
      customAttribute = env5;
      t6 = env6;
      v4 = env7;
      v2 = env8;
      chunk_faces4 = env9;
      obj_faces = env10;
      fl = env11;
      face = env12;
      v3 = env13;
      offset_custom = env14;
      break;
    case 58:
      value = env0;
      hint = env1;
      v1 = env2;
      i = env3;
      f = env4;
      customAttribute = env5;
      t6 = env6;
      v4 = env7;
      t9 = env8;
      t10 = env9;
      v2 = env10;
      chunk_faces4 = env11;
      obj_faces = env12;
      fl = env13;
      face = env14;
      v3 = env15;
      offset_custom = env16;
      break;
    case 59:
      value = env0;
      hint = env1;
      v1 = env2;
      i = env3;
      f = env4;
      customAttribute = env5;
      v4 = env6;
      v2 = env7;
      chunk_faces4 = env8;
      obj_faces = env9;
      t9 = env10;
      fl = env11;
      face = env12;
      v3 = env13;
      offset_custom = env14;
      break;
    case 60:
      value = env0;
      hint = env1;
      v1 = env2;
      i = env3;
      f = env4;
      customAttribute = env5;
      v4 = env6;
      v2 = env7;
      chunk_faces4 = env8;
      obj_faces = env9;
      t9 = env10;
      t12 = env11;
      fl = env12;
      t13 = env13;
      face = env14;
      v3 = env15;
      offset_custom = env16;
      break;
    case 61:
      f = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      v1 = env5;
      i = env6;
      v2 = env7;
      il = env8;
      customAttribute = env9;
      v4 = env10;
      fl = env11;
      chunk_faces3 = env12;
      t1 = env13;
      chunk_faces4 = env14;
      obj_faces = env15;
      offset_custom = env16;
      v3 = env17;
      face = env18;
      break;
    case 62:
      f = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      v1 = env5;
      i = env6;
      v2 = env7;
      il = env8;
      customAttribute = env9;
      v4 = env10;
      fl = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      value = env15;
      offset_custom = env16;
      t1 = env17;
      v3 = env18;
      face = env19;
      break;
    case 63:
      f = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      v1 = env5;
      i = env6;
      v2 = env7;
      il = env8;
      customAttribute = env9;
      v4 = env10;
      fl = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      value = env15;
      offset_custom = env16;
      t1 = env17;
      v3 = env18;
      face = env19;
      break;
    case 64:
      f = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      v1 = env5;
      i = env6;
      v2 = env7;
      il = env8;
      customAttribute = env9;
      v4 = env10;
      fl = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      value = env15;
      offset_custom = env16;
      v3 = env17;
      t1 = env18;
      face = env19;
      break;
    case 65:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      v1 = env4;
      i = env5;
      v2 = env6;
      il = env7;
      customAttribute = env8;
      v4 = env9;
      t1 = env10;
      fl = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      offset_custom = env14;
      obj_faces = env15;
      v3 = env16;
      f = env17;
      face = env18;
      break;
    case 66:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      v1 = env4;
      i = env5;
      v2 = env6;
      il = env7;
      customAttribute = env8;
      v4 = env9;
      fl = env10;
      value = env11;
      chunk_faces4 = env12;
      offset_custom = env13;
      t1 = env14;
      obj_faces = env15;
      chunk_faces3 = env16;
      v3 = env17;
      f = env18;
      face = env19;
      break;
    case 67:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      v1 = env4;
      i = env5;
      v2 = env6;
      il = env7;
      customAttribute = env8;
      v4 = env9;
      fl = env10;
      value = env11;
      chunk_faces4 = env12;
      offset_custom = env13;
      chunk_faces3 = env14;
      t1 = env15;
      obj_faces = env16;
      v3 = env17;
      f = env18;
      face = env19;
      break;
    case 68:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      v1 = env4;
      i = env5;
      v2 = env6;
      il = env7;
      customAttribute = env8;
      v4 = env9;
      fl = env10;
      value = env11;
      chunk_faces4 = env12;
      offset_custom = env13;
      chunk_faces3 = env14;
      obj_faces = env15;
      t1 = env16;
      v3 = env17;
      f = env18;
      face = env19;
      break;
    case 69:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      v1 = env4;
      i = env5;
      v2 = env6;
      il = env7;
      customAttribute = env8;
      v4 = env9;
      fl = env10;
      value = env11;
      chunk_faces4 = env12;
      offset_custom = env13;
      chunk_faces3 = env14;
      obj_faces = env15;
      v3 = env16;
      f = env17;
      t1 = env18;
      face = env19;
      break;
    case 70:
      geometryGroup = env0;
      value = env1;
      hint = env2;
      customAttributes = env3;
      t1 = env4;
      v1 = env5;
      i = env6;
      v2 = env7;
      fl = env8;
      customAttribute = env9;
      v4 = env10;
      dispose = env11;
      il = env12;
      chunk_faces3 = env13;
      chunk_faces4 = env14;
      obj_faces = env15;
      v3 = env16;
      f = env17;
      face = env18;
      break;
    case 71:
      geometryGroup = env0;
      value = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      i = env5;
      f = env6;
      il = env7;
      customAttribute = env8;
      v4 = env9;
      chunk_faces3 = env10;
      chunk_faces4 = env11;
      obj_faces = env12;
      fl = env13;
      face = env14;
      t1 = env15;
      offset_custom = env16;
      break;
    case 72:
      geometryGroup = env0;
      value = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      i = env5;
      f = env6;
      il = env7;
      customAttribute = env8;
      v4 = env9;
      chunk_faces3 = env10;
      chunk_faces4 = env11;
      obj_faces = env12;
      fl = env13;
      face = env14;
      offset_custom = env15;
      v1 = env16;
      t1 = env17;
      break;
    case 73:
      v2 = env0;
      value = env1;
      t1 = env2;
      hint = env3;
      customAttributes = env4;
      i = env5;
      f = env6;
      il = env7;
      customAttribute = env8;
      geometryGroup = env9;
      v4 = env10;
      dispose = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      fl = env15;
      face = env16;
      offset_custom = env17;
      v1 = env18;
      break;
    case 74:
      v2 = env0;
      value = env1;
      hint = env2;
      geometryGroup = env3;
      v3 = env4;
      i = env5;
      t1 = env6;
      f = env7;
      customAttribute = env8;
      v4 = env9;
      customAttributes = env10;
      il = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      dispose = env15;
      fl = env16;
      face = env17;
      offset_custom = env18;
      v1 = env19;
      break;
    case 75:
      v2 = env0;
      value = env1;
      hint = env2;
      geometryGroup = env3;
      v3 = env4;
      i = env5;
      f = env6;
      il = env7;
      customAttribute = env8;
      t1 = env9;
      v4 = env10;
      customAttributes = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      dispose = env15;
      fl = env16;
      face = env17;
      offset_custom = env18;
      v1 = env19;
      break;
    case 76:
      v2 = env0;
      value = env1;
      hint = env2;
      geometryGroup = env3;
      v3 = env4;
      i = env5;
      f = env6;
      il = env7;
      customAttribute = env8;
      v4 = env9;
      customAttributes = env10;
      chunk_faces3 = env11;
      t1 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      fl = env15;
      face = env16;
      offset_custom = env17;
      v1 = env18;
      dispose = env19;
      break;
    case 77:
      v2 = env0;
      value = env1;
      hint = env2;
      geometryGroup = env3;
      v3 = env4;
      i = env5;
      f = env6;
      il = env7;
      customAttribute = env8;
      v4 = env9;
      customAttributes = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      dispose = env14;
      fl = env15;
      t1 = env16;
      face = env17;
      offset_custom = env18;
      v1 = env19;
      break;
    case 78:
      v2 = env0;
      value = env1;
      hint = env2;
      geometryGroup = env3;
      v3 = env4;
      i = env5;
      f = env6;
      il = env7;
      customAttribute = env8;
      v4 = env9;
      customAttributes = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      dispose = env14;
      fl = env15;
      face = env16;
      offset_custom = env17;
      v1 = env18;
      t1 = env19;
      break;
    case 79:
      v2 = env0;
      value = env1;
      t1 = env2;
      hint = env3;
      v3 = env4;
      i = env5;
      f = env6;
      il = env7;
      customAttribute = env8;
      geometryGroup = env9;
      v4 = env10;
      customAttributes = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      dispose = env15;
      fl = env16;
      face = env17;
      offset_custom = env18;
      v1 = env19;
      break;
    case 80:
      geometryGroup = env0;
      value = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      i = env5;
      f = env6;
      il = env7;
      customAttribute = env8;
      chunk_faces3 = env9;
      chunk_faces4 = env10;
      obj_faces = env11;
      fl = env12;
      face = env13;
      t1 = env14;
      offset_custom = env15;
      break;
    case 81:
      geometryGroup = env0;
      value = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      i = env5;
      f = env6;
      il = env7;
      customAttribute = env8;
      chunk_faces3 = env9;
      chunk_faces4 = env10;
      obj_faces = env11;
      fl = env12;
      face = env13;
      offset_custom = env14;
      v1 = env15;
      t1 = env16;
      break;
    case 82:
      v2 = env0;
      value = env1;
      t1 = env2;
      hint = env3;
      customAttributes = env4;
      i = env5;
      f = env6;
      il = env7;
      customAttribute = env8;
      geometryGroup = env9;
      dispose = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      fl = env14;
      face = env15;
      offset_custom = env16;
      v1 = env17;
      break;
    case 83:
      v2 = env0;
      value = env1;
      hint = env2;
      geometryGroup = env3;
      v3 = env4;
      i = env5;
      t1 = env6;
      f = env7;
      customAttribute = env8;
      il = env9;
      customAttributes = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      dispose = env14;
      fl = env15;
      face = env16;
      offset_custom = env17;
      v1 = env18;
      break;
    case 84:
      v2 = env0;
      value = env1;
      hint = env2;
      geometryGroup = env3;
      v3 = env4;
      i = env5;
      f = env6;
      v4 = env7;
      customAttribute = env8;
      t1 = env9;
      il = env10;
      customAttributes = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      dispose = env15;
      fl = env16;
      face = env17;
      offset_custom = env18;
      v1 = env19;
      break;
    case 85:
      v2 = env0;
      value = env1;
      hint = env2;
      geometryGroup = env3;
      v3 = env4;
      i = env5;
      f = env6;
      v4 = env7;
      customAttribute = env8;
      il = env9;
      customAttributes = env10;
      t1 = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      dispose = env15;
      fl = env16;
      face = env17;
      offset_custom = env18;
      v1 = env19;
      break;
    case 86:
      v2 = env0;
      value = env1;
      hint = env2;
      geometryGroup = env3;
      v3 = env4;
      i = env5;
      f = env6;
      v4 = env7;
      customAttribute = env8;
      il = env9;
      customAttributes = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      dispose = env14;
      t1 = env15;
      fl = env16;
      face = env17;
      offset_custom = env18;
      v1 = env19;
      break;
    case 87:
      v2 = env0;
      value = env1;
      hint = env2;
      geometryGroup = env3;
      v3 = env4;
      i = env5;
      f = env6;
      v4 = env7;
      customAttribute = env8;
      il = env9;
      customAttributes = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      dispose = env14;
      fl = env15;
      face = env16;
      t1 = env17;
      offset_custom = env18;
      v1 = env19;
      break;
    case 88:
      v2 = env0;
      t1 = env1;
      value = env2;
      hint = env3;
      v3 = env4;
      i = env5;
      f = env6;
      v4 = env7;
      customAttribute = env8;
      geometryGroup = env9;
      il = env10;
      customAttributes = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      dispose = env15;
      fl = env16;
      face = env17;
      offset_custom = env18;
      v1 = env19;
      break;
    case 89:
      v2 = env0;
      value = env1;
      hint = env2;
      geometryGroup = env3;
      v3 = env4;
      t1 = env5;
      f = env6;
      v4 = env7;
      customAttribute = env8;
      il = env9;
      i = env10;
      customAttributes = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      dispose = env15;
      fl = env16;
      face = env17;
      offset_custom = env18;
      v1 = env19;
      break;
    case 90:
      v2 = env0;
      value = env1;
      hint = env2;
      geometryGroup = env3;
      v3 = env4;
      i = env5;
      f = env6;
      v4 = env7;
      customAttribute = env8;
      il = env9;
      t1 = env10;
      customAttributes = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      dispose = env15;
      fl = env16;
      face = env17;
      offset_custom = env18;
      v1 = env19;
      break;
    case 91:
      v2 = env0;
      value = env1;
      hint = env2;
      geometryGroup = env3;
      v3 = env4;
      i = env5;
      f = env6;
      v4 = env7;
      customAttribute = env8;
      il = env9;
      customAttributes = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      t1 = env14;
      fl = env15;
      face = env16;
      offset_custom = env17;
      v1 = env18;
      dispose = env19;
      break;
    case 92:
      chunk_faces3 = env0;
      chunk_faces4 = env1;
      hint = env2;
      offset_custom = env3;
      face = env4;
      i = env5;
      customAttribute = env6;
      v4 = env7;
      fl = env8;
      t1 = env9;
      f = env10;
      break;
    case 93:
      hint = env0;
      i = env1;
      customAttribute = env2;
      v4 = env3;
      fl = env4;
      chunk_faces3 = env5;
      chunk_faces4 = env6;
      value = env7;
      offset_custom = env8;
      t1 = env9;
      face = env10;
      f = env11;
      break;
    case 94:
      hint = env0;
      i = env1;
      customAttribute = env2;
      v4 = env3;
      fl = env4;
      chunk_faces3 = env5;
      chunk_faces4 = env6;
      value = env7;
      offset_custom = env8;
      t1 = env9;
      face = env10;
      f = env11;
      break;
    case 95:
      hint = env0;
      i = env1;
      customAttribute = env2;
      v4 = env3;
      fl = env4;
      chunk_faces3 = env5;
      chunk_faces4 = env6;
      value = env7;
      offset_custom = env8;
      t1 = env9;
      face = env10;
      f = env11;
      break;
    case 96:
      hint = env0;
      t1 = env1;
      i = env2;
      customAttribute = env3;
      v4 = env4;
      fl = env5;
      chunk_faces3 = env6;
      chunk_faces4 = env7;
      value = env8;
      offset_custom = env9;
      face = env10;
      f = env11;
      break;
    case 97:
      hint = env0;
      i = env1;
      customAttribute = env2;
      t1 = env3;
      v4 = env4;
      fl = env5;
      chunk_faces3 = env6;
      chunk_faces4 = env7;
      value = env8;
      offset_custom = env9;
      face = env10;
      f = env11;
      break;
    case 98:
      hint = env0;
      i = env1;
      customAttribute = env2;
      v4 = env3;
      fl = env4;
      chunk_faces3 = env5;
      chunk_faces4 = env6;
      value = env7;
      t1 = env8;
      offset_custom = env9;
      face = env10;
      f = env11;
      break;
    case 99:
      chunk_faces4 = env0;
      hint = env1;
      t1 = env2;
      f = env3;
      fl = env4;
      i = env5;
      offset_custom = env6;
      customAttribute = env7;
      face = env8;
      break;
    case 100:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      f = env3;
      value = env4;
      i = env5;
      offset_custom = env6;
      customAttribute = env7;
      t1 = env8;
      face = env9;
      break;
    case 101:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      f = env3;
      value = env4;
      i = env5;
      offset_custom = env6;
      customAttribute = env7;
      t1 = env8;
      face = env9;
      break;
    case 102:
      chunk_faces4 = env0;
      t1 = env1;
      hint = env2;
      f = env3;
      fl = env4;
      value = env5;
      i = env6;
      offset_custom = env7;
      customAttribute = env8;
      face = env9;
      break;
    case 103:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      f = env3;
      value = env4;
      i = env5;
      offset_custom = env6;
      customAttribute = env7;
      t1 = env8;
      face = env9;
      break;
    case 104:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      f = env3;
      value = env4;
      i = env5;
      offset_custom = env6;
      customAttribute = env7;
      t1 = env8;
      face = env9;
      break;
    case 105:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      f = env3;
      t1 = env4;
      value = env5;
      i = env6;
      offset_custom = env7;
      customAttribute = env8;
      face = env9;
      break;
    case 106:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      f = env3;
      value = env4;
      i = env5;
      offset_custom = env6;
      customAttribute = env7;
      t1 = env8;
      face = env9;
      break;
    case 107:
      t1 = env0;
      chunk_faces4 = env1;
      hint = env2;
      fl = env3;
      f = env4;
      value = env5;
      i = env6;
      offset_custom = env7;
      customAttribute = env8;
      face = env9;
      break;
    case 108:
      geometryGroup = env0;
      value = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      v1 = env5;
      i = env6;
      v2 = env7;
      fl = env8;
      customAttribute = env9;
      pp = env10;
      v4 = env11;
      t1 = env12;
      il = env13;
      chunk_faces3 = env14;
      chunk_faces4 = env15;
      obj_faces = env16;
      v3 = env17;
      f = env18;
      face = env19;
      break;
    case 109:
      value = env0;
      face = env1;
      hint = env2;
      t1 = env3;
      offset_custom = env4;
      i = env5;
      customAttribute = env6;
      pp = env7;
      v4 = env8;
      chunk_faces3 = env9;
      chunk_faces4 = env10;
      f = env11;
      obj_faces = env12;
      fl = env13;
      break;
    case 110:
      value = env0;
      face = env1;
      hint = env2;
      offset_custom = env3;
      v1 = env4;
      i = env5;
      customAttribute = env6;
      pp = env7;
      v4 = env8;
      chunk_faces3 = env9;
      chunk_faces4 = env10;
      f = env11;
      obj_faces = env12;
      fl = env13;
      break;
    case 111:
      value = env0;
      face = env1;
      hint = env2;
      offset_custom = env3;
      v1 = env4;
      i = env5;
      t3 = env6;
      customAttribute = env7;
      pp = env8;
      v4 = env9;
      chunk_faces3 = env10;
      chunk_faces4 = env11;
      f = env12;
      obj_faces = env13;
      fl = env14;
      break;
    case 112:
      value = env0;
      face = env1;
      hint = env2;
      offset_custom = env3;
      v1 = env4;
      i = env5;
      customAttribute = env6;
      v2 = env7;
      pp = env8;
      v4 = env9;
      chunk_faces3 = env10;
      chunk_faces4 = env11;
      f = env12;
      obj_faces = env13;
      fl = env14;
      break;
    case 113:
      value = env0;
      face = env1;
      hint = env2;
      offset_custom = env3;
      v1 = env4;
      i = env5;
      customAttribute = env6;
      v2 = env7;
      pp = env8;
      t5 = env9;
      v4 = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      f = env13;
      obj_faces = env14;
      fl = env15;
      break;
    case 114:
      value = env0;
      face = env1;
      hint = env2;
      offset_custom = env3;
      v1 = env4;
      i = env5;
      customAttribute = env6;
      v2 = env7;
      pp = env8;
      v4 = env9;
      v3 = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      f = env13;
      obj_faces = env14;
      fl = env15;
      break;
    case 115:
      value = env0;
      face = env1;
      hint = env2;
      offset_custom = env3;
      v1 = env4;
      i = env5;
      customAttribute = env6;
      v2 = env7;
      pp = env8;
      v4 = env9;
      v3 = env10;
      chunk_faces3 = env11;
      t7 = env12;
      f = env13;
      obj_faces = env14;
      chunk_faces4 = env15;
      fl = env16;
      break;
    case 116:
      value = env0;
      face = env1;
      hint = env2;
      offset_custom = env3;
      v1 = env4;
      i = env5;
      customAttribute = env6;
      v2 = env7;
      pp = env8;
      v4 = env9;
      v3 = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      f = env13;
      obj_faces = env14;
      t7 = env15;
      fl = env16;
      break;
    case 117:
      t10 = env0;
      value = env1;
      face = env2;
      hint = env3;
      offset_custom = env4;
      v1 = env5;
      i = env6;
      customAttribute = env7;
      v2 = env8;
      pp = env9;
      v4 = env10;
      v3 = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      f = env14;
      obj_faces = env15;
      fl = env16;
      break;
    case 118:
      value = env0;
      face = env1;
      hint = env2;
      offset_custom = env3;
      v1 = env4;
      i = env5;
      customAttribute = env6;
      v2 = env7;
      pp = env8;
      t11 = env9;
      v3 = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      f = env13;
      obj_faces = env14;
      v4 = env15;
      fl = env16;
      break;
    case 119:
      value = env0;
      face = env1;
      hint = env2;
      offset_custom = env3;
      v1 = env4;
      i = env5;
      customAttribute = env6;
      v2 = env7;
      pp = env8;
      v4 = env9;
      v3 = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      f = env13;
      t12 = env14;
      obj_faces = env15;
      fl = env16;
      break;
    case 120:
      value = env0;
      face = env1;
      hint = env2;
      offset_custom = env3;
      v1 = env4;
      i = env5;
      customAttribute = env6;
      v2 = env7;
      pp = env8;
      v4 = env9;
      v3 = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      f = env13;
      obj_faces = env14;
      t13 = env15;
      fl = env16;
      break;
    case 121:
      value = env0;
      face = env1;
      hint = env2;
      t14 = env3;
      offset_custom = env4;
      v1 = env5;
      i = env6;
      customAttribute = env7;
      v2 = env8;
      pp = env9;
      v4 = env10;
      v3 = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      f = env14;
      obj_faces = env15;
      fl = env16;
      break;
    case 122:
      value = env0;
      face = env1;
      hint = env2;
      offset_custom = env3;
      v1 = env4;
      i = env5;
      customAttribute = env6;
      v2 = env7;
      pp = env8;
      v4 = env9;
      t15 = env10;
      v3 = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      f = env14;
      obj_faces = env15;
      fl = env16;
      break;
    case 123:
      value = env0;
      face = env1;
      hint = env2;
      offset_custom = env3;
      v1 = env4;
      i = env5;
      customAttribute = env6;
      v2 = env7;
      pp = env8;
      v4 = env9;
      v3 = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      f = env13;
      obj_faces = env14;
      t16 = env15;
      fl = env16;
      break;
    case 124:
      geometryGroup = env0;
      value = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      i = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      fl = env9;
      chunk_faces3 = env10;
      face = env11;
      chunk_faces4 = env12;
      t1 = env13;
      offset_custom = env14;
      obj_faces = env15;
      f = env16;
      break;
    case 125:
      geometryGroup = env0;
      value = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      i = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      fl = env9;
      chunk_faces3 = env10;
      face = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      offset_custom = env14;
      v1 = env15;
      f = env16;
      break;
    case 126:
      geometryGroup = env0;
      value = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      i = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      fl = env9;
      chunk_faces3 = env10;
      face = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      offset_custom = env14;
      v1 = env15;
      t3 = env16;
      f = env17;
      break;
    case 127:
      geometryGroup = env0;
      value = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      i = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      fl = env9;
      chunk_faces3 = env10;
      face = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      offset_custom = env14;
      v1 = env15;
      v2 = env16;
      f = env17;
      break;
    case 128:
      geometryGroup = env0;
      value = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      i = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      fl = env9;
      chunk_faces3 = env10;
      face = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      offset_custom = env14;
      v1 = env15;
      v2 = env16;
      t5 = env17;
      f = env18;
      break;
    case 129:
      geometryGroup = env0;
      value = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      i = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      fl = env9;
      chunk_faces3 = env10;
      face = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      offset_custom = env14;
      v1 = env15;
      v2 = env16;
      v3 = env17;
      f = env18;
      break;
    case 130:
      geometryGroup = env0;
      value = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      i = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      fl = env9;
      chunk_faces3 = env10;
      face = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      offset_custom = env14;
      v1 = env15;
      v2 = env16;
      v3 = env17;
      t7 = env18;
      f = env19;
      break;
    case 131:
      v4 = env0;
      value = env1;
      hint = env2;
      geometryGroup = env3;
      customAttributes = env4;
      i = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      fl = env9;
      dispose = env10;
      chunk_faces3 = env11;
      face = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      offset_custom = env15;
      v1 = env16;
      v2 = env17;
      v3 = env18;
      f = env19;
      break;
    case 132:
      v4 = env0;
      value = env1;
      t9 = env2;
      hint = env3;
      customAttributes = env4;
      i = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      fl = env9;
      dispose = env10;
      geometryGroup = env11;
      face = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      offset_custom = env15;
      v1 = env16;
      chunk_faces3 = env17;
      v2 = env18;
      v3 = env19;
      f = env20;
      break;
    case 133:
      v4 = env0;
      value = env1;
      hint = env2;
      geometryGroup = env3;
      customAttributes = env4;
      i = env5;
      dispose = env6;
      il = env7;
      customAttribute = env8;
      pp = env9;
      t9 = env10;
      fl = env11;
      chunk_faces3 = env12;
      face = env13;
      chunk_faces4 = env14;
      obj_faces = env15;
      offset_custom = env16;
      v1 = env17;
      v2 = env18;
      v3 = env19;
      f = env20;
      break;
    case 134:
      v4 = env0;
      value = env1;
      hint = env2;
      geometryGroup = env3;
      customAttributes = env4;
      i = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      fl = env9;
      dispose = env10;
      chunk_faces3 = env11;
      face = env12;
      chunk_faces4 = env13;
      t12 = env14;
      offset_custom = env15;
      v1 = env16;
      obj_faces = env17;
      v2 = env18;
      v3 = env19;
      f = env20;
      break;
    case 135:
      v4 = env0;
      value = env1;
      hint = env2;
      geometryGroup = env3;
      customAttributes = env4;
      i = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      fl = env9;
      dispose = env10;
      chunk_faces3 = env11;
      face = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      offset_custom = env15;
      v1 = env16;
      v2 = env17;
      t13 = env18;
      v3 = env19;
      f = env20;
      break;
    case 136:
      v4 = env0;
      value = env1;
      hint = env2;
      geometryGroup = env3;
      t14 = env4;
      i = env5;
      dispose = env6;
      il = env7;
      customAttribute = env8;
      pp = env9;
      fl = env10;
      customAttributes = env11;
      chunk_faces3 = env12;
      face = env13;
      chunk_faces4 = env14;
      obj_faces = env15;
      offset_custom = env16;
      v1 = env17;
      v2 = env18;
      v3 = env19;
      f = env20;
      break;
    case 137:
      v4 = env0;
      value = env1;
      hint = env2;
      geometryGroup = env3;
      customAttributes = env4;
      i = env5;
      dispose = env6;
      il = env7;
      customAttribute = env8;
      pp = env9;
      fl = env10;
      t15 = env11;
      chunk_faces3 = env12;
      face = env13;
      chunk_faces4 = env14;
      obj_faces = env15;
      offset_custom = env16;
      v1 = env17;
      v2 = env18;
      v3 = env19;
      f = env20;
      break;
    case 138:
      v4 = env0;
      value = env1;
      hint = env2;
      geometryGroup = env3;
      customAttributes = env4;
      i = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      fl = env9;
      dispose = env10;
      chunk_faces3 = env11;
      face = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      offset_custom = env15;
      v1 = env16;
      t16 = env17;
      v2 = env18;
      v3 = env19;
      f = env20;
      break;
    case 139:
      v4 = env0;
      value = env1;
      f = env2;
      hint = env3;
      customAttributes = env4;
      i = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      fl = env9;
      dispose = env10;
      geometryGroup = env11;
      face = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      offset_custom = env15;
      v1 = env16;
      chunk_faces3 = env17;
      v2 = env18;
      v3 = env19;
      t17 = env20;
      break;
    case 140:
      v4 = env0;
      value = env1;
      hint = env2;
      geometryGroup = env3;
      customAttributes = env4;
      i = env5;
      t18 = env6;
      customAttribute = env7;
      pp = env8;
      il = env9;
      fl = env10;
      dispose = env11;
      chunk_faces3 = env12;
      face = env13;
      chunk_faces4 = env14;
      obj_faces = env15;
      offset_custom = env16;
      v1 = env17;
      v2 = env18;
      v3 = env19;
      f = env20;
      break;
    case 141:
      v4 = env0;
      value = env1;
      hint = env2;
      geometryGroup = env3;
      customAttributes = env4;
      i = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      fl = env9;
      dispose = env10;
      chunk_faces3 = env11;
      face = env12;
      t19 = env13;
      obj_faces = env14;
      offset_custom = env15;
      v1 = env16;
      chunk_faces4 = env17;
      v2 = env18;
      v3 = env19;
      f = env20;
      break;
    case 142:
      v4 = env0;
      value = env1;
      hint = env2;
      geometryGroup = env3;
      customAttributes = env4;
      i = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      fl = env9;
      dispose = env10;
      chunk_faces3 = env11;
      face = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      offset_custom = env15;
      v1 = env16;
      v2 = env17;
      t20 = env18;
      v3 = env19;
      f = env20;
      break;
    case 143:
      v4 = env0;
      value = env1;
      hint = env2;
      t21 = env3;
      customAttributes = env4;
      i = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      fl = env9;
      dispose = env10;
      geometryGroup = env11;
      face = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      offset_custom = env15;
      v1 = env16;
      chunk_faces3 = env17;
      v2 = env18;
      v3 = env19;
      f = env20;
      break;
    case 144:
      fl = env0;
      hint = env1;
      t1 = env2;
      i = env3;
      offset_custom = env4;
      customAttribute = env5;
      pp = env6;
      v4 = env7;
      chunk_faces3 = env8;
      chunk_faces4 = env9;
      f = env10;
      face = env11;
      break;
    case 145:
      fl = env0;
      hint = env1;
      value = env2;
      i = env3;
      offset_custom = env4;
      customAttribute = env5;
      pp = env6;
      v4 = env7;
      chunk_faces3 = env8;
      chunk_faces4 = env9;
      f = env10;
      face = env11;
      break;
    case 146:
      fl = env0;
      hint = env1;
      value = env2;
      i = env3;
      offset_custom = env4;
      customAttribute = env5;
      pp = env6;
      t3 = env7;
      v4 = env8;
      chunk_faces3 = env9;
      chunk_faces4 = env10;
      f = env11;
      face = env12;
      break;
    case 147:
      fl = env0;
      hint = env1;
      value = env2;
      i = env3;
      offset_custom = env4;
      customAttribute = env5;
      pp = env6;
      v4 = env7;
      t3 = env8;
      chunk_faces3 = env9;
      chunk_faces4 = env10;
      f = env11;
      face = env12;
      break;
    case 148:
      fl = env0;
      hint = env1;
      value = env2;
      i = env3;
      offset_custom = env4;
      customAttribute = env5;
      pp = env6;
      v4 = env7;
      chunk_faces3 = env8;
      chunk_faces4 = env9;
      f = env10;
      t6 = env11;
      face = env12;
      break;
    case 149:
      t7 = env0;
      hint = env1;
      fl = env2;
      value = env3;
      i = env4;
      offset_custom = env5;
      customAttribute = env6;
      pp = env7;
      v4 = env8;
      chunk_faces3 = env9;
      chunk_faces4 = env10;
      f = env11;
      face = env12;
      break;
    case 150:
      fl = env0;
      hint = env1;
      value = env2;
      i = env3;
      offset_custom = env4;
      customAttribute = env5;
      pp = env6;
      t8 = env7;
      v4 = env8;
      chunk_faces3 = env9;
      chunk_faces4 = env10;
      f = env11;
      face = env12;
      break;
    case 151:
      fl = env0;
      hint = env1;
      value = env2;
      i = env3;
      offset_custom = env4;
      customAttribute = env5;
      pp = env6;
      v4 = env7;
      chunk_faces3 = env8;
      chunk_faces4 = env9;
      t9 = env10;
      f = env11;
      face = env12;
      break;
    case 152:
      fl = env0;
      hint = env1;
      value = env2;
      i = env3;
      offset_custom = env4;
      customAttribute = env5;
      pp = env6;
      v4 = env7;
      chunk_faces3 = env8;
      chunk_faces4 = env9;
      f = env10;
      t10 = env11;
      face = env12;
      break;
    case 153:
      fl = env0;
      hint = env1;
      t11 = env2;
      value = env3;
      i = env4;
      offset_custom = env5;
      customAttribute = env6;
      pp = env7;
      v4 = env8;
      chunk_faces3 = env9;
      chunk_faces4 = env10;
      f = env11;
      face = env12;
      break;
    case 154:
      fl = env0;
      hint = env1;
      value = env2;
      i = env3;
      offset_custom = env4;
      customAttribute = env5;
      pp = env6;
      v4 = env7;
      t12 = env8;
      chunk_faces3 = env9;
      chunk_faces4 = env10;
      f = env11;
      face = env12;
      break;
    case 155:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      t1 = env3;
      f = env4;
      customAttribute = env5;
      pp = env6;
      offset_custom = env7;
      i = env8;
      face = env9;
      break;
    case 156:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      i = env3;
      f = env4;
      value = env5;
      pp = env6;
      offset_custom = env7;
      customAttribute = env8;
      face = env9;
      break;
    case 157:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      i = env3;
      f = env4;
      value = env5;
      pp = env6;
      offset_custom = env7;
      customAttribute = env8;
      t3 = env9;
      face = env10;
      break;
    case 158:
      chunk_faces4 = env0;
      t3 = env1;
      hint = env2;
      fl = env3;
      i = env4;
      f = env5;
      value = env6;
      pp = env7;
      offset_custom = env8;
      customAttribute = env9;
      face = env10;
      break;
    case 159:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      i = env3;
      f = env4;
      value = env5;
      pp = env6;
      offset_custom = env7;
      customAttribute = env8;
      t6 = env9;
      face = env10;
      break;
    case 160:
      chunk_faces4 = env0;
      hint = env1;
      t7 = env2;
      fl = env3;
      i = env4;
      f = env5;
      value = env6;
      pp = env7;
      offset_custom = env8;
      customAttribute = env9;
      face = env10;
      break;
    case 161:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      i = env3;
      f = env4;
      value = env5;
      pp = env6;
      offset_custom = env7;
      customAttribute = env8;
      t8 = env9;
      face = env10;
      break;
    case 162:
      i = env0;
      chunk_faces4 = env1;
      hint = env2;
      fl = env3;
      t9 = env4;
      f = env5;
      value = env6;
      pp = env7;
      offset_custom = env8;
      customAttribute = env9;
      face = env10;
      break;
    case 163:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      i = env3;
      f = env4;
      value = env5;
      pp = env6;
      offset_custom = env7;
      customAttribute = env8;
      face = env9;
      t10 = env10;
      break;
    case 164:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      i = env3;
      f = env4;
      t11 = env5;
      value = env6;
      pp = env7;
      offset_custom = env8;
      customAttribute = env9;
      face = env10;
      break;
    case 165:
      chunk_faces4 = env0;
      t12 = env1;
      hint = env2;
      fl = env3;
      i = env4;
      f = env5;
      value = env6;
      pp = env7;
      offset_custom = env8;
      customAttribute = env9;
      face = env10;
      break;
    case 166:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      i = env3;
      f = env4;
      value = env5;
      pp = env6;
      offset_custom = env7;
      customAttribute = env8;
      t13 = env9;
      face = env10;
      break;
    case 167:
      chunk_faces4 = env0;
      hint = env1;
      t14 = env2;
      fl = env3;
      i = env4;
      f = env5;
      value = env6;
      pp = env7;
      offset_custom = env8;
      customAttribute = env9;
      face = env10;
      break;
    case 168:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      i = env3;
      f = env4;
      value = env5;
      pp = env6;
      offset_custom = env7;
      t15 = env8;
      face = env9;
      customAttribute = env10;
      break;
    case 169:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      i = env4;
      il = env5;
      customAttribute = env6;
      pp = env7;
      v4 = env8;
      fl = env9;
      t1 = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      offset_custom = env14;
      f = env15;
      face = env16;
      break;
    case 170:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      i = env4;
      il = env5;
      customAttribute = env6;
      pp = env7;
      v4 = env8;
      fl = env9;
      chunk_faces3 = env10;
      value = env11;
      chunk_faces4 = env12;
      offset_custom = env13;
      obj_faces = env14;
      f = env15;
      face = env16;
      break;
    case 171:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      i = env4;
      il = env5;
      customAttribute = env6;
      pp = env7;
      v4 = env8;
      fl = env9;
      chunk_faces3 = env10;
      value = env11;
      chunk_faces4 = env12;
      v1 = env13;
      offset_custom = env14;
      obj_faces = env15;
      f = env16;
      face = env17;
      break;
    case 172:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      i = env4;
      il = env5;
      customAttribute = env6;
      pp = env7;
      v4 = env8;
      fl = env9;
      chunk_faces3 = env10;
      value = env11;
      chunk_faces4 = env12;
      v1 = env13;
      offset_custom = env14;
      v2 = env15;
      obj_faces = env16;
      f = env17;
      face = env18;
      break;
    case 173:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      i = env4;
      il = env5;
      customAttribute = env6;
      pp = env7;
      v4 = env8;
      fl = env9;
      chunk_faces3 = env10;
      value = env11;
      chunk_faces4 = env12;
      v1 = env13;
      offset_custom = env14;
      v2 = env15;
      v3 = env16;
      obj_faces = env17;
      f = env18;
      face = env19;
      break;
    case 174:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      i = env4;
      il = env5;
      customAttribute = env6;
      pp = env7;
      v4 = env8;
      fl = env9;
      chunk_faces3 = env10;
      value = env11;
      chunk_faces4 = env12;
      v1 = env13;
      offset_custom = env14;
      v2 = env15;
      v3 = env16;
      obj_faces = env17;
      t6 = env18;
      f = env19;
      face = env20;
      break;
    case 175:
      geometryGroup = env0;
      face = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      i = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      v4 = env9;
      fl = env10;
      chunk_faces3 = env11;
      value = env12;
      chunk_faces4 = env13;
      v1 = env14;
      offset_custom = env15;
      v2 = env16;
      v3 = env17;
      obj_faces = env18;
      f = env19;
      t6 = env20;
      break;
    case 176:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      i = env4;
      t9 = env5;
      customAttribute = env6;
      pp = env7;
      v4 = env8;
      fl = env9;
      il = env10;
      chunk_faces3 = env11;
      value = env12;
      chunk_faces4 = env13;
      v1 = env14;
      offset_custom = env15;
      v2 = env16;
      v3 = env17;
      obj_faces = env18;
      f = env19;
      face = env20;
      break;
    case 177:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      i = env4;
      il = env5;
      customAttribute = env6;
      pp = env7;
      v4 = env8;
      fl = env9;
      chunk_faces3 = env10;
      value = env11;
      t10 = env12;
      v1 = env13;
      offset_custom = env14;
      v2 = env15;
      v3 = env16;
      obj_faces = env17;
      chunk_faces4 = env18;
      f = env19;
      face = env20;
      break;
    case 178:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      i = env4;
      il = env5;
      customAttribute = env6;
      pp = env7;
      v4 = env8;
      fl = env9;
      chunk_faces3 = env10;
      value = env11;
      chunk_faces4 = env12;
      v1 = env13;
      offset_custom = env14;
      v2 = env15;
      v3 = env16;
      obj_faces = env17;
      t11 = env18;
      f = env19;
      face = env20;
      break;
    case 179:
      geometryGroup = env0;
      hint = env1;
      t12 = env2;
      customAttributes = env3;
      i = env4;
      il = env5;
      customAttribute = env6;
      pp = env7;
      v4 = env8;
      fl = env9;
      dispose = env10;
      chunk_faces3 = env11;
      value = env12;
      chunk_faces4 = env13;
      v1 = env14;
      offset_custom = env15;
      v2 = env16;
      v3 = env17;
      obj_faces = env18;
      f = env19;
      face = env20;
      break;
    case 180:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      i = env4;
      il = env5;
      customAttribute = env6;
      pp = env7;
      v4 = env8;
      t13 = env9;
      fl = env10;
      chunk_faces3 = env11;
      value = env12;
      chunk_faces4 = env13;
      v1 = env14;
      offset_custom = env15;
      v2 = env16;
      v3 = env17;
      obj_faces = env18;
      f = env19;
      face = env20;
      break;
    case 181:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      i = env4;
      il = env5;
      customAttribute = env6;
      pp = env7;
      v4 = env8;
      fl = env9;
      chunk_faces3 = env10;
      value = env11;
      chunk_faces4 = env12;
      v1 = env13;
      offset_custom = env14;
      v2 = env15;
      t14 = env16;
      v3 = env17;
      obj_faces = env18;
      f = env19;
      face = env20;
      break;
    case 182:
      geometryGroup = env0;
      face = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      i = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      v4 = env9;
      fl = env10;
      chunk_faces3 = env11;
      value = env12;
      chunk_faces4 = env13;
      v1 = env14;
      offset_custom = env15;
      v2 = env16;
      v3 = env17;
      obj_faces = env18;
      f = env19;
      t15 = env20;
      break;
    case 183:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      i = env4;
      f = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      chunk_faces3 = env9;
      chunk_faces4 = env10;
      obj_faces = env11;
      fl = env12;
      t1 = env13;
      offset_custom = env14;
      face = env15;
      break;
    case 184:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      i = env4;
      f = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      chunk_faces3 = env9;
      chunk_faces4 = env10;
      obj_faces = env11;
      fl = env12;
      value = env13;
      offset_custom = env14;
      face = env15;
      break;
    case 185:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      i = env4;
      f = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      chunk_faces3 = env9;
      chunk_faces4 = env10;
      obj_faces = env11;
      fl = env12;
      value = env13;
      v1 = env14;
      offset_custom = env15;
      face = env16;
      break;
    case 186:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      i = env4;
      f = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      chunk_faces3 = env9;
      chunk_faces4 = env10;
      obj_faces = env11;
      fl = env12;
      value = env13;
      v1 = env14;
      offset_custom = env15;
      v2 = env16;
      face = env17;
      break;
    case 187:
      geometryGroup = env0;
      hint = env1;
      customAttributes = env2;
      dispose = env3;
      i = env4;
      f = env5;
      il = env6;
      customAttribute = env7;
      pp = env8;
      chunk_faces3 = env9;
      chunk_faces4 = env10;
      obj_faces = env11;
      fl = env12;
      value = env13;
      v1 = env14;
      offset_custom = env15;
      v2 = env16;
      face = env17;
      v3 = env18;
      break;
    case 188:
      geometryGroup = env0;
      v4 = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      i = env5;
      f = env6;
      il = env7;
      customAttribute = env8;
      pp = env9;
      chunk_faces3 = env10;
      chunk_faces4 = env11;
      obj_faces = env12;
      fl = env13;
      value = env14;
      v1 = env15;
      offset_custom = env16;
      v2 = env17;
      face = env18;
      v3 = env19;
      break;
    case 189:
      geometryGroup = env0;
      v4 = env1;
      hint = env2;
      t7 = env3;
      customAttributes = env4;
      i = env5;
      f = env6;
      il = env7;
      customAttribute = env8;
      pp = env9;
      dispose = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      fl = env14;
      value = env15;
      v1 = env16;
      offset_custom = env17;
      v2 = env18;
      face = env19;
      v3 = env20;
      break;
    case 190:
      geometryGroup = env0;
      v4 = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      i = env5;
      f = env6;
      il = env7;
      customAttribute = env8;
      pp = env9;
      t7 = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      fl = env14;
      value = env15;
      offset_custom = env16;
      v1 = env17;
      v2 = env18;
      face = env19;
      v3 = env20;
      break;
    case 191:
      geometryGroup = env0;
      v4 = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      i = env5;
      f = env6;
      il = env7;
      customAttribute = env8;
      pp = env9;
      chunk_faces3 = env10;
      chunk_faces4 = env11;
      obj_faces = env12;
      t10 = env13;
      fl = env14;
      value = env15;
      v1 = env16;
      offset_custom = env17;
      v2 = env18;
      face = env19;
      v3 = env20;
      break;
    case 192:
      geometryGroup = env0;
      v4 = env1;
      hint = env2;
      customAttributes = env3;
      face = env4;
      i = env5;
      f = env6;
      il = env7;
      customAttribute = env8;
      pp = env9;
      dispose = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      fl = env14;
      value = env15;
      v1 = env16;
      t11 = env17;
      v2 = env18;
      offset_custom = env19;
      v3 = env20;
      break;
    case 193:
      geometryGroup = env0;
      v4 = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      t12 = env5;
      i = env6;
      f = env7;
      il = env8;
      customAttribute = env9;
      pp = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      fl = env14;
      value = env15;
      v1 = env16;
      offset_custom = env17;
      v2 = env18;
      face = env19;
      v3 = env20;
      break;
    case 194:
      geometryGroup = env0;
      v4 = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      i = env5;
      f = env6;
      il = env7;
      customAttribute = env8;
      pp = env9;
      t13 = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      fl = env14;
      value = env15;
      offset_custom = env16;
      v1 = env17;
      v2 = env18;
      face = env19;
      v3 = env20;
      break;
    case 195:
      geometryGroup = env0;
      v4 = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      i = env5;
      f = env6;
      il = env7;
      customAttribute = env8;
      pp = env9;
      chunk_faces3 = env10;
      chunk_faces4 = env11;
      obj_faces = env12;
      fl = env13;
      t14 = env14;
      value = env15;
      v1 = env16;
      offset_custom = env17;
      v2 = env18;
      face = env19;
      v3 = env20;
      break;
    case 196:
      t15 = env0;
      v4 = env1;
      hint = env2;
      geometryGroup = env3;
      customAttributes = env4;
      i = env5;
      f = env6;
      il = env7;
      customAttribute = env8;
      pp = env9;
      dispose = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      fl = env14;
      value = env15;
      v1 = env16;
      offset_custom = env17;
      v2 = env18;
      face = env19;
      v3 = env20;
      break;
    case 197:
      geometryGroup = env0;
      v4 = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      i = env5;
      f = env6;
      il = env7;
      customAttribute = env8;
      pp = env9;
      t16 = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      fl = env14;
      value = env15;
      v1 = env16;
      offset_custom = env17;
      v2 = env18;
      face = env19;
      v3 = env20;
      break;
    case 198:
      geometryGroup = env0;
      v4 = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      i = env5;
      f = env6;
      il = env7;
      customAttribute = env8;
      pp = env9;
      chunk_faces3 = env10;
      chunk_faces4 = env11;
      obj_faces = env12;
      t17 = env13;
      fl = env14;
      value = env15;
      v1 = env16;
      offset_custom = env17;
      v2 = env18;
      face = env19;
      v3 = env20;
      break;
    case 199:
      geometryGroup = env0;
      v4 = env1;
      hint = env2;
      customAttributes = env3;
      face = env4;
      i = env5;
      f = env6;
      il = env7;
      customAttribute = env8;
      pp = env9;
      dispose = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      fl = env14;
      value = env15;
      offset_custom = env16;
      t18 = env17;
      v2 = env18;
      v1 = env19;
      v3 = env20;
      break;
    case 200:
      geometryGroup = env0;
      v4 = env1;
      hint = env2;
      customAttributes = env3;
      t19 = env4;
      i = env5;
      f = env6;
      il = env7;
      customAttribute = env8;
      pp = env9;
      dispose = env10;
      chunk_faces3 = env11;
      chunk_faces4 = env12;
      obj_faces = env13;
      fl = env14;
      value = env15;
      v1 = env16;
      offset_custom = env17;
      v2 = env18;
      face = env19;
      v3 = env20;
      break;
    case 201:
      geometryGroup = env0;
      value = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      v1 = env5;
      i = env6;
      v2 = env7;
      fl = env8;
      customAttribute = env9;
      v4 = env10;
      t1 = env11;
      il = env12;
      chunk_faces3 = env13;
      chunk_faces4 = env14;
      obj_faces = env15;
      v3 = env16;
      f = env17;
      face = env18;
      break;
    case 202:
      face = env0;
      value = env1;
      t1 = env2;
      offset_custom = env3;
      customAttributes = env4;
      hint = env5;
      i = env6;
      il = env7;
      customAttribute = env8;
      geometryGroup = env9;
      v4 = env10;
      dispose = env11;
      chunk_faces3 = env12;
      f = env13;
      obj_faces = env14;
      chunk_faces4 = env15;
      fl = env16;
      break;
    case 203:
      face = env0;
      value = env1;
      hint = env2;
      offset_custom = env3;
      v1 = env4;
      t1 = env5;
      i = env6;
      il = env7;
      customAttribute = env8;
      geometryGroup = env9;
      v4 = env10;
      customAttributes = env11;
      chunk_faces3 = env12;
      f = env13;
      obj_faces = env14;
      dispose = env15;
      chunk_faces4 = env16;
      fl = env17;
      break;
    case 204:
      face = env0;
      value = env1;
      hint = env2;
      offset_custom = env3;
      v1 = env4;
      i = env5;
      v2 = env6;
      customAttribute = env7;
      t1 = env8;
      v4 = env9;
      customAttributes = env10;
      il = env11;
      f = env12;
      chunk_faces3 = env13;
      obj_faces = env14;
      dispose = env15;
      chunk_faces4 = env16;
      geometryGroup = env17;
      fl = env18;
      break;
    case 205:
      face = env0;
      value = env1;
      hint = env2;
      offset_custom = env3;
      v1 = env4;
      i = env5;
      v2 = env6;
      customAttribute = env7;
      geometryGroup = env8;
      v4 = env9;
      v3 = env10;
      customAttributes = env11;
      t1 = env12;
      f = env13;
      chunk_faces3 = env14;
      obj_faces = env15;
      dispose = env16;
      chunk_faces4 = env17;
      il = env18;
      fl = env19;
      break;
    case 206:
      face = env0;
      value = env1;
      hint = env2;
      offset_custom = env3;
      v1 = env4;
      i = env5;
      v2 = env6;
      customAttribute = env7;
      geometryGroup = env8;
      v4 = env9;
      v3 = env10;
      customAttributes = env11;
      il = env12;
      f = env13;
      chunk_faces3 = env14;
      obj_faces = env15;
      t1 = env16;
      chunk_faces4 = env17;
      dispose = env18;
      fl = env19;
      break;
    case 207:
      face = env0;
      value = env1;
      hint = env2;
      offset_custom = env3;
      v1 = env4;
      i = env5;
      v2 = env6;
      customAttribute = env7;
      geometryGroup = env8;
      v4 = env9;
      v3 = env10;
      customAttributes = env11;
      il = env12;
      f = env13;
      chunk_faces3 = env14;
      obj_faces = env15;
      dispose = env16;
      chunk_faces4 = env17;
      t1 = env18;
      fl = env19;
      break;
    case 208:
      face = env0;
      value = env1;
      hint = env2;
      offset_custom = env3;
      v1 = env4;
      i = env5;
      v2 = env6;
      customAttribute = env7;
      geometryGroup = env8;
      v4 = env9;
      v3 = env10;
      customAttributes = env11;
      il = env12;
      f = env13;
      chunk_faces3 = env14;
      obj_faces = env15;
      dispose = env16;
      chunk_faces4 = env17;
      fl = env18;
      t1 = env19;
      break;
    case 209:
      face = env0;
      value = env1;
      hint = env2;
      offset_custom = env3;
      v1 = env4;
      t1 = env5;
      i = env6;
      v2 = env7;
      customAttribute = env8;
      geometryGroup = env9;
      v4 = env10;
      v3 = env11;
      customAttributes = env12;
      il = env13;
      f = env14;
      chunk_faces3 = env15;
      obj_faces = env16;
      dispose = env17;
      chunk_faces4 = env18;
      fl = env19;
      break;
    case 210:
      face = env0;
      value = env1;
      hint = env2;
      offset_custom = env3;
      v1 = env4;
      i = env5;
      v2 = env6;
      customAttribute = env7;
      t1 = env8;
      v4 = env9;
      v3 = env10;
      customAttributes = env11;
      il = env12;
      f = env13;
      chunk_faces3 = env14;
      obj_faces = env15;
      dispose = env16;
      chunk_faces4 = env17;
      geometryGroup = env18;
      fl = env19;
      break;
    case 211:
      face = env0;
      value = env1;
      hint = env2;
      offset_custom = env3;
      v1 = env4;
      i = env5;
      v2 = env6;
      customAttribute = env7;
      geometryGroup = env8;
      v4 = env9;
      v3 = env10;
      customAttributes = env11;
      il = env12;
      f = env13;
      t1 = env14;
      obj_faces = env15;
      chunk_faces3 = env16;
      chunk_faces4 = env17;
      dispose = env18;
      fl = env19;
      break;
    case 212:
      face = env0;
      value = env1;
      hint = env2;
      offset_custom = env3;
      v1 = env4;
      i = env5;
      v2 = env6;
      customAttribute = env7;
      geometryGroup = env8;
      v4 = env9;
      v3 = env10;
      customAttributes = env11;
      il = env12;
      f = env13;
      chunk_faces3 = env14;
      obj_faces = env15;
      dispose = env16;
      chunk_faces4 = env17;
      t1 = env18;
      fl = env19;
      break;
    case 213:
      face = env0;
      value = env1;
      hint = env2;
      offset_custom = env3;
      v1 = env4;
      i = env5;
      v2 = env6;
      customAttribute = env7;
      geometryGroup = env8;
      v4 = env9;
      v3 = env10;
      customAttributes = env11;
      il = env12;
      f = env13;
      chunk_faces3 = env14;
      obj_faces = env15;
      dispose = env16;
      chunk_faces4 = env17;
      t1 = env18;
      fl = env19;
      break;
    case 214:
      face = env0;
      value = env1;
      t1 = env2;
      offset_custom = env3;
      v1 = env4;
      hint = env5;
      i = env6;
      v2 = env7;
      customAttribute = env8;
      geometryGroup = env9;
      v4 = env10;
      v3 = env11;
      customAttributes = env12;
      il = env13;
      f = env14;
      chunk_faces3 = env15;
      obj_faces = env16;
      dispose = env17;
      chunk_faces4 = env18;
      fl = env19;
      break;
    case 215:
      face = env0;
      value = env1;
      hint = env2;
      offset_custom = env3;
      v1 = env4;
      i = env5;
      v2 = env6;
      customAttribute = env7;
      geometryGroup = env8;
      t1 = env9;
      v3 = env10;
      customAttributes = env11;
      v4 = env12;
      f = env13;
      chunk_faces3 = env14;
      obj_faces = env15;
      dispose = env16;
      chunk_faces4 = env17;
      il = env18;
      fl = env19;
      break;
    case 216:
      face = env0;
      value = env1;
      hint = env2;
      offset_custom = env3;
      v1 = env4;
      i = env5;
      v2 = env6;
      customAttribute = env7;
      geometryGroup = env8;
      v4 = env9;
      v3 = env10;
      customAttributes = env11;
      t1 = env12;
      f = env13;
      chunk_faces3 = env14;
      obj_faces = env15;
      dispose = env16;
      chunk_faces4 = env17;
      il = env18;
      fl = env19;
      break;
    case 217:
      geometryGroup = env0;
      fl = env1;
      hint = env2;
      customAttributes = env3;
      face = env4;
      t1 = env5;
      offset_custom = env6;
      il = env7;
      customAttribute = env8;
      value = env9;
      i = env10;
      dispose = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      f = env15;
      break;
    case 218:
      geometryGroup = env0;
      fl = env1;
      hint = env2;
      customAttributes = env3;
      face = env4;
      i = env5;
      offset_custom = env6;
      v1 = env7;
      customAttribute = env8;
      t1 = env9;
      value = env10;
      dispose = env11;
      il = env12;
      chunk_faces3 = env13;
      chunk_faces4 = env14;
      obj_faces = env15;
      f = env16;
      break;
    case 219:
      geometryGroup = env0;
      fl = env1;
      hint = env2;
      customAttributes = env3;
      face = env4;
      i = env5;
      offset_custom = env6;
      v1 = env7;
      customAttribute = env8;
      value = env9;
      v2 = env10;
      dispose = env11;
      t1 = env12;
      chunk_faces3 = env13;
      chunk_faces4 = env14;
      obj_faces = env15;
      il = env16;
      f = env17;
      break;
    case 220:
      geometryGroup = env0;
      fl = env1;
      hint = env2;
      customAttributes = env3;
      face = env4;
      i = env5;
      offset_custom = env6;
      v1 = env7;
      customAttribute = env8;
      value = env9;
      v2 = env10;
      dispose = env11;
      il = env12;
      chunk_faces3 = env13;
      v3 = env14;
      chunk_faces4 = env15;
      t1 = env16;
      f = env17;
      obj_faces = env18;
      break;
    case 221:
      geometryGroup = env0;
      fl = env1;
      hint = env2;
      customAttributes = env3;
      face = env4;
      i = env5;
      offset_custom = env6;
      v1 = env7;
      customAttribute = env8;
      value = env9;
      v2 = env10;
      dispose = env11;
      il = env12;
      chunk_faces3 = env13;
      v3 = env14;
      chunk_faces4 = env15;
      obj_faces = env16;
      f = env17;
      v4 = env18;
      t1 = env19;
      break;
    case 222:
      geometryGroup = env0;
      fl = env1;
      hint = env2;
      customAttributes = env3;
      face = env4;
      i = env5;
      offset_custom = env6;
      v1 = env7;
      customAttribute = env8;
      value = env9;
      v2 = env10;
      dispose = env11;
      il = env12;
      chunk_faces3 = env13;
      v3 = env14;
      chunk_faces4 = env15;
      obj_faces = env16;
      f = env17;
      v4 = env18;
      t1 = env19;
      break;
    case 223:
      t1 = env0;
      fl = env1;
      hint = env2;
      geometryGroup = env3;
      face = env4;
      i = env5;
      offset_custom = env6;
      v1 = env7;
      customAttribute = env8;
      value = env9;
      v2 = env10;
      customAttributes = env11;
      il = env12;
      chunk_faces3 = env13;
      v3 = env14;
      chunk_faces4 = env15;
      obj_faces = env16;
      f = env17;
      v4 = env18;
      dispose = env19;
      break;
    case 224:
      geometryGroup = env0;
      fl = env1;
      hint = env2;
      customAttributes = env3;
      face = env4;
      t1 = env5;
      offset_custom = env6;
      v1 = env7;
      customAttribute = env8;
      value = env9;
      v2 = env10;
      dispose = env11;
      il = env12;
      chunk_faces3 = env13;
      v3 = env14;
      chunk_faces4 = env15;
      obj_faces = env16;
      f = env17;
      v4 = env18;
      i = env19;
      break;
    case 225:
      geometryGroup = env0;
      fl = env1;
      hint = env2;
      customAttributes = env3;
      face = env4;
      i = env5;
      offset_custom = env6;
      v1 = env7;
      customAttribute = env8;
      value = env9;
      v2 = env10;
      t1 = env11;
      il = env12;
      chunk_faces3 = env13;
      v3 = env14;
      chunk_faces4 = env15;
      obj_faces = env16;
      f = env17;
      v4 = env18;
      dispose = env19;
      break;
    case 226:
      geometryGroup = env0;
      fl = env1;
      hint = env2;
      customAttributes = env3;
      face = env4;
      i = env5;
      offset_custom = env6;
      v1 = env7;
      customAttribute = env8;
      value = env9;
      v2 = env10;
      dispose = env11;
      il = env12;
      chunk_faces3 = env13;
      v3 = env14;
      chunk_faces4 = env15;
      t1 = env16;
      f = env17;
      v4 = env18;
      obj_faces = env19;
      break;
    case 227:
      geometryGroup = env0;
      fl = env1;
      hint = env2;
      customAttributes = env3;
      face = env4;
      i = env5;
      offset_custom = env6;
      v1 = env7;
      customAttribute = env8;
      value = env9;
      v2 = env10;
      dispose = env11;
      il = env12;
      chunk_faces3 = env13;
      v3 = env14;
      chunk_faces4 = env15;
      obj_faces = env16;
      f = env17;
      v4 = env18;
      t1 = env19;
      break;
    case 228:
      geometryGroup = env0;
      fl = env1;
      hint = env2;
      customAttributes = env3;
      face = env4;
      i = env5;
      offset_custom = env6;
      v1 = env7;
      customAttribute = env8;
      value = env9;
      v2 = env10;
      dispose = env11;
      il = env12;
      chunk_faces3 = env13;
      v3 = env14;
      chunk_faces4 = env15;
      obj_faces = env16;
      f = env17;
      v4 = env18;
      t1 = env19;
      break;
    case 229:
      geometryGroup = env0;
      fl = env1;
      hint = env2;
      customAttributes = env3;
      face = env4;
      t1 = env5;
      i = env6;
      offset_custom = env7;
      v1 = env8;
      customAttribute = env9;
      value = env10;
      v2 = env11;
      dispose = env12;
      il = env13;
      chunk_faces3 = env14;
      v3 = env15;
      chunk_faces4 = env16;
      obj_faces = env17;
      f = env18;
      v4 = env19;
      break;
    case 230:
      geometryGroup = env0;
      fl = env1;
      hint = env2;
      customAttributes = env3;
      face = env4;
      i = env5;
      offset_custom = env6;
      v1 = env7;
      customAttribute = env8;
      t1 = env9;
      value = env10;
      v2 = env11;
      dispose = env12;
      il = env13;
      chunk_faces3 = env14;
      v3 = env15;
      chunk_faces4 = env16;
      obj_faces = env17;
      f = env18;
      v4 = env19;
      break;
    case 231:
      geometryGroup = env0;
      fl = env1;
      hint = env2;
      customAttributes = env3;
      face = env4;
      i = env5;
      offset_custom = env6;
      v1 = env7;
      customAttribute = env8;
      value = env9;
      v2 = env10;
      dispose = env11;
      il = env12;
      chunk_faces3 = env13;
      v3 = env14;
      t1 = env15;
      obj_faces = env16;
      f = env17;
      v4 = env18;
      chunk_faces4 = env19;
      break;
    case 232:
      geometryGroup = env0;
      fl = env1;
      hint = env2;
      customAttributes = env3;
      face = env4;
      i = env5;
      offset_custom = env6;
      v1 = env7;
      customAttribute = env8;
      value = env9;
      v2 = env10;
      dispose = env11;
      il = env12;
      chunk_faces3 = env13;
      v3 = env14;
      chunk_faces4 = env15;
      obj_faces = env16;
      f = env17;
      v4 = env18;
      t1 = env19;
      break;
    case 233:
      geometryGroup = env0;
      fl = env1;
      hint = env2;
      customAttributes = env3;
      face = env4;
      i = env5;
      offset_custom = env6;
      v1 = env7;
      customAttribute = env8;
      value = env9;
      v2 = env10;
      dispose = env11;
      il = env12;
      chunk_faces3 = env13;
      v3 = env14;
      chunk_faces4 = env15;
      obj_faces = env16;
      f = env17;
      v4 = env18;
      t1 = env19;
      break;
    case 234:
      geometryGroup = env0;
      fl = env1;
      t1 = env2;
      hint = env3;
      face = env4;
      i = env5;
      offset_custom = env6;
      v1 = env7;
      customAttribute = env8;
      value = env9;
      v2 = env10;
      customAttributes = env11;
      il = env12;
      chunk_faces3 = env13;
      v3 = env14;
      chunk_faces4 = env15;
      obj_faces = env16;
      f = env17;
      v4 = env18;
      dispose = env19;
      break;
    case 235:
      geometryGroup = env0;
      fl = env1;
      hint = env2;
      customAttributes = env3;
      face = env4;
      i = env5;
      offset_custom = env6;
      v1 = env7;
      customAttribute = env8;
      t1 = env9;
      v2 = env10;
      dispose = env11;
      il = env12;
      chunk_faces3 = env13;
      v3 = env14;
      chunk_faces4 = env15;
      obj_faces = env16;
      f = env17;
      v4 = env18;
      value = env19;
      break;
    case 236:
      geometryGroup = env0;
      fl = env1;
      hint = env2;
      customAttributes = env3;
      face = env4;
      i = env5;
      offset_custom = env6;
      v1 = env7;
      customAttribute = env8;
      value = env9;
      v2 = env10;
      dispose = env11;
      t1 = env12;
      chunk_faces3 = env13;
      v3 = env14;
      chunk_faces4 = env15;
      obj_faces = env16;
      f = env17;
      v4 = env18;
      il = env19;
      break;
    case 237:
      chunk_faces3 = env0;
      chunk_faces4 = env1;
      hint = env2;
      face = env3;
      i = env4;
      customAttribute = env5;
      t1 = env6;
      f = env7;
      fl = env8;
      v4 = env9;
      offset_custom = env10;
      break;
    case 238:
      hint = env0;
      i = env1;
      customAttribute = env2;
      fl = env3;
      v4 = env4;
      value = env5;
      t1 = env6;
      chunk_faces4 = env7;
      chunk_faces3 = env8;
      offset_custom = env9;
      f = env10;
      face = env11;
      break;
    case 239:
      hint = env0;
      i = env1;
      customAttribute = env2;
      fl = env3;
      v4 = env4;
      value = env5;
      chunk_faces3 = env6;
      chunk_faces4 = env7;
      offset_custom = env8;
      t1 = env9;
      f = env10;
      face = env11;
      break;
    case 240:
      hint = env0;
      i = env1;
      customAttribute = env2;
      fl = env3;
      v4 = env4;
      value = env5;
      chunk_faces3 = env6;
      chunk_faces4 = env7;
      offset_custom = env8;
      t1 = env9;
      f = env10;
      face = env11;
      break;
    case 241:
      hint = env0;
      i = env1;
      customAttribute = env2;
      fl = env3;
      v4 = env4;
      value = env5;
      chunk_faces3 = env6;
      chunk_faces4 = env7;
      offset_custom = env8;
      f = env9;
      face = env10;
      t1 = env11;
      break;
    case 242:
      hint = env0;
      t1 = env1;
      i = env2;
      customAttribute = env3;
      fl = env4;
      v4 = env5;
      value = env6;
      chunk_faces3 = env7;
      chunk_faces4 = env8;
      offset_custom = env9;
      f = env10;
      face = env11;
      break;
    case 243:
      hint = env0;
      i = env1;
      customAttribute = env2;
      fl = env3;
      t1 = env4;
      v4 = env5;
      value = env6;
      chunk_faces3 = env7;
      chunk_faces4 = env8;
      offset_custom = env9;
      f = env10;
      face = env11;
      break;
    case 244:
      hint = env0;
      i = env1;
      customAttribute = env2;
      fl = env3;
      v4 = env4;
      value = env5;
      chunk_faces3 = env6;
      chunk_faces4 = env7;
      t1 = env8;
      offset_custom = env9;
      f = env10;
      face = env11;
      break;
    case 245:
      hint = env0;
      i = env1;
      customAttribute = env2;
      fl = env3;
      v4 = env4;
      value = env5;
      chunk_faces3 = env6;
      chunk_faces4 = env7;
      offset_custom = env8;
      t1 = env9;
      f = env10;
      face = env11;
      break;
    case 246:
      hint = env0;
      i = env1;
      customAttribute = env2;
      fl = env3;
      v4 = env4;
      value = env5;
      chunk_faces3 = env6;
      chunk_faces4 = env7;
      offset_custom = env8;
      f = env9;
      t1 = env10;
      face = env11;
      break;
    case 247:
      hint = env0;
      t1 = env1;
      i = env2;
      customAttribute = env3;
      fl = env4;
      v4 = env5;
      value = env6;
      chunk_faces3 = env7;
      chunk_faces4 = env8;
      offset_custom = env9;
      f = env10;
      face = env11;
      break;
    case 248:
      hint = env0;
      i = env1;
      customAttribute = env2;
      t1 = env3;
      v4 = env4;
      fl = env5;
      value = env6;
      chunk_faces3 = env7;
      chunk_faces4 = env8;
      offset_custom = env9;
      f = env10;
      face = env11;
      break;
    case 249:
      hint = env0;
      i = env1;
      customAttribute = env2;
      fl = env3;
      v4 = env4;
      value = env5;
      offset_custom = env6;
      chunk_faces4 = env7;
      chunk_faces3 = env8;
      t1 = env9;
      f = env10;
      face = env11;
      break;
    case 250:
      chunk_faces4 = env0;
      hint = env1;
      t1 = env2;
      f = env3;
      fl = env4;
      i = env5;
      offset_custom = env6;
      customAttribute = env7;
      face = env8;
      break;
    case 251:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      f = env3;
      value = env4;
      i = env5;
      offset_custom = env6;
      customAttribute = env7;
      t1 = env8;
      face = env9;
      break;
    case 252:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      f = env3;
      value = env4;
      i = env5;
      offset_custom = env6;
      customAttribute = env7;
      t1 = env8;
      face = env9;
      break;
    case 253:
      chunk_faces4 = env0;
      t1 = env1;
      hint = env2;
      f = env3;
      fl = env4;
      value = env5;
      i = env6;
      offset_custom = env7;
      customAttribute = env8;
      face = env9;
      break;
    case 254:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      f = env3;
      value = env4;
      i = env5;
      offset_custom = env6;
      customAttribute = env7;
      t1 = env8;
      face = env9;
      break;
    case 255:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      f = env3;
      value = env4;
      i = env5;
      offset_custom = env6;
      customAttribute = env7;
      t1 = env8;
      face = env9;
      break;
    case 256:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      f = env3;
      t1 = env4;
      value = env5;
      i = env6;
      offset_custom = env7;
      customAttribute = env8;
      face = env9;
      break;
    case 257:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      f = env3;
      value = env4;
      i = env5;
      offset_custom = env6;
      customAttribute = env7;
      t1 = env8;
      face = env9;
      break;
    case 258:
      t1 = env0;
      chunk_faces4 = env1;
      hint = env2;
      fl = env3;
      f = env4;
      value = env5;
      i = env6;
      offset_custom = env7;
      customAttribute = env8;
      face = env9;
      break;
    case 259:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      f = env3;
      value = env4;
      t1 = env5;
      offset_custom = env6;
      customAttribute = env7;
      i = env8;
      face = env9;
      break;
    case 260:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      f = env3;
      value = env4;
      i = env5;
      offset_custom = env6;
      customAttribute = env7;
      t1 = env8;
      face = env9;
      break;
    case 261:
      chunk_faces4 = env0;
      t1 = env1;
      hint = env2;
      f = env3;
      fl = env4;
      value = env5;
      i = env6;
      offset_custom = env7;
      customAttribute = env8;
      face = env9;
      break;
    case 262:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      f = env3;
      value = env4;
      i = env5;
      offset_custom = env6;
      customAttribute = env7;
      t1 = env8;
      face = env9;
      break;
    case 263:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      f = env3;
      value = env4;
      i = env5;
      offset_custom = env6;
      customAttribute = env7;
      t1 = env8;
      face = env9;
      break;
    case 264:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      f = env3;
      t1 = env4;
      value = env5;
      i = env6;
      offset_custom = env7;
      customAttribute = env8;
      face = env9;
      break;
    case 265:
      chunk_faces4 = env0;
      hint = env1;
      fl = env2;
      f = env3;
      value = env4;
      i = env5;
      offset_custom = env6;
      customAttribute = env7;
      t1 = env8;
      face = env9;
      break;
    case 266:
      t1 = env0;
      chunk_faces4 = env1;
      hint = env2;
      fl = env3;
      f = env4;
      value = env5;
      i = env6;
      offset_custom = env7;
      customAttribute = env8;
      face = env9;
      break;
    case 267:
      geometryGroup = env0;
      offset_custom = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      i = env5;
      il = env6;
      customAttribute = env7;
      v4 = env8;
      f = env9;
      chunk_faces3 = env10;
      chunk_faces4 = env11;
      obj_faces = env12;
      fl = env13;
      t1 = env14;
      face = env15;
      break;
    case 268:
      geometryGroup = env0;
      offset_custom = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      i = env5;
      il = env6;
      customAttribute = env7;
      v4 = env8;
      f = env9;
      chunk_faces3 = env10;
      chunk_faces4 = env11;
      obj_faces = env12;
      fl = env13;
      face = env14;
      value = env15;
      break;
    case 269:
      geometryGroup = env0;
      v1 = env1;
      offset_custom = env2;
      v2 = env3;
      customAttributes = env4;
      v3 = env5;
      i = env6;
      t3 = env7;
      hint = env8;
      customAttribute = env9;
      v4 = env10;
      f = env11;
      il = env12;
      chunk_faces3 = env13;
      chunk_faces4 = env14;
      obj_faces = env15;
      dispose = env16;
      fl = env17;
      face = env18;
      value = env19;
      break;
    case 270:
      geometryGroup = env0;
      v1 = env1;
      offset_custom = env2;
      v2 = env3;
      customAttributes = env4;
      v3 = env5;
      i = env6;
      hint = env7;
      customAttribute = env8;
      t3 = env9;
      v4 = env10;
      f = env11;
      il = env12;
      chunk_faces3 = env13;
      chunk_faces4 = env14;
      obj_faces = env15;
      dispose = env16;
      fl = env17;
      face = env18;
      value = env19;
      break;
    case 271:
      geometryGroup = env0;
      v1 = env1;
      offset_custom = env2;
      v2 = env3;
      customAttributes = env4;
      v3 = env5;
      i = env6;
      hint = env7;
      customAttribute = env8;
      v4 = env9;
      f = env10;
      il = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      t3 = env14;
      dispose = env15;
      obj_faces = env16;
      fl = env17;
      face = env18;
      value = env19;
      break;
    case 272:
      geometryGroup = env0;
      v1 = env1;
      offset_custom = env2;
      v2 = env3;
      customAttributes = env4;
      v3 = env5;
      i = env6;
      hint = env7;
      customAttribute = env8;
      v4 = env9;
      f = env10;
      il = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      dispose = env15;
      t3 = env16;
      fl = env17;
      face = env18;
      value = env19;
      break;
    case 273:
      geometryGroup = env0;
      v1 = env1;
      offset_custom = env2;
      v2 = env3;
      customAttributes = env4;
      v3 = env5;
      i = env6;
      hint = env7;
      customAttribute = env8;
      v4 = env9;
      f = env10;
      il = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      dispose = env15;
      fl = env16;
      t3 = env17;
      face = env18;
      value = env19;
      break;
    case 274:
      geometryGroup = env0;
      v1 = env1;
      offset_custom = env2;
      v2 = env3;
      t3 = env4;
      v3 = env5;
      i = env6;
      hint = env7;
      customAttribute = env8;
      v4 = env9;
      f = env10;
      il = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      customAttributes = env15;
      dispose = env16;
      fl = env17;
      face = env18;
      value = env19;
      break;
    case 275:
      geometryGroup = env0;
      v1 = env1;
      offset_custom = env2;
      v2 = env3;
      customAttributes = env4;
      v3 = env5;
      i = env6;
      hint = env7;
      customAttribute = env8;
      t3 = env9;
      v4 = env10;
      f = env11;
      il = env12;
      chunk_faces3 = env13;
      chunk_faces4 = env14;
      obj_faces = env15;
      dispose = env16;
      fl = env17;
      face = env18;
      value = env19;
      break;
    case 276:
      geometryGroup = env0;
      v1 = env1;
      offset_custom = env2;
      v2 = env3;
      customAttributes = env4;
      v3 = env5;
      i = env6;
      hint = env7;
      customAttribute = env8;
      v4 = env9;
      f = env10;
      il = env11;
      t3 = env12;
      chunk_faces3 = env13;
      chunk_faces4 = env14;
      dispose = env15;
      obj_faces = env16;
      fl = env17;
      face = env18;
      value = env19;
      break;
    case 277:
      geometryGroup = env0;
      v1 = env1;
      offset_custom = env2;
      v2 = env3;
      customAttributes = env4;
      v3 = env5;
      i = env6;
      hint = env7;
      customAttribute = env8;
      v4 = env9;
      f = env10;
      il = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      dispose = env15;
      t3 = env16;
      fl = env17;
      face = env18;
      value = env19;
      break;
    case 278:
      geometryGroup = env0;
      v1 = env1;
      offset_custom = env2;
      v2 = env3;
      customAttributes = env4;
      v3 = env5;
      i = env6;
      hint = env7;
      customAttribute = env8;
      v4 = env9;
      f = env10;
      il = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      dispose = env15;
      t3 = env16;
      fl = env17;
      face = env18;
      value = env19;
      break;
    case 279:
      geometryGroup = env0;
      v1 = env1;
      offset_custom = env2;
      v2 = env3;
      t3 = env4;
      v3 = env5;
      i = env6;
      hint = env7;
      customAttribute = env8;
      v4 = env9;
      f = env10;
      il = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      customAttributes = env15;
      dispose = env16;
      fl = env17;
      face = env18;
      value = env19;
      break;
    case 280:
      geometryGroup = env0;
      v1 = env1;
      offset_custom = env2;
      v2 = env3;
      customAttributes = env4;
      v3 = env5;
      i = env6;
      t3 = env7;
      hint = env8;
      customAttribute = env9;
      v4 = env10;
      f = env11;
      il = env12;
      chunk_faces3 = env13;
      chunk_faces4 = env14;
      obj_faces = env15;
      dispose = env16;
      fl = env17;
      face = env18;
      value = env19;
      break;
    case 281:
      offset_custom = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      i = env5;
      il = env6;
      customAttribute = env7;
      f = env8;
      chunk_faces3 = env9;
      chunk_faces4 = env10;
      obj_faces = env11;
      fl = env12;
      t1 = env13;
      face = env14;
      break;
    case 282:
      offset_custom = env0;
      geometryGroup = env1;
      hint = env2;
      customAttributes = env3;
      dispose = env4;
      i = env5;
      il = env6;
      customAttribute = env7;
      f = env8;
      chunk_faces3 = env9;
      chunk_faces4 = env10;
      obj_faces = env11;
      fl = env12;
      value = env13;
      face = env14;
      break;
    case 283:
      v1 = env0;
      offset_custom = env1;
      v2 = env2;
      hint = env3;
      v3 = env4;
      v4 = env5;
      i = env6;
      t3 = env7;
      customAttribute = env8;
      geometryGroup = env9;
      il = env10;
      f = env11;
      customAttributes = env12;
      chunk_faces3 = env13;
      chunk_faces4 = env14;
      obj_faces = env15;
      dispose = env16;
      fl = env17;
      value = env18;
      face = env19;
      break;
    case 284:
      v1 = env0;
      offset_custom = env1;
      v2 = env2;
      hint = env3;
      v3 = env4;
      v4 = env5;
      i = env6;
      il = env7;
      customAttribute = env8;
      geometryGroup = env9;
      f = env10;
      t3 = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      customAttributes = env15;
      dispose = env16;
      fl = env17;
      value = env18;
      face = env19;
      break;
    case 285:
      v1 = env0;
      offset_custom = env1;
      v2 = env2;
      hint = env3;
      v3 = env4;
      v4 = env5;
      i = env6;
      il = env7;
      customAttribute = env8;
      geometryGroup = env9;
      f = env10;
      customAttributes = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      t3 = env15;
      dispose = env16;
      fl = env17;
      value = env18;
      face = env19;
      break;
    case 286:
      v1 = env0;
      offset_custom = env1;
      v2 = env2;
      hint = env3;
      v3 = env4;
      v4 = env5;
      i = env6;
      il = env7;
      customAttribute = env8;
      geometryGroup = env9;
      f = env10;
      customAttributes = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      dispose = env15;
      t3 = env16;
      fl = env17;
      value = env18;
      face = env19;
      break;
    case 287:
      v1 = env0;
      offset_custom = env1;
      v2 = env2;
      hint = env3;
      v3 = env4;
      v4 = env5;
      i = env6;
      face = env7;
      customAttribute = env8;
      geometryGroup = env9;
      il = env10;
      f = env11;
      customAttributes = env12;
      chunk_faces3 = env13;
      chunk_faces4 = env14;
      obj_faces = env15;
      dispose = env16;
      fl = env17;
      value = env18;
      t3 = env19;
      break;
    case 288:
      v1 = env0;
      offset_custom = env1;
      v2 = env2;
      hint = env3;
      v3 = env4;
      t3 = env5;
      v4 = env6;
      i = env7;
      il = env8;
      customAttribute = env9;
      geometryGroup = env10;
      f = env11;
      customAttributes = env12;
      chunk_faces3 = env13;
      chunk_faces4 = env14;
      obj_faces = env15;
      dispose = env16;
      fl = env17;
      value = env18;
      face = env19;
      break;
    case 289:
      v1 = env0;
      offset_custom = env1;
      v2 = env2;
      hint = env3;
      v3 = env4;
      v4 = env5;
      i = env6;
      il = env7;
      customAttribute = env8;
      t3 = env9;
      f = env10;
      customAttributes = env11;
      geometryGroup = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      dispose = env15;
      chunk_faces3 = env16;
      fl = env17;
      value = env18;
      face = env19;
      break;
    case 290:
      v1 = env0;
      offset_custom = env1;
      v2 = env2;
      hint = env3;
      v3 = env4;
      v4 = env5;
      i = env6;
      il = env7;
      customAttribute = env8;
      geometryGroup = env9;
      f = env10;
      customAttributes = env11;
      chunk_faces3 = env12;
      t3 = env13;
      chunk_faces4 = env14;
      dispose = env15;
      obj_faces = env16;
      fl = env17;
      value = env18;
      face = env19;
      break;
    case 291:
      v1 = env0;
      offset_custom = env1;
      v2 = env2;
      hint = env3;
      v3 = env4;
      i = env5;
      v4 = env6;
      il = env7;
      customAttribute = env8;
      geometryGroup = env9;
      f = env10;
      customAttributes = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      dispose = env15;
      t3 = env16;
      fl = env17;
      value = env18;
      face = env19;
      break;
    case 292:
      v1 = env0;
      offset_custom = env1;
      v2 = env2;
      hint = env3;
      v3 = env4;
      v4 = env5;
      i = env6;
      il = env7;
      customAttribute = env8;
      geometryGroup = env9;
      f = env10;
      customAttributes = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      dispose = env15;
      fl = env16;
      t3 = env17;
      value = env18;
      face = env19;
      break;
    case 293:
      v1 = env0;
      offset_custom = env1;
      v2 = env2;
      t3 = env3;
      v3 = env4;
      hint = env5;
      v4 = env6;
      i = env7;
      il = env8;
      customAttribute = env9;
      geometryGroup = env10;
      f = env11;
      customAttributes = env12;
      chunk_faces3 = env13;
      chunk_faces4 = env14;
      obj_faces = env15;
      dispose = env16;
      fl = env17;
      value = env18;
      face = env19;
      break;
    case 294:
      v1 = env0;
      offset_custom = env1;
      v2 = env2;
      hint = env3;
      v3 = env4;
      v4 = env5;
      i = env6;
      t3 = env7;
      customAttribute = env8;
      geometryGroup = env9;
      il = env10;
      f = env11;
      customAttributes = env12;
      chunk_faces3 = env13;
      chunk_faces4 = env14;
      obj_faces = env15;
      dispose = env16;
      fl = env17;
      value = env18;
      face = env19;
      break;
    case 295:
      v1 = env0;
      offset_custom = env1;
      v2 = env2;
      hint = env3;
      v3 = env4;
      v4 = env5;
      i = env6;
      il = env7;
      customAttribute = env8;
      geometryGroup = env9;
      f = env10;
      customAttributes = env11;
      t3 = env12;
      chunk_faces3 = env13;
      chunk_faces4 = env14;
      obj_faces = env15;
      dispose = env16;
      fl = env17;
      value = env18;
      face = env19;
      break;
    case 296:
      v1 = env0;
      offset_custom = env1;
      v2 = env2;
      hint = env3;
      v3 = env4;
      v4 = env5;
      i = env6;
      il = env7;
      customAttribute = env8;
      geometryGroup = env9;
      f = env10;
      customAttributes = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      dispose = env15;
      t3 = env16;
      fl = env17;
      value = env18;
      face = env19;
      break;
    case 297:
      v1 = env0;
      offset_custom = env1;
      v2 = env2;
      hint = env3;
      v3 = env4;
      v4 = env5;
      i = env6;
      il = env7;
      customAttribute = env8;
      geometryGroup = env9;
      f = env10;
      customAttributes = env11;
      chunk_faces3 = env12;
      chunk_faces4 = env13;
      obj_faces = env14;
      dispose = env15;
      t3 = env16;
      fl = env17;
      value = env18;
      face = env19;
      break;
    case 298:
      v1 = env0;
      offset_custom = env1;
      v2 = env2;
      t3 = env3;
      v3 = env4;
      hint = env5;
      v4 = env6;
      i = env7;
      il = env8;
      customAttribute = env9;
      geometryGroup = env10;
      f = env11;
      customAttributes = env12;
      chunk_faces3 = env13;
      chunk_faces4 = env14;
      obj_faces = env15;
      dispose = env16;
      fl = env17;
      value = env18;
      face = env19;
      break;
  }
  switch (state) {
    case 0:
      if (geometryGroup.get$__inittedArrays() !== true)
        return;
      var normalType = this.bufferGuessNormalType$1(material);
    case 1:
      state = 0;
      var vertexColorType = this.bufferGuessVertexColorType$1(material);
      var uvType = this.bufferGuessUVType$1(material);
      var needsSmoothNormals = normalType === 2;
      var vertexArray = geometryGroup.get$__vertexArray();
    case 2:
      state = 0;
      var uvArray = geometryGroup.get$__uvArray();
    case 3:
      state = 0;
      var uv2Array = geometryGroup.get$__uv2Array();
    case 4:
      state = 0;
      var normalArray = geometryGroup.get$__normalArray();
    case 5:
      state = 0;
      var tangentArray = geometryGroup.get$__tangentArray();
    case 6:
      state = 0;
      var colorArray = geometryGroup.get$__colorArray();
    case 7:
      state = 0;
      var skinVertexAArray = geometryGroup.get$__skinVertexAArray();
    case 8:
      state = 0;
      var skinVertexBArray = geometryGroup.get$__skinVertexBArray();
    case 9:
      state = 0;
      var skinIndexArray = geometryGroup.get$__skinIndexArray();
    case 10:
      state = 0;
      var skinWeightArray = geometryGroup.get$__skinWeightArray();
    case 11:
      state = 0;
      var morphTargetsArrays = geometryGroup.get$__morphTargetsArrays();
    case 12:
      state = 0;
      var morphNormalsArrays = geometryGroup.get$__morphNormalsArrays();
    case 13:
      state = 0;
      var customAttributes = geometryGroup.get$__webglCustomAttributesList();
    case 14:
      state = 0;
      var faceArray = geometryGroup.get$__faceArray();
    case 15:
      state = 0;
      var lineArray = geometryGroup.get$__lineArray();
    case 16:
      state = 0;
      var geometry = object.get$webglgeometry();
      var dirtyVertices = geometry.get$verticesNeedUpdate();
      var dirtyElements = geometry.get$elementsNeedUpdate();
      var dirtyUvs = geometry.get$uvsNeedUpdate();
      var dirtyNormals = geometry.get$normalsNeedUpdate();
      var dirtyTangents = geometry.get$tangentsNeedUpdate();
      var dirtyColors = geometry.get$colorsNeedUpdate();
      var dirtyMorphTargets = geometry.get$morphTargetsNeedUpdate();
      var vertices = geometry.get$vertices();
    case 17:
      state = 0;
      var chunk_faces3 = geometryGroup.get$faces3();
    case 18:
      state = 0;
      var chunk_faces4 = geometryGroup.get$faces4();
    case 19:
      state = 0;
      var obj_faces = geometry.get$faces();
    case 20:
      state = 0;
      var t21 = geometry.get$faceVertexUvs();
    case 21:
      state = 0;
      var obj_uvs = $.index(t21, 0);
      var t1 = $.get$length(geometry.get$faceVertexUvs());
    case 22:
      state = 0;
    case 23:
      if (state === 23 || state === 0 && $.gtB(t1, 1))
        switch (state) {
          case 0:
            t1 = geometry.get$faceVertexUvs();
          case 23:
            state = 0;
            var obj_uvs2 = $.index(t1, 1);
        }
      else
        obj_uvs2 = null;
      geometry.get$colors();
      var obj_skinVerticesA = geometry.get$skinVerticesA();
    case 24:
      state = 0;
      var obj_skinVerticesB = geometry.get$skinVerticesB();
    case 25:
      state = 0;
      var obj_skinIndices = geometry.get$skinIndices();
    case 26:
      state = 0;
      var obj_skinWeights = geometry.get$skinWeights();
    case 27:
      state = 0;
      var morphTargets = geometry.get$morphTargets();
    case 28:
      state = 0;
      var morphNormals = geometry.get$morphNormals();
    case 29:
      state = 0;
      if (dirtyVertices === true) {
        var fl = $.get$length(chunk_faces3);
        for (var offset = 0, v1 = null, v2 = null, v3 = null, face = null, f = 0; $.ltB(f, fl); ++f) {
          face = $.index(obj_faces, $.index(chunk_faces3, f));
          v1 = $.index(vertices, face.get$a());
          v2 = $.index(vertices, face.get$b());
          v3 = $.index(vertices, face.get$c());
          $.indexSet(vertexArray, offset, v1.get$x());
          $.indexSet(vertexArray, offset + 1, v1.get$y());
          $.indexSet(vertexArray, offset + 2, v1.get$z());
          $.indexSet(vertexArray, offset + 3, v2.get$x());
          $.indexSet(vertexArray, offset + 4, v2.get$y());
          $.indexSet(vertexArray, offset + 5, v2.get$z());
          $.indexSet(vertexArray, offset + 6, v3.get$x());
          $.indexSet(vertexArray, offset + 7, v3.get$y());
          $.indexSet(vertexArray, offset + 8, v3.get$z());
          offset += 9;
        }
        fl = $.get$length(chunk_faces4);
        for (var v4 = null, f = 0; $.ltB(f, fl); ++f) {
          face = $.index(obj_faces, $.index(chunk_faces4, f));
          v1 = $.index(vertices, face.get$a());
          v2 = $.index(vertices, face.get$b());
          v3 = $.index(vertices, face.get$c());
          v4 = $.index(vertices, face.get$d());
          $.indexSet(vertexArray, offset, v1.get$x());
          $.indexSet(vertexArray, offset + 1, v1.get$y());
          $.indexSet(vertexArray, offset + 2, v1.get$z());
          $.indexSet(vertexArray, offset + 3, v2.get$x());
          $.indexSet(vertexArray, offset + 4, v2.get$y());
          $.indexSet(vertexArray, offset + 5, v2.get$z());
          $.indexSet(vertexArray, offset + 6, v3.get$x());
          $.indexSet(vertexArray, offset + 7, v3.get$y());
          $.indexSet(vertexArray, offset + 8, v3.get$z());
          $.indexSet(vertexArray, offset + 9, v4.get$x());
          $.indexSet(vertexArray, offset + 10, v4.get$y());
          $.indexSet(vertexArray, offset + 11, v4.get$z());
          offset += 12;
        }
        this._gl.bindBuffer$2(34962, geometryGroup.get$__webglVertexBuffer());
        this._gl.bufferData$3(34962, vertexArray, hint);
      } else {
        v1 = null;
        v2 = null;
        v3 = null;
        fl = null;
        face = null;
        v4 = null;
        f = null;
      }
    default:
      if (state === 42 || state === 41 || state === 40 || state === 39 || state === 38 || state === 37 || state === 36 || state === 35 || state === 34 || state === 33 || state === 32 || state === 31 || state === 30 || state === 0 && dirtyMorphTargets === true)
        switch (state) {
          case 0:
            var vkl = $.get$length(morphTargets);
            var n2 = null;
            var offset_morphTarget = 0;
            var n4 = null;
            var n1 = null;
            var faceVertexNormals = null;
            var nka = null;
            var vk = 0;
            var chf = null;
            var n3 = null;
            var vka = null;
          default:
            L0:
              while (true)
                switch (state) {
                  case 0:
                    if (!$.ltB(vk, vkl))
                      break L0;
                    fl = $.get$length(chunk_faces3);
                    offset_morphTarget = 0;
                    f = 0;
                  default:
                    L1:
                      while (true)
                        switch (state) {
                          case 0:
                            if (!$.ltB(f, fl))
                              break L1;
                            chf = $.index(chunk_faces3, f);
                            face = $.index(obj_faces, chf);
                            t1 = $.index(morphTargets, vk).get$vertices();
                          case 30:
                            state = 0;
                            v1 = $.index(t1, face.get$a());
                            t1 = $.index(morphTargets, vk).get$vertices();
                          case 31:
                            state = 0;
                            v2 = $.index(t1, face.get$b());
                            t1 = $.index(morphTargets, vk).get$vertices();
                          case 32:
                            state = 0;
                            v3 = $.index(t1, face.get$c());
                            vka = $.index(morphTargetsArrays, vk);
                          case 33:
                            state = 0;
                            $.indexSet(vka, offset_morphTarget, v1.get$x());
                            var t5 = offset_morphTarget + 1;
                            $.indexSet(vka, t5, v1.get$y());
                            var t6 = offset_morphTarget + 2;
                            $.indexSet(vka, t6, v1.get$z());
                            var t7 = offset_morphTarget + 3;
                            $.indexSet(vka, t7, v2.get$x());
                            var t8 = offset_morphTarget + 4;
                            $.indexSet(vka, t8, v2.get$y());
                            var t9 = offset_morphTarget + 5;
                            $.indexSet(vka, t9, v2.get$z());
                            var t10 = offset_morphTarget + 6;
                            $.indexSet(vka, t10, v3.get$x());
                            var t11 = offset_morphTarget + 7;
                            $.indexSet(vka, t11, v3.get$y());
                            var t12 = offset_morphTarget + 8;
                            $.indexSet(vka, t12, v3.get$z());
                          case 34:
                            if (state === 34 || state === 0 && material.get$morphNormals() === true)
                              switch (state) {
                                case 0:
                                  if (needsSmoothNormals) {
                                    faceVertexNormals = $.index($.index(morphNormals, vk).get$vertexNormals(), chf);
                                    n1 = faceVertexNormals.get$a();
                                    n2 = faceVertexNormals.get$b();
                                    n3 = faceVertexNormals.get$c();
                                  } else {
                                    n1 = $.index($.index(morphNormals, vk).get$faceNormals(), chf);
                                    n3 = n1;
                                    n2 = n3;
                                  }
                                  nka = $.index(morphNormalsArrays, vk);
                                case 34:
                                  state = 0;
                                  $.indexSet(nka, offset_morphTarget, n1.get$x());
                                  $.indexSet(nka, t5, n1.get$y());
                                  $.indexSet(nka, t6, n1.get$z());
                                  $.indexSet(nka, t7, n2.get$x());
                                  $.indexSet(nka, t8, n2.get$y());
                                  $.indexSet(nka, t9, n2.get$z());
                                  $.indexSet(nka, t10, n3.get$x());
                                  $.indexSet(nka, t11, n3.get$y());
                                  $.indexSet(nka, t12, n3.get$z());
                              }
                            offset_morphTarget += 9;
                            ++f;
                        }
                    fl = $.get$length(chunk_faces4);
                    f = 0;
                  case 35:
                  case 36:
                  case 37:
                  case 38:
                  case 39:
                  case 40:
                    L2:
                      while (true)
                        switch (state) {
                          case 0:
                            if (!$.ltB(f, fl))
                              break L2;
                            chf = $.index(chunk_faces4, f);
                            face = $.index(obj_faces, chf);
                            t1 = $.index(morphTargets, vk).get$vertices();
                          case 35:
                            state = 0;
                            v1 = $.index(t1, face.get$a());
                            t1 = $.index(morphTargets, vk).get$vertices();
                          case 36:
                            state = 0;
                            v2 = $.index(t1, face.get$b());
                            t1 = $.index(morphTargets, vk).get$vertices();
                          case 37:
                            state = 0;
                            v3 = $.index(t1, face.get$c());
                            t1 = $.index(morphTargets, vk).get$vertices();
                          case 38:
                            state = 0;
                            v4 = $.index(t1, face.get$d());
                            vka = $.index(morphTargetsArrays, vk);
                          case 39:
                            state = 0;
                            $.indexSet(vka, offset_morphTarget, v1.get$x());
                            t6 = offset_morphTarget + 1;
                            $.indexSet(vka, t6, v1.get$y());
                            t7 = offset_morphTarget + 2;
                            $.indexSet(vka, t7, v1.get$z());
                            t8 = offset_morphTarget + 3;
                            $.indexSet(vka, t8, v2.get$x());
                            t9 = offset_morphTarget + 4;
                            $.indexSet(vka, t9, v2.get$y());
                            t10 = offset_morphTarget + 5;
                            $.indexSet(vka, t10, v2.get$z());
                            t11 = offset_morphTarget + 6;
                            $.indexSet(vka, t11, v3.get$x());
                            t12 = offset_morphTarget + 7;
                            $.indexSet(vka, t12, v3.get$y());
                            var t13 = offset_morphTarget + 8;
                            $.indexSet(vka, t13, v3.get$z());
                            var t14 = offset_morphTarget + 9;
                            $.indexSet(vka, t14, v4.get$x());
                            var t15 = offset_morphTarget + 10;
                            $.indexSet(vka, t15, v4.get$y());
                            var t16 = offset_morphTarget + 11;
                            $.indexSet(vka, t16, v4.get$z());
                          case 40:
                            if (state === 40 || state === 0 && material.get$morphNormals() === true)
                              switch (state) {
                                case 0:
                                  if (needsSmoothNormals) {
                                    faceVertexNormals = $.index($.index(morphNormals, vk).get$vertexNormals(), chf);
                                    n1 = faceVertexNormals.get$a();
                                    n2 = faceVertexNormals.get$b();
                                    n3 = faceVertexNormals.get$c();
                                    n4 = faceVertexNormals.get$d();
                                  } else {
                                    n1 = $.index($.index(morphNormals, vk).get$faceNormals(), chf);
                                    n3 = n1;
                                    n4 = n3;
                                    n2 = n4;
                                  }
                                  nka = $.index(morphNormalsArrays, vk);
                                case 40:
                                  state = 0;
                                  $.indexSet(nka, offset_morphTarget, n1.get$x());
                                  $.indexSet(nka, t6, n1.get$y());
                                  $.indexSet(nka, t7, n1.get$z());
                                  $.indexSet(nka, t8, n2.get$x());
                                  $.indexSet(nka, t9, n2.get$y());
                                  $.indexSet(nka, t10, n2.get$z());
                                  $.indexSet(nka, t11, n3.get$x());
                                  $.indexSet(nka, t12, n3.get$y());
                                  $.indexSet(nka, t13, n3.get$z());
                                  $.indexSet(nka, t14, n4.get$x());
                                  $.indexSet(nka, t15, n4.get$y());
                                  $.indexSet(nka, t16, n4.get$z());
                              }
                            offset_morphTarget += 12;
                            ++f;
                        }
                    t1 = this._gl;
                    var t2 = geometryGroup.get$__webglMorphTargetsBuffers();
                  case 41:
                    state = 0;
                    t1.bindBuffer$2(34962, $.index(t2, vk));
                    this._gl.bufferData$3(34962, $.index(morphTargetsArrays, vk), hint);
                  case 42:
                    if (state === 42 || state === 0 && material.get$morphNormals() === true)
                      switch (state) {
                        case 0:
                          t1 = this._gl;
                          t2 = geometryGroup.get$__webglMorphNormalsBuffers();
                        case 42:
                          state = 0;
                          t1.bindBuffer$2(34962, $.index(t2, vk));
                          this._gl.bufferData$3(34962, $.index(morphNormalsArrays, vk), hint);
                      }
                    ++vk;
                }
        }
      if ($.isEmpty(obj_skinWeights) !== true) {
        fl = $.get$length(chunk_faces3);
        for (var offset_skin = 0, sa2 = null, sb1 = null, si1 = null, sb3 = null, sw2 = null, sb2 = null, sw1 = null, si2 = null, sa3 = null, si3 = null, f = 0, sw3 = null, sa1 = null; $.ltB(f, fl); ++f) {
          face = $.index(obj_faces, $.index(chunk_faces3, f));
          sw1 = $.index(obj_skinWeights, face.get$a());
          sw2 = $.index(obj_skinWeights, face.get$b());
          sw3 = $.index(obj_skinWeights, face.get$c());
          $.indexSet(skinWeightArray, offset_skin, sw1.get$x());
          t1 = offset_skin + 1;
          $.indexSet(skinWeightArray, t1, sw1.get$y());
          t2 = offset_skin + 2;
          $.indexSet(skinWeightArray, t2, sw1.get$z());
          var t3 = offset_skin + 3;
          $.indexSet(skinWeightArray, t3, sw1.get$w());
          var t4 = offset_skin + 4;
          $.indexSet(skinWeightArray, t4, sw2.get$x());
          t5 = offset_skin + 5;
          $.indexSet(skinWeightArray, t5, sw2.get$y());
          t6 = offset_skin + 6;
          $.indexSet(skinWeightArray, t6, sw2.get$z());
          t7 = offset_skin + 7;
          $.indexSet(skinWeightArray, t7, sw2.get$w());
          t8 = offset_skin + 8;
          $.indexSet(skinWeightArray, t8, sw3.get$x());
          t9 = offset_skin + 9;
          $.indexSet(skinWeightArray, t9, sw3.get$y());
          t10 = offset_skin + 10;
          $.indexSet(skinWeightArray, t10, sw3.get$z());
          t11 = offset_skin + 11;
          $.indexSet(skinWeightArray, t11, sw3.get$w());
          si1 = $.index(obj_skinIndices, face.get$a());
          si2 = $.index(obj_skinIndices, face.get$b());
          si3 = $.index(obj_skinIndices, face.get$c());
          $.indexSet(skinIndexArray, offset_skin, si1.get$x());
          $.indexSet(skinIndexArray, t1, si1.get$y());
          $.indexSet(skinIndexArray, t2, si1.get$z());
          $.indexSet(skinIndexArray, t3, si1.get$w());
          $.indexSet(skinIndexArray, t4, si2.get$x());
          $.indexSet(skinIndexArray, t5, si2.get$y());
          $.indexSet(skinIndexArray, t6, si2.get$z());
          $.indexSet(skinIndexArray, t7, si2.get$w());
          $.indexSet(skinIndexArray, t8, si3.get$x());
          $.indexSet(skinIndexArray, t9, si3.get$y());
          $.indexSet(skinIndexArray, t10, si3.get$z());
          $.indexSet(skinIndexArray, t11, si3.get$w());
          sa1 = $.index(obj_skinVerticesA, face.get$a());
          sa2 = $.index(obj_skinVerticesA, face.get$b());
          sa3 = $.index(obj_skinVerticesA, face.get$c());
          $.indexSet(skinVertexAArray, offset_skin, sa1.get$x());
          $.indexSet(skinVertexAArray, t1, sa1.get$y());
          $.indexSet(skinVertexAArray, t2, sa1.get$z());
          $.indexSet(skinVertexAArray, t3, 1);
          $.indexSet(skinVertexAArray, t4, sa2.get$x());
          $.indexSet(skinVertexAArray, t5, sa2.get$y());
          $.indexSet(skinVertexAArray, t6, sa2.get$z());
          $.indexSet(skinVertexAArray, t7, 1);
          $.indexSet(skinVertexAArray, t8, sa3.get$x());
          $.indexSet(skinVertexAArray, t9, sa3.get$y());
          $.indexSet(skinVertexAArray, t10, sa3.get$z());
          $.indexSet(skinVertexAArray, t11, 1);
          sb1 = $.index(obj_skinVerticesB, face.get$a());
          sb2 = $.index(obj_skinVerticesB, face.get$b());
          sb3 = $.index(obj_skinVerticesB, face.get$c());
          $.indexSet(skinVertexBArray, offset_skin, sb1.get$x());
          $.indexSet(skinVertexBArray, t1, sb1.get$y());
          $.indexSet(skinVertexBArray, t2, sb1.get$z());
          $.indexSet(skinVertexBArray, t3, 1);
          $.indexSet(skinVertexBArray, t4, sb2.get$x());
          $.indexSet(skinVertexBArray, t5, sb2.get$y());
          $.indexSet(skinVertexBArray, t6, sb2.get$z());
          $.indexSet(skinVertexBArray, t7, 1);
          $.indexSet(skinVertexBArray, t8, sb3.get$x());
          $.indexSet(skinVertexBArray, t9, sb3.get$y());
          $.indexSet(skinVertexBArray, t10, sb3.get$z());
          $.indexSet(skinVertexBArray, t11, 1);
          offset_skin += 12;
        }
        fl = $.get$length(chunk_faces4);
        for (var sa4 = null, sw4 = null, sb4 = null, si4 = null, f = 0; $.ltB(f, fl); ++f) {
          face = $.index(obj_faces, $.index(chunk_faces4, f));
          sw1 = $.index(obj_skinWeights, face.get$a());
          sw2 = $.index(obj_skinWeights, face.get$b());
          sw3 = $.index(obj_skinWeights, face.get$c());
          sw4 = $.index(obj_skinWeights, face.get$d());
          $.indexSet(skinWeightArray, offset_skin, sw1.get$x());
          t1 = offset_skin + 1;
          $.indexSet(skinWeightArray, t1, sw1.get$y());
          t2 = offset_skin + 2;
          $.indexSet(skinWeightArray, t2, sw1.get$z());
          t3 = offset_skin + 3;
          $.indexSet(skinWeightArray, t3, sw1.get$w());
          t4 = offset_skin + 4;
          $.indexSet(skinWeightArray, t4, sw2.get$x());
          t5 = offset_skin + 5;
          $.indexSet(skinWeightArray, t5, sw2.get$y());
          t6 = offset_skin + 6;
          $.indexSet(skinWeightArray, t6, sw2.get$z());
          t7 = offset_skin + 7;
          $.indexSet(skinWeightArray, t7, sw2.get$w());
          t8 = offset_skin + 8;
          $.indexSet(skinWeightArray, t8, sw3.get$x());
          t9 = offset_skin + 9;
          $.indexSet(skinWeightArray, t9, sw3.get$y());
          t10 = offset_skin + 10;
          $.indexSet(skinWeightArray, t10, sw3.get$z());
          t11 = offset_skin + 11;
          $.indexSet(skinWeightArray, t11, sw3.get$w());
          t12 = offset_skin + 12;
          $.indexSet(skinWeightArray, t12, sw4.get$x());
          t13 = offset_skin + 13;
          $.indexSet(skinWeightArray, t13, sw4.get$y());
          t14 = offset_skin + 14;
          $.indexSet(skinWeightArray, t14, sw4.get$z());
          t15 = offset_skin + 15;
          $.indexSet(skinWeightArray, t15, sw4.get$w());
          si1 = $.index(obj_skinIndices, face.get$a());
          si2 = $.index(obj_skinIndices, face.get$b());
          si3 = $.index(obj_skinIndices, face.get$c());
          si4 = $.index(obj_skinIndices, face.get$d());
          $.indexSet(skinIndexArray, offset_skin, si1.get$x());
          $.indexSet(skinIndexArray, t1, si1.get$y());
          $.indexSet(skinIndexArray, t2, si1.get$z());
          $.indexSet(skinIndexArray, t3, si1.get$w());
          $.indexSet(skinIndexArray, t4, si2.get$x());
          $.indexSet(skinIndexArray, t5, si2.get$y());
          $.indexSet(skinIndexArray, t6, si2.get$z());
          $.indexSet(skinIndexArray, t7, si2.get$w());
          $.indexSet(skinIndexArray, t8, si3.get$x());
          $.indexSet(skinIndexArray, t9, si3.get$y());
          $.indexSet(skinIndexArray, t10, si3.get$z());
          $.indexSet(skinIndexArray, t11, si3.get$w());
          $.indexSet(skinIndexArray, t12, si4.get$x());
          $.indexSet(skinIndexArray, t13, si4.get$y());
          $.indexSet(skinIndexArray, t14, si4.get$z());
          $.indexSet(skinIndexArray, t15, si4.get$w());
          sa1 = $.index(obj_skinVerticesA, face.get$a());
          sa2 = $.index(obj_skinVerticesA, face.get$b());
          sa3 = $.index(obj_skinVerticesA, face.get$c());
          sa4 = $.index(obj_skinVerticesA, face.get$d());
          $.indexSet(skinVertexAArray, offset_skin, sa1.get$x());
          $.indexSet(skinVertexAArray, t1, sa1.get$y());
          $.indexSet(skinVertexAArray, t2, sa1.get$z());
          $.indexSet(skinVertexAArray, t3, 1);
          $.indexSet(skinVertexAArray, t4, sa2.get$x());
          $.indexSet(skinVertexAArray, t5, sa2.get$y());
          $.indexSet(skinVertexAArray, t6, sa2.get$z());
          $.indexSet(skinVertexAArray, t7, 1);
          $.indexSet(skinVertexAArray, t8, sa3.get$x());
          $.indexSet(skinVertexAArray, t9, sa3.get$y());
          $.indexSet(skinVertexAArray, t10, sa3.get$z());
          $.indexSet(skinVertexAArray, t11, 1);
          $.indexSet(skinVertexAArray, t12, sa4.get$x());
          $.indexSet(skinVertexAArray, t13, sa4.get$y());
          $.indexSet(skinVertexAArray, t14, sa4.get$z());
          $.indexSet(skinVertexAArray, t15, 1);
          sb1 = $.index(obj_skinVerticesB, face.get$a());
          sb2 = $.index(obj_skinVerticesB, face.get$b());
          sb3 = $.index(obj_skinVerticesB, face.get$c());
          sb4 = $.index(obj_skinVerticesB, face.get$d());
          $.indexSet(skinVertexBArray, offset_skin, sb1.get$x());
          $.indexSet(skinVertexBArray, t1, sb1.get$y());
          $.indexSet(skinVertexBArray, t2, sb1.get$z());
          $.indexSet(skinVertexBArray, t3, 1);
          $.indexSet(skinVertexBArray, t4, sb2.get$x());
          $.indexSet(skinVertexBArray, t5, sb2.get$y());
          $.indexSet(skinVertexBArray, t6, sb2.get$z());
          $.indexSet(skinVertexBArray, t7, 1);
          $.indexSet(skinVertexBArray, t8, sb3.get$x());
          $.indexSet(skinVertexBArray, t9, sb3.get$y());
          $.indexSet(skinVertexBArray, t10, sb3.get$z());
          $.indexSet(skinVertexBArray, t11, 1);
          $.indexSet(skinVertexBArray, t12, sb4.get$x());
          $.indexSet(skinVertexBArray, t13, sb4.get$y());
          $.indexSet(skinVertexBArray, t14, sb4.get$z());
          $.indexSet(skinVertexBArray, t15, 1);
          offset_skin += 16;
        }
        if (offset_skin > 0) {
          this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinVertexABuffer());
          this._gl.bufferData$3(34962, skinVertexAArray, hint);
          this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinVertexBBuffer());
          this._gl.bufferData$3(34962, skinVertexBArray, hint);
          this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinIndicesBuffer());
          this._gl.bufferData$3(34962, skinIndexArray, hint);
          this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinWeightsBuffer());
          this._gl.bufferData$3(34962, skinWeightArray, hint);
        }
      }
    case 43:
    case 44:
      if (state === 44 || state === 43 || state === 0 && dirtyColors === true && vertexColorType === true)
        switch (state) {
          case 0:
            fl = $.get$length(chunk_faces3);
            t1 = vertexColorType === 2;
            var faceColor = null;
            var offset_color = 0;
            var c1 = null;
            var c3 = null;
            var vertexColors = null;
            var c2 = null;
            f = 0;
          case 43:
            L3:
              while (true)
                switch (state) {
                  case 0:
                    if (!$.ltB(f, fl))
                      break L3;
                    face = $.index(obj_faces, $.index(chunk_faces3, f));
                    vertexColors = face.get$vertexColors();
                  case 43:
                    state = 0;
                    faceColor = face.get$color();
                    if ($.get$length(vertexColors) === 3 && t1) {
                      c1 = $.index(vertexColors, 0);
                      c2 = $.index(vertexColors, 1);
                      c3 = $.index(vertexColors, 2);
                    } else {
                      c2 = faceColor;
                      c3 = c2;
                      c1 = c3;
                    }
                    $.indexSet(colorArray, offset_color, c1.get$r());
                    $.indexSet(colorArray, offset_color + 1, c1.get$g());
                    $.indexSet(colorArray, offset_color + 2, c1.get$b());
                    $.indexSet(colorArray, offset_color + 3, c2.get$r());
                    $.indexSet(colorArray, offset_color + 4, c2.get$g());
                    $.indexSet(colorArray, offset_color + 5, c2.get$b());
                    $.indexSet(colorArray, offset_color + 6, c3.get$r());
                    $.indexSet(colorArray, offset_color + 7, c3.get$g());
                    $.indexSet(colorArray, offset_color + 8, c3.get$b());
                    offset_color += 9;
                    ++f;
                }
            fl = $.get$length(chunk_faces4);
            var c4 = null;
            f = 0;
          case 44:
            L4:
              while (true)
                switch (state) {
                  case 0:
                    if (!$.ltB(f, fl))
                      break L4;
                    face = $.index(obj_faces, $.index(chunk_faces4, f));
                    vertexColors = face.get$vertexColors();
                  case 44:
                    state = 0;
                    faceColor = face.get$color();
                    if ($.get$length(vertexColors) === 4 && t1) {
                      c1 = $.index(vertexColors, 0);
                      c2 = $.index(vertexColors, 1);
                      c3 = $.index(vertexColors, 2);
                      c4 = $.index(vertexColors, 3);
                    } else {
                      c2 = faceColor;
                      c3 = c2;
                      c1 = c3;
                      c4 = c1;
                    }
                    $.indexSet(colorArray, offset_color, c1.get$r());
                    $.indexSet(colorArray, offset_color + 1, c1.get$g());
                    $.indexSet(colorArray, offset_color + 2, c1.get$b());
                    $.indexSet(colorArray, offset_color + 3, c2.get$r());
                    $.indexSet(colorArray, offset_color + 4, c2.get$g());
                    $.indexSet(colorArray, offset_color + 5, c2.get$b());
                    $.indexSet(colorArray, offset_color + 6, c3.get$r());
                    $.indexSet(colorArray, offset_color + 7, c3.get$g());
                    $.indexSet(colorArray, offset_color + 8, c3.get$b());
                    $.indexSet(colorArray, offset_color + 9, c4.get$r());
                    $.indexSet(colorArray, offset_color + 10, c4.get$g());
                    $.indexSet(colorArray, offset_color + 11, c4.get$b());
                    offset_color += 12;
                    ++f;
                }
            if (offset_color > 0) {
              this._gl.bindBuffer$2(34962, geometryGroup.get$__webglColorBuffer());
              this._gl.bufferData$3(34962, colorArray, hint);
            }
        }
    case 45:
    case 46:
      if (state === 46 || state === 45 || state === 0 && dirtyTangents === true && geometry.get$hasTangents() === true)
        switch (state) {
          case 0:
            fl = $.get$length(chunk_faces3);
            t3 = null;
            var vertexTangents = null;
            t2 = null;
            var offset_tangent = 0;
            t1 = null;
            f = 0;
          case 45:
            L5:
              while (true)
                switch (state) {
                  case 0:
                    if (!$.ltB(f, fl))
                      break L5;
                    face = $.index(obj_faces, $.index(chunk_faces3, f));
                    vertexTangents = face.get$vertexTangents();
                  case 45:
                    state = 0;
                    t10 = $.index(vertexTangents, 0);
                    t2 = $.index(vertexTangents, 1);
                    t3 = $.index(vertexTangents, 2);
                    $.indexSet(tangentArray, offset_tangent, t10.get$x());
                    $.indexSet(tangentArray, offset_tangent + 1, t10.get$y());
                    $.indexSet(tangentArray, offset_tangent + 2, t10.get$z());
                    $.indexSet(tangentArray, offset_tangent + 3, t10.get$w());
                    $.indexSet(tangentArray, offset_tangent + 4, t2.get$x());
                    $.indexSet(tangentArray, offset_tangent + 5, t2.get$y());
                    $.indexSet(tangentArray, offset_tangent + 6, t2.get$z());
                    $.indexSet(tangentArray, offset_tangent + 7, t2.get$w());
                    $.indexSet(tangentArray, offset_tangent + 8, t3.get$x());
                    $.indexSet(tangentArray, offset_tangent + 9, t3.get$y());
                    $.indexSet(tangentArray, offset_tangent + 10, t3.get$z());
                    $.indexSet(tangentArray, offset_tangent + 11, t3.get$w());
                    offset_tangent += 12;
                    t1 = t10;
                    ++f;
                }
            fl = $.get$length(chunk_faces4);
            t4 = null;
            f = 0;
          case 46:
            L6:
              while (true)
                switch (state) {
                  case 0:
                    if (!$.ltB(f, fl))
                      break L6;
                    face = $.index(obj_faces, $.index(chunk_faces4, f));
                    vertexTangents = face.get$vertexTangents();
                  case 46:
                    state = 0;
                    t10 = $.index(vertexTangents, 0);
                    t2 = $.index(vertexTangents, 1);
                    t3 = $.index(vertexTangents, 2);
                    t4 = $.index(vertexTangents, 3);
                    $.indexSet(tangentArray, offset_tangent, t10.get$x());
                    $.indexSet(tangentArray, offset_tangent + 1, t10.get$y());
                    $.indexSet(tangentArray, offset_tangent + 2, t10.get$z());
                    $.indexSet(tangentArray, offset_tangent + 3, t10.get$w());
                    $.indexSet(tangentArray, offset_tangent + 4, t2.get$x());
                    $.indexSet(tangentArray, offset_tangent + 5, t2.get$y());
                    $.indexSet(tangentArray, offset_tangent + 6, t2.get$z());
                    $.indexSet(tangentArray, offset_tangent + 7, t2.get$w());
                    $.indexSet(tangentArray, offset_tangent + 8, t3.get$x());
                    $.indexSet(tangentArray, offset_tangent + 9, t3.get$y());
                    $.indexSet(tangentArray, offset_tangent + 10, t3.get$z());
                    $.indexSet(tangentArray, offset_tangent + 11, t3.get$w());
                    $.indexSet(tangentArray, offset_tangent + 12, t4.get$x());
                    $.indexSet(tangentArray, offset_tangent + 13, t4.get$y());
                    $.indexSet(tangentArray, offset_tangent + 14, t4.get$z());
                    $.indexSet(tangentArray, offset_tangent + 15, t4.get$w());
                    offset_tangent += 16;
                    t1 = t10;
                    ++f;
                }
            this._gl.bindBuffer$2(34962, geometryGroup.get$__webglTangentBuffer());
            this._gl.bufferData$3(34962, tangentArray, hint);
        }
      if (dirtyNormals === true && !$.eqB(normalType, 0)) {
        fl = $.get$length(chunk_faces3);
        for (var vertexNormals = null, offset_normal = 0, i = null, faceNormal = null, f = 0, vn = null; $.ltB(f, fl); ++f) {
          face = $.index(obj_faces, $.index(chunk_faces3, f));
          vertexNormals = face.get$vertexNormals();
          faceNormal = face.get$normal();
          if ($.get$length(vertexNormals) === 3 && needsSmoothNormals)
            for (i = 0; i < 3; ++i) {
              vn = $.index(vertexNormals, i);
              $.indexSet(normalArray, offset_normal, vn.get$x());
              $.indexSet(normalArray, offset_normal + 1, vn.get$y());
              $.indexSet(normalArray, offset_normal + 2, vn.get$z());
              offset_normal += 3;
            }
          else
            for (i = 0; i < 3; ++i) {
              $.indexSet(normalArray, offset_normal, faceNormal.get$x());
              $.indexSet(normalArray, offset_normal + 1, faceNormal.get$y());
              $.indexSet(normalArray, offset_normal + 2, faceNormal.get$z());
              offset_normal += 3;
            }
        }
        fl = $.get$length(chunk_faces4);
        for (f = 0; $.ltB(f, fl); ++f) {
          face = $.index(obj_faces, $.index(chunk_faces4, f));
          vertexNormals = face.get$vertexNormals();
          faceNormal = face.get$normal();
          if ($.get$length(vertexNormals) === 4 && needsSmoothNormals)
            for (i = 0; i < 4; ++i) {
              vn = $.index(vertexNormals, i);
              $.indexSet(normalArray, offset_normal, vn.get$x());
              $.indexSet(normalArray, offset_normal + 1, vn.get$y());
              $.indexSet(normalArray, offset_normal + 2, vn.get$z());
              offset_normal += 3;
            }
          else
            for (i = 0; i < 4; ++i) {
              $.indexSet(normalArray, offset_normal, faceNormal.get$x());
              $.indexSet(normalArray, offset_normal + 1, faceNormal.get$y());
              $.indexSet(normalArray, offset_normal + 2, faceNormal.get$z());
              offset_normal += 3;
            }
        }
        this._gl.bindBuffer$2(34962, geometryGroup.get$__webglNormalBuffer());
        this._gl.bufferData$3(34962, normalArray, hint);
      } else
        i = null;
      t1 = dirtyUvs === true;
      if (t1 && $.isEmpty(obj_uvs) !== true && uvType === true) {
        fl = $.get$length(chunk_faces3);
        for (var uv = null, fi = null, uvi = null, offset_uv = 0, f = 0; $.ltB(f, fl); ++f) {
          fi = $.index(chunk_faces3, f);
          face = $.index(obj_faces, fi);
          uv = $.index(obj_uvs, fi);
          if (uv == null)
            continue;
          for (i = 0; i < 3; ++i) {
            uvi = $.index(uv, i);
            $.indexSet(uvArray, offset_uv, uvi.get$u());
            $.indexSet(uvArray, offset_uv + 1, uvi.get$v());
            offset_uv += 2;
          }
        }
        fl = $.get$length(chunk_faces4);
        for (f = 0; $.ltB(f, fl); ++f) {
          fi = $.index(chunk_faces4, f);
          face = $.index(obj_faces, fi);
          uv = $.index(obj_uvs, fi);
          if (uv == null)
            continue;
          for (i = 0; i < 4; ++i) {
            uvi = $.index(uv, i);
            $.indexSet(uvArray, offset_uv, uvi.get$u());
            $.indexSet(uvArray, offset_uv + 1, uvi.get$v());
            offset_uv += 2;
          }
        }
        if (offset_uv > 0) {
          this._gl.bindBuffer$2(34962, geometryGroup.get$__webglUVBuffer());
          this._gl.bufferData$3(34962, uvArray, hint);
        }
      } else
        fi = null;
      if (t1 && !(obj_uvs2 == null) && uvType === true) {
        fl = $.get$length(chunk_faces3);
        for (var uv2 = null, uv2i = null, offset_uv2 = 0, f = 0; $.ltB(f, fl); ++f) {
          fi = $.index(chunk_faces3, f);
          face = $.index(obj_faces, fi);
          uv2 = $.index(obj_uvs2, fi);
          if (uv2 == null)
            continue;
          for (i = 0; i < 3; ++i) {
            uv2i = $.index(uv2, i);
            $.indexSet(uv2Array, offset_uv2, uv2i.get$u());
            $.indexSet(uv2Array, offset_uv2 + 1, uv2i.get$v());
            offset_uv2 += 2;
          }
        }
        fl = $.get$length(chunk_faces4);
        for (f = 0; $.ltB(f, fl); ++f) {
          fi = $.index(chunk_faces4, f);
          face = $.index(obj_faces, fi);
          uv2 = $.index(obj_uvs2, fi);
          if (uv2 == null)
            continue;
          for (i = 0; i < 4; ++i) {
            uv2i = $.index(uv2, i);
            $.indexSet(uv2Array, offset_uv2, uv2i.get$u());
            $.indexSet(uv2Array, offset_uv2 + 1, uv2i.get$v());
            offset_uv2 += 2;
          }
        }
        if (offset_uv2 > 0) {
          this._gl.bindBuffer$2(34962, geometryGroup.get$__webglUV2Buffer());
          this._gl.bufferData$3(34962, uv2Array, hint);
        }
      }
      if (dirtyElements === true) {
        fl = $.get$length(chunk_faces3);
        for (var offset_face = 0, vertexIndex = 0, offset_line = 0, f = 0; $.ltB(f, fl); ++f) {
          face = $.index(obj_faces, $.index(chunk_faces3, f));
          $.indexSet(faceArray, offset_face, vertexIndex);
          t1 = offset_face + 1;
          t2 = vertexIndex + 1;
          $.indexSet(faceArray, t1, t2);
          t1 = offset_face + 2;
          t3 = vertexIndex + 2;
          $.indexSet(faceArray, t1, t3);
          offset_face += 3;
          $.indexSet(lineArray, offset_line, vertexIndex);
          $.indexSet(lineArray, offset_line + 1, t2);
          $.indexSet(lineArray, offset_line + 2, vertexIndex);
          $.indexSet(lineArray, offset_line + 3, t3);
          $.indexSet(lineArray, offset_line + 4, t2);
          $.indexSet(lineArray, offset_line + 5, t3);
          offset_line += 6;
          vertexIndex += 3;
        }
        fl = $.get$length(chunk_faces4);
        for (f = 0; $.ltB(f, fl); ++f) {
          face = $.index(obj_faces, $.index(chunk_faces4, f));
          $.indexSet(faceArray, offset_face, vertexIndex);
          t1 = offset_face + 1;
          t2 = vertexIndex + 1;
          $.indexSet(faceArray, t1, t2);
          t1 = offset_face + 2;
          t3 = vertexIndex + 3;
          $.indexSet(faceArray, t1, t3);
          $.indexSet(faceArray, offset_face + 3, t2);
          t1 = offset_face + 4;
          t4 = vertexIndex + 2;
          $.indexSet(faceArray, t1, t4);
          $.indexSet(faceArray, offset_face + 5, t3);
          offset_face += 6;
          $.indexSet(lineArray, offset_line, vertexIndex);
          $.indexSet(lineArray, offset_line + 1, t2);
          $.indexSet(lineArray, offset_line + 2, vertexIndex);
          $.indexSet(lineArray, offset_line + 3, t3);
          $.indexSet(lineArray, offset_line + 4, t2);
          $.indexSet(lineArray, offset_line + 5, t4);
          $.indexSet(lineArray, offset_line + 6, t4);
          $.indexSet(lineArray, offset_line + 7, t3);
          offset_line += 8;
          vertexIndex += 4;
        }
        this._gl.bindBuffer$2(34963, geometryGroup.get$__webglFaceBuffer());
        this._gl.bufferData$3(34963, faceArray, hint);
        this._gl.bindBuffer$2(34963, geometryGroup.get$__webglLineBuffer());
        this._gl.bufferData$3(34963, lineArray, hint);
      }
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
    case 272:
    case 273:
    case 274:
    case 275:
    case 276:
    case 277:
    case 278:
    case 279:
    case 280:
    case 281:
    case 282:
    case 283:
    case 284:
    case 285:
    case 286:
    case 287:
    case 288:
    case 289:
    case 290:
    case 291:
    case 292:
    case 293:
    case 294:
    case 295:
    case 296:
    case 297:
    case 298:
      if (state === 298 || state === 297 || state === 296 || state === 295 || state === 294 || state === 293 || state === 292 || state === 291 || state === 290 || state === 289 || state === 288 || state === 287 || state === 286 || state === 285 || state === 284 || state === 283 || state === 282 || state === 281 || state === 280 || state === 279 || state === 278 || state === 277 || state === 276 || state === 275 || state === 274 || state === 273 || state === 272 || state === 271 || state === 270 || state === 269 || state === 268 || state === 267 || state === 266 || state === 265 || state === 264 || state === 263 || state === 262 || state === 261 || state === 260 || state === 259 || state === 258 || state === 257 || state === 256 || state === 255 || state === 254 || state === 253 || state === 252 || state === 251 || state === 250 || state === 249 || state === 248 || state === 247 || state === 246 || state === 245 || state === 244 || state === 243 || state === 242 || state === 241 || state === 240 || state === 239 || state === 238 || state === 237 || state === 236 || state === 235 || state === 234 || state === 233 || state === 232 || state === 231 || state === 230 || state === 229 || state === 228 || state === 227 || state === 226 || state === 225 || state === 224 || state === 223 || state === 222 || state === 221 || state === 220 || state === 219 || state === 218 || state === 217 || state === 216 || state === 215 || state === 214 || state === 213 || state === 212 || state === 211 || state === 210 || state === 209 || state === 208 || state === 207 || state === 206 || state === 205 || state === 204 || state === 203 || state === 202 || state === 201 || state === 200 || state === 199 || state === 198 || state === 197 || state === 196 || state === 195 || state === 194 || state === 193 || state === 192 || state === 191 || state === 190 || state === 189 || state === 188 || state === 187 || state === 186 || state === 185 || state === 184 || state === 183 || state === 182 || state === 181 || state === 180 || state === 179 || state === 178 || state === 177 || state === 176 || state === 175 || state === 174 || state === 173 || state === 172 || state === 171 || state === 170 || state === 169 || state === 168 || state === 167 || state === 166 || state === 165 || state === 164 || state === 163 || state === 162 || state === 161 || state === 160 || state === 159 || state === 158 || state === 157 || state === 156 || state === 155 || state === 154 || state === 153 || state === 152 || state === 151 || state === 150 || state === 149 || state === 148 || state === 147 || state === 146 || state === 145 || state === 144 || state === 143 || state === 142 || state === 141 || state === 140 || state === 139 || state === 138 || state === 137 || state === 136 || state === 135 || state === 134 || state === 133 || state === 132 || state === 131 || state === 130 || state === 129 || state === 128 || state === 127 || state === 126 || state === 125 || state === 124 || state === 123 || state === 122 || state === 121 || state === 120 || state === 119 || state === 118 || state === 117 || state === 116 || state === 115 || state === 114 || state === 113 || state === 112 || state === 111 || state === 110 || state === 109 || state === 108 || state === 107 || state === 106 || state === 105 || state === 104 || state === 103 || state === 102 || state === 101 || state === 100 || state === 99 || state === 98 || state === 97 || state === 96 || state === 95 || state === 94 || state === 93 || state === 92 || state === 91 || state === 90 || state === 89 || state === 88 || state === 87 || state === 86 || state === 85 || state === 84 || state === 83 || state === 82 || state === 81 || state === 80 || state === 79 || state === 78 || state === 77 || state === 76 || state === 75 || state === 74 || state === 73 || state === 72 || state === 71 || state === 70 || state === 69 || state === 68 || state === 67 || state === 66 || state === 65 || state === 64 || state === 63 || state === 62 || state === 61 || state === 60 || state === 59 || state === 58 || state === 57 || state === 56 || state === 55 || state === 54 || state === 53 || state === 52 || state === 51 || state === 50 || state === 49 || state === 48 || state === 47 || state === 0 && !(customAttributes == null))
        switch (state) {
          case 0:
            var il = $.get$length(customAttributes);
            var customAttribute = null;
            i = 0;
            var offset_customSrc = 0;
            var value = null;
            var offset_custom = 0;
          default:
            L7:
              while (true)
                switch (state) {
                  case 0:
                    if (!$.ltB(i, il))
                      break L7;
                  default:
                    c$0: {
                      switch (state) {
                        case 0:
                          customAttribute = $.index(customAttributes, i);
                          if (customAttribute.get$__original().get$needsUpdate() !== true)
                            break c$0;
                        default:
                          if (state === 69 || state === 68 || state === 67 || state === 66 || state === 65 || state === 64 || state === 63 || state === 62 || state === 61 || state === 60 || state === 59 || state === 58 || state === 57 || state === 56 || state === 55 || state === 54 || state === 53 || state === 52 || state === 51 || state === 50 || state === 49 || state === 48 || state === 47 || state === 0 && customAttribute.get$size() === 1)
                            switch (state) {
                              case 0:
                                t1 = customAttribute.get$boundTo();
                              default:
                                if (state === 60 || state === 59 || state === 58 || state === 57 || state === 56 || state === 55 || state === 54 || state === 53 || state === 52 || state === 51 || state === 50 || state === 49 || state === 48 || state === 47 || state === 0 && (t1 == null || t1 === 'vertices'))
                                  switch (state) {
                                    case 0:
                                      fl = $.get$length(chunk_faces3);
                                      offset_custom = 0;
                                      f = 0;
                                    default:
                                      L8:
                                        while (true)
                                          switch (state) {
                                            case 0:
                                              if (!$.ltB(f, fl))
                                                break L8;
                                              face = $.index(obj_faces, $.index(chunk_faces3, f));
                                              t1 = customAttribute.get$array();
                                            case 47:
                                              state = 0;
                                              t3 = customAttribute.get$value();
                                            case 48:
                                              state = 0;
                                              $.indexSet(t1, offset_custom, $.index(t3, face.get$a()));
                                              t1 = customAttribute.get$array();
                                            case 49:
                                              state = 0;
                                              t6 = offset_custom + 1;
                                              t7 = customAttribute.get$value();
                                            case 50:
                                              state = 0;
                                              $.indexSet(t1, t6, $.index(t7, face.get$b()));
                                              t6 = customAttribute.get$array();
                                            case 51:
                                              state = 0;
                                              t9 = offset_custom + 2;
                                              t10 = customAttribute.get$value();
                                            case 52:
                                              state = 0;
                                              $.indexSet(t6, t9, $.index(t10, face.get$c()));
                                              offset_custom += 3;
                                              ++f;
                                          }
                                      fl = $.get$length(chunk_faces4);
                                      f = 0;
                                    case 53:
                                    case 54:
                                    case 55:
                                    case 56:
                                    case 57:
                                    case 58:
                                    case 59:
                                    case 60:
                                      L9:
                                        while (true)
                                          switch (state) {
                                            case 0:
                                              if (!$.ltB(f, fl))
                                                break L9;
                                              face = $.index(obj_faces, $.index(chunk_faces4, f));
                                              t1 = customAttribute.get$array();
                                            case 53:
                                              state = 0;
                                              t3 = customAttribute.get$value();
                                            case 54:
                                              state = 0;
                                              $.indexSet(t1, offset_custom, $.index(t3, face.get$a()));
                                              t1 = customAttribute.get$array();
                                            case 55:
                                              state = 0;
                                              t6 = offset_custom + 1;
                                              t7 = customAttribute.get$value();
                                            case 56:
                                              state = 0;
                                              $.indexSet(t1, t6, $.index(t7, face.get$b()));
                                              t6 = customAttribute.get$array();
                                            case 57:
                                              state = 0;
                                              t9 = offset_custom + 2;
                                              t10 = customAttribute.get$value();
                                            case 58:
                                              state = 0;
                                              $.indexSet(t6, t9, $.index(t10, face.get$c()));
                                              t9 = customAttribute.get$array();
                                            case 59:
                                              state = 0;
                                              t12 = offset_custom + 3;
                                              t13 = customAttribute.get$value();
                                            case 60:
                                              state = 0;
                                              $.indexSet(t9, t12, $.index(t13, face.get$d()));
                                              offset_custom += 4;
                                              ++f;
                                          }
                                  }
                                else
                                  switch (state) {
                                    case 0:
                                    default:
                                      if (state === 69 || state === 68 || state === 67 || state === 66 || state === 65 || state === 64 || state === 63 || state === 62 || state === 61 || state === 0 && t1 === 'faces')
                                        switch (state) {
                                          case 0:
                                            fl = $.get$length(chunk_faces3);
                                            offset_custom = 0;
                                            f = 0;
                                          default:
                                            L10:
                                              while (true)
                                                switch (state) {
                                                  case 0:
                                                    if (!$.ltB(f, fl))
                                                      break L10;
                                                    t1 = customAttribute.get$value();
                                                  case 61:
                                                    state = 0;
                                                    value = $.index(t1, $.index(chunk_faces3, f));
                                                    t1 = customAttribute.get$array();
                                                  case 62:
                                                    state = 0;
                                                    $.indexSet(t1, offset_custom, value);
                                                    t1 = customAttribute.get$array();
                                                  case 63:
                                                    state = 0;
                                                    $.indexSet(t1, offset_custom + 1, value);
                                                    t1 = customAttribute.get$array();
                                                  case 64:
                                                    state = 0;
                                                    $.indexSet(t1, offset_custom + 2, value);
                                                    offset_custom += 3;
                                                    ++f;
                                                }
                                            fl = $.get$length(chunk_faces4);
                                            f = 0;
                                          case 65:
                                          case 66:
                                          case 67:
                                          case 68:
                                          case 69:
                                            L11:
                                              while (true)
                                                switch (state) {
                                                  case 0:
                                                    if (!$.ltB(f, fl))
                                                      break L11;
                                                    t1 = customAttribute.get$value();
                                                  case 65:
                                                    state = 0;
                                                    value = $.index(t1, $.index(chunk_faces4, f));
                                                    t1 = customAttribute.get$array();
                                                  case 66:
                                                    state = 0;
                                                    $.indexSet(t1, offset_custom, value);
                                                    t1 = customAttribute.get$array();
                                                  case 67:
                                                    state = 0;
                                                    $.indexSet(t1, offset_custom + 1, value);
                                                    t1 = customAttribute.get$array();
                                                  case 68:
                                                    state = 0;
                                                    $.indexSet(t1, offset_custom + 2, value);
                                                    t1 = customAttribute.get$array();
                                                  case 69:
                                                    state = 0;
                                                    $.indexSet(t1, offset_custom + 3, value);
                                                    offset_custom += 4;
                                                    ++f;
                                                }
                                        }
                                      else
                                        offset_custom = 0;
                                  }
                            }
                          else
                            switch (state) {
                              case 0:
                              default:
                                if (state === 107 || state === 106 || state === 105 || state === 104 || state === 103 || state === 102 || state === 101 || state === 100 || state === 99 || state === 98 || state === 97 || state === 96 || state === 95 || state === 94 || state === 93 || state === 92 || state === 91 || state === 90 || state === 89 || state === 88 || state === 87 || state === 86 || state === 85 || state === 84 || state === 83 || state === 82 || state === 81 || state === 80 || state === 79 || state === 78 || state === 77 || state === 76 || state === 75 || state === 74 || state === 73 || state === 72 || state === 71 || state === 70 || state === 0 && customAttribute.get$size() === 2)
                                  switch (state) {
                                    case 0:
                                      t1 = customAttribute.get$boundTo();
                                    case 70:
                                      state = 0;
                                    default:
                                      if (state === 91 || state === 90 || state === 89 || state === 88 || state === 87 || state === 86 || state === 85 || state === 84 || state === 83 || state === 82 || state === 81 || state === 80 || state === 79 || state === 78 || state === 77 || state === 76 || state === 75 || state === 74 || state === 73 || state === 72 || state === 71 || state === 0 && (t1 == null || $.eqB(t1, 'vertices')))
                                        switch (state) {
                                          case 0:
                                            fl = $.get$length(chunk_faces3);
                                            offset_custom = 0;
                                            f = 0;
                                          default:
                                            L12:
                                              while (true)
                                                switch (state) {
                                                  case 0:
                                                    if (!$.ltB(f, fl))
                                                      break L12;
                                                    face = $.index(obj_faces, $.index(chunk_faces3, f));
                                                    t1 = customAttribute.get$value();
                                                  case 71:
                                                    state = 0;
                                                    v1 = $.index(t1, face.get$a());
                                                    t1 = customAttribute.get$value();
                                                  case 72:
                                                    state = 0;
                                                    v2 = $.index(t1, face.get$b());
                                                    t1 = customAttribute.get$value();
                                                  case 73:
                                                    state = 0;
                                                    v3 = $.index(t1, face.get$c());
                                                    t1 = customAttribute.get$array();
                                                  case 74:
                                                    state = 0;
                                                    $.indexSet(t1, offset_custom, v1.get$x());
                                                    t1 = customAttribute.get$array();
                                                  case 75:
                                                    state = 0;
                                                    $.indexSet(t1, offset_custom + 1, v1.get$y());
                                                    t1 = customAttribute.get$array();
                                                  case 76:
                                                    state = 0;
                                                    $.indexSet(t1, offset_custom + 2, v2.get$x());
                                                    t1 = customAttribute.get$array();
                                                  case 77:
                                                    state = 0;
                                                    $.indexSet(t1, offset_custom + 3, v2.get$y());
                                                    t1 = customAttribute.get$array();
                                                  case 78:
                                                    state = 0;
                                                    $.indexSet(t1, offset_custom + 4, v3.get$x());
                                                    t1 = customAttribute.get$array();
                                                  case 79:
                                                    state = 0;
                                                    $.indexSet(t1, offset_custom + 5, v3.get$y());
                                                    offset_custom += 6;
                                                    ++f;
                                                }
                                            fl = $.get$length(chunk_faces4);
                                            f = 0;
                                          case 80:
                                          case 81:
                                          case 82:
                                          case 83:
                                          case 84:
                                          case 85:
                                          case 86:
                                          case 87:
                                          case 88:
                                          case 89:
                                          case 90:
                                          case 91:
                                            L13:
                                              while (true)
                                                switch (state) {
                                                  case 0:
                                                    if (!$.ltB(f, fl))
                                                      break L13;
                                                    face = $.index(obj_faces, $.index(chunk_faces4, f));
                                                    t1 = customAttribute.get$value();
                                                  case 80:
                                                    state = 0;
                                                    v1 = $.index(t1, face.get$a());
                                                    t1 = customAttribute.get$value();
                                                  case 81:
                                                    state = 0;
                                                    v2 = $.index(t1, face.get$b());
                                                    t1 = customAttribute.get$value();
                                                  case 82:
                                                    state = 0;
                                                    v3 = $.index(t1, face.get$c());
                                                    t1 = customAttribute.get$value();
                                                  case 83:
                                                    state = 0;
                                                    v4 = $.index(t1, face.get$d());
                                                    t1 = customAttribute.get$array();
                                                  case 84:
                                                    state = 0;
                                                    $.indexSet(t1, offset_custom, v1.get$x());
                                                    t1 = customAttribute.get$array();
                                                  case 85:
                                                    state = 0;
                                                    $.indexSet(t1, offset_custom + 1, v1.get$y());
                                                    t1 = customAttribute.get$array();
                                                  case 86:
                                                    state = 0;
                                                    $.indexSet(t1, offset_custom + 2, v2.get$x());
                                                    t1 = customAttribute.get$array();
                                                  case 87:
                                                    state = 0;
                                                    $.indexSet(t1, offset_custom + 3, v2.get$y());
                                                    t1 = customAttribute.get$array();
                                                  case 88:
                                                    state = 0;
                                                    $.indexSet(t1, offset_custom + 4, v3.get$x());
                                                    t1 = customAttribute.get$array();
                                                  case 89:
                                                    state = 0;
                                                    $.indexSet(t1, offset_custom + 5, v3.get$y());
                                                    t1 = customAttribute.get$array();
                                                  case 90:
                                                    state = 0;
                                                    $.indexSet(t1, offset_custom + 6, v4.get$x());
                                                    t1 = customAttribute.get$array();
                                                  case 91:
                                                    state = 0;
                                                    $.indexSet(t1, offset_custom + 7, v4.get$y());
                                                    offset_custom += 8;
                                                    ++f;
                                                }
                                        }
                                      else
                                        switch (state) {
                                          case 0:
                                          default:
                                            if (state === 107 || state === 106 || state === 105 || state === 104 || state === 103 || state === 102 || state === 101 || state === 100 || state === 99 || state === 98 || state === 97 || state === 96 || state === 95 || state === 94 || state === 93 || state === 92 || state === 0 && customAttribute.get$boundTo() === 'faces')
                                              switch (state) {
                                                case 0:
                                                  fl = $.get$length(chunk_faces3);
                                                  offset_custom = 0;
                                                  f = 0;
                                                default:
                                                  L14:
                                                    while (true)
                                                      switch (state) {
                                                        case 0:
                                                          if (!$.ltB(f, fl))
                                                            break L14;
                                                          t1 = customAttribute.get$value();
                                                        case 92:
                                                          state = 0;
                                                          value = $.index(t1, $.index(chunk_faces3, f));
                                                          t1 = customAttribute.get$array();
                                                        case 93:
                                                          state = 0;
                                                          $.indexSet(t1, offset_custom, value.get$x());
                                                          t1 = customAttribute.get$array();
                                                        case 94:
                                                          state = 0;
                                                          $.indexSet(t1, offset_custom + 1, value.get$y());
                                                          t1 = customAttribute.get$array();
                                                        case 95:
                                                          state = 0;
                                                          $.indexSet(t1, offset_custom + 2, value.get$x());
                                                          t1 = customAttribute.get$array();
                                                        case 96:
                                                          state = 0;
                                                          $.indexSet(t1, offset_custom + 3, value.get$y());
                                                          t1 = customAttribute.get$array();
                                                        case 97:
                                                          state = 0;
                                                          $.indexSet(t1, offset_custom + 4, value.get$x());
                                                          t1 = customAttribute.get$array();
                                                        case 98:
                                                          state = 0;
                                                          $.indexSet(t1, offset_custom + 5, value.get$y());
                                                          offset_custom += 6;
                                                          v3 = value;
                                                          v2 = v3;
                                                          v1 = v2;
                                                          ++f;
                                                      }
                                                  fl = $.get$length(chunk_faces4);
                                                  f = 0;
                                                case 99:
                                                case 100:
                                                case 101:
                                                case 102:
                                                case 103:
                                                case 104:
                                                case 105:
                                                case 106:
                                                case 107:
                                                  L15:
                                                    while (true)
                                                      switch (state) {
                                                        case 0:
                                                          if (!$.ltB(f, fl))
                                                            break L15;
                                                          t1 = customAttribute.get$value();
                                                        case 99:
                                                          state = 0;
                                                          value = $.index(t1, $.index(chunk_faces4, f));
                                                          t1 = customAttribute.get$array();
                                                        case 100:
                                                          state = 0;
                                                          $.indexSet(t1, offset_custom, value.get$x());
                                                          t1 = customAttribute.get$array();
                                                        case 101:
                                                          state = 0;
                                                          $.indexSet(t1, offset_custom + 1, value.get$y());
                                                          t1 = customAttribute.get$array();
                                                        case 102:
                                                          state = 0;
                                                          $.indexSet(t1, offset_custom + 2, value.get$x());
                                                          t1 = customAttribute.get$array();
                                                        case 103:
                                                          state = 0;
                                                          $.indexSet(t1, offset_custom + 3, value.get$y());
                                                          t1 = customAttribute.get$array();
                                                        case 104:
                                                          state = 0;
                                                          $.indexSet(t1, offset_custom + 4, value.get$x());
                                                          t1 = customAttribute.get$array();
                                                        case 105:
                                                          state = 0;
                                                          $.indexSet(t1, offset_custom + 5, value.get$y());
                                                          t1 = customAttribute.get$array();
                                                        case 106:
                                                          state = 0;
                                                          $.indexSet(t1, offset_custom + 6, value.get$x());
                                                          t1 = customAttribute.get$array();
                                                        case 107:
                                                          state = 0;
                                                          $.indexSet(t1, offset_custom + 7, value.get$y());
                                                          offset_custom += 8;
                                                          v4 = value;
                                                          v3 = v4;
                                                          v2 = v3;
                                                          v1 = v2;
                                                          ++f;
                                                      }
                                              }
                                            else
                                              offset_custom = 0;
                                        }
                                  }
                                else
                                  switch (state) {
                                    case 0:
                                    default:
                                      if (state === 200 || state === 199 || state === 198 || state === 197 || state === 196 || state === 195 || state === 194 || state === 193 || state === 192 || state === 191 || state === 190 || state === 189 || state === 188 || state === 187 || state === 186 || state === 185 || state === 184 || state === 183 || state === 182 || state === 181 || state === 180 || state === 179 || state === 178 || state === 177 || state === 176 || state === 175 || state === 174 || state === 173 || state === 172 || state === 171 || state === 170 || state === 169 || state === 168 || state === 167 || state === 166 || state === 165 || state === 164 || state === 163 || state === 162 || state === 161 || state === 160 || state === 159 || state === 158 || state === 157 || state === 156 || state === 155 || state === 154 || state === 153 || state === 152 || state === 151 || state === 150 || state === 149 || state === 148 || state === 147 || state === 146 || state === 145 || state === 144 || state === 143 || state === 142 || state === 141 || state === 140 || state === 139 || state === 138 || state === 137 || state === 136 || state === 135 || state === 134 || state === 133 || state === 132 || state === 131 || state === 130 || state === 129 || state === 128 || state === 127 || state === 126 || state === 125 || state === 124 || state === 123 || state === 122 || state === 121 || state === 120 || state === 119 || state === 118 || state === 117 || state === 116 || state === 115 || state === 114 || state === 113 || state === 112 || state === 111 || state === 110 || state === 109 || state === 108 || state === 0 && customAttribute.get$size() === 3)
                                        switch (state) {
                                          case 0:
                                            var pp = customAttribute.get$type() === 'c' ? ['r', 'g', 'b'] : ['x', 'y', 'z'];
                                            t1 = customAttribute.get$boundTo();
                                          case 108:
                                            state = 0;
                                          default:
                                            if (state === 143 || state === 142 || state === 141 || state === 140 || state === 139 || state === 138 || state === 137 || state === 136 || state === 135 || state === 134 || state === 133 || state === 132 || state === 131 || state === 130 || state === 129 || state === 128 || state === 127 || state === 126 || state === 125 || state === 124 || state === 123 || state === 122 || state === 121 || state === 120 || state === 119 || state === 118 || state === 117 || state === 116 || state === 115 || state === 114 || state === 113 || state === 112 || state === 111 || state === 110 || state === 109 || state === 0 && (t1 == null || $.eqB(t1, 'vertices')))
                                              switch (state) {
                                                case 0:
                                                  fl = $.get$length(chunk_faces3);
                                                  offset_custom = 0;
                                                  f = 0;
                                                default:
                                                  L16:
                                                    while (true)
                                                      switch (state) {
                                                        case 0:
                                                          if (!$.ltB(f, fl))
                                                            break L16;
                                                          face = $.index(obj_faces, $.index(chunk_faces3, f));
                                                          t1 = customAttribute.get$value();
                                                        case 109:
                                                          state = 0;
                                                          v1 = $.index(t1, face.get$a());
                                                        case 110:
                                                          state = 0;
                                                          t3 = customAttribute.get$value();
                                                        case 111:
                                                          state = 0;
                                                          v2 = $.index(t3, face.get$b());
                                                        case 112:
                                                          state = 0;
                                                          t5 = customAttribute.get$value();
                                                        case 113:
                                                          state = 0;
                                                          v3 = $.index(t5, face.get$c());
                                                        case 114:
                                                          state = 0;
                                                          t7 = customAttribute.get$array();
                                                        case 115:
                                                          state = 0;
                                                          if (0 >= pp.length)
                                                            throw $.ioore(0);
                                                          $.indexSet(t7, offset_custom, $.index(v1, pp[0]));
                                                          t7 = customAttribute.get$array();
                                                        case 116:
                                                          state = 0;
                                                          t10 = offset_custom + 1;
                                                          if (1 >= pp.length)
                                                            throw $.ioore(1);
                                                          $.indexSet(t7, t10, $.index(v1, pp[1]));
                                                          t10 = customAttribute.get$array();
                                                        case 117:
                                                          state = 0;
                                                          t11 = offset_custom + 2;
                                                          if (2 >= pp.length)
                                                            throw $.ioore(2);
                                                          $.indexSet(t10, t11, $.index(v1, pp[2]));
                                                          t11 = customAttribute.get$array();
                                                        case 118:
                                                          state = 0;
                                                          t12 = offset_custom + 3;
                                                          if (0 >= pp.length)
                                                            throw $.ioore(0);
                                                          $.indexSet(t11, t12, $.index(v2, pp[0]));
                                                          t12 = customAttribute.get$array();
                                                        case 119:
                                                          state = 0;
                                                          t13 = offset_custom + 4;
                                                          if (1 >= pp.length)
                                                            throw $.ioore(1);
                                                          $.indexSet(t12, t13, $.index(v2, pp[1]));
                                                          t13 = customAttribute.get$array();
                                                        case 120:
                                                          state = 0;
                                                          t14 = offset_custom + 5;
                                                          if (2 >= pp.length)
                                                            throw $.ioore(2);
                                                          $.indexSet(t13, t14, $.index(v2, pp[2]));
                                                          t14 = customAttribute.get$array();
                                                        case 121:
                                                          state = 0;
                                                          t15 = offset_custom + 6;
                                                          if (0 >= pp.length)
                                                            throw $.ioore(0);
                                                          $.indexSet(t14, t15, $.index(v3, pp[0]));
                                                          t15 = customAttribute.get$array();
                                                        case 122:
                                                          state = 0;
                                                          t16 = offset_custom + 7;
                                                          if (1 >= pp.length)
                                                            throw $.ioore(1);
                                                          $.indexSet(t15, t16, $.index(v3, pp[1]));
                                                          t16 = customAttribute.get$array();
                                                        case 123:
                                                          state = 0;
                                                          var t17 = offset_custom + 8;
                                                          if (2 >= pp.length)
                                                            throw $.ioore(2);
                                                          $.indexSet(t16, t17, $.index(v3, pp[2]));
                                                          offset_custom += 9;
                                                          ++f;
                                                      }
                                                  fl = $.get$length(chunk_faces4);
                                                  f = 0;
                                                case 124:
                                                case 125:
                                                case 126:
                                                case 127:
                                                case 128:
                                                case 129:
                                                case 130:
                                                case 131:
                                                case 132:
                                                case 133:
                                                case 134:
                                                case 135:
                                                case 136:
                                                case 137:
                                                case 138:
                                                case 139:
                                                case 140:
                                                case 141:
                                                case 142:
                                                case 143:
                                                  L17:
                                                    while (true)
                                                      switch (state) {
                                                        case 0:
                                                          if (!$.ltB(f, fl))
                                                            break L17;
                                                          face = $.index(obj_faces, $.index(chunk_faces4, f));
                                                          t1 = customAttribute.get$value();
                                                        case 124:
                                                          state = 0;
                                                          v1 = $.index(t1, face.get$a());
                                                        case 125:
                                                          state = 0;
                                                          t3 = customAttribute.get$value();
                                                        case 126:
                                                          state = 0;
                                                          v2 = $.index(t3, face.get$b());
                                                        case 127:
                                                          state = 0;
                                                          t5 = customAttribute.get$value();
                                                        case 128:
                                                          state = 0;
                                                          v3 = $.index(t5, face.get$c());
                                                        case 129:
                                                          state = 0;
                                                          t7 = customAttribute.get$value();
                                                        case 130:
                                                          state = 0;
                                                          v4 = $.index(t7, face.get$d());
                                                        case 131:
                                                          state = 0;
                                                          t9 = customAttribute.get$array();
                                                        case 132:
                                                          state = 0;
                                                          if (0 >= pp.length)
                                                            throw $.ioore(0);
                                                          $.indexSet(t9, offset_custom, $.index(v1, pp[0]));
                                                          t9 = customAttribute.get$array();
                                                        case 133:
                                                          state = 0;
                                                          t12 = offset_custom + 1;
                                                          if (1 >= pp.length)
                                                            throw $.ioore(1);
                                                          $.indexSet(t9, t12, $.index(v1, pp[1]));
                                                          t12 = customAttribute.get$array();
                                                        case 134:
                                                          state = 0;
                                                          t13 = offset_custom + 2;
                                                          if (2 >= pp.length)
                                                            throw $.ioore(2);
                                                          $.indexSet(t12, t13, $.index(v1, pp[2]));
                                                          t13 = customAttribute.get$array();
                                                        case 135:
                                                          state = 0;
                                                          t14 = offset_custom + 3;
                                                          if (0 >= pp.length)
                                                            throw $.ioore(0);
                                                          $.indexSet(t13, t14, $.index(v2, pp[0]));
                                                          t14 = customAttribute.get$array();
                                                        case 136:
                                                          state = 0;
                                                          t15 = offset_custom + 4;
                                                          if (1 >= pp.length)
                                                            throw $.ioore(1);
                                                          $.indexSet(t14, t15, $.index(v2, pp[1]));
                                                          t15 = customAttribute.get$array();
                                                        case 137:
                                                          state = 0;
                                                          t16 = offset_custom + 5;
                                                          if (2 >= pp.length)
                                                            throw $.ioore(2);
                                                          $.indexSet(t15, t16, $.index(v2, pp[2]));
                                                          t16 = customAttribute.get$array();
                                                        case 138:
                                                          state = 0;
                                                          t17 = offset_custom + 6;
                                                          if (0 >= pp.length)
                                                            throw $.ioore(0);
                                                          $.indexSet(t16, t17, $.index(v3, pp[0]));
                                                          t17 = customAttribute.get$array();
                                                        case 139:
                                                          state = 0;
                                                          var t18 = offset_custom + 7;
                                                          if (1 >= pp.length)
                                                            throw $.ioore(1);
                                                          $.indexSet(t17, t18, $.index(v3, pp[1]));
                                                          t18 = customAttribute.get$array();
                                                        case 140:
                                                          state = 0;
                                                          var t19 = offset_custom + 8;
                                                          if (2 >= pp.length)
                                                            throw $.ioore(2);
                                                          $.indexSet(t18, t19, $.index(v3, pp[2]));
                                                          t19 = customAttribute.get$array();
                                                        case 141:
                                                          state = 0;
                                                          var t20 = offset_custom + 9;
                                                          if (0 >= pp.length)
                                                            throw $.ioore(0);
                                                          $.indexSet(t19, t20, $.index(v4, pp[0]));
                                                          t20 = customAttribute.get$array();
                                                        case 142:
                                                          state = 0;
                                                          t21 = offset_custom + 10;
                                                          if (1 >= pp.length)
                                                            throw $.ioore(1);
                                                          $.indexSet(t20, t21, $.index(v4, pp[1]));
                                                          t21 = customAttribute.get$array();
                                                        case 143:
                                                          state = 0;
                                                          var t22 = offset_custom + 11;
                                                          if (2 >= pp.length)
                                                            throw $.ioore(2);
                                                          $.indexSet(t21, t22, $.index(v4, pp[2]));
                                                          offset_custom += 12;
                                                          ++f;
                                                      }
                                              }
                                            else
                                              switch (state) {
                                                case 0:
                                                  t1 = customAttribute.get$boundTo();
                                                default:
                                                  if (state === 168 || state === 167 || state === 166 || state === 165 || state === 164 || state === 163 || state === 162 || state === 161 || state === 160 || state === 159 || state === 158 || state === 157 || state === 156 || state === 155 || state === 154 || state === 153 || state === 152 || state === 151 || state === 150 || state === 149 || state === 148 || state === 147 || state === 146 || state === 145 || state === 144 || state === 0 && t1 === 'faces')
                                                    switch (state) {
                                                      case 0:
                                                        fl = $.get$length(chunk_faces3);
                                                        offset_custom = 0;
                                                        f = 0;
                                                      default:
                                                        L18:
                                                          while (true)
                                                            switch (state) {
                                                              case 0:
                                                                if (!$.ltB(f, fl))
                                                                  break L18;
                                                                t1 = customAttribute.get$value();
                                                              case 144:
                                                                state = 0;
                                                                value = $.index(t1, $.index(chunk_faces3, f));
                                                              case 145:
                                                                state = 0;
                                                                t3 = customAttribute.get$array();
                                                              case 146:
                                                                state = 0;
                                                                if (0 >= pp.length)
                                                                  throw $.ioore(0);
                                                                $.indexSet(t3, offset_custom, $.index(value, pp[0]));
                                                                t3 = customAttribute.get$array();
                                                              case 147:
                                                                state = 0;
                                                                t6 = offset_custom + 1;
                                                                if (1 >= pp.length)
                                                                  throw $.ioore(1);
                                                                $.indexSet(t3, t6, $.index(value, pp[1]));
                                                                t6 = customAttribute.get$array();
                                                              case 148:
                                                                state = 0;
                                                                t7 = offset_custom + 2;
                                                                if (2 >= pp.length)
                                                                  throw $.ioore(2);
                                                                $.indexSet(t6, t7, $.index(value, pp[2]));
                                                                t7 = customAttribute.get$array();
                                                              case 149:
                                                                state = 0;
                                                                t8 = offset_custom + 3;
                                                                if (0 >= pp.length)
                                                                  throw $.ioore(0);
                                                                $.indexSet(t7, t8, $.index(value, pp[0]));
                                                                t8 = customAttribute.get$array();
                                                              case 150:
                                                                state = 0;
                                                                t9 = offset_custom + 4;
                                                                if (1 >= pp.length)
                                                                  throw $.ioore(1);
                                                                $.indexSet(t8, t9, $.index(value, pp[1]));
                                                                t9 = customAttribute.get$array();
                                                              case 151:
                                                                state = 0;
                                                                t10 = offset_custom + 5;
                                                                if (2 >= pp.length)
                                                                  throw $.ioore(2);
                                                                $.indexSet(t9, t10, $.index(value, pp[2]));
                                                                t10 = customAttribute.get$array();
                                                              case 152:
                                                                state = 0;
                                                                t11 = offset_custom + 6;
                                                                if (0 >= pp.length)
                                                                  throw $.ioore(0);
                                                                $.indexSet(t10, t11, $.index(value, pp[0]));
                                                                t11 = customAttribute.get$array();
                                                              case 153:
                                                                state = 0;
                                                                t12 = offset_custom + 7;
                                                                if (1 >= pp.length)
                                                                  throw $.ioore(1);
                                                                $.indexSet(t11, t12, $.index(value, pp[1]));
                                                                t12 = customAttribute.get$array();
                                                              case 154:
                                                                state = 0;
                                                                t13 = offset_custom + 8;
                                                                if (2 >= pp.length)
                                                                  throw $.ioore(2);
                                                                $.indexSet(t12, t13, $.index(value, pp[2]));
                                                                offset_custom += 9;
                                                                v3 = value;
                                                                v2 = v3;
                                                                v1 = v2;
                                                                ++f;
                                                            }
                                                        fl = $.get$length(chunk_faces4);
                                                        f = 0;
                                                      case 155:
                                                      case 156:
                                                      case 157:
                                                      case 158:
                                                      case 159:
                                                      case 160:
                                                      case 161:
                                                      case 162:
                                                      case 163:
                                                      case 164:
                                                      case 165:
                                                      case 166:
                                                      case 167:
                                                      case 168:
                                                        L19:
                                                          while (true)
                                                            switch (state) {
                                                              case 0:
                                                                if (!$.ltB(f, fl))
                                                                  break L19;
                                                                t1 = customAttribute.get$value();
                                                              case 155:
                                                                state = 0;
                                                                value = $.index(t1, $.index(chunk_faces4, f));
                                                              case 156:
                                                                state = 0;
                                                                t3 = customAttribute.get$array();
                                                              case 157:
                                                                state = 0;
                                                                if (0 >= pp.length)
                                                                  throw $.ioore(0);
                                                                $.indexSet(t3, offset_custom, $.index(value, pp[0]));
                                                                t3 = customAttribute.get$array();
                                                              case 158:
                                                                state = 0;
                                                                t6 = offset_custom + 1;
                                                                if (1 >= pp.length)
                                                                  throw $.ioore(1);
                                                                $.indexSet(t3, t6, $.index(value, pp[1]));
                                                                t6 = customAttribute.get$array();
                                                              case 159:
                                                                state = 0;
                                                                t7 = offset_custom + 2;
                                                                if (2 >= pp.length)
                                                                  throw $.ioore(2);
                                                                $.indexSet(t6, t7, $.index(value, pp[2]));
                                                                t7 = customAttribute.get$array();
                                                              case 160:
                                                                state = 0;
                                                                t8 = offset_custom + 3;
                                                                if (0 >= pp.length)
                                                                  throw $.ioore(0);
                                                                $.indexSet(t7, t8, $.index(value, pp[0]));
                                                                t8 = customAttribute.get$array();
                                                              case 161:
                                                                state = 0;
                                                                t9 = offset_custom + 4;
                                                                if (1 >= pp.length)
                                                                  throw $.ioore(1);
                                                                $.indexSet(t8, t9, $.index(value, pp[1]));
                                                                t9 = customAttribute.get$array();
                                                              case 162:
                                                                state = 0;
                                                                t10 = offset_custom + 5;
                                                                if (2 >= pp.length)
                                                                  throw $.ioore(2);
                                                                $.indexSet(t9, t10, $.index(value, pp[2]));
                                                                t10 = customAttribute.get$array();
                                                              case 163:
                                                                state = 0;
                                                                t11 = offset_custom + 6;
                                                                if (0 >= pp.length)
                                                                  throw $.ioore(0);
                                                                $.indexSet(t10, t11, $.index(value, pp[0]));
                                                                t11 = customAttribute.get$array();
                                                              case 164:
                                                                state = 0;
                                                                t12 = offset_custom + 7;
                                                                if (1 >= pp.length)
                                                                  throw $.ioore(1);
                                                                $.indexSet(t11, t12, $.index(value, pp[1]));
                                                                t12 = customAttribute.get$array();
                                                              case 165:
                                                                state = 0;
                                                                t13 = offset_custom + 8;
                                                                if (2 >= pp.length)
                                                                  throw $.ioore(2);
                                                                $.indexSet(t12, t13, $.index(value, pp[2]));
                                                                t13 = customAttribute.get$array();
                                                              case 166:
                                                                state = 0;
                                                                t14 = offset_custom + 9;
                                                                if (0 >= pp.length)
                                                                  throw $.ioore(0);
                                                                $.indexSet(t13, t14, $.index(value, pp[0]));
                                                                t14 = customAttribute.get$array();
                                                              case 167:
                                                                state = 0;
                                                                t15 = offset_custom + 10;
                                                                if (1 >= pp.length)
                                                                  throw $.ioore(1);
                                                                $.indexSet(t14, t15, $.index(value, pp[1]));
                                                                t15 = customAttribute.get$array();
                                                              case 168:
                                                                state = 0;
                                                                t16 = offset_custom + 11;
                                                                if (2 >= pp.length)
                                                                  throw $.ioore(2);
                                                                $.indexSet(t15, t16, $.index(value, pp[2]));
                                                                offset_custom += 12;
                                                                v4 = value;
                                                                v3 = v4;
                                                                v2 = v3;
                                                                v1 = v2;
                                                                ++f;
                                                            }
                                                    }
                                                  else
                                                    switch (state) {
                                                      case 0:
                                                      default:
                                                        if (state === 200 || state === 199 || state === 198 || state === 197 || state === 196 || state === 195 || state === 194 || state === 193 || state === 192 || state === 191 || state === 190 || state === 189 || state === 188 || state === 187 || state === 186 || state === 185 || state === 184 || state === 183 || state === 182 || state === 181 || state === 180 || state === 179 || state === 178 || state === 177 || state === 176 || state === 175 || state === 174 || state === 173 || state === 172 || state === 171 || state === 170 || state === 169 || state === 0 && t1 === 'faceVertices')
                                                          switch (state) {
                                                            case 0:
                                                              fl = $.get$length(chunk_faces3);
                                                              offset_custom = 0;
                                                              f = 0;
                                                            default:
                                                              L20:
                                                                while (true)
                                                                  switch (state) {
                                                                    case 0:
                                                                      if (!$.ltB(f, fl))
                                                                        break L20;
                                                                      t1 = customAttribute.get$value();
                                                                    case 169:
                                                                      state = 0;
                                                                      value = $.index(t1, $.index(chunk_faces3, f));
                                                                    case 170:
                                                                      state = 0;
                                                                      v1 = $.index(value, 0);
                                                                    case 171:
                                                                      state = 0;
                                                                      v2 = $.index(value, 1);
                                                                    case 172:
                                                                      state = 0;
                                                                      v3 = $.index(value, 2);
                                                                    case 173:
                                                                      state = 0;
                                                                      t6 = customAttribute.get$array();
                                                                    case 174:
                                                                      state = 0;
                                                                      if (0 >= pp.length)
                                                                        throw $.ioore(0);
                                                                      $.indexSet(t6, offset_custom, $.index(v1, pp[0]));
                                                                      t6 = customAttribute.get$array();
                                                                    case 175:
                                                                      state = 0;
                                                                      t9 = offset_custom + 1;
                                                                      if (1 >= pp.length)
                                                                        throw $.ioore(1);
                                                                      $.indexSet(t6, t9, $.index(v1, pp[1]));
                                                                      t9 = customAttribute.get$array();
                                                                    case 176:
                                                                      state = 0;
                                                                      t10 = offset_custom + 2;
                                                                      if (2 >= pp.length)
                                                                        throw $.ioore(2);
                                                                      $.indexSet(t9, t10, $.index(v1, pp[2]));
                                                                      t10 = customAttribute.get$array();
                                                                    case 177:
                                                                      state = 0;
                                                                      t11 = offset_custom + 3;
                                                                      if (0 >= pp.length)
                                                                        throw $.ioore(0);
                                                                      $.indexSet(t10, t11, $.index(v2, pp[0]));
                                                                      t11 = customAttribute.get$array();
                                                                    case 178:
                                                                      state = 0;
                                                                      t12 = offset_custom + 4;
                                                                      if (1 >= pp.length)
                                                                        throw $.ioore(1);
                                                                      $.indexSet(t11, t12, $.index(v2, pp[1]));
                                                                      t12 = customAttribute.get$array();
                                                                    case 179:
                                                                      state = 0;
                                                                      t13 = offset_custom + 5;
                                                                      if (2 >= pp.length)
                                                                        throw $.ioore(2);
                                                                      $.indexSet(t12, t13, $.index(v2, pp[2]));
                                                                      t13 = customAttribute.get$array();
                                                                    case 180:
                                                                      state = 0;
                                                                      t14 = offset_custom + 6;
                                                                      if (0 >= pp.length)
                                                                        throw $.ioore(0);
                                                                      $.indexSet(t13, t14, $.index(v3, pp[0]));
                                                                      t14 = customAttribute.get$array();
                                                                    case 181:
                                                                      state = 0;
                                                                      t15 = offset_custom + 7;
                                                                      if (1 >= pp.length)
                                                                        throw $.ioore(1);
                                                                      $.indexSet(t14, t15, $.index(v3, pp[1]));
                                                                      t15 = customAttribute.get$array();
                                                                    case 182:
                                                                      state = 0;
                                                                      t16 = offset_custom + 8;
                                                                      if (2 >= pp.length)
                                                                        throw $.ioore(2);
                                                                      $.indexSet(t15, t16, $.index(v3, pp[2]));
                                                                      offset_custom += 9;
                                                                      ++f;
                                                                  }
                                                              fl = $.get$length(chunk_faces4);
                                                              f = 0;
                                                            case 183:
                                                            case 184:
                                                            case 185:
                                                            case 186:
                                                            case 187:
                                                            case 188:
                                                            case 189:
                                                            case 190:
                                                            case 191:
                                                            case 192:
                                                            case 193:
                                                            case 194:
                                                            case 195:
                                                            case 196:
                                                            case 197:
                                                            case 198:
                                                            case 199:
                                                            case 200:
                                                              L21:
                                                                while (true)
                                                                  switch (state) {
                                                                    case 0:
                                                                      if (!$.ltB(f, fl))
                                                                        break L21;
                                                                      t1 = customAttribute.get$value();
                                                                    case 183:
                                                                      state = 0;
                                                                      value = $.index(t1, $.index(chunk_faces4, f));
                                                                    case 184:
                                                                      state = 0;
                                                                      v1 = $.index(value, 0);
                                                                    case 185:
                                                                      state = 0;
                                                                      v2 = $.index(value, 1);
                                                                    case 186:
                                                                      state = 0;
                                                                      v3 = $.index(value, 2);
                                                                    case 187:
                                                                      state = 0;
                                                                      v4 = $.index(value, 3);
                                                                    case 188:
                                                                      state = 0;
                                                                      t7 = customAttribute.get$array();
                                                                    case 189:
                                                                      state = 0;
                                                                      if (0 >= pp.length)
                                                                        throw $.ioore(0);
                                                                      $.indexSet(t7, offset_custom, $.index(v1, pp[0]));
                                                                      t7 = customAttribute.get$array();
                                                                    case 190:
                                                                      state = 0;
                                                                      t10 = offset_custom + 1;
                                                                      if (1 >= pp.length)
                                                                        throw $.ioore(1);
                                                                      $.indexSet(t7, t10, $.index(v1, pp[1]));
                                                                      t10 = customAttribute.get$array();
                                                                    case 191:
                                                                      state = 0;
                                                                      t11 = offset_custom + 2;
                                                                      if (2 >= pp.length)
                                                                        throw $.ioore(2);
                                                                      $.indexSet(t10, t11, $.index(v1, pp[2]));
                                                                      t11 = customAttribute.get$array();
                                                                    case 192:
                                                                      state = 0;
                                                                      t12 = offset_custom + 3;
                                                                      if (0 >= pp.length)
                                                                        throw $.ioore(0);
                                                                      $.indexSet(t11, t12, $.index(v2, pp[0]));
                                                                      t12 = customAttribute.get$array();
                                                                    case 193:
                                                                      state = 0;
                                                                      t13 = offset_custom + 4;
                                                                      if (1 >= pp.length)
                                                                        throw $.ioore(1);
                                                                      $.indexSet(t12, t13, $.index(v2, pp[1]));
                                                                      t13 = customAttribute.get$array();
                                                                    case 194:
                                                                      state = 0;
                                                                      t14 = offset_custom + 5;
                                                                      if (2 >= pp.length)
                                                                        throw $.ioore(2);
                                                                      $.indexSet(t13, t14, $.index(v2, pp[2]));
                                                                      t14 = customAttribute.get$array();
                                                                    case 195:
                                                                      state = 0;
                                                                      t15 = offset_custom + 6;
                                                                      if (0 >= pp.length)
                                                                        throw $.ioore(0);
                                                                      $.indexSet(t14, t15, $.index(v3, pp[0]));
                                                                      t15 = customAttribute.get$array();
                                                                    case 196:
                                                                      state = 0;
                                                                      t16 = offset_custom + 7;
                                                                      if (1 >= pp.length)
                                                                        throw $.ioore(1);
                                                                      $.indexSet(t15, t16, $.index(v3, pp[1]));
                                                                      t16 = customAttribute.get$array();
                                                                    case 197:
                                                                      state = 0;
                                                                      t17 = offset_custom + 8;
                                                                      if (2 >= pp.length)
                                                                        throw $.ioore(2);
                                                                      $.indexSet(t16, t17, $.index(v3, pp[2]));
                                                                      t17 = customAttribute.get$array();
                                                                    case 198:
                                                                      state = 0;
                                                                      t18 = offset_custom + 9;
                                                                      if (0 >= pp.length)
                                                                        throw $.ioore(0);
                                                                      $.indexSet(t17, t18, $.index(v4, pp[0]));
                                                                      t18 = customAttribute.get$array();
                                                                    case 199:
                                                                      state = 0;
                                                                      t19 = offset_custom + 10;
                                                                      if (1 >= pp.length)
                                                                        throw $.ioore(1);
                                                                      $.indexSet(t18, t19, $.index(v4, pp[1]));
                                                                      t19 = customAttribute.get$array();
                                                                    case 200:
                                                                      state = 0;
                                                                      t20 = offset_custom + 11;
                                                                      if (2 >= pp.length)
                                                                        throw $.ioore(2);
                                                                      $.indexSet(t19, t20, $.index(v4, pp[2]));
                                                                      offset_custom += 12;
                                                                      ++f;
                                                                  }
                                                          }
                                                        else
                                                          offset_custom = 0;
                                                    }
                                              }
                                        }
                                      else
                                        switch (state) {
                                          case 0:
                                          default:
                                            if (state === 298 || state === 297 || state === 296 || state === 295 || state === 294 || state === 293 || state === 292 || state === 291 || state === 290 || state === 289 || state === 288 || state === 287 || state === 286 || state === 285 || state === 284 || state === 283 || state === 282 || state === 281 || state === 280 || state === 279 || state === 278 || state === 277 || state === 276 || state === 275 || state === 274 || state === 273 || state === 272 || state === 271 || state === 270 || state === 269 || state === 268 || state === 267 || state === 266 || state === 265 || state === 264 || state === 263 || state === 262 || state === 261 || state === 260 || state === 259 || state === 258 || state === 257 || state === 256 || state === 255 || state === 254 || state === 253 || state === 252 || state === 251 || state === 250 || state === 249 || state === 248 || state === 247 || state === 246 || state === 245 || state === 244 || state === 243 || state === 242 || state === 241 || state === 240 || state === 239 || state === 238 || state === 237 || state === 236 || state === 235 || state === 234 || state === 233 || state === 232 || state === 231 || state === 230 || state === 229 || state === 228 || state === 227 || state === 226 || state === 225 || state === 224 || state === 223 || state === 222 || state === 221 || state === 220 || state === 219 || state === 218 || state === 217 || state === 216 || state === 215 || state === 214 || state === 213 || state === 212 || state === 211 || state === 210 || state === 209 || state === 208 || state === 207 || state === 206 || state === 205 || state === 204 || state === 203 || state === 202 || state === 201 || state === 0 && customAttribute.get$size() === 4)
                                              switch (state) {
                                                case 0:
                                                  t1 = customAttribute.get$boundTo();
                                                case 201:
                                                  state = 0;
                                                default:
                                                  if (state === 236 || state === 235 || state === 234 || state === 233 || state === 232 || state === 231 || state === 230 || state === 229 || state === 228 || state === 227 || state === 226 || state === 225 || state === 224 || state === 223 || state === 222 || state === 221 || state === 220 || state === 219 || state === 218 || state === 217 || state === 216 || state === 215 || state === 214 || state === 213 || state === 212 || state === 211 || state === 210 || state === 209 || state === 208 || state === 207 || state === 206 || state === 205 || state === 204 || state === 203 || state === 202 || state === 0 && (t1 == null || $.eqB(t1, 'vertices')))
                                                    switch (state) {
                                                      case 0:
                                                        fl = $.get$length(chunk_faces3);
                                                        offset_custom = 0;
                                                        f = 0;
                                                      default:
                                                        L22:
                                                          while (true)
                                                            switch (state) {
                                                              case 0:
                                                                if (!$.ltB(f, fl))
                                                                  break L22;
                                                                face = $.index(obj_faces, $.index(chunk_faces3, f));
                                                                t1 = customAttribute.get$value();
                                                              case 202:
                                                                state = 0;
                                                                v1 = $.index(t1, face.get$a());
                                                                t1 = customAttribute.get$value();
                                                              case 203:
                                                                state = 0;
                                                                v2 = $.index(t1, face.get$b());
                                                                t1 = customAttribute.get$value();
                                                              case 204:
                                                                state = 0;
                                                                v3 = $.index(t1, face.get$c());
                                                                t1 = customAttribute.get$array();
                                                              case 205:
                                                                state = 0;
                                                                $.indexSet(t1, offset_custom, v1.get$x());
                                                                t1 = customAttribute.get$array();
                                                              case 206:
                                                                state = 0;
                                                                $.indexSet(t1, offset_custom + 1, v1.get$y());
                                                                t1 = customAttribute.get$array();
                                                              case 207:
                                                                state = 0;
                                                                $.indexSet(t1, offset_custom + 2, v1.get$z());
                                                                t1 = customAttribute.get$array();
                                                              case 208:
                                                                state = 0;
                                                                $.indexSet(t1, offset_custom + 3, v1.get$w());
                                                                t1 = customAttribute.get$array();
                                                              case 209:
                                                                state = 0;
                                                                $.indexSet(t1, offset_custom + 4, v2.get$x());
                                                                t1 = customAttribute.get$array();
                                                              case 210:
                                                                state = 0;
                                                                $.indexSet(t1, offset_custom + 5, v2.get$y());
                                                                t1 = customAttribute.get$array();
                                                              case 211:
                                                                state = 0;
                                                                $.indexSet(t1, offset_custom + 6, v2.get$z());
                                                                t1 = customAttribute.get$array();
                                                              case 212:
                                                                state = 0;
                                                                $.indexSet(t1, offset_custom + 7, v2.get$w());
                                                                t1 = customAttribute.get$array();
                                                              case 213:
                                                                state = 0;
                                                                $.indexSet(t1, offset_custom + 8, v3.get$x());
                                                                t1 = customAttribute.get$array();
                                                              case 214:
                                                                state = 0;
                                                                $.indexSet(t1, offset_custom + 9, v3.get$y());
                                                                t1 = customAttribute.get$array();
                                                              case 215:
                                                                state = 0;
                                                                $.indexSet(t1, offset_custom + 10, v3.get$z());
                                                                t1 = customAttribute.get$array();
                                                              case 216:
                                                                state = 0;
                                                                $.indexSet(t1, offset_custom + 11, v3.get$w());
                                                                offset_custom += 12;
                                                                ++f;
                                                            }
                                                        fl = $.get$length(chunk_faces4);
                                                        f = 0;
                                                      case 217:
                                                      case 218:
                                                      case 219:
                                                      case 220:
                                                      case 221:
                                                      case 222:
                                                      case 223:
                                                      case 224:
                                                      case 225:
                                                      case 226:
                                                      case 227:
                                                      case 228:
                                                      case 229:
                                                      case 230:
                                                      case 231:
                                                      case 232:
                                                      case 233:
                                                      case 234:
                                                      case 235:
                                                      case 236:
                                                        L23:
                                                          while (true)
                                                            switch (state) {
                                                              case 0:
                                                                if (!$.ltB(f, fl))
                                                                  break L23;
                                                                face = $.index(obj_faces, $.index(chunk_faces4, f));
                                                                t1 = customAttribute.get$value();
                                                              case 217:
                                                                state = 0;
                                                                v1 = $.index(t1, face.get$a());
                                                                t1 = customAttribute.get$value();
                                                              case 218:
                                                                state = 0;
                                                                v2 = $.index(t1, face.get$b());
                                                                t1 = customAttribute.get$value();
                                                              case 219:
                                                                state = 0;
                                                                v3 = $.index(t1, face.get$c());
                                                                t1 = customAttribute.get$value();
                                                              case 220:
                                                                state = 0;
                                                                v4 = $.index(t1, face.get$d());
                                                                t1 = customAttribute.get$array();
                                                              case 221:
                                                                state = 0;
                                                                $.indexSet(t1, offset_custom, v1.get$x());
                                                                t1 = customAttribute.get$array();
                                                              case 222:
                                                                state = 0;
                                                                $.indexSet(t1, offset_custom + 1, v1.get$y());
                                                                t1 = customAttribute.get$array();
                                                              case 223:
                                                                state = 0;
                                                                $.indexSet(t1, offset_custom + 2, v1.get$z());
                                                                t1 = customAttribute.get$array();
                                                              case 224:
                                                                state = 0;
                                                                $.indexSet(t1, offset_custom + 3, v1.get$w());
                                                                t1 = customAttribute.get$array();
                                                              case 225:
                                                                state = 0;
                                                                $.indexSet(t1, offset_custom + 4, v2.get$x());
                                                                t1 = customAttribute.get$array();
                                                              case 226:
                                                                state = 0;
                                                                $.indexSet(t1, offset_custom + 5, v2.get$y());
                                                                t1 = customAttribute.get$array();
                                                              case 227:
                                                                state = 0;
                                                                $.indexSet(t1, offset_custom + 6, v2.get$z());
                                                                t1 = customAttribute.get$array();
                                                              case 228:
                                                                state = 0;
                                                                $.indexSet(t1, offset_custom + 7, v2.get$w());
                                                                t1 = customAttribute.get$array();
                                                              case 229:
                                                                state = 0;
                                                                $.indexSet(t1, offset_custom + 8, v3.get$x());
                                                                t1 = customAttribute.get$array();
                                                              case 230:
                                                                state = 0;
                                                                $.indexSet(t1, offset_custom + 9, v3.get$y());
                                                                t1 = customAttribute.get$array();
                                                              case 231:
                                                                state = 0;
                                                                $.indexSet(t1, offset_custom + 10, v3.get$z());
                                                                t1 = customAttribute.get$array();
                                                              case 232:
                                                                state = 0;
                                                                $.indexSet(t1, offset_custom + 11, v3.get$w());
                                                                t1 = customAttribute.get$array();
                                                              case 233:
                                                                state = 0;
                                                                $.indexSet(t1, offset_custom + 12, v4.get$x());
                                                                t1 = customAttribute.get$array();
                                                              case 234:
                                                                state = 0;
                                                                $.indexSet(t1, offset_custom + 13, v4.get$y());
                                                                t1 = customAttribute.get$array();
                                                              case 235:
                                                                state = 0;
                                                                $.indexSet(t1, offset_custom + 14, v4.get$z());
                                                                t1 = customAttribute.get$array();
                                                              case 236:
                                                                state = 0;
                                                                $.indexSet(t1, offset_custom + 15, v4.get$w());
                                                                offset_custom += 16;
                                                                ++f;
                                                            }
                                                    }
                                                  else
                                                    switch (state) {
                                                      case 0:
                                                        t1 = customAttribute.get$boundTo();
                                                      default:
                                                        if (state === 266 || state === 265 || state === 264 || state === 263 || state === 262 || state === 261 || state === 260 || state === 259 || state === 258 || state === 257 || state === 256 || state === 255 || state === 254 || state === 253 || state === 252 || state === 251 || state === 250 || state === 249 || state === 248 || state === 247 || state === 246 || state === 245 || state === 244 || state === 243 || state === 242 || state === 241 || state === 240 || state === 239 || state === 238 || state === 237 || state === 0 && t1 === 'faces')
                                                          switch (state) {
                                                            case 0:
                                                              fl = $.get$length(chunk_faces3);
                                                              offset_custom = 0;
                                                              f = 0;
                                                            default:
                                                              L24:
                                                                while (true)
                                                                  switch (state) {
                                                                    case 0:
                                                                      if (!$.ltB(f, fl))
                                                                        break L24;
                                                                      t1 = customAttribute.get$value();
                                                                    case 237:
                                                                      state = 0;
                                                                      value = $.index(t1, $.index(chunk_faces3, f));
                                                                      t1 = customAttribute.get$array();
                                                                    case 238:
                                                                      state = 0;
                                                                      $.indexSet(t1, offset_custom, value.get$x());
                                                                      t1 = customAttribute.get$array();
                                                                    case 239:
                                                                      state = 0;
                                                                      $.indexSet(t1, offset_custom + 1, value.get$y());
                                                                      t1 = customAttribute.get$array();
                                                                    case 240:
                                                                      state = 0;
                                                                      $.indexSet(t1, offset_custom + 2, value.get$z());
                                                                      t1 = customAttribute.get$array();
                                                                    case 241:
                                                                      state = 0;
                                                                      $.indexSet(t1, offset_custom + 3, value.get$w());
                                                                      t1 = customAttribute.get$array();
                                                                    case 242:
                                                                      state = 0;
                                                                      $.indexSet(t1, offset_custom + 4, value.get$x());
                                                                      t1 = customAttribute.get$array();
                                                                    case 243:
                                                                      state = 0;
                                                                      $.indexSet(t1, offset_custom + 5, value.get$y());
                                                                      t1 = customAttribute.get$array();
                                                                    case 244:
                                                                      state = 0;
                                                                      $.indexSet(t1, offset_custom + 6, value.get$z());
                                                                      t1 = customAttribute.get$array();
                                                                    case 245:
                                                                      state = 0;
                                                                      $.indexSet(t1, offset_custom + 7, value.get$w());
                                                                      t1 = customAttribute.get$array();
                                                                    case 246:
                                                                      state = 0;
                                                                      $.indexSet(t1, offset_custom + 8, value.get$x());
                                                                      t1 = customAttribute.get$array();
                                                                    case 247:
                                                                      state = 0;
                                                                      $.indexSet(t1, offset_custom + 9, value.get$y());
                                                                      t1 = customAttribute.get$array();
                                                                    case 248:
                                                                      state = 0;
                                                                      $.indexSet(t1, offset_custom + 10, value.get$z());
                                                                      t1 = customAttribute.get$array();
                                                                    case 249:
                                                                      state = 0;
                                                                      $.indexSet(t1, offset_custom + 11, value.get$w());
                                                                      offset_custom += 12;
                                                                      v2 = value;
                                                                      v3 = v2;
                                                                      v1 = v3;
                                                                      ++f;
                                                                  }
                                                              fl = $.get$length(chunk_faces4);
                                                              f = 0;
                                                            case 250:
                                                            case 251:
                                                            case 252:
                                                            case 253:
                                                            case 254:
                                                            case 255:
                                                            case 256:
                                                            case 257:
                                                            case 258:
                                                            case 259:
                                                            case 260:
                                                            case 261:
                                                            case 262:
                                                            case 263:
                                                            case 264:
                                                            case 265:
                                                            case 266:
                                                              L25:
                                                                while (true)
                                                                  switch (state) {
                                                                    case 0:
                                                                      if (!$.ltB(f, fl))
                                                                        break L25;
                                                                      t1 = customAttribute.get$value();
                                                                    case 250:
                                                                      state = 0;
                                                                      value = $.index(t1, $.index(chunk_faces4, f));
                                                                      t1 = customAttribute.get$array();
                                                                    case 251:
                                                                      state = 0;
                                                                      $.indexSet(t1, offset_custom, value.get$x());
                                                                      t1 = customAttribute.get$array();
                                                                    case 252:
                                                                      state = 0;
                                                                      $.indexSet(t1, offset_custom + 1, value.get$y());
                                                                      t1 = customAttribute.get$array();
                                                                    case 253:
                                                                      state = 0;
                                                                      $.indexSet(t1, offset_custom + 2, value.get$z());
                                                                      t1 = customAttribute.get$array();
                                                                    case 254:
                                                                      state = 0;
                                                                      $.indexSet(t1, offset_custom + 3, value.get$w());
                                                                      t1 = customAttribute.get$array();
                                                                    case 255:
                                                                      state = 0;
                                                                      $.indexSet(t1, offset_custom + 4, value.get$x());
                                                                      t1 = customAttribute.get$array();
                                                                    case 256:
                                                                      state = 0;
                                                                      $.indexSet(t1, offset_custom + 5, value.get$y());
                                                                      t1 = customAttribute.get$array();
                                                                    case 257:
                                                                      state = 0;
                                                                      $.indexSet(t1, offset_custom + 6, value.get$z());
                                                                      t1 = customAttribute.get$array();
                                                                    case 258:
                                                                      state = 0;
                                                                      $.indexSet(t1, offset_custom + 7, value.get$w());
                                                                      t1 = customAttribute.get$array();
                                                                    case 259:
                                                                      state = 0;
                                                                      $.indexSet(t1, offset_custom + 8, value.get$x());
                                                                      t1 = customAttribute.get$array();
                                                                    case 260:
                                                                      state = 0;
                                                                      $.indexSet(t1, offset_custom + 9, value.get$y());
                                                                      t1 = customAttribute.get$array();
                                                                    case 261:
                                                                      state = 0;
                                                                      $.indexSet(t1, offset_custom + 10, value.get$z());
                                                                      t1 = customAttribute.get$array();
                                                                    case 262:
                                                                      state = 0;
                                                                      $.indexSet(t1, offset_custom + 11, value.get$w());
                                                                      t1 = customAttribute.get$array();
                                                                    case 263:
                                                                      state = 0;
                                                                      $.indexSet(t1, offset_custom + 12, value.get$x());
                                                                      t1 = customAttribute.get$array();
                                                                    case 264:
                                                                      state = 0;
                                                                      $.indexSet(t1, offset_custom + 13, value.get$y());
                                                                      t1 = customAttribute.get$array();
                                                                    case 265:
                                                                      state = 0;
                                                                      $.indexSet(t1, offset_custom + 14, value.get$z());
                                                                      t1 = customAttribute.get$array();
                                                                    case 266:
                                                                      state = 0;
                                                                      $.indexSet(t1, offset_custom + 15, value.get$w());
                                                                      offset_custom += 16;
                                                                      v4 = value;
                                                                      v3 = v4;
                                                                      v2 = v3;
                                                                      v1 = v2;
                                                                      ++f;
                                                                  }
                                                          }
                                                        else
                                                          switch (state) {
                                                            case 0:
                                                            default:
                                                              if (state === 298 || state === 297 || state === 296 || state === 295 || state === 294 || state === 293 || state === 292 || state === 291 || state === 290 || state === 289 || state === 288 || state === 287 || state === 286 || state === 285 || state === 284 || state === 283 || state === 282 || state === 281 || state === 280 || state === 279 || state === 278 || state === 277 || state === 276 || state === 275 || state === 274 || state === 273 || state === 272 || state === 271 || state === 270 || state === 269 || state === 268 || state === 267 || state === 0 && t1 === 'faceVertices')
                                                                switch (state) {
                                                                  case 0:
                                                                    fl = $.get$length(chunk_faces3);
                                                                    offset_custom = 0;
                                                                    f = 0;
                                                                  default:
                                                                    L26:
                                                                      while (true)
                                                                        switch (state) {
                                                                          case 0:
                                                                            if (!$.ltB(f, fl))
                                                                              break L26;
                                                                            t1 = customAttribute.get$value();
                                                                          case 267:
                                                                            state = 0;
                                                                            value = $.index(t1, $.index(chunk_faces3, f));
                                                                          case 268:
                                                                            state = 0;
                                                                            v1 = $.index(value, 0);
                                                                            v2 = $.index(value, 1);
                                                                            v3 = $.index(value, 2);
                                                                            t3 = customAttribute.get$array();
                                                                          case 269:
                                                                            state = 0;
                                                                            $.indexSet(t3, offset_custom, v1.get$x());
                                                                            t3 = customAttribute.get$array();
                                                                          case 270:
                                                                            state = 0;
                                                                            $.indexSet(t3, offset_custom + 1, v1.get$y());
                                                                            t3 = customAttribute.get$array();
                                                                          case 271:
                                                                            state = 0;
                                                                            $.indexSet(t3, offset_custom + 2, v1.get$z());
                                                                            t3 = customAttribute.get$array();
                                                                          case 272:
                                                                            state = 0;
                                                                            $.indexSet(t3, offset_custom + 3, v1.get$w());
                                                                            t3 = customAttribute.get$array();
                                                                          case 273:
                                                                            state = 0;
                                                                            $.indexSet(t3, offset_custom + 4, v2.get$x());
                                                                            t3 = customAttribute.get$array();
                                                                          case 274:
                                                                            state = 0;
                                                                            $.indexSet(t3, offset_custom + 5, v2.get$y());
                                                                            t3 = customAttribute.get$array();
                                                                          case 275:
                                                                            state = 0;
                                                                            $.indexSet(t3, offset_custom + 6, v2.get$z());
                                                                            t3 = customAttribute.get$array();
                                                                          case 276:
                                                                            state = 0;
                                                                            $.indexSet(t3, offset_custom + 7, v2.get$w());
                                                                            t3 = customAttribute.get$array();
                                                                          case 277:
                                                                            state = 0;
                                                                            $.indexSet(t3, offset_custom + 8, v3.get$x());
                                                                            t3 = customAttribute.get$array();
                                                                          case 278:
                                                                            state = 0;
                                                                            $.indexSet(t3, offset_custom + 9, v3.get$y());
                                                                            t3 = customAttribute.get$array();
                                                                          case 279:
                                                                            state = 0;
                                                                            $.indexSet(t3, offset_custom + 10, v3.get$z());
                                                                            t3 = customAttribute.get$array();
                                                                          case 280:
                                                                            state = 0;
                                                                            $.indexSet(t3, offset_custom + 11, v3.get$w());
                                                                            offset_custom += 12;
                                                                            ++f;
                                                                        }
                                                                    fl = $.get$length(chunk_faces4);
                                                                    f = 0;
                                                                  case 281:
                                                                  case 282:
                                                                  case 283:
                                                                  case 284:
                                                                  case 285:
                                                                  case 286:
                                                                  case 287:
                                                                  case 288:
                                                                  case 289:
                                                                  case 290:
                                                                  case 291:
                                                                  case 292:
                                                                  case 293:
                                                                  case 294:
                                                                  case 295:
                                                                  case 296:
                                                                  case 297:
                                                                  case 298:
                                                                    L27:
                                                                      while (true)
                                                                        switch (state) {
                                                                          case 0:
                                                                            if (!$.ltB(f, fl))
                                                                              break L27;
                                                                            t1 = customAttribute.get$value();
                                                                          case 281:
                                                                            state = 0;
                                                                            value = $.index(t1, $.index(chunk_faces4, f));
                                                                          case 282:
                                                                            state = 0;
                                                                            v1 = $.index(value, 0);
                                                                            v2 = $.index(value, 1);
                                                                            v3 = $.index(value, 2);
                                                                            v4 = $.index(value, 3);
                                                                            t3 = customAttribute.get$array();
                                                                          case 283:
                                                                            state = 0;
                                                                            $.indexSet(t3, offset_custom, v1.get$x());
                                                                            t3 = customAttribute.get$array();
                                                                          case 284:
                                                                            state = 0;
                                                                            $.indexSet(t3, offset_custom + 1, v1.get$y());
                                                                            t3 = customAttribute.get$array();
                                                                          case 285:
                                                                            state = 0;
                                                                            $.indexSet(t3, offset_custom + 2, v1.get$z());
                                                                            t3 = customAttribute.get$array();
                                                                          case 286:
                                                                            state = 0;
                                                                            $.indexSet(t3, offset_custom + 3, v1.get$w());
                                                                            t3 = customAttribute.get$array();
                                                                          case 287:
                                                                            state = 0;
                                                                            $.indexSet(t3, offset_custom + 4, v2.get$x());
                                                                            t3 = customAttribute.get$array();
                                                                          case 288:
                                                                            state = 0;
                                                                            $.indexSet(t3, offset_custom + 5, v2.get$y());
                                                                            t3 = customAttribute.get$array();
                                                                          case 289:
                                                                            state = 0;
                                                                            $.indexSet(t3, offset_custom + 6, v2.get$z());
                                                                            t3 = customAttribute.get$array();
                                                                          case 290:
                                                                            state = 0;
                                                                            $.indexSet(t3, offset_custom + 7, v2.get$w());
                                                                            t3 = customAttribute.get$array();
                                                                          case 291:
                                                                            state = 0;
                                                                            $.indexSet(t3, offset_custom + 8, v3.get$x());
                                                                            t3 = customAttribute.get$array();
                                                                          case 292:
                                                                            state = 0;
                                                                            $.indexSet(t3, offset_custom + 9, v3.get$y());
                                                                            t3 = customAttribute.get$array();
                                                                          case 293:
                                                                            state = 0;
                                                                            $.indexSet(t3, offset_custom + 10, v3.get$z());
                                                                            t3 = customAttribute.get$array();
                                                                          case 294:
                                                                            state = 0;
                                                                            $.indexSet(t3, offset_custom + 11, v3.get$w());
                                                                            t3 = customAttribute.get$array();
                                                                          case 295:
                                                                            state = 0;
                                                                            $.indexSet(t3, offset_custom + 12, v4.get$x());
                                                                            t3 = customAttribute.get$array();
                                                                          case 296:
                                                                            state = 0;
                                                                            $.indexSet(t3, offset_custom + 13, v4.get$y());
                                                                            t3 = customAttribute.get$array();
                                                                          case 297:
                                                                            state = 0;
                                                                            $.indexSet(t3, offset_custom + 14, v4.get$z());
                                                                            t3 = customAttribute.get$array();
                                                                          case 298:
                                                                            state = 0;
                                                                            $.indexSet(t3, offset_custom + 15, v4.get$w());
                                                                            offset_custom += 16;
                                                                            ++f;
                                                                        }
                                                                }
                                                              else
                                                                offset_custom = 0;
                                                          }
                                                    }
                                              }
                                            else
                                              offset_custom = 0;
                                        }
                                  }
                            }
                          this._gl.bindBuffer$2(34962, customAttribute.get$buffer());
                          this._gl.bufferData$3(34962, customAttribute.get$array(), hint);
                          offset_customSrc = 0;
                      }
                    }
                    ++i;
                }
        }
      if (dispose) {
        geometryGroup.set$__inittedArrays(null);
        geometryGroup.set$__colorArray(null);
        geometryGroup.set$__normalArray(null);
        geometryGroup.set$__tangentArray(null);
        geometryGroup.set$__uvArray(null);
        geometryGroup.set$__uv2Array(null);
        geometryGroup.set$__faceArray(null);
        geometryGroup.set$__vertexArray(null);
        geometryGroup.set$__lineArray(null);
        geometryGroup.set$__skinVertexAArray(null);
        geometryGroup.set$__skinVertexBArray(null);
        geometryGroup.set$__skinIndexArray(null);
        geometryGroup.set$__skinWeightArray(null);
      }
  }
},
 setDirectBuffers$3: function(geometry, hint, dispose) {
  var attributes = geometry.get$attributes();
  var index = $.index(attributes, 'index');
  var position = $.index(attributes, 'position');
  var normal = $.index(attributes, 'normal');
  var uv = $.index(attributes, 'uv');
  var color = $.index(attributes, 'color');
  var tangent = $.index(attributes, 'tangent');
  if (geometry.get$elementsNeedUpdate() === true && !(index == null)) {
    this._gl.bindBuffer$2(34963, index.get$buffer());
    this._gl.bufferData$3(34963, index.get$array(), hint);
  }
  if (geometry.get$verticesNeedUpdate() === true && !(position == null)) {
    this._gl.bindBuffer$2(34962, position.get$buffer());
    this._gl.bufferData$3(34962, position.get$array(), hint);
  }
  if (geometry.get$normalsNeedUpdate() === true && !(normal == null)) {
    this._gl.bindBuffer$2(34962, normal.get$buffer());
    this._gl.bufferData$3(34962, normal.get$array(), hint);
  }
  if (geometry.get$uvsNeedUpdate() === true && !(uv == null)) {
    this._gl.bindBuffer$2(34962, uv.get$buffer());
    this._gl.bufferData$3(34962, uv.get$array(), hint);
  }
  if (geometry.get$colorsNeedUpdate() === true && !(color == null)) {
    this._gl.bindBuffer$2(34962, color.get$buffer());
    this._gl.bufferData$3(34962, color.get$array(), hint);
  }
  if (geometry.get$tangentsNeedUpdate() === true && !(tangent == null)) {
    this._gl.bindBuffer$2(34962, tangent.get$buffer());
    this._gl.bufferData$3(34962, tangent.get$array(), hint);
  }
  if (dispose)
    for (var t1 = $.iterator(geometry.get$attributes()); t1.hasNext$0() === true;) {
      var t2 = t1.next$0();
      $.index(geometry.get$attributes(), t2).set$array(null);
    }
},
 renderBufferImmediate$3: function(object, program, material) {
  if (object.get$hasPositions() === true && $.index(object, '__webglVertexBuffer') !== true)
    $.indexSet(object, '__webglVertexBuffer', this._gl.createBuffer$0());
  if (object.get$hasNormals() === true && $.index(object, '__webglNormalBuffer') !== true)
    $.indexSet(object, '__webglNormalBuffer', this._gl.createBuffer$0());
  if (object.get$hasUvs() === true && $.index(object, '__webglUVBuffer') !== true)
    $.indexSet(object, '__webglUVBuffer', this._gl.createBuffer$0());
  if (object.get$hasColors() === true && $.index(object, '__webglColorBuffer') !== true)
    $.indexSet(object, '__webglColorBuffer', this._gl.createBuffer$0());
  if (object.get$hasPositions() === true) {
    this._gl.bindBuffer$2(34962, $.index(object, '__webglVertexBuffer'));
    this._gl.bufferData$3(34962, object.get$positionArray(), 35048);
    this._gl.enableVertexAttribArray$1($.index(program.get$attributes(), 'position'));
    this._gl.vertexAttribPointer$6($.index(program.get$attributes(), 'position'), 3, 5126, false, 0, 0);
  }
  if (object.get$hasNormals() === true) {
    this._gl.bindBuffer$2(34962, $.index(object, '__webglNormalBuffer'));
    if (material.get$shading() === 1) {
      var il = $.mul(object.get$count(), 3);
      if (typeof il !== 'number')
        return this.renderBufferImmediate$3$bailout(1, object, program, material, il);
      for (var nby = null, normalArray = null, nbz = null, nx = null, naz = null, i = 0, ncx = null, nbx = null, ny = null, nz = null, nax = null, ncz = null, ncy = null, nay = null; i < il; i += 9) {
        normalArray = object.get$normalArray();
        nax = $.index(normalArray, i);
        var t1 = i + 1;
        nay = $.index(normalArray, t1);
        var t2 = i + 2;
        naz = $.index(normalArray, t2);
        var t3 = i + 3;
        nbx = $.index(normalArray, t3);
        var t4 = i + 4;
        nby = $.index(normalArray, t4);
        var t5 = i + 5;
        nbz = $.index(normalArray, t5);
        var t6 = i + 6;
        ncx = $.index(normalArray, t6);
        var t7 = i + 7;
        ncy = $.index(normalArray, t7);
        var t8 = i + 8;
        ncz = $.index(normalArray, t8);
        nx = $.div($.add($.add(nax, nbx), ncx), 3);
        ny = $.div($.add($.add(nay, nby), ncy), 3);
        nz = $.div($.add($.add(naz, nbz), ncz), 3);
        $.indexSet(normalArray, i, nx);
        $.indexSet(normalArray, t1, ny);
        $.indexSet(normalArray, t2, nz);
        $.indexSet(normalArray, t3, nx);
        $.indexSet(normalArray, t4, ny);
        $.indexSet(normalArray, t5, nz);
        $.indexSet(normalArray, t6, nx);
        $.indexSet(normalArray, t7, ny);
        $.indexSet(normalArray, t8, nz);
      }
    }
    this._gl.bufferData$3(34962, object.get$normalArray(), 35048);
    this._gl.enableVertexAttribArray$1($.index(program.get$attributes(), 'normal'));
    this._gl.vertexAttribPointer$6($.index(program.get$attributes(), 'normal'), 3, 5126, false, 0, 0);
  }
  if (object.get$hasUvs() === true && material.get$map() === true) {
    this._gl.bindBuffer$2(34962, $.index(object, '__webglUVBuffer'));
    this._gl.bufferData$3(34962, object.get$uvArray(), 35048);
    this._gl.enableVertexAttribArray$1($.index(program.get$attributes(), 'uv'));
    this._gl.vertexAttribPointer$6($.index(program.get$attributes(), 'uv'), 2, 5126, false, 0, 0);
  }
  if (object.get$hasColors() === true && !(material.get$vertexColors() === 0)) {
    this._gl.bindBuffer$2(34962, $.index(object, '__webglColorBuffer'));
    this._gl.bufferData$3(34962, object.get$colorArray(), 35048);
    this._gl.enableVertexAttribArray$1($.index(program.get$attributes(), 'color'));
    this._gl.vertexAttribPointer$6($.index(program.get$attributes(), 'color'), 3, 5126, false, 0, 0);
  }
  this._gl.drawArrays$3(4, 0, object.get$count());
  object.set$count(0);
},
 renderBufferImmediate$3$bailout: function(state, env0, env1, env2, env3) {
  switch (state) {
    case 1:
      var object = env0;
      var program = env1;
      var material = env2;
      il = env3;
      break;
  }
  switch (state) {
    case 0:
      if (object.get$hasPositions() === true && $.index(object, '__webglVertexBuffer') !== true)
        $.indexSet(object, '__webglVertexBuffer', this._gl.createBuffer$0());
      if (object.get$hasNormals() === true && $.index(object, '__webglNormalBuffer') !== true)
        $.indexSet(object, '__webglNormalBuffer', this._gl.createBuffer$0());
      if (object.get$hasUvs() === true && $.index(object, '__webglUVBuffer') !== true)
        $.indexSet(object, '__webglUVBuffer', this._gl.createBuffer$0());
      if (object.get$hasColors() === true && $.index(object, '__webglColorBuffer') !== true)
        $.indexSet(object, '__webglColorBuffer', this._gl.createBuffer$0());
      if (object.get$hasPositions() === true) {
        this._gl.bindBuffer$2(34962, $.index(object, '__webglVertexBuffer'));
        this._gl.bufferData$3(34962, object.get$positionArray(), 35048);
        this._gl.enableVertexAttribArray$1($.index(program.get$attributes(), 'position'));
        this._gl.vertexAttribPointer$6($.index(program.get$attributes(), 'position'), 3, 5126, false, 0, 0);
      }
    case 1:
      if (state === 1 || state === 0 && object.get$hasNormals() === true)
        switch (state) {
          case 0:
            this._gl.bindBuffer$2(34962, $.index(object, '__webglNormalBuffer'));
          case 1:
            if (state === 1 || state === 0 && material.get$shading() === 1)
              switch (state) {
                case 0:
                  var il = $.mul(object.get$count(), 3);
                case 1:
                  state = 0;
                  for (var nby = null, normalArray = null, nbz = null, nx = null, naz = null, i = 0, ncx = null, nbx = null, ny = null, nz = null, nax = null, ncz = null, ncy = null, nay = null; $.ltB(i, il); i += 9) {
                    normalArray = object.get$normalArray();
                    nax = $.index(normalArray, i);
                    var t1 = i + 1;
                    nay = $.index(normalArray, t1);
                    var t2 = i + 2;
                    naz = $.index(normalArray, t2);
                    var t3 = i + 3;
                    nbx = $.index(normalArray, t3);
                    var t4 = i + 4;
                    nby = $.index(normalArray, t4);
                    var t5 = i + 5;
                    nbz = $.index(normalArray, t5);
                    var t6 = i + 6;
                    ncx = $.index(normalArray, t6);
                    var t7 = i + 7;
                    ncy = $.index(normalArray, t7);
                    var t8 = i + 8;
                    ncz = $.index(normalArray, t8);
                    nx = $.div($.add($.add(nax, nbx), ncx), 3);
                    ny = $.div($.add($.add(nay, nby), ncy), 3);
                    nz = $.div($.add($.add(naz, nbz), ncz), 3);
                    $.indexSet(normalArray, i, nx);
                    $.indexSet(normalArray, t1, ny);
                    $.indexSet(normalArray, t2, nz);
                    $.indexSet(normalArray, t3, nx);
                    $.indexSet(normalArray, t4, ny);
                    $.indexSet(normalArray, t5, nz);
                    $.indexSet(normalArray, t6, nx);
                    $.indexSet(normalArray, t7, ny);
                    $.indexSet(normalArray, t8, nz);
                  }
              }
            this._gl.bufferData$3(34962, object.get$normalArray(), 35048);
            this._gl.enableVertexAttribArray$1($.index(program.get$attributes(), 'normal'));
            this._gl.vertexAttribPointer$6($.index(program.get$attributes(), 'normal'), 3, 5126, false, 0, 0);
        }
      if (object.get$hasUvs() === true && material.get$map() === true) {
        this._gl.bindBuffer$2(34962, $.index(object, '__webglUVBuffer'));
        this._gl.bufferData$3(34962, object.get$uvArray(), 35048);
        this._gl.enableVertexAttribArray$1($.index(program.get$attributes(), 'uv'));
        this._gl.vertexAttribPointer$6($.index(program.get$attributes(), 'uv'), 2, 5126, false, 0, 0);
      }
      if (object.get$hasColors() === true && !(material.get$vertexColors() === 0)) {
        this._gl.bindBuffer$2(34962, $.index(object, '__webglColorBuffer'));
        this._gl.bufferData$3(34962, object.get$colorArray(), 35048);
        this._gl.enableVertexAttribArray$1($.index(program.get$attributes(), 'color'));
        this._gl.vertexAttribPointer$6($.index(program.get$attributes(), 'color'), 3, 5126, false, 0, 0);
      }
      this._gl.drawArrays$3(4, 0, object.get$count());
      object.set$count(0);
  }
},
 renderBufferDirect$6: function(camera, lights, fog, material, geometry, object) {
  if (material.get$visible() === false)
    return;
  var program = this.setProgram$5(camera, lights, fog, material, object);
  var attributes = program.get$attributes();
  var wireframeBit = material.get$wireframe() === true ? 1 : 0;
  var t1 = $.mul(geometry.id, 16777215);
  if (typeof t1 !== 'number')
    return this.renderBufferDirect$6$bailout(1, t1, program, attributes, geometry, object, wireframeBit, 0, 0, 0, 0, 0);
  var t3 = program.get$id();
  if (typeof t3 !== 'number')
    return this.renderBufferDirect$6$bailout(2, t1, t3, attributes, geometry, object, wireframeBit, 0, 0, 0, 0, 0);
  var geometryHash = t1 + t3 * 2 + wireframeBit;
  if (!(geometryHash === this._currentGeometryGroupHash)) {
    this._currentGeometryGroupHash = geometryHash;
    var updateBuffers = true;
  } else
    updateBuffers = false;
  if (typeof object === 'object' && object !== null && !!object.is$Mesh) {
    var offsets = geometry.offsets;
    if (typeof offsets !== 'string' && (typeof offsets !== 'object' || offsets === null || offsets.constructor !== Array && !offsets.is$JavaScriptIndexingBehavior()))
      return this.renderBufferDirect$6$bailout(3, offsets, attributes, geometry, updateBuffers, 0, 0, 0, 0, 0, 0, 0);
    t1 = offsets.length;
    if (t1 > 1)
      updateBuffers = true;
    for (var t2 = geometry.attributes, t3 = this.info, i = 0; i < t1; ++i) {
      if (i < 0 || i >= offsets.length)
        throw $.ioore(i);
      var startIndex = offsets[i].get$index();
      if (typeof startIndex !== 'number')
        return this.renderBufferDirect$6$bailout(4, t2, startIndex, attributes, i, t1, offsets, updateBuffers, t3, 0, 0, 0);
      if (updateBuffers) {
        var position = $.index(t2, 'position');
        var positionSize = position.get$itemSize();
        if (typeof positionSize !== 'number')
          return this.renderBufferDirect$6$bailout(5, t2, startIndex, attributes, i, t1, offsets, updateBuffers, position, positionSize, t3, 0);
        this._gl.bindBuffer$2(34962, position.get$buffer());
        this._gl.vertexAttribPointer$6($.index(attributes, 'position'), positionSize, 5126, false, 0, startIndex * positionSize * 4);
        var normal = $.index(t2, 'normal');
        var t4 = $.index(attributes, 'normal');
        if (typeof t4 !== 'number')
          return this.renderBufferDirect$6$bailout(6, t2, t4, startIndex, attributes, i, t1, offsets, updateBuffers, normal, t3, 0);
        if (t4 >= 0 && normal === true) {
          var normalSize = normal.get$itemSize();
          if (typeof normalSize !== 'number')
            return this.renderBufferDirect$6$bailout(7, normalSize, t2, startIndex, attributes, i, t1, offsets, updateBuffers, normal, t3, 0);
          this._gl.bindBuffer$2(34962, normal.get$buffer());
          this._gl.vertexAttribPointer$6($.index(attributes, 'normal'), normalSize, 5126, false, 0, startIndex * normalSize * 4);
        }
        var uv = $.index(t2, 'uv');
        t4 = $.index(attributes, 'uv');
        if (typeof t4 !== 'number')
          return this.renderBufferDirect$6$bailout(8, t2, t4, startIndex, attributes, i, t1, offsets, updateBuffers, t3, uv, 0);
        if (t4 >= 0 && uv === true) {
          t4 = uv.get$buffer();
          var t5 = t4 === true;
          var t6 = this._gl;
          if (t5) {
            var uvSize = uv.get$itemSize();
            if (typeof uvSize !== 'number')
              return this.renderBufferDirect$6$bailout(9, startIndex, t6, t1, updateBuffers, t3, t4, t2, uvSize, attributes, i, offsets);
            t6.bindBuffer$2(34962, t4);
            this._gl.vertexAttribPointer$6($.index(attributes, 'uv'), uvSize, 5126, false, 0, startIndex * uvSize * 4);
            this._gl.enableVertexAttribArray$1($.index(attributes, 'uv'));
          } else
            t6.disableVertexAttribArray$1($.index(attributes, 'uv'));
        }
        var color = $.index(t2, 'color');
        t4 = $.index(attributes, 'color');
        if (typeof t4 !== 'number')
          return this.renderBufferDirect$6$bailout(10, t2, t4, startIndex, attributes, i, t1, offsets, updateBuffers, color, t3, 0);
        if (t4 >= 0 && color === true) {
          var colorSize = color.get$itemSize();
          if (typeof colorSize !== 'number')
            return this.renderBufferDirect$6$bailout(11, colorSize, t2, startIndex, attributes, i, t1, offsets, updateBuffers, color, t3, 0);
          this._gl.bindBuffer$2(34962, color.get$buffer());
          this._gl.vertexAttribPointer$6($.index(attributes, 'color'), colorSize, 5126, false, 0, startIndex * colorSize * 4);
        }
        var tangent = $.index(t2, 'tangent');
        t4 = $.index(attributes, 'tangent');
        if (typeof t4 !== 'number')
          return this.renderBufferDirect$6$bailout(12, t2, t4, startIndex, attributes, i, t1, offsets, updateBuffers, t3, tangent, 0);
        if (t4 >= 0 && tangent === true) {
          var tangentSize = tangent.get$itemSize();
          if (typeof tangentSize !== 'number')
            return this.renderBufferDirect$6$bailout(13, t2, startIndex, attributes, i, t1, offsets, updateBuffers, t3, tangentSize, tangent, 0);
          this._gl.bindBuffer$2(34962, tangent.get$buffer());
          this._gl.vertexAttribPointer$6($.index(attributes, 'tangent'), tangentSize, 5126, false, 0, startIndex * tangentSize * 4);
        }
        var index = $.index(t2, 'index');
        this._gl.bindBuffer$2(34963, index.get$buffer());
      }
      t4 = this._gl;
      if (i < 0 || i >= offsets.length)
        throw $.ioore(i);
      t5 = offsets[i].get$count();
      t6 = offsets[i].get$start();
      if (typeof t6 !== 'number')
        return this.renderBufferDirect$6$bailout(14, t2, attributes, updateBuffers, i, t1, offsets, t5, t4, t3, t6, 0);
      t4.drawElements$4(4, t5, 5123, t6 * 2);
      t5 = t3.render;
      t4 = t5.get$calls();
      if (typeof t4 !== 'number')
        return this.renderBufferDirect$6$bailout(15, t2, t5, t4, attributes, i, t1, offsets, updateBuffers, t3, 0, 0);
      t5.set$calls(t4 + 1);
      t5 = t3.render;
      var t9 = t5.get$vertices();
      if (typeof t9 !== 'number')
        return this.renderBufferDirect$6$bailout(16, t2, attributes, updateBuffers, i, t1, offsets, t5, t9, t3, 0, 0);
      if (i < 0 || i >= offsets.length)
        throw $.ioore(i);
      var t11 = offsets[i].get$count();
      if (typeof t11 !== 'number')
        return this.renderBufferDirect$6$bailout(17, t2, attributes, updateBuffers, i, t1, offsets, t5, t9, t11, t3, 0);
      t5.set$vertices(t9 + t11);
      t5 = t3.render;
      var t13 = t5.get$faces();
      if (typeof t13 !== 'number')
        return this.renderBufferDirect$6$bailout(18, t5, t13, attributes, t2, i, t1, offsets, updateBuffers, t3, 0, 0);
      if (i < 0 || i >= offsets.length)
        throw $.ioore(i);
      var t15 = offsets[i].get$count();
      if (typeof t15 !== 'number')
        return this.renderBufferDirect$6$bailout(19, t5, t13, attributes, t2, t15, i, t1, offsets, updateBuffers, t3, 0);
      t5.set$faces(t13 + t15 / 3);
    }
  }
},
 renderBufferDirect$6$bailout: function(state, env0, env1, env2, env3, env4, env5, env6, env7, env8, env9, env10) {
  switch (state) {
    case 1:
      t1 = env0;
      program = env1;
      attributes = env2;
      var geometry = env3;
      var object = env4;
      wireframeBit = env5;
      break;
    case 2:
      t1 = env0;
      t3 = env1;
      attributes = env2;
      geometry = env3;
      object = env4;
      wireframeBit = env5;
      break;
    case 3:
      offsets = env0;
      attributes = env1;
      geometry = env2;
      updateBuffers = env3;
      break;
    case 4:
      t1 = env0;
      startIndex = env1;
      attributes = env2;
      i = env3;
      il = env4;
      offsets = env5;
      updateBuffers = env6;
      t2 = env7;
      break;
    case 5:
      t1 = env0;
      startIndex = env1;
      attributes = env2;
      i = env3;
      il = env4;
      offsets = env5;
      updateBuffers = env6;
      position = env7;
      positionSize = env8;
      t2 = env9;
      break;
    case 6:
      t1 = env0;
      t3 = env1;
      startIndex = env2;
      attributes = env3;
      i = env4;
      il = env5;
      offsets = env6;
      updateBuffers = env7;
      normal = env8;
      t2 = env9;
      break;
    case 7:
      normalSize = env0;
      t1 = env1;
      startIndex = env2;
      attributes = env3;
      i = env4;
      il = env5;
      offsets = env6;
      updateBuffers = env7;
      normal = env8;
      t2 = env9;
      break;
    case 8:
      t1 = env0;
      t3 = env1;
      startIndex = env2;
      attributes = env3;
      i = env4;
      il = env5;
      offsets = env6;
      updateBuffers = env7;
      t2 = env8;
      uv = env9;
      break;
    case 9:
      startIndex = env0;
      t5 = env1;
      il = env2;
      updateBuffers = env3;
      t2 = env4;
      t3 = env5;
      t1 = env6;
      uvSize = env7;
      attributes = env8;
      i = env9;
      offsets = env10;
      break;
    case 10:
      t1 = env0;
      t3 = env1;
      startIndex = env2;
      attributes = env3;
      i = env4;
      il = env5;
      offsets = env6;
      updateBuffers = env7;
      color = env8;
      t2 = env9;
      break;
    case 11:
      colorSize = env0;
      t1 = env1;
      startIndex = env2;
      attributes = env3;
      i = env4;
      il = env5;
      offsets = env6;
      updateBuffers = env7;
      color = env8;
      t2 = env9;
      break;
    case 12:
      t1 = env0;
      t3 = env1;
      startIndex = env2;
      attributes = env3;
      i = env4;
      il = env5;
      offsets = env6;
      updateBuffers = env7;
      t2 = env8;
      tangent = env9;
      break;
    case 13:
      t1 = env0;
      startIndex = env1;
      attributes = env2;
      i = env3;
      il = env4;
      offsets = env5;
      updateBuffers = env6;
      t2 = env7;
      tangentSize = env8;
      tangent = env9;
      break;
    case 14:
      t1 = env0;
      attributes = env1;
      updateBuffers = env2;
      i = env3;
      il = env4;
      offsets = env5;
      t4 = env6;
      t3 = env7;
      t2 = env8;
      t5 = env9;
      break;
    case 15:
      t1 = env0;
      t4 = env1;
      t3 = env2;
      attributes = env3;
      i = env4;
      il = env5;
      offsets = env6;
      updateBuffers = env7;
      t2 = env8;
      break;
    case 16:
      t1 = env0;
      attributes = env1;
      updateBuffers = env2;
      i = env3;
      il = env4;
      offsets = env5;
      t4 = env6;
      t8 = env7;
      t2 = env8;
      break;
    case 17:
      t1 = env0;
      attributes = env1;
      updateBuffers = env2;
      i = env3;
      il = env4;
      offsets = env5;
      t4 = env6;
      t8 = env7;
      t10 = env8;
      t2 = env9;
      break;
    case 18:
      t4 = env0;
      t12 = env1;
      attributes = env2;
      t1 = env3;
      i = env4;
      il = env5;
      offsets = env6;
      updateBuffers = env7;
      t2 = env8;
      break;
    case 19:
      t4 = env0;
      t12 = env1;
      attributes = env2;
      t1 = env3;
      t14 = env4;
      i = env5;
      il = env6;
      offsets = env7;
      updateBuffers = env8;
      t2 = env9;
      break;
  }
  switch (state) {
    case 0:
      if (material.get$visible() === false)
        return;
      var program = this.setProgram$5(camera, lights, fog, material, object);
      var attributes = program.get$attributes();
      var wireframeBit = material.get$wireframe() === true ? 1 : 0;
      var t1 = $.mul(geometry.id, 16777215);
    case 1:
      state = 0;
      var t3 = program.get$id();
    case 2:
      state = 0;
      var geometryHash = $.add($.add(t1, $.mul(t3, 2)), wireframeBit);
      t1 = this._currentGeometryGroupHash;
      if (!(geometryHash == null ? t1 == null : geometryHash === t1)) {
        this._currentGeometryGroupHash = geometryHash;
        var updateBuffers = true;
      } else
        updateBuffers = false;
    default:
      if (state === 19 || state === 18 || state === 17 || state === 16 || state === 15 || state === 14 || state === 13 || state === 12 || state === 11 || state === 10 || state === 9 || state === 8 || state === 7 || state === 6 || state === 5 || state === 4 || state === 3 || state === 0 && typeof object === 'object' && object !== null && !!object.is$Mesh)
        switch (state) {
          case 0:
            var offsets = geometry.offsets;
          case 3:
            state = 0;
            if ($.gtB($.get$length(offsets), 1))
              updateBuffers = true;
            var il = $.get$length(offsets);
            t1 = geometry.attributes;
            var t2 = this.info;
            var i = 0;
          default:
            L0:
              while (true)
                switch (state) {
                  case 0:
                    if (!$.ltB(i, il))
                      break L0;
                    var startIndex = $.index(offsets, i).get$index();
                  case 4:
                    state = 0;
                  default:
                    if (state === 13 || state === 12 || state === 11 || state === 10 || state === 9 || state === 8 || state === 7 || state === 6 || state === 5 || state === 0 && updateBuffers)
                      switch (state) {
                        case 0:
                          var position = $.index(t1, 'position');
                          var positionSize = position.get$itemSize();
                        case 5:
                          state = 0;
                          this._gl.bindBuffer$2(34962, position.get$buffer());
                          this._gl.vertexAttribPointer$6($.index(attributes, 'position'), positionSize, 5126, false, 0, $.mul($.mul(startIndex, positionSize), 4));
                          var normal = $.index(t1, 'normal');
                          t3 = $.index(attributes, 'normal');
                        case 6:
                          state = 0;
                        case 7:
                          if (state === 7 || state === 0 && $.geB(t3, 0) && normal === true)
                            switch (state) {
                              case 0:
                                var normalSize = normal.get$itemSize();
                              case 7:
                                state = 0;
                                this._gl.bindBuffer$2(34962, normal.get$buffer());
                                this._gl.vertexAttribPointer$6($.index(attributes, 'normal'), normalSize, 5126, false, 0, $.mul($.mul(startIndex, normalSize), 4));
                            }
                          var uv = $.index(t1, 'uv');
                          t3 = $.index(attributes, 'uv');
                        case 8:
                          state = 0;
                        case 9:
                          if (state === 9 || state === 0 && $.geB(t3, 0) && uv === true)
                            switch (state) {
                              case 0:
                                t3 = uv.get$buffer();
                                var t4 = t3 === true;
                                var t5 = this._gl;
                              case 9:
                                if (state === 9 || state === 0 && t4)
                                  switch (state) {
                                    case 0:
                                      var uvSize = uv.get$itemSize();
                                    case 9:
                                      state = 0;
                                      t5.bindBuffer$2(34962, t3);
                                      this._gl.vertexAttribPointer$6($.index(attributes, 'uv'), uvSize, 5126, false, 0, $.mul($.mul(startIndex, uvSize), 4));
                                      this._gl.enableVertexAttribArray$1($.index(attributes, 'uv'));
                                  }
                                else
                                  t5.disableVertexAttribArray$1($.index(attributes, 'uv'));
                            }
                          var color = $.index(t1, 'color');
                          t3 = $.index(attributes, 'color');
                        case 10:
                          state = 0;
                        case 11:
                          if (state === 11 || state === 0 && $.geB(t3, 0) && color === true)
                            switch (state) {
                              case 0:
                                var colorSize = color.get$itemSize();
                              case 11:
                                state = 0;
                                this._gl.bindBuffer$2(34962, color.get$buffer());
                                this._gl.vertexAttribPointer$6($.index(attributes, 'color'), colorSize, 5126, false, 0, $.mul($.mul(startIndex, colorSize), 4));
                            }
                          var tangent = $.index(t1, 'tangent');
                          t3 = $.index(attributes, 'tangent');
                        case 12:
                          state = 0;
                        case 13:
                          if (state === 13 || state === 0 && $.geB(t3, 0) && tangent === true)
                            switch (state) {
                              case 0:
                                var tangentSize = tangent.get$itemSize();
                              case 13:
                                state = 0;
                                this._gl.bindBuffer$2(34962, tangent.get$buffer());
                                this._gl.vertexAttribPointer$6($.index(attributes, 'tangent'), tangentSize, 5126, false, 0, $.mul($.mul(startIndex, tangentSize), 4));
                            }
                          var index = $.index(t1, 'index');
                          this._gl.bindBuffer$2(34963, index.get$buffer());
                      }
                    t3 = this._gl;
                    t4 = $.index(offsets, i).get$count();
                    t5 = $.index(offsets, i).get$start();
                  case 14:
                    state = 0;
                    t3.drawElements$4(4, t4, 5123, $.mul(t5, 2));
                    t4 = t2.get$render();
                    t3 = t4.get$calls();
                  case 15:
                    state = 0;
                    t4.set$calls($.add(t3, 1));
                    t4 = t2.get$render();
                    var t8 = t4.get$vertices();
                  case 16:
                    state = 0;
                    var t10 = $.index(offsets, i).get$count();
                  case 17:
                    state = 0;
                    t4.set$vertices($.add(t8, t10));
                    t4 = t2.get$render();
                    var t12 = t4.get$faces();
                  case 18:
                    state = 0;
                    var t14 = $.index(offsets, i).get$count();
                  case 19:
                    state = 0;
                    t4.set$faces($.add(t12, $.div(t14, 3)));
                    ++i;
                }
        }
  }
},
 renderBuffer$6: function(camera, lights, fog, material, geometryGroup, webglobject) {
  var object = webglobject.get$object();
  if (material.get$visible() !== true)
    return;
  var program = this.setProgram$5(camera, lights, fog, material, webglobject);
  var attributes = program.get$attributes();
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.renderBuffer$6$bailout(1, program, attributes, geometryGroup, webglobject, material, object, 0, 0, 0);
  var wireframeBit = material.get$wireframe() === true ? 1 : 0;
  var t1 = geometryGroup.get$id();
  if (typeof t1 !== 'number')
    return this.renderBuffer$6$bailout(2, program, attributes, geometryGroup, webglobject, material, object, wireframeBit, t1, 0);
  t1 *= 16777215;
  var t3 = program.get$id();
  if (typeof t3 !== 'number')
    return this.renderBuffer$6$bailout(3, t1, t3, attributes, geometryGroup, webglobject, material, object, wireframeBit, 0);
  var geometryGroupHash = t1 + t3 * 2 + wireframeBit;
  if (!(geometryGroupHash === this._currentGeometryGroupHash)) {
    this._currentGeometryGroupHash = geometryGroupHash;
    var updateBuffers = true;
  } else
    updateBuffers = false;
  if (material.get$morphTargets() !== true) {
    throw $.iae('position');
    if ('position' < 0 || 'position' >= attributes.length)
      throw $.ioore('position');
    t1 = attributes.position;
    if (typeof t1 !== 'number')
      return this.renderBuffer$6$bailout(4, t1, attributes, geometryGroup, updateBuffers, material, object, webglobject, 0, 0);
    t1 = t1 >= 0;
  } else
    t1 = false;
  if (t1) {
    if (updateBuffers) {
      this._gl.bindBuffer$2(34962, geometryGroup.get$__webglVertexBuffer());
      t1 = this._gl;
      throw $.iae('position');
      if ('position' < 0 || 'position' >= attributes.length)
        throw $.ioore('position');
      t1.vertexAttribPointer$6(attributes.position, 3, 5126, false, 0, 0);
    }
  } else if (webglobject.get$morphTargetBase() === true)
    this.setupMorphTargets$3(material, geometryGroup, webglobject);
  if (updateBuffers) {
    t1 = geometryGroup.get$__webglCustomAttributesList();
    if (!(t1 == null)) {
      var il = $.get$length(t1);
      if (typeof il !== 'number')
        return this.renderBuffer$6$bailout(5, attributes, geometryGroup, updateBuffers, material, object, il, 0, 0, 0);
      for (var attribute = null, i = 0; i < il; ++i) {
        t1 = geometryGroup.get$__webglCustomAttributesList();
        if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
          return this.renderBuffer$6$bailout(6, i, attributes, geometryGroup, updateBuffers, material, object, t1, il, 0);
        if (i < 0 || i >= t1.length)
          throw $.ioore(i);
        attribute = t1[i];
        t1 = attribute.get$buffer();
        var t2 = t1.get$belongsToAttribute();
        if (t2 !== (t2 | 0))
          throw $.iae(t2);
        if (t2 < 0 || t2 >= attributes.length)
          throw $.ioore(t2);
        t2 = attributes[t2];
        if (typeof t2 !== 'number')
          return this.renderBuffer$6$bailout(7, i, t2, attributes, geometryGroup, updateBuffers, material, object, attribute, il);
        if (t2 >= 0) {
          this._gl.bindBuffer$2(34962, t1);
          t1 = this._gl;
          t2 = attribute.get$buffer().get$belongsToAttribute();
          if (t2 !== (t2 | 0))
            throw $.iae(t2);
          if (t2 < 0 || t2 >= attributes.length)
            throw $.ioore(t2);
          t1.vertexAttribPointer$6(attributes[t2], attribute.get$size(), 5126, false, 0, 0);
        }
      }
    }
    throw $.iae('color');
    if ('color' < 0 || 'color' >= attributes.length)
      throw $.ioore('color');
    t1 = attributes.color;
    if (typeof t1 !== 'number')
      return this.renderBuffer$6$bailout(8, t1, material, geometryGroup, updateBuffers, attributes, object, 0, 0, 0);
    if (t1 >= 0) {
      this._gl.bindBuffer$2(34962, geometryGroup.get$__webglColorBuffer());
      t1 = this._gl;
      if ('color' < 0 || 'color' >= attributes.length)
        throw $.ioore('color');
      t1.vertexAttribPointer$6(attributes.color, 3, 5126, false, 0, 0);
    }
    throw $.iae('normal');
    if ('normal' < 0 || 'normal' >= attributes.length)
      throw $.ioore('normal');
    t1 = attributes.normal;
    if (typeof t1 !== 'number')
      return this.renderBuffer$6$bailout(9, t1, material, geometryGroup, updateBuffers, attributes, object, 0, 0, 0);
    if (t1 >= 0) {
      this._gl.bindBuffer$2(34962, geometryGroup.get$__webglNormalBuffer());
      t1 = this._gl;
      if ('normal' < 0 || 'normal' >= attributes.length)
        throw $.ioore('normal');
      t1.vertexAttribPointer$6(attributes.normal, 3, 5126, false, 0, 0);
    }
    throw $.iae('tangent');
    if ('tangent' < 0 || 'tangent' >= attributes.length)
      throw $.ioore('tangent');
    t1 = attributes.tangent;
    if (typeof t1 !== 'number')
      return this.renderBuffer$6$bailout(10, t1, material, geometryGroup, updateBuffers, attributes, object, 0, 0, 0);
    if (t1 >= 0) {
      this._gl.bindBuffer$2(34962, geometryGroup.get$__webglTangentBuffer());
      t1 = this._gl;
      if ('tangent' < 0 || 'tangent' >= attributes.length)
        throw $.ioore('tangent');
      t1.vertexAttribPointer$6(attributes.tangent, 4, 5126, false, 0, 0);
    }
    throw $.iae('uv');
    if ('uv' < 0 || 'uv' >= attributes.length)
      throw $.ioore('uv');
    t1 = attributes.uv;
    if (typeof t1 !== 'number')
      return this.renderBuffer$6$bailout(11, material, geometryGroup, updateBuffers, attributes, t1, object, 0, 0, 0);
    if (t1 >= 0) {
      t1 = geometryGroup.get$__webglUVBuffer();
      t2 = !(t1 == null);
      t3 = this._gl;
      if (t2) {
        t3.bindBuffer$2(34962, t1);
        t1 = this._gl;
        if ('uv' < 0 || 'uv' >= attributes.length)
          throw $.ioore('uv');
        t1.vertexAttribPointer$6(attributes.uv, 2, 5126, false, 0, 0);
        t1 = this._gl;
        if ('uv' < 0 || 'uv' >= attributes.length)
          throw $.ioore('uv');
        t1.enableVertexAttribArray$1(attributes.uv);
      } else
        t3.disableVertexAttribArray$1(attributes.uv);
    }
    throw $.iae('uv2');
    if ('uv2' < 0 || 'uv2' >= attributes.length)
      throw $.ioore('uv2');
    t1 = attributes.uv2;
    if (typeof t1 !== 'number')
      return this.renderBuffer$6$bailout(12, material, geometryGroup, updateBuffers, attributes, t1, object, 0, 0, 0);
    if (t1 >= 0) {
      t1 = geometryGroup.get$__webglUV2Buffer();
      t2 = !(t1 == null);
      t3 = this._gl;
      if (t2) {
        t3.bindBuffer$2(34962, t1);
        t1 = this._gl;
        if ('uv2' < 0 || 'uv2' >= attributes.length)
          throw $.ioore('uv2');
        t1.vertexAttribPointer$6(attributes.uv2, 2, 5126, false, 0, 0);
        t1 = this._gl;
        if ('uv2' < 0 || 'uv2' >= attributes.length)
          throw $.ioore('uv2');
        t1.enableVertexAttribArray$1(attributes.uv2);
      } else
        t3.disableVertexAttribArray$1(attributes.uv2);
    }
    if (material.get$skinning() === true) {
      throw $.iae('skinVertexA');
      t1 = attributes.length;
      if ('skinVertexA' < 0 || 'skinVertexA' >= t1)
        throw $.ioore('skinVertexA');
      t2 = attributes.skinVertexA;
      if (typeof t2 !== 'number')
        return this.renderBuffer$6$bailout(13, t2, material, geometryGroup, updateBuffers, attributes, object, 0, 0, 0);
      if (t2 >= 0) {
        throw $.iae('skinVertexB');
        if ('skinVertexB' < 0 || 'skinVertexB' >= t1)
          throw $.ioore('skinVertexB');
        t2 = attributes.skinVertexB;
        if (typeof t2 !== 'number')
          return this.renderBuffer$6$bailout(14, material, geometryGroup, updateBuffers, attributes, object, t2, 0, 0, 0);
        if (t2 >= 0) {
          throw $.iae('skinIndex');
          if ('skinIndex' < 0 || 'skinIndex' >= t1)
            throw $.ioore('skinIndex');
          t2 = attributes.skinIndex;
          if (typeof t2 !== 'number')
            return this.renderBuffer$6$bailout(15, t2, material, geometryGroup, updateBuffers, attributes, object, 0, 0, 0);
          if (t2 >= 0) {
            throw $.iae('skinWeight');
            if ('skinWeight' < 0 || 'skinWeight' >= t1)
              throw $.ioore('skinWeight');
            t2 = attributes.skinWeight;
            if (typeof t2 !== 'number')
              return this.renderBuffer$6$bailout(16, material, geometryGroup, updateBuffers, attributes, object, t2, 0, 0, 0);
            t2 = t2 >= 0;
            t1 = t2;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    if (t1) {
      this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinVertexABuffer());
      t1 = this._gl;
      throw $.iae('skinVertexA');
      if ('skinVertexA' < 0 || 'skinVertexA' >= attributes.length)
        throw $.ioore('skinVertexA');
      t1.vertexAttribPointer$6(attributes.skinVertexA, 4, 5126, false, 0, 0);
      this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinVertexBBuffer());
      t1 = this._gl;
      throw $.iae('skinVertexB');
      if ('skinVertexB' < 0 || 'skinVertexB' >= attributes.length)
        throw $.ioore('skinVertexB');
      t1.vertexAttribPointer$6(attributes.skinVertexB, 4, 5126, false, 0, 0);
      this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinIndicesBuffer());
      t1 = this._gl;
      throw $.iae('skinIndex');
      if ('skinIndex' < 0 || 'skinIndex' >= attributes.length)
        throw $.ioore('skinIndex');
      t1.vertexAttribPointer$6(attributes.skinIndex, 4, 5126, false, 0, 0);
      this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinWeightsBuffer());
      t1 = this._gl;
      throw $.iae('skinWeight');
      if ('skinWeight' < 0 || 'skinWeight' >= attributes.length)
        throw $.ioore('skinWeight');
      t1.vertexAttribPointer$6(attributes.skinWeight, 4, 5126, false, 0, 0);
    }
  }
  if (typeof object === 'object' && object !== null && !!object.is$Mesh) {
    if (material.get$wireframe() === true) {
      this.setLineWidth$1(material.get$wireframeLinewidth());
      if (updateBuffers)
        this._gl.bindBuffer$2(34963, geometryGroup.get$__webglLineBuffer());
      this._gl.drawElements$4(1, geometryGroup.get$__webglLineCount(), 5123, 0);
    } else {
      if (updateBuffers)
        this._gl.bindBuffer$2(34963, geometryGroup.get$__webglFaceBuffer());
      this._gl.drawElements$4(4, geometryGroup.get$__webglFaceCount(), 5123, 0);
    }
    t1 = this.info;
    t2 = t1.render;
    t3 = t2.get$calls();
    if (typeof t3 !== 'number')
      return this.renderBuffer$6$bailout(17, t3, geometryGroup, t1, t2, 0, 0, 0, 0, 0);
    t2.set$calls(t3 + 1);
    t2 = t1.render;
    var t5 = t2.get$vertices();
    if (typeof t5 !== 'number')
      return this.renderBuffer$6$bailout(18, t5, geometryGroup, t2, t1, 0, 0, 0, 0, 0);
    var t7 = geometryGroup.get$__webglFaceCount();
    if (typeof t7 !== 'number')
      return this.renderBuffer$6$bailout(19, t5, geometryGroup, t2, t1, t7, 0, 0, 0, 0);
    t2.set$vertices(t5 + t7);
    t1 = t1.render;
    t2 = t1.get$faces();
    if (typeof t2 !== 'number')
      return this.renderBuffer$6$bailout(20, t1, t2, geometryGroup, 0, 0, 0, 0, 0, 0);
    var t10 = geometryGroup.get$__webglFaceCount();
    if (typeof t10 !== 'number')
      return this.renderBuffer$6$bailout(21, t1, t2, t10, 0, 0, 0, 0, 0, 0);
    var t12 = $.toInt(t10 / 3);
    if (typeof t12 !== 'number')
      return this.renderBuffer$6$bailout(22, t12, t1, t2, 0, 0, 0, 0, 0, 0);
    t1.set$faces(t2 + t12);
  } else if (typeof object === 'object' && object !== null && !!object.is$Line) {
    var primitives = object.type === 0 ? 3 : 1;
    this.setLineWidth$1(material.get$linewidth());
    this._gl.drawArrays$3(primitives, 0, geometryGroup.get$__webglLineCount());
    t1 = this.info.render;
    t2 = t1.get$calls();
    if (typeof t2 !== 'number')
      return this.renderBuffer$6$bailout(23, t1, t2, 0, 0, 0, 0, 0, 0, 0);
    t1.set$calls(t2 + 1);
  } else if (typeof object === 'object' && object !== null && !!object.is$ParticleSystem) {
    this._gl.drawArrays$3(0, 0, geometryGroup.get$__webglParticleCount());
    t1 = this.info;
    t2 = t1.render;
    t3 = t2.get$calls();
    if (typeof t3 !== 'number')
      return this.renderBuffer$6$bailout(24, t2, t3, geometryGroup, t1, 0, 0, 0, 0, 0);
    t2.set$calls(t3 + 1);
    t1 = t1.render;
    t2 = t1.get$points();
    if (typeof t2 !== 'number')
      return this.renderBuffer$6$bailout(25, geometryGroup, t1, t2, 0, 0, 0, 0, 0, 0);
    var t6 = geometryGroup.get$__webglParticleCount();
    if (typeof t6 !== 'number')
      return this.renderBuffer$6$bailout(26, t6, t1, t2, 0, 0, 0, 0, 0, 0);
    t1.set$points(t2 + t6);
  } else if (typeof object === 'object' && object !== null && !!object.is$Ribbon) {
    this._gl.drawArrays$3(5, 0, geometryGroup.get$__webglVertexCount());
    t1 = this.info.render;
    t2 = t1.get$calls();
    if (typeof t2 !== 'number')
      return this.renderBuffer$6$bailout(27, t1, t2, 0, 0, 0, 0, 0, 0, 0);
    t1.set$calls(t2 + 1);
  }
},
 renderBuffer$6$bailout: function(state, env0, env1, env2, env3, env4, env5, env6, env7, env8) {
  switch (state) {
    case 1:
      program = env0;
      attributes = env1;
      var geometryGroup = env2;
      var webglobject = env3;
      var material = env4;
      object = env5;
      break;
    case 2:
      program = env0;
      attributes = env1;
      geometryGroup = env2;
      webglobject = env3;
      material = env4;
      object = env5;
      wireframeBit = env6;
      t1 = env7;
      break;
    case 3:
      t1 = env0;
      t3 = env1;
      attributes = env2;
      geometryGroup = env3;
      webglobject = env4;
      material = env5;
      object = env6;
      wireframeBit = env7;
      break;
    case 4:
      t1 = env0;
      attributes = env1;
      geometryGroup = env2;
      updateBuffers = env3;
      material = env4;
      object = env5;
      webglobject = env6;
      break;
    case 5:
      attributes = env0;
      geometryGroup = env1;
      updateBuffers = env2;
      material = env3;
      object = env4;
      il = env5;
      break;
    case 6:
      i = env0;
      attributes = env1;
      geometryGroup = env2;
      updateBuffers = env3;
      material = env4;
      object = env5;
      t1 = env6;
      il = env7;
      break;
    case 7:
      i = env0;
      t1 = env1;
      attributes = env2;
      geometryGroup = env3;
      updateBuffers = env4;
      material = env5;
      object = env6;
      attribute = env7;
      il = env8;
      break;
    case 8:
      t1 = env0;
      material = env1;
      geometryGroup = env2;
      updateBuffers = env3;
      attributes = env4;
      object = env5;
      break;
    case 9:
      t1 = env0;
      material = env1;
      geometryGroup = env2;
      updateBuffers = env3;
      attributes = env4;
      object = env5;
      break;
    case 10:
      t1 = env0;
      material = env1;
      geometryGroup = env2;
      updateBuffers = env3;
      attributes = env4;
      object = env5;
      break;
    case 11:
      material = env0;
      geometryGroup = env1;
      updateBuffers = env2;
      attributes = env3;
      t1 = env4;
      object = env5;
      break;
    case 12:
      material = env0;
      geometryGroup = env1;
      updateBuffers = env2;
      attributes = env3;
      t1 = env4;
      object = env5;
      break;
    case 13:
      t1 = env0;
      material = env1;
      geometryGroup = env2;
      updateBuffers = env3;
      attributes = env4;
      object = env5;
      break;
    case 14:
      material = env0;
      geometryGroup = env1;
      updateBuffers = env2;
      attributes = env3;
      object = env4;
      t1 = env5;
      break;
    case 15:
      t1 = env0;
      material = env1;
      geometryGroup = env2;
      updateBuffers = env3;
      attributes = env4;
      object = env5;
      break;
    case 16:
      material = env0;
      geometryGroup = env1;
      updateBuffers = env2;
      attributes = env3;
      object = env4;
      t1 = env5;
      break;
    case 17:
      t3 = env0;
      geometryGroup = env1;
      t1 = env2;
      t2 = env3;
      break;
    case 18:
      t5 = env0;
      geometryGroup = env1;
      t2 = env2;
      t1 = env3;
      break;
    case 19:
      t5 = env0;
      geometryGroup = env1;
      t2 = env2;
      t1 = env3;
      t7 = env4;
      break;
    case 20:
      t1 = env0;
      t2 = env1;
      geometryGroup = env2;
      break;
    case 21:
      t1 = env0;
      t2 = env1;
      t10 = env2;
      break;
    case 22:
      t12 = env0;
      t1 = env1;
      t2 = env2;
      break;
    case 23:
      t1 = env0;
      t2 = env1;
      break;
    case 24:
      t2 = env0;
      t3 = env1;
      geometryGroup = env2;
      t1 = env3;
      break;
    case 25:
      geometryGroup = env0;
      t1 = env1;
      t2 = env2;
      break;
    case 26:
      t6 = env0;
      t1 = env1;
      t2 = env2;
      break;
    case 27:
      t1 = env0;
      t2 = env1;
      break;
  }
  switch (state) {
    case 0:
      var object = webglobject.get$object();
      if (material.get$visible() !== true)
        return;
      var program = this.setProgram$5(camera, lights, fog, material, webglobject);
      var attributes = program.get$attributes();
    case 1:
      state = 0;
      var wireframeBit = material.get$wireframe() === true ? 1 : 0;
      var t1 = geometryGroup.get$id();
    case 2:
      state = 0;
      t1 = $.mul(t1, 16777215);
      var t3 = program.get$id();
    case 3:
      state = 0;
      var geometryGroupHash = $.add($.add(t1, $.mul(t3, 2)), wireframeBit);
      t1 = this._currentGeometryGroupHash;
      if (!(geometryGroupHash == null ? t1 == null : geometryGroupHash === t1)) {
        this._currentGeometryGroupHash = geometryGroupHash;
        var updateBuffers = true;
      } else
        updateBuffers = false;
    case 4:
      if (state === 4 || state === 0 && material.get$morphTargets() !== true)
        switch (state) {
          case 0:
            t1 = $.index(attributes, 'position');
          case 4:
            state = 0;
            t1 = $.geB(t1, 0);
        }
      else
        t1 = false;
      if (t1) {
        if (updateBuffers) {
          this._gl.bindBuffer$2(34962, geometryGroup.get$__webglVertexBuffer());
          this._gl.vertexAttribPointer$6($.index(attributes, 'position'), 3, 5126, false, 0, 0);
        }
      } else if (webglobject.get$morphTargetBase() === true)
        this.setupMorphTargets$3(material, geometryGroup, webglobject);
    default:
      if (state === 16 || state === 15 || state === 14 || state === 13 || state === 12 || state === 11 || state === 10 || state === 9 || state === 8 || state === 7 || state === 6 || state === 5 || state === 0 && updateBuffers)
        switch (state) {
          case 0:
            t1 = geometryGroup.get$__webglCustomAttributesList();
          default:
            if (state === 7 || state === 6 || state === 5 || state === 0 && !(t1 == null))
              switch (state) {
                case 0:
                  var il = $.get$length(t1);
                case 5:
                  state = 0;
                  var attribute = null;
                  var i = 0;
                default:
                  L0:
                    while (true)
                      switch (state) {
                        case 0:
                          if (!$.ltB(i, il))
                            break L0;
                          t1 = geometryGroup.get$__webglCustomAttributesList();
                        case 6:
                          state = 0;
                          attribute = $.index(t1, i);
                          t1 = $.index(attributes, attribute.get$buffer().get$belongsToAttribute());
                        case 7:
                          state = 0;
                          if ($.geB(t1, 0)) {
                            this._gl.bindBuffer$2(34962, attribute.get$buffer());
                            this._gl.vertexAttribPointer$6($.index(attributes, attribute.get$buffer().get$belongsToAttribute()), attribute.get$size(), 5126, false, 0, 0);
                          }
                          ++i;
                      }
              }
            t1 = $.index(attributes, 'color');
          case 8:
            state = 0;
            if ($.geB(t1, 0)) {
              this._gl.bindBuffer$2(34962, geometryGroup.get$__webglColorBuffer());
              this._gl.vertexAttribPointer$6($.index(attributes, 'color'), 3, 5126, false, 0, 0);
            }
            t1 = $.index(attributes, 'normal');
          case 9:
            state = 0;
            if ($.geB(t1, 0)) {
              this._gl.bindBuffer$2(34962, geometryGroup.get$__webglNormalBuffer());
              this._gl.vertexAttribPointer$6($.index(attributes, 'normal'), 3, 5126, false, 0, 0);
            }
            t1 = $.index(attributes, 'tangent');
          case 10:
            state = 0;
            if ($.geB(t1, 0)) {
              this._gl.bindBuffer$2(34962, geometryGroup.get$__webglTangentBuffer());
              this._gl.vertexAttribPointer$6($.index(attributes, 'tangent'), 4, 5126, false, 0, 0);
            }
            t1 = $.index(attributes, 'uv');
          case 11:
            state = 0;
            if ($.geB(t1, 0)) {
              t1 = geometryGroup.get$__webglUVBuffer();
              var t2 = !(t1 == null);
              t3 = this._gl;
              if (t2) {
                t3.bindBuffer$2(34962, t1);
                this._gl.vertexAttribPointer$6($.index(attributes, 'uv'), 2, 5126, false, 0, 0);
                this._gl.enableVertexAttribArray$1($.index(attributes, 'uv'));
              } else
                t3.disableVertexAttribArray$1($.index(attributes, 'uv'));
            }
            t1 = $.index(attributes, 'uv2');
          case 12:
            state = 0;
            if ($.geB(t1, 0)) {
              t1 = geometryGroup.get$__webglUV2Buffer();
              t2 = !(t1 == null);
              t3 = this._gl;
              if (t2) {
                t3.bindBuffer$2(34962, t1);
                this._gl.vertexAttribPointer$6($.index(attributes, 'uv2'), 2, 5126, false, 0, 0);
                this._gl.enableVertexAttribArray$1($.index(attributes, 'uv2'));
              } else
                t3.disableVertexAttribArray$1($.index(attributes, 'uv2'));
            }
          case 13:
          case 14:
          case 15:
          case 16:
            if (state === 16 || state === 15 || state === 14 || state === 13 || state === 0 && material.get$skinning() === true)
              switch (state) {
                case 0:
                  t1 = $.index(attributes, 'skinVertexA');
                case 13:
                  state = 0;
                default:
                  if (state === 16 || state === 15 || state === 14 || state === 0 && $.geB(t1, 0))
                    switch (state) {
                      case 0:
                        t1 = $.index(attributes, 'skinVertexB');
                      case 14:
                        state = 0;
                      default:
                        if (state === 16 || state === 15 || state === 0 && $.geB(t1, 0))
                          switch (state) {
                            case 0:
                              t1 = $.index(attributes, 'skinIndex');
                            case 15:
                              state = 0;
                            case 16:
                              if (state === 16 || state === 0 && $.geB(t1, 0))
                                switch (state) {
                                  case 0:
                                    t1 = $.index(attributes, 'skinWeight');
                                  case 16:
                                    state = 0;
                                    t1 = $.geB(t1, 0);
                                }
                              else
                                t1 = false;
                          }
                        else
                          t1 = false;
                    }
                  else
                    t1 = false;
              }
            else
              t1 = false;
            if (t1) {
              this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinVertexABuffer());
              this._gl.vertexAttribPointer$6($.index(attributes, 'skinVertexA'), 4, 5126, false, 0, 0);
              this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinVertexBBuffer());
              this._gl.vertexAttribPointer$6($.index(attributes, 'skinVertexB'), 4, 5126, false, 0, 0);
              this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinIndicesBuffer());
              this._gl.vertexAttribPointer$6($.index(attributes, 'skinIndex'), 4, 5126, false, 0, 0);
              this._gl.bindBuffer$2(34962, geometryGroup.get$__webglSkinWeightsBuffer());
              this._gl.vertexAttribPointer$6($.index(attributes, 'skinWeight'), 4, 5126, false, 0, 0);
            }
        }
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      if (state === 22 || state === 21 || state === 20 || state === 19 || state === 18 || state === 17 || state === 0 && typeof object === 'object' && object !== null && !!object.is$Mesh)
        switch (state) {
          case 0:
            if (material.get$wireframe() === true) {
              this.setLineWidth$1(material.get$wireframeLinewidth());
              if (updateBuffers)
                this._gl.bindBuffer$2(34963, geometryGroup.get$__webglLineBuffer());
              this._gl.drawElements$4(1, geometryGroup.get$__webglLineCount(), 5123, 0);
            } else {
              if (updateBuffers)
                this._gl.bindBuffer$2(34963, geometryGroup.get$__webglFaceBuffer());
              this._gl.drawElements$4(4, geometryGroup.get$__webglFaceCount(), 5123, 0);
            }
            t1 = this.info;
            t2 = t1.get$render();
            t3 = t2.get$calls();
          case 17:
            state = 0;
            t2.set$calls($.add(t3, 1));
            t2 = t1.get$render();
            var t5 = t2.get$vertices();
          case 18:
            state = 0;
            var t7 = geometryGroup.get$__webglFaceCount();
          case 19:
            state = 0;
            t2.set$vertices($.add(t5, t7));
            t1 = t1.get$render();
            t2 = t1.get$faces();
          case 20:
            state = 0;
            var t10 = geometryGroup.get$__webglFaceCount();
          case 21:
            state = 0;
            var t12 = $.toInt($.div(t10, 3));
          case 22:
            state = 0;
            t1.set$faces($.add(t2, t12));
        }
      else
        switch (state) {
          case 0:
          default:
            if (state === 23 || state === 0 && typeof object === 'object' && object !== null && !!object.is$Line)
              switch (state) {
                case 0:
                  var primitives = object.type === 0 ? 3 : 1;
                  this.setLineWidth$1(material.get$linewidth());
                  this._gl.drawArrays$3(primitives, 0, geometryGroup.get$__webglLineCount());
                  t1 = this.info.get$render();
                  t2 = t1.get$calls();
                case 23:
                  state = 0;
                  t1.set$calls($.add(t2, 1));
              }
            else
              switch (state) {
                case 0:
                default:
                  if (state === 26 || state === 25 || state === 24 || state === 0 && typeof object === 'object' && object !== null && !!object.is$ParticleSystem)
                    switch (state) {
                      case 0:
                        this._gl.drawArrays$3(0, 0, geometryGroup.get$__webglParticleCount());
                        t1 = this.info;
                        t2 = t1.get$render();
                        t3 = t2.get$calls();
                      case 24:
                        state = 0;
                        t2.set$calls($.add(t3, 1));
                        t1 = t1.get$render();
                        t2 = t1.get$points();
                      case 25:
                        state = 0;
                        var t6 = geometryGroup.get$__webglParticleCount();
                      case 26:
                        state = 0;
                        t1.set$points($.add(t2, t6));
                    }
                  else
                    switch (state) {
                      case 0:
                      case 27:
                        if (state === 27 || state === 0 && typeof object === 'object' && object !== null && !!object.is$Ribbon)
                          switch (state) {
                            case 0:
                              this._gl.drawArrays$3(5, 0, geometryGroup.get$__webglVertexCount());
                              t1 = this.info.get$render();
                              t2 = t1.get$calls();
                            case 27:
                              state = 0;
                              t1.set$calls($.add(t2, 1));
                          }
                    }
              }
        }
  }
},
 setupMorphTargets$3: function(material, geometryGroup, object) {
  var attributes = material.get$program().get$attributes();
  if (!(object.get$morphTargetBase() === -1)) {
    this._gl.bindBuffer$2(34962, $.index(geometryGroup.get$__webglMorphTargetsBuffers(), object.get$morphTargetBase()));
    this._gl.vertexAttribPointer$6($.index(attributes, 'position'), 3, 5126, false, 0, 0);
  } else if ($.geB($.index(attributes, 'position'), 0)) {
    this._gl.bindBuffer$2(34962, geometryGroup.get$__webglVertexBuffer());
    this._gl.vertexAttribPointer$6($.index(attributes, 'position'), 3, 5126, false, 0, 0);
  }
  if ($.get$length(object.get$morphTargetForcedOrder()) === true) {
    var order = object.get$morphTargetForcedOrder();
    if (typeof order !== 'string' && (typeof order !== 'object' || order === null || order.constructor !== Array && !order.is$JavaScriptIndexingBehavior()))
      return this.setupMorphTargets$3$bailout(1, material, geometryGroup, object, order, attributes, 0);
    var influences = object.get$morphTargetInfluences();
    if (typeof influences !== 'string' && (typeof influences !== 'object' || influences === null || influences.constructor !== Array && !influences.is$JavaScriptIndexingBehavior()))
      return this.setupMorphTargets$3$bailout(2, material, geometryGroup, object, attributes, order, influences);
    var m = 0;
    while (true) {
      if (!($.ltB(m, material.get$numSupportedMorphTargets()) && m < order.length))
        break;
      var t1 = this._gl;
      var t2 = geometryGroup.get$__webglMorphTargetsBuffers();
      if (m < 0 || m >= order.length)
        throw $.ioore(m);
      t1.bindBuffer$2(34962, $.index(t2, order[m]));
      this._gl.vertexAttribPointer$6($.index(attributes, 'morphTarget' + $.S(m)), 3, 5126, false, 0, 0);
      if (material.get$morphNormals() === true) {
        t1 = this._gl;
        t2 = geometryGroup.get$__webglMorphNormalsBuffers();
        if (m < 0 || m >= order.length)
          throw $.ioore(m);
        t1.bindBuffer$2(34962, $.index(t2, order[m]));
        this._gl.vertexAttribPointer$6($.index(attributes, 'morphNormal' + $.S(m)), 3, 5126, false, 0, 0);
      }
      t1 = object.get$__webglMorphTargetInfluences();
      if (m < 0 || m >= order.length)
        throw $.ioore(m);
      t2 = order[m];
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= influences.length)
        throw $.ioore(t2);
      $.indexSet(t1, m, influences[t2]);
      ++m;
    }
  } else {
    var activeInfluenceIndices = [];
    influences = object.get$morphTargetInfluences();
    if (typeof influences !== 'string' && (typeof influences !== 'object' || influences === null || influences.constructor !== Array && !influences.is$JavaScriptIndexingBehavior()))
      return this.setupMorphTargets$3$bailout(3, material, geometryGroup, object, attributes, activeInfluenceIndices, influences);
    var il = influences.length;
    for (var i = 0, influence = null; i < il; ++i) {
      if (i < 0 || i >= influences.length)
        throw $.ioore(i);
      influence = influences[i];
      if ($.gtB(influence, 0))
        activeInfluenceIndices.push([i, influence]);
    }
    if ($.gtB(activeInfluenceIndices.length, material.get$numSupportedMorphTargets())) {
      $.sort(activeInfluenceIndices, this.get$numericalSort());
      $.set$length(activeInfluenceIndices, material.get$numSupportedMorphTargets());
    } else if ($.gtB(activeInfluenceIndices.length, material.get$numSupportedMorphNormals()))
      $.sort(activeInfluenceIndices, this.get$numericalSort());
    else if (activeInfluenceIndices.length === 0)
      activeInfluenceIndices.push([0, 0]);
    for (var influenceIndex = null, m = 0; $.ltB(m, material.get$numSupportedMorphTargets());) {
      if (m < 0 || m >= activeInfluenceIndices.length)
        throw $.ioore(m);
      if (!(activeInfluenceIndices[m] == null) && $.isEmpty(activeInfluenceIndices[m]) !== true) {
        if (m < 0 || m >= activeInfluenceIndices.length)
          throw $.ioore(m);
        influenceIndex = $.index(activeInfluenceIndices[m], 0);
        this._gl.bindBuffer$2(34962, $.index(geometryGroup.get$__webglMorphTargetsBuffers(), influenceIndex));
        this._gl.vertexAttribPointer$6($.index(attributes, 'morphTarget' + $.S(m)), 3, 5126, false, 0, 0);
        if (material.get$morphNormals() === true) {
          this._gl.bindBuffer$2(34962, $.index(geometryGroup.get$__webglMorphNormalsBuffers(), influenceIndex));
          this._gl.vertexAttribPointer$6($.index(attributes, 'morphNormal' + $.S(m)), 3, 5126, false, 0, 0);
        }
        t1 = object.get$__webglMorphTargetInfluences();
        if (influenceIndex !== (influenceIndex | 0))
          throw $.iae(influenceIndex);
        if (influenceIndex < 0 || influenceIndex >= influences.length)
          throw $.ioore(influenceIndex);
        $.indexSet(t1, m, influences[influenceIndex]);
      } else {
        this._gl.vertexAttribPointer$6($.index(attributes, 'morphTarget' + $.S(m)), 3, 5126, false, 0, 0);
        if (material.get$morphNormals() === true)
          this._gl.vertexAttribPointer$6($.index(attributes, 'morphNormal' + $.S(m)), 3, 5126, false, 0, 0);
        $.indexSet(object.get$__webglMorphTargetInfluences(), m, 0);
      }
      ++m;
    }
  }
  if (!($.index(material.get$program().get$uniforms(), 'morphTargetInfluences') == null))
    this._gl.uniform1fv$2($.index(material.get$program().get$uniforms(), 'morphTargetInfluences'), object.get$__webglMorphTargetInfluences());
},
 setupMorphTargets$3$bailout: function(state, env0, env1, env2, env3, env4, env5) {
  switch (state) {
    case 1:
      var material = env0;
      var geometryGroup = env1;
      var object = env2;
      order = env3;
      attributes = env4;
      break;
    case 2:
      material = env0;
      geometryGroup = env1;
      object = env2;
      attributes = env3;
      order = env4;
      influences = env5;
      break;
    case 3:
      material = env0;
      geometryGroup = env1;
      object = env2;
      attributes = env3;
      activeInfluenceIndices = env4;
      influences = env5;
      break;
  }
  switch (state) {
    case 0:
      var attributes = material.get$program().get$attributes();
      if (!(object.get$morphTargetBase() === -1)) {
        this._gl.bindBuffer$2(34962, $.index(geometryGroup.get$__webglMorphTargetsBuffers(), object.get$morphTargetBase()));
        this._gl.vertexAttribPointer$6($.index(attributes, 'position'), 3, 5126, false, 0, 0);
      } else if ($.geB($.index(attributes, 'position'), 0)) {
        this._gl.bindBuffer$2(34962, geometryGroup.get$__webglVertexBuffer());
        this._gl.vertexAttribPointer$6($.index(attributes, 'position'), 3, 5126, false, 0, 0);
      }
    default:
      if (state === 2 || state === 1 || state === 0 && $.get$length(object.get$morphTargetForcedOrder()) === true)
        switch (state) {
          case 0:
            var order = object.get$morphTargetForcedOrder();
          case 1:
            state = 0;
            var influences = object.get$morphTargetInfluences();
          case 2:
            state = 0;
            var m = 0;
            while (true) {
              if (!($.ltB(m, material.get$numSupportedMorphTargets()) && $.ltB(m, $.get$length(order))))
                break;
              this._gl.bindBuffer$2(34962, $.index(geometryGroup.get$__webglMorphTargetsBuffers(), $.index(order, m)));
              this._gl.vertexAttribPointer$6($.index(attributes, 'morphTarget' + $.S(m)), 3, 5126, false, 0, 0);
              if (material.get$morphNormals() === true) {
                this._gl.bindBuffer$2(34962, $.index(geometryGroup.get$__webglMorphNormalsBuffers(), $.index(order, m)));
                this._gl.vertexAttribPointer$6($.index(attributes, 'morphNormal' + $.S(m)), 3, 5126, false, 0, 0);
              }
              $.indexSet(object.get$__webglMorphTargetInfluences(), m, $.index(influences, $.index(order, m)));
              ++m;
            }
        }
      else
        switch (state) {
          case 0:
            var activeInfluenceIndices = [];
            influences = object.get$morphTargetInfluences();
          case 3:
            state = 0;
            var il = $.get$length(influences);
            for (var i = 0, influence = null; $.ltB(i, il); ++i) {
              influence = $.index(influences, i);
              if ($.gtB(influence, 0))
                activeInfluenceIndices.push([i, influence]);
            }
            if ($.gtB(activeInfluenceIndices.length, material.get$numSupportedMorphTargets())) {
              $.sort(activeInfluenceIndices, this.get$numericalSort());
              $.set$length(activeInfluenceIndices, material.get$numSupportedMorphTargets());
            } else if ($.gtB(activeInfluenceIndices.length, material.get$numSupportedMorphNormals()))
              $.sort(activeInfluenceIndices, this.get$numericalSort());
            else if (activeInfluenceIndices.length === 0)
              activeInfluenceIndices.push([0, 0]);
            for (var influenceIndex = null, m = 0; $.ltB(m, material.get$numSupportedMorphTargets());) {
              if (m < 0 || m >= activeInfluenceIndices.length)
                throw $.ioore(m);
              if (!(activeInfluenceIndices[m] == null) && $.isEmpty(activeInfluenceIndices[m]) !== true) {
                if (m < 0 || m >= activeInfluenceIndices.length)
                  throw $.ioore(m);
                influenceIndex = $.index(activeInfluenceIndices[m], 0);
                this._gl.bindBuffer$2(34962, $.index(geometryGroup.get$__webglMorphTargetsBuffers(), influenceIndex));
                this._gl.vertexAttribPointer$6($.index(attributes, 'morphTarget' + $.S(m)), 3, 5126, false, 0, 0);
                if (material.get$morphNormals() === true) {
                  this._gl.bindBuffer$2(34962, $.index(geometryGroup.get$__webglMorphNormalsBuffers(), influenceIndex));
                  this._gl.vertexAttribPointer$6($.index(attributes, 'morphNormal' + $.S(m)), 3, 5126, false, 0, 0);
                }
                $.indexSet(object.get$__webglMorphTargetInfluences(), m, $.index(influences, influenceIndex));
              } else {
                this._gl.vertexAttribPointer$6($.index(attributes, 'morphTarget' + $.S(m)), 3, 5126, false, 0, 0);
                if (material.get$morphNormals() === true)
                  this._gl.vertexAttribPointer$6($.index(attributes, 'morphNormal' + $.S(m)), 3, 5126, false, 0, 0);
                $.indexSet(object.get$__webglMorphTargetInfluences(), m, 0);
              }
              ++m;
            }
        }
      if (!($.index(material.get$program().get$uniforms(), 'morphTargetInfluences') == null))
        this._gl.uniform1fv$2($.index(material.get$program().get$uniforms(), 'morphTargetInfluences'), object.get$__webglMorphTargetInfluences());
  }
},
 painterSort$2: function(a, b) {
  return $.toInt($.sub(b.get$z(), a.get$z()));
},
 get$painterSort: function() { return new $.BoundClosure3(this, 'painterSort$2'); },
 numericalSort$2: function(a, b) {
  return $.toInt($.sub($.index(b, 1), $.index(a, 1)));
},
 get$numericalSort: function() { return new $.BoundClosure3(this, 'numericalSort$2'); },
 render$2: function(scene, camera) {
  return this._render$2(scene, camera);
},
 get$render: function() { return new $.BoundClosure3(this, 'render$2'); },
 _render$4: function(scene, c, renderTarget, forceClear) {
  var lights = scene.get$lights();
  var fog = scene.get$fog();
  this._currentMaterialId = -1;
  this._lightsNeedUpdate = true;
  if (this.autoUpdateScene)
    scene.updateMatrixWorld$0();
  var camera = $.WebGLCamera_WebGLCamera(c);
  if (camera.get$parent() == null)
    camera.updateMatrixWorld$0();
  camera.get$matrixWorldInverse().getInverse$1(camera.get$matrixWorld());
  camera.get$matrixWorldInverse().flattenToArray$1(camera.get$_viewMatrixArray());
  camera.get$projectionMatrix().flattenToArray$1(camera.get$_projectionMatrixArray());
  var t1 = this._projScreenMatrix;
  t1.multiply$2(camera.get$projectionMatrix(), camera.get$matrixWorldInverse());
  var t2 = this._frustum;
  t2.setFromMatrix$1(t1);
  if (this.autoUpdateObjects)
    this.initWebGLObjects$1(scene);
  this.renderPlugins$3(this.renderPluginsPre, scene, camera);
  var t3 = this.info;
  t3.render.set$calls(0);
  t3.render.set$vertices(0);
  t3.render.set$faces(0);
  t3.render.set$points(0);
  this.setRenderTarget$1(renderTarget);
  if (this.autoClear || forceClear)
    this.clear$3(this.autoClearColor, this.autoClearDepth, this.autoClearStencil);
  var renderList = $.index(scene, '__webglObjects');
  if (typeof renderList !== 'string' && (typeof renderList !== 'object' || renderList === null || renderList.constructor !== Array && !renderList.is$JavaScriptIndexingBehavior()))
    return this._render$4$bailout(1, scene, t1, renderTarget, lights, fog, camera, renderList, t2);
  var il = renderList.length;
  for (var t3 = this._vector3, webglObject = null, i = 0, object = null; i < il; ++i) {
    if (i < 0 || i >= renderList.length)
      throw $.ioore(i);
    webglObject = renderList[i];
    object = webglObject.get$object();
    webglObject.set$render(false);
    if (object.get$visible() === true)
      if (!(typeof object === 'object' && object !== null && !!object.is$Mesh || typeof object === 'object' && object !== null && !!object.is$ParticleSystem) || object.get$frustumCulled() !== true || t2.contains$1(object) === true) {
        this.setupMatrices$2(webglObject, camera);
        this.unrollBufferMaterial$1(webglObject);
        webglObject.set$render(true);
        if (this.sortObjects === true) {
          var t4 = object.get$renderDepth();
          if (!(t4 == null))
            webglObject.set$z(t4);
          else {
            t3.copy$1(object.get$matrixWorld().getPosition$0());
            t1.multiplyVector3$1(t3);
            webglObject.set$z(t3.z);
          }
        }
      }
  }
  if (this.sortObjects === true)
    $.sort(renderList, this.get$painterSort());
  renderList = $.index(scene, '__webglObjectsImmediate');
  if (typeof renderList !== 'string' && (typeof renderList !== 'object' || renderList === null || renderList.constructor !== Array && !renderList.is$JavaScriptIndexingBehavior()))
    return this._render$4$bailout(2, scene, renderTarget, webglObject, lights, camera, fog, object, renderList);
  il = renderList.length;
  for (i = 0; i < il; ++i) {
    if (i < 0 || i >= renderList.length)
      throw $.ioore(i);
    webglObject = renderList[i];
    object = webglObject.get$object();
    if (object.get$visible() === true) {
      this.setupMatrices$2(webglObject, camera);
      this.unrollImmediateBufferMaterial$1(webglObject);
    }
  }
  t1 = scene.get$overrideMaterial();
  if (!(t1 == null)) {
    this.setBlending$4(t1.get$blending(), t1.get$blendEquation(), t1.get$blendSrc(), t1.get$blendDst());
    this.setDepthTest$1(t1.get$depthTest());
    this.setDepthWrite$1(t1.get$depthWrite());
    this.setPolygonOffset$3(t1.get$polygonOffset(), t1.get$polygonOffsetFactor(), t1.get$polygonOffsetUnits());
    this.renderObjects$8($.index(scene, '__webglObjects'), false, '', camera, lights, fog, true, t1);
    this.renderObjectsImmediate$7($.index(scene, '__webglObjectsImmediate'), '', camera, lights, fog, false, t1);
  } else {
    this.setBlending$1(1);
    this.renderObjects$7($.index(scene, '__webglObjects'), true, 'opaque', camera, lights, fog, false);
    this.renderObjectsImmediate$6($.index(scene, '__webglObjectsImmediate'), 'opaque', camera, lights, fog, false);
    this.renderObjects$7($.index(scene, '__webglObjects'), false, 'transparent', camera, lights, fog, true);
    this.renderObjectsImmediate$6($.index(scene, '__webglObjectsImmediate'), 'transparent', camera, lights, fog, true);
  }
  this.renderPlugins$3(this.renderPluginsPost, scene, camera);
  if (!(renderTarget == null))
    if (renderTarget.get$generateMipmaps() === true) {
      t1 = renderTarget.get$minFilter();
      t1 = !(t1 === 3) && !(t1 === 6);
    } else
      t1 = false;
  else
    t1 = false;
  if (t1)
    this.updateRenderTargetMipmap$1(renderTarget);
  this.setDepthTest$1(true);
  this.setDepthWrite$1(true);
},
 _render$4$bailout: function(state, env0, env1, env2, env3, env4, env5, env6, env7) {
  switch (state) {
    case 1:
      var scene = env0;
      t1 = env1;
      var renderTarget = env2;
      lights = env3;
      fog = env4;
      camera = env5;
      renderList = env6;
      t2 = env7;
      break;
    case 2:
      scene = env0;
      renderTarget = env1;
      webglObject = env2;
      lights = env3;
      camera = env4;
      fog = env5;
      object = env6;
      renderList = env7;
      break;
  }
  switch (state) {
    case 0:
      var lights = scene.get$lights();
      var fog = scene.get$fog();
      this._currentMaterialId = -1;
      this._lightsNeedUpdate = true;
      if (this.autoUpdateScene === true)
        scene.updateMatrixWorld$0();
      var camera = $.WebGLCamera_WebGLCamera(c);
      if (camera.get$parent() == null)
        camera.updateMatrixWorld$0();
      camera.get$matrixWorldInverse().getInverse$1(camera.get$matrixWorld());
      camera.get$matrixWorldInverse().flattenToArray$1(camera.get$_viewMatrixArray());
      camera.get$projectionMatrix().flattenToArray$1(camera.get$_projectionMatrixArray());
      var t1 = this._projScreenMatrix;
      t1.multiply$2(camera.get$projectionMatrix(), camera.get$matrixWorldInverse());
      var t2 = this._frustum;
      t2.setFromMatrix$1(t1);
      if (this.autoUpdateObjects === true)
        this.initWebGLObjects$1(scene);
      this.renderPlugins$3(this.renderPluginsPre, scene, camera);
      var t3 = this.info;
      t3.get$render().set$calls(0);
      t3.get$render().set$vertices(0);
      t3.get$render().set$faces(0);
      t3.get$render().set$points(0);
      this.setRenderTarget$1(renderTarget);
      if (this.autoClear === true || forceClear)
        this.clear$3(this.autoClearColor, this.autoClearDepth, this.autoClearStencil);
      var renderList = $.index(scene, '__webglObjects');
    case 1:
      state = 0;
      var il = $.get$length(renderList);
      for (var t3 = this._vector3, webglObject = null, i = 0, object = null; $.ltB(i, il); ++i) {
        webglObject = $.index(renderList, i);
        object = webglObject.get$object();
        webglObject.set$render(false);
        if (object.get$visible() === true)
          if (!(typeof object === 'object' && object !== null && !!object.is$Mesh || typeof object === 'object' && object !== null && !!object.is$ParticleSystem) || object.get$frustumCulled() !== true || $.contains$1(t2, object) === true) {
            this.setupMatrices$2(webglObject, camera);
            this.unrollBufferMaterial$1(webglObject);
            webglObject.set$render(true);
            if (this.sortObjects === true) {
              var t4 = object.get$renderDepth();
              if (!(t4 == null))
                webglObject.set$z(t4);
              else {
                t3.copy$1(object.get$matrixWorld().getPosition$0());
                t1.multiplyVector3$1(t3);
                webglObject.set$z(t3.get$z());
              }
            }
          }
      }
      if (this.sortObjects === true)
        $.sort(renderList, this.get$painterSort());
      renderList = $.index(scene, '__webglObjectsImmediate');
    case 2:
      state = 0;
      il = $.get$length(renderList);
      for (i = 0; $.ltB(i, il); ++i) {
        webglObject = $.index(renderList, i);
        object = webglObject.get$object();
        if (object.get$visible() === true) {
          this.setupMatrices$2(webglObject, camera);
          this.unrollImmediateBufferMaterial$1(webglObject);
        }
      }
      t1 = scene.get$overrideMaterial();
      if (!(t1 == null)) {
        this.setBlending$4(t1.get$blending(), t1.get$blendEquation(), t1.get$blendSrc(), t1.get$blendDst());
        this.setDepthTest$1(t1.get$depthTest());
        this.setDepthWrite$1(t1.get$depthWrite());
        this.setPolygonOffset$3(t1.get$polygonOffset(), t1.get$polygonOffsetFactor(), t1.get$polygonOffsetUnits());
        this.renderObjects$8($.index(scene, '__webglObjects'), false, '', camera, lights, fog, true, t1);
        this.renderObjectsImmediate$7($.index(scene, '__webglObjectsImmediate'), '', camera, lights, fog, false, t1);
      } else {
        this.setBlending$1(1);
        this.renderObjects$7($.index(scene, '__webglObjects'), true, 'opaque', camera, lights, fog, false);
        this.renderObjectsImmediate$6($.index(scene, '__webglObjectsImmediate'), 'opaque', camera, lights, fog, false);
        this.renderObjects$7($.index(scene, '__webglObjects'), false, 'transparent', camera, lights, fog, true);
        this.renderObjectsImmediate$6($.index(scene, '__webglObjectsImmediate'), 'transparent', camera, lights, fog, true);
      }
      this.renderPlugins$3(this.renderPluginsPost, scene, camera);
      if (!(renderTarget == null))
        if (renderTarget.get$generateMipmaps() === true) {
          t1 = renderTarget.get$minFilter();
          t1 = !(t1 === 3) && !(t1 === 6);
        } else
          t1 = false;
      else
        t1 = false;
      if (t1)
        this.updateRenderTargetMipmap$1(renderTarget);
      this.setDepthTest$1(true);
      this.setDepthWrite$1(true);
  }
},
 _render$2: function(scene,c) {
  return this._render$4(scene,c,null,false)
},
 renderPlugins$3: function(plugins, scene, camera) {
  if (typeof plugins !== 'string' && (typeof plugins !== 'object' || plugins === null || plugins.constructor !== Array && !plugins.is$JavaScriptIndexingBehavior()))
    return this.renderPlugins$3$bailout(1, plugins, scene, camera);
  if ($.isEmpty(plugins) === true)
    return;
  var il = plugins.length;
  for (var i = 0; i < il; ++i) {
    this._currentProgram = null;
    this._currentCamera = null;
    this._oldBlending = -1;
    this._oldDepthTest = -1;
    this._oldDepthWrite = -1;
    this._oldDoubleSided = -1;
    this._oldFlipSided = -1;
    this._currentGeometryGroupHash = -1;
    this._currentMaterialId = -1;
    this._lightsNeedUpdate = true;
    if (i < 0 || i >= plugins.length)
      throw $.ioore(i);
    plugins[i].render$4(scene, camera, this._currentWidth, this._currentHeight);
    this._currentProgram = null;
    this._currentCamera = null;
    this._oldBlending = -1;
    this._oldDepthTest = -1;
    this._oldDepthWrite = -1;
    this._oldDoubleSided = -1;
    this._oldFlipSided = -1;
    this._currentGeometryGroupHash = -1;
    this._currentMaterialId = -1;
    this._lightsNeedUpdate = true;
  }
},
 renderPlugins$3$bailout: function(state, plugins, scene, camera) {
  if ($.isEmpty(plugins) === true)
    return;
  var il = $.get$length(plugins);
  for (var i = 0; $.ltB(i, il); ++i) {
    this._currentProgram = null;
    this._currentCamera = null;
    this._oldBlending = -1;
    this._oldDepthTest = -1;
    this._oldDepthWrite = -1;
    this._oldDoubleSided = -1;
    this._oldFlipSided = -1;
    this._currentGeometryGroupHash = -1;
    this._currentMaterialId = -1;
    this._lightsNeedUpdate = true;
    $.index(plugins, i).render$4(scene, camera, this._currentWidth, this._currentHeight);
    this._currentProgram = null;
    this._currentCamera = null;
    this._oldBlending = -1;
    this._oldDepthTest = -1;
    this._oldDepthWrite = -1;
    this._oldDoubleSided = -1;
    this._oldFlipSided = -1;
    this._currentGeometryGroupHash = -1;
    this._currentMaterialId = -1;
    this._lightsNeedUpdate = true;
  }
},
 renderObjects$8: function(renderList, reverse, materialType, camera, lights, fog, useBlending, overrideMaterial) {
  if (typeof renderList !== 'string' && (typeof renderList !== 'object' || renderList === null || renderList.constructor !== Array && !renderList.is$JavaScriptIndexingBehavior()))
    return this.renderObjects$8$bailout(1, renderList, reverse, materialType, camera, lights, fog, useBlending, overrideMaterial);
  var end = renderList.length;
  if (reverse) {
    var start = end - 1;
    var delta = -1;
    end = -1;
  } else {
    delta = 1;
    start = 0;
  }
  for (var t1 = !(overrideMaterial == null), t2 = materialType === 'opaque', i = start, webglObject = null, material = null, buffer = null, object = null; !(i === end); i += delta) {
    if (i < 0 || i >= renderList.length)
      throw $.ioore(i);
    webglObject = renderList[i];
    if (webglObject.get$render() === true) {
      object = webglObject.get$object();
      buffer = webglObject.get$buffer();
      if (t1)
        material = overrideMaterial;
      else {
        material = t2 ? webglObject.get$opaque() : webglObject.get$transparent();
        if (material == null)
          continue;
        if (useBlending)
          this.setBlending$4(material.get$blending(), material.get$blendEquation(), material.get$blendSrc(), material.get$blendDst());
        this.setDepthTest$1(material.get$depthTest());
        this.setDepthWrite$1(material.get$depthWrite());
        this.setPolygonOffset$3(material.get$polygonOffset(), material.get$polygonOffsetFactor(), material.get$polygonOffsetUnits());
      }
      this.setMaterialFaces$1(material);
      if (typeof buffer === 'object' && buffer !== null && !!buffer.is$BufferGeometry)
        this.renderBufferDirect$6(camera, lights, fog, material, buffer, webglObject);
      else
        this.renderBuffer$6(camera, lights, fog, material, buffer, webglObject);
    }
  }
},
 renderObjects$8$bailout: function(state, renderList, reverse, materialType, camera, lights, fog, useBlending, overrideMaterial) {
  if (reverse) {
    var start = $.sub($.get$length(renderList), 1);
    var delta = -1;
    var end = -1;
  } else {
    end = $.get$length(renderList);
    delta = 1;
    start = 0;
  }
  for (var t1 = !(overrideMaterial == null), t2 = materialType === 'opaque', i = start, webglObject = null, material = null, buffer = null, object = null; !(i == null ? end == null : i === end); i = $.add(i, delta)) {
    webglObject = $.index(renderList, i);
    if (webglObject.get$render() === true) {
      object = webglObject.get$object();
      buffer = webglObject.get$buffer();
      if (t1)
        material = overrideMaterial;
      else {
        material = t2 ? webglObject.get$opaque() : webglObject.get$transparent();
        if (material == null)
          continue;
        if (useBlending)
          this.setBlending$4(material.get$blending(), material.get$blendEquation(), material.get$blendSrc(), material.get$blendDst());
        this.setDepthTest$1(material.get$depthTest());
        this.setDepthWrite$1(material.get$depthWrite());
        this.setPolygonOffset$3(material.get$polygonOffset(), material.get$polygonOffsetFactor(), material.get$polygonOffsetUnits());
      }
      this.setMaterialFaces$1(material);
      if (typeof buffer === 'object' && buffer !== null && !!buffer.is$BufferGeometry)
        this.renderBufferDirect$6(camera, lights, fog, material, buffer, webglObject);
      else
        this.renderBuffer$6(camera, lights, fog, material, buffer, webglObject);
    }
  }
},
 renderObjects$7: function(renderList,reverse,materialType,camera,lights,fog,useBlending) {
  return this.renderObjects$8(renderList,reverse,materialType,camera,lights,fog,useBlending,null)
},
 renderObjectsImmediate$7: function(renderList, materialType, camera, lights, fog, useBlending, overrideMaterial) {
  if (typeof renderList !== 'string' && (typeof renderList !== 'object' || renderList === null || renderList.constructor !== Array && !renderList.is$JavaScriptIndexingBehavior()))
    return this.renderObjectsImmediate$7$bailout(1, renderList, materialType, camera, lights, fog, useBlending, overrideMaterial);
  var il = renderList.length;
  for (var t1 = overrideMaterial === true, webglObject = null, material = null, object = null, i = 0; i < il; ++i) {
    if (i < 0 || i >= renderList.length)
      throw $.ioore(i);
    webglObject = renderList[i];
    object = webglObject.get$object();
    if (object.get$visible() === true) {
      if (t1)
        material = overrideMaterial;
      else {
        material = $.index(webglObject, materialType);
        if (material !== true)
          continue;
        if (useBlending)
          this.setBlending$4(material.get$blending(), material.get$blendEquation(), material.get$blendSrc(), material.get$blendDst());
        this.setDepthTest$1(material.get$depthTest());
        this.setDepthWrite$1(material.get$depthWrite());
        this.setPolygonOffset$3(material.get$polygonOffset(), material.get$polygonOffsetFactor(), material.get$polygonOffsetUnits());
      }
      this.renderImmediateObject$5(camera, lights, fog, material, object);
    }
  }
},
 renderObjectsImmediate$7$bailout: function(state, renderList, materialType, camera, lights, fog, useBlending, overrideMaterial) {
  var il = $.get$length(renderList);
  for (var t1 = overrideMaterial === true, webglObject = null, material = null, object = null, i = 0; $.ltB(i, il); ++i) {
    webglObject = $.index(renderList, i);
    object = webglObject.get$object();
    if (object.get$visible() === true) {
      if (t1)
        material = overrideMaterial;
      else {
        material = $.index(webglObject, materialType);
        if (material !== true)
          continue;
        if (useBlending)
          this.setBlending$4(material.get$blending(), material.get$blendEquation(), material.get$blendSrc(), material.get$blendDst());
        this.setDepthTest$1(material.get$depthTest());
        this.setDepthWrite$1(material.get$depthWrite());
        this.setPolygonOffset$3(material.get$polygonOffset(), material.get$polygonOffsetFactor(), material.get$polygonOffsetUnits());
      }
      this.renderImmediateObject$5(camera, lights, fog, material, object);
    }
  }
},
 renderObjectsImmediate$6: function(renderList,materialType,camera,lights,fog,useBlending) {
  return this.renderObjectsImmediate$7(renderList,materialType,camera,lights,fog,useBlending,null)
},
 renderImmediateObject$5: function(camera, lights, fog, material, object) {
  var program = this.setProgram$5(camera, lights, fog, material, object);
  this._currentGeometryGroupHash = -1;
  this.setMaterialFaces$1(material);
  if (object.get$immediateRenderCallback() === true)
    object.immediateRenderCallback$3(program, this._gl, this._frustum);
  else
    object.render$1(new $.WebGLRenderer_renderImmediateObject_function(this, material, program));
},
 unrollImmediateBufferMaterial$1: function(webglobject) {
  var material = webglobject.get$webglmaterial();
  if (material.get$transparent() === true) {
    webglobject.set$transparent(material);
    webglobject.set$opaque(null);
  } else {
    webglobject.set$opaque(material);
    webglobject.set$transparent(null);
  }
},
 unrollBufferMaterial$1: function(object) {
  var buffer = object.get$buffer();
  var meshMaterial = object.get$webglmaterial();
  var t1 = object.get$material();
  if (typeof t1 === 'object' && t1 !== null && !!t1.is$MeshFaceMaterial) {
    var materialIndex = buffer.get$materialIndex();
    if (typeof materialIndex !== 'number')
      return this.unrollBufferMaterial$1$bailout(1, object, materialIndex, 0);
    if (materialIndex >= 0) {
      t1 = object.get$geometry().get$materials();
      if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
        return this.unrollBufferMaterial$1$bailout(2, object, materialIndex, t1);
      if (materialIndex !== (materialIndex | 0))
        throw $.iae(materialIndex);
      if (materialIndex < 0 || materialIndex >= t1.length)
        throw $.ioore(materialIndex);
      var material = $.WebGLMaterial_WebGLMaterial$from(t1[materialIndex]);
      if (material.get$transparent() === true) {
        object.set$transparent(material);
        object.set$opaque(null);
      } else {
        object.set$opaque(material);
        object.set$transparent(null);
      }
    }
  } else if (!(meshMaterial == null))
    if (!(meshMaterial.get$transparent() == null)) {
      object.set$transparent(meshMaterial);
      object.set$opaque(null);
    } else {
      object.set$opaque(meshMaterial);
      object.set$transparent(null);
    }
},
 unrollBufferMaterial$1$bailout: function(state, env0, env1, env2) {
  switch (state) {
    case 1:
      var object = env0;
      materialIndex = env1;
      break;
    case 2:
      object = env0;
      materialIndex = env1;
      t1 = env2;
      break;
  }
  switch (state) {
    case 0:
      var buffer = object.get$buffer();
      var meshMaterial = object.get$webglmaterial();
      var t1 = object.get$material();
    default:
      if (state === 2 || state === 1 || state === 0 && typeof t1 === 'object' && t1 !== null && !!t1.is$MeshFaceMaterial)
        switch (state) {
          case 0:
            var materialIndex = buffer.get$materialIndex();
          case 1:
            state = 0;
          case 2:
            if (state === 2 || state === 0 && $.geB(materialIndex, 0))
              switch (state) {
                case 0:
                  t1 = object.get$geometry().get$materials();
                case 2:
                  state = 0;
                  var material = $.WebGLMaterial_WebGLMaterial$from($.index(t1, materialIndex));
                  if (material.get$transparent() === true) {
                    object.set$transparent(material);
                    object.set$opaque(null);
                  } else {
                    object.set$opaque(material);
                    object.set$transparent(null);
                  }
              }
        }
      else if (!(meshMaterial == null))
        if (!(meshMaterial.get$transparent() == null)) {
          object.set$transparent(meshMaterial);
          object.set$opaque(null);
        } else {
          object.set$opaque(meshMaterial);
          object.set$transparent(null);
        }
  }
},
 sortFacesByMaterial$1: function(geometry) {
  var hash_map = $.makeLiteralMap([]);
  var numMorphTargets = $.get$length(geometry.get$morphTargets());
  var numMorphNormals = $.get$length(geometry.get$morphNormals());
  geometry.set$geometryGroups($.makeLiteralMap([]));
  var fl = $.get$length(geometry.get$faces());
  if (typeof fl !== 'number')
    return this.sortFacesByMaterial$1$bailout(1, geometry, numMorphTargets, fl, numMorphNormals, hash_map);
  for (var vertices = null, materialIndex = null, face = null, f = 0, groupHash = null; f < fl; ++f) {
    face = $.index(geometry.get$faces(), f);
    materialIndex = face.get$materialIndex();
    var materialHash = !(materialIndex == null) ? $.toString(materialIndex) : $.toString(-1);
    if ($.index(hash_map, materialHash) == null)
      $.indexSet(hash_map, materialHash, $.makeLiteralMap(['hash', materialHash, 'counter', 0]));
    groupHash = $.S($.index($.index(hash_map, materialHash), 'hash')) + '_' + $.S($.index($.index(hash_map, materialHash), 'counter'));
    if ($.index(geometry.get$geometryGroups(), groupHash) == null)
      $.indexSet(geometry.get$geometryGroups(), groupHash, $.WebGLGeometry$([], [], materialIndex, 0, numMorphTargets, numMorphNormals));
    vertices = typeof face === 'object' && face !== null && !!face.is$Face3 ? 3 : 4;
    if ($.gtB($.add($.index(geometry.get$geometryGroups(), groupHash).get$vertices(), vertices), 65535)) {
      var t1 = $.index(hash_map, materialHash);
      $.indexSet(t1, 'counter', $.add($.index(t1, 'counter'), 1));
      groupHash = $.S($.index($.index(hash_map, materialHash), 'hash')) + '_' + $.S($.index($.index(hash_map, materialHash), 'counter'));
      if ($.index(geometry.get$geometryGroups(), groupHash) == null)
        $.indexSet(geometry.get$geometryGroups(), groupHash, $.WebGLGeometry$([], [], materialIndex, 0, numMorphTargets, numMorphNormals));
    }
    t1 = typeof face === 'object' && face !== null && !!face.is$Face3;
    var t2 = geometry.get$geometryGroups();
    if (t1)
      $.add$1($.index(t2, groupHash).get$faces3(), f);
    else
      $.add$1($.index(t2, groupHash).get$faces4(), f);
    t1 = $.index(geometry.get$geometryGroups(), groupHash);
    t1.set$vertices($.add(t1.get$vertices(), vertices));
  }
  geometry.set$geometryGroupsList([]);
  $.forEach(geometry.get$geometryGroups(), new $.WebGLRenderer_sortFacesByMaterial_anon(this, geometry));
  return;
},
 sortFacesByMaterial$1$bailout: function(state, geometry, numMorphTargets, fl, numMorphNormals, hash_map) {
  for (var vertices = null, materialIndex = null, face = null, f = 0, groupHash = null; $.ltB(f, fl); ++f) {
    face = $.index(geometry.get$faces(), f);
    materialIndex = face.get$materialIndex();
    var materialHash = !(materialIndex == null) ? $.toString(materialIndex) : $.toString(-1);
    if ($.index(hash_map, materialHash) == null)
      $.indexSet(hash_map, materialHash, $.makeLiteralMap(['hash', materialHash, 'counter', 0]));
    groupHash = $.S($.index($.index(hash_map, materialHash), 'hash')) + '_' + $.S($.index($.index(hash_map, materialHash), 'counter'));
    if ($.index(geometry.get$geometryGroups(), groupHash) == null)
      $.indexSet(geometry.get$geometryGroups(), groupHash, $.WebGLGeometry$([], [], materialIndex, 0, numMorphTargets, numMorphNormals));
    vertices = typeof face === 'object' && face !== null && !!face.is$Face3 ? 3 : 4;
    if ($.gtB($.add($.index(geometry.get$geometryGroups(), groupHash).get$vertices(), vertices), 65535)) {
      var t1 = $.index(hash_map, materialHash);
      $.indexSet(t1, 'counter', $.add($.index(t1, 'counter'), 1));
      groupHash = $.S($.index($.index(hash_map, materialHash), 'hash')) + '_' + $.S($.index($.index(hash_map, materialHash), 'counter'));
      if ($.index(geometry.get$geometryGroups(), groupHash) == null)
        $.indexSet(geometry.get$geometryGroups(), groupHash, $.WebGLGeometry$([], [], materialIndex, 0, numMorphTargets, numMorphNormals));
    }
    t1 = typeof face === 'object' && face !== null && !!face.is$Face3;
    var t2 = geometry.get$geometryGroups();
    if (t1)
      $.add$1($.index(t2, groupHash).get$faces3(), f);
    else
      $.add$1($.index(t2, groupHash).get$faces4(), f);
    t1 = $.index(geometry.get$geometryGroups(), groupHash);
    t1.set$vertices($.add(t1.get$vertices(), vertices));
  }
  geometry.set$geometryGroupsList([]);
  $.forEach(geometry.get$geometryGroups(), new $.WebGLRenderer_sortFacesByMaterial_anon(this, geometry));
  return;
},
 initWebGLObjects$1: function(scene) {
  if ($.index(scene, '__webglObjects') == null) {
    $.indexSet(scene, '__webglObjects', []);
    $.indexSet(scene, '__webglObjectsImmediate', []);
    $.indexSet(scene, '__webglSprites', []);
    $.indexSet(scene, '__webglFlares', []);
  }
  for (; $.gtB($.get$length(scene.get$__objectsAdded()), 0);) {
    this.addObject$2($.index(scene.get$__objectsAdded(), 0), scene);
    $.removeRange(scene.get$__objectsAdded(), 0, 1);
  }
  for (; $.gtB($.get$length(scene.get$__objectsRemoved()), 0);) {
    this.removeObject$2($.index(scene.get$__objectsRemoved(), 0), scene);
    $.removeRange(scene.get$__objectsRemoved(), 0, 1);
  }
  var ol = $.get$length($.index(scene, '__webglObjects'));
  if (typeof ol !== 'number')
    return this.initWebGLObjects$1$bailout(1, scene, ol);
  var o = 0;
  for (; o < ol; ++o)
    this.updateObject$1($.index($.index(scene, '__webglObjects'), o));
},
 initWebGLObjects$1$bailout: function(state, scene, ol) {
  var o = 0;
  for (; $.ltB(o, ol); ++o)
    this.updateObject$1($.index($.index(scene, '__webglObjects'), o));
},
 addObject$2: function(object, scene) {
  var t1 = {};
  var webglobject = $.WebGLObject_WebGLObject(object, null, null, null, true, 0);
  t1.geometry_1 = webglobject.get$webglgeometry();
  if (webglobject.get$__webglInit() !== true) {
    webglobject.set$__webglInit(true);
    webglobject.set$_modelViewMatrix($.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1));
    webglobject.set$_normalMatrix($.Matrix3$());
    if (typeof object === 'object' && object !== null && !!object.is$Mesh) {
      var t2 = object.geometry;
      if (typeof t2 === 'object' && t2 !== null && !!t2.is$Geometry) {
        t2 = t1.geometry_1;
        if (t2.get$geometryGroups() == null)
          this.sortFacesByMaterial$1(t2);
        $.forEach(t1.geometry_1.get$geometryGroups(), new $.WebGLRenderer_addObject_anon(webglobject, t1, this));
      } else if (typeof t2 === 'object' && t2 !== null && !!t2.is$BufferGeometry)
        this.initDirectBuffers$1($.propertyTypeCast(t2, 'is$BufferGeometry'));
    } else if (typeof object === 'object' && object !== null && !!object.is$Ribbon) {
      t2 = t1.geometry_1;
      if (t2.get$__webglVertexBuffer() == null) {
        this.createRibbonBuffers$1(t2);
        this.initRibbonBuffers$1(t1.geometry_1);
        t1.geometry_1.set$verticesNeedUpdate(true);
        t1.geometry_1.set$colorsNeedUpdate(true);
      }
    } else if (typeof object === 'object' && object !== null && !!object.is$Line) {
      t1.geometry_1 = $.WebGLGeometry_WebGLGeometry$from(object.geometry);
      t2 = t1.geometry_1;
      if (t2.get$__webglVertexBuffer() == null) {
        this.createLineBuffers$1(t2);
        this.initLineBuffers$2(t1.geometry_1, webglobject);
        t1.geometry_1.set$verticesNeedUpdate(true);
        t1.geometry_1.set$colorsNeedUpdate(true);
      }
    } else if (typeof object === 'object' && object !== null && !!object.is$ParticleSystem) {
      t2 = t1.geometry_1;
      if (t2.get$__webglVertexBuffer() == null) {
        this.createParticleBuffers$1(t2);
        this.initParticleBuffers$2(t1.geometry_1, webglobject);
        t1.geometry_1.set$verticesNeedUpdate(true);
        t1.geometry_1.set$colorsNeedUpdate(true);
      }
    }
  }
  if (webglobject.get$__webglActive() == null) {
    if (typeof object === 'object' && object !== null && !!object.is$Mesh) {
      t2 = object.geometry;
      if (typeof t2 === 'object' && t2 !== null && !!t2.is$BufferGeometry)
        this.addBuffer$3($.index(scene, '__webglObjects'), t1.geometry_1, webglobject);
      else
        $.forEach(t1.geometry_1.get$geometryGroups(), new $.WebGLRenderer_addObject_anon0(webglobject, scene, this));
    } else if (typeof object === 'object' && object !== null && !!object.is$Ribbon || typeof object === 'object' && object !== null && !!object.is$Line || typeof object === 'object' && object !== null && !!object.is$ParticleSystem)
      this.addBuffer$3($.index(scene, '__webglObjects'), t1.geometry_1, webglobject);
    else if (typeof object === 'object' && object !== null && !!object.is$ImmediateRenderObject || !($.index(object, 'immediateRenderCallback') == null))
      this.addBufferImmediate$2($.index(scene, '__webglObjectsImmediate'), webglobject);
    else if (typeof object === 'object' && object !== null && !!object.is$Sprite)
      $.add$1($.index(scene, '__webglSprites'), object);
    else if (typeof object === 'object' && object !== null && !!object.is$LensFlare)
      $.add$1($.index(scene, '__webglFlares'), object);
    $.indexSet(object, '__webglActive', true);
  }
},
 addBuffer$3: function(objlist, buffer, object) {
  object.set$buffer(buffer);
  object.set$opaque(null);
  object.set$transparent(null);
  $.add$1(objlist, object);
},
 addBufferImmediate$2: function(objlist, object) {
  object.set$opaque(null);
  object.set$transparent(null);
  $.add$1(objlist, object);
},
 updateObject$1: function(webglobject) {
  var object = webglobject.get$object();
  var geometry = webglobject.get$webglgeometry();
  if (typeof object === 'object' && object !== null && !!object.is$Mesh) {
    var t1 = object.geometry;
    if (typeof t1 === 'object' && t1 !== null && !!t1.is$BufferGeometry) {
      if (geometry.get$verticesNeedUpdate() === true || geometry.get$elementsNeedUpdate() === true || geometry.get$uvsNeedUpdate() === true || geometry.get$normalsNeedUpdate() === true || geometry.get$colorsNeedUpdate() === true || geometry.get$tangentsNeedUpdate() === true)
        this.setDirectBuffers$3(geometry, 35048, $.get$dynamic(geometry) !== true);
      geometry.set$verticesNeedUpdate(false);
      geometry.set$elementsNeedUpdate(false);
      geometry.set$uvsNeedUpdate(false);
      geometry.set$normalsNeedUpdate(false);
      geometry.set$colorsNeedUpdate(false);
      geometry.set$tangentsNeedUpdate(false);
    } else {
      var il = $.get$length(geometry.get$geometryGroupsList());
      if (typeof il !== 'number')
        return this.updateObject$1$bailout(1, webglobject, il, geometry, 0, 0);
      var geometryGroup = null;
      var material = null;
      var customAttributesDirty = null;
      var i = 0;
      for (; i < il; ++i) {
        t1 = geometry.get$geometryGroupsList();
        if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
          return this.updateObject$1$bailout(2, webglobject, il, i, geometry, t1);
        if (i < 0 || i >= t1.length)
          throw $.ioore(i);
        geometryGroup = t1[i];
        material = this.getBufferMaterial$2(webglobject, geometryGroup);
        customAttributesDirty = !(material.get$attributes() == null) && this.areCustomAttributesDirty$1(material) === true;
        if (geometry.get$verticesNeedUpdate() === true || geometry.get$morphTargetsNeedUpdate() === true || geometry.get$elementsNeedUpdate() === true || geometry.get$uvsNeedUpdate() === true || geometry.get$normalsNeedUpdate() === true || geometry.get$colorsNeedUpdate() === true || geometry.get$tangentsNeedUpdate() === true || customAttributesDirty)
          this.setMeshBuffers$5(geometryGroup, webglobject, 35048, geometry.get$Dynamic() !== true, material);
      }
      geometry.set$verticesNeedUpdate(false);
      geometry.set$morphTargetsNeedUpdate(false);
      geometry.set$elementsNeedUpdate(false);
      geometry.set$uvsNeedUpdate(false);
      geometry.set$normalsNeedUpdate(false);
      geometry.set$colorsNeedUpdate(false);
      geometry.set$tangentsNeedUpdate(false);
      if (!(material.get$attributes() == null))
        this.clearCustomAttributes$1(material);
    }
  } else if (typeof object === 'object' && object !== null && !!object.is$Ribbon) {
    if (geometry.get$verticesNeedUpdate() === true || geometry.get$colorsNeedUpdate() === true)
      this.setRibbonBuffers$2(geometry, 35048);
    geometry.set$verticesNeedUpdate(false);
    geometry.set$colorsNeedUpdate(false);
  } else if (typeof object === 'object' && object !== null && !!object.is$Line) {
    material = this.getBufferMaterial$2(webglobject, null);
    customAttributesDirty = !(material.get$attributes() == null) && this.areCustomAttributesDirty$1(material) === true;
    if (geometry.get$verticesNeedUpdate() === true || geometry.get$colorsNeedUpdate() === true || customAttributesDirty)
      this.setLineBuffers$2(geometry, 35048);
    geometry.set$verticesNeedUpdate(false);
    geometry.set$colorsNeedUpdate(false);
    if (!(material.get$attributes() == null))
      this.clearCustomAttributes$1(material);
  } else if (typeof object === 'object' && object !== null && !!object.is$ParticleSystem) {
    material = this.getBufferMaterial$2(webglobject, null);
    customAttributesDirty = !(material.get$attributes() == null) && this.areCustomAttributesDirty$1(material) === true;
    if (geometry.get$verticesNeedUpdate() === true || geometry.get$colorsNeedUpdate() === true || object.sortParticles === true || customAttributesDirty)
      this.setParticleBuffers$3(geometry, 35048, object);
    geometry.set$verticesNeedUpdate(false);
    geometry.set$colorsNeedUpdate(false);
    if (!(material.get$attributes() == null))
      this.clearCustomAttributes$1(material);
  }
},
 updateObject$1$bailout: function(state, env0, env1, env2, env3, env4) {
  switch (state) {
    case 1:
      var webglobject = env0;
      il = env1;
      geometry = env2;
      break;
    case 2:
      webglobject = env0;
      il = env1;
      i = env2;
      geometry = env3;
      t1 = env4;
      break;
  }
  switch (state) {
    case 0:
      var object = webglobject.get$object();
      var geometry = webglobject.get$webglgeometry();
    default:
      if (state === 2 || state === 1 || state === 0 && typeof object === 'object' && object !== null && !!object.is$Mesh)
        switch (state) {
          case 0:
            var t1 = object.geometry;
          default:
            if (state === 0 && typeof t1 === 'object' && t1 !== null && !!t1.is$BufferGeometry) {
              if (geometry.get$verticesNeedUpdate() === true || geometry.get$elementsNeedUpdate() === true || geometry.get$uvsNeedUpdate() === true || geometry.get$normalsNeedUpdate() === true || geometry.get$colorsNeedUpdate() === true || geometry.get$tangentsNeedUpdate() === true)
                this.setDirectBuffers$3(geometry, 35048, $.get$dynamic(geometry) !== true);
              geometry.set$verticesNeedUpdate(false);
              geometry.set$elementsNeedUpdate(false);
              geometry.set$uvsNeedUpdate(false);
              geometry.set$normalsNeedUpdate(false);
              geometry.set$colorsNeedUpdate(false);
              geometry.set$tangentsNeedUpdate(false);
            } else
              switch (state) {
                case 0:
                  var il = $.get$length(geometry.get$geometryGroupsList());
                case 1:
                  state = 0;
                  var geometryGroup = null;
                  var material = null;
                  var customAttributesDirty = null;
                  var i = 0;
                case 2:
                  L0:
                    while (true)
                      switch (state) {
                        case 0:
                          if (!$.ltB(i, il))
                            break L0;
                          t1 = geometry.get$geometryGroupsList();
                        case 2:
                          state = 0;
                          geometryGroup = $.index(t1, i);
                          material = this.getBufferMaterial$2(webglobject, geometryGroup);
                          customAttributesDirty = !(material.get$attributes() == null) && this.areCustomAttributesDirty$1(material) === true;
                          if (geometry.get$verticesNeedUpdate() === true || geometry.get$morphTargetsNeedUpdate() === true || geometry.get$elementsNeedUpdate() === true || geometry.get$uvsNeedUpdate() === true || geometry.get$normalsNeedUpdate() === true || geometry.get$colorsNeedUpdate() === true || geometry.get$tangentsNeedUpdate() === true || customAttributesDirty)
                            this.setMeshBuffers$5(geometryGroup, webglobject, 35048, geometry.get$Dynamic() !== true, material);
                          ++i;
                      }
                  geometry.set$verticesNeedUpdate(false);
                  geometry.set$morphTargetsNeedUpdate(false);
                  geometry.set$elementsNeedUpdate(false);
                  geometry.set$uvsNeedUpdate(false);
                  geometry.set$normalsNeedUpdate(false);
                  geometry.set$colorsNeedUpdate(false);
                  geometry.set$tangentsNeedUpdate(false);
                  if (!(material.get$attributes() == null))
                    this.clearCustomAttributes$1(material);
              }
        }
      else if (typeof object === 'object' && object !== null && !!object.is$Ribbon) {
        if (geometry.get$verticesNeedUpdate() === true || geometry.get$colorsNeedUpdate() === true)
          this.setRibbonBuffers$2(geometry, 35048);
        geometry.set$verticesNeedUpdate(false);
        geometry.set$colorsNeedUpdate(false);
      } else if (typeof object === 'object' && object !== null && !!object.is$Line) {
        material = this.getBufferMaterial$2(webglobject, null);
        customAttributesDirty = !(material.get$attributes() == null) && this.areCustomAttributesDirty$1(material) === true;
        if (geometry.get$verticesNeedUpdate() === true || geometry.get$colorsNeedUpdate() === true || customAttributesDirty)
          this.setLineBuffers$2(geometry, 35048);
        geometry.set$verticesNeedUpdate(false);
        geometry.set$colorsNeedUpdate(false);
        if (!(material.get$attributes() == null))
          this.clearCustomAttributes$1(material);
      } else if (typeof object === 'object' && object !== null && !!object.is$ParticleSystem) {
        material = this.getBufferMaterial$2(webglobject, null);
        customAttributesDirty = !(material.get$attributes() == null) && this.areCustomAttributesDirty$1(material) === true;
        if (geometry.get$verticesNeedUpdate() === true || geometry.get$colorsNeedUpdate() === true || object.sortParticles === true || customAttributesDirty)
          this.setParticleBuffers$3(geometry, 35048, object);
        geometry.set$verticesNeedUpdate(false);
        geometry.set$colorsNeedUpdate(false);
        if (!(material.get$attributes() == null))
          this.clearCustomAttributes$1(material);
      }
  }
},
 areCustomAttributesDirty$1: function(material) {
  for (var t1 = $.iterator(material.get$attributes()); t1.hasNext$0() === true;)
    if (t1.next$0().get$needsUpdate() === true)
      return true;
  return false;
},
 clearCustomAttributes$1: function(material) {
  for (var t1 = $.iterator(material.get$attributes()); t1.hasNext$0() === true;)
    t1.next$0().set$needsUpdate(false);
},
 removeObject$2: function(webglobject, scene) {
  var object = webglobject.get$object();
  if (typeof object === 'object' && object !== null && !!object.is$Mesh || typeof object === 'object' && object !== null && !!object.is$ParticleSystem || typeof object === 'object' && object !== null && !!object.is$Ribbon || typeof object === 'object' && object !== null && !!object.is$Line)
    this.removeInstances$2($.index(scene, '__webglObjects'), webglobject);
  else if (typeof object === 'object' && object !== null && !!object.is$Sprite)
    this.removeInstancesDirect$2($.index(scene, '__webglSprites'), webglobject);
  else if (typeof object === 'object' && object !== null && !!object.is$LensFlare)
    this.removeInstancesDirect$2($.index(scene, '__webglFlares'), webglobject);
  else if (typeof object === 'object' && object !== null && !!object.is$ImmediateRenderObject || !($.index(object, 'immediateRenderCallback') == null))
    this.removeInstances$2($.index(scene, '__webglObjectsImmediate'), webglobject);
  webglobject.set$__webglActive(false);
},
 removeInstances$2: function(objlist, object) {
  if (typeof objlist !== 'string' && (typeof objlist !== 'object' || objlist === null || objlist.constructor !== Array && !objlist.is$JavaScriptIndexingBehavior()))
    return this.removeInstances$2$bailout(1, objlist, object);
  for (var o = objlist.length - 1; o >= 0; --o) {
    if (o < 0 || o >= objlist.length)
      throw $.ioore(o);
    if ($.eqB(objlist[o].get$object(), object))
      objlist.splice$2(o, 1);
  }
},
 removeInstances$2$bailout: function(state, objlist, object) {
  for (var o = $.sub($.get$length(objlist), 1); $.geB(o, 0); o = $.sub(o, 1))
    if ($.eqB($.index(objlist, o).get$object(), object))
      objlist.splice$2(o, 1);
},
 removeInstancesDirect$2: function(objlist, object) {
  if (typeof objlist !== 'string' && (typeof objlist !== 'object' || objlist === null || objlist.constructor !== Array && !objlist.is$JavaScriptIndexingBehavior()))
    return this.removeInstancesDirect$2$bailout(1, objlist, object);
  for (var o = objlist.length - 1; o >= 0; --o) {
    if (o < 0 || o >= objlist.length)
      throw $.ioore(o);
    var t1 = objlist[o];
    if (t1 == null ? object == null : t1 === object)
      objlist.splice$2(o, 1);
  }
},
 removeInstancesDirect$2$bailout: function(state, objlist, object) {
  for (var o = $.sub($.get$length(objlist), 1); $.geB(o, 0); o = $.sub(o, 1)) {
    var t1 = $.index(objlist, o);
    if (t1 == null ? object == null : t1 === object)
      objlist.splice$2(o, 1);
  }
},
 initMaterial$4: function(material, lights, fog, webglobject) {
  var object = webglobject.get$object();
  if (material.get$isMeshDepthMaterial() === true)
    var shaderID = 'depth';
  else if (material.get$isMeshNormalMaterial() === true)
    shaderID = 'normal';
  else if (material.get$isMeshBasicMaterial() === true)
    shaderID = 'basic';
  else if (material.get$isMeshLambertMaterial() === true)
    shaderID = 'lambert';
  else if (material.get$isMeshPhongMaterial() === true)
    shaderID = 'phong';
  else if (material.get$isLineBasicMaterial() === true)
    shaderID = 'basic';
  else
    shaderID = material.get$isParticleBasicMaterial() === true ? 'particle_basic' : null;
  if (!(shaderID == null))
    this.setMaterialShaders$2(material, $.index($.ShaderLib(), shaderID));
  var maxLightCount = this.allocateLights$1(lights);
  var maxShadows = this.allocateShadows$1(lights);
  var maxBones = this.allocateBones$1(object);
  var t1 = material.get$fragmentShader();
  var t2 = material.get$vertexShader();
  var t3 = material.get$uniforms();
  var t4 = material.get$attributes();
  var t5 = material.get$map();
  var t6 = material.get$envMap();
  var t7 = material.get$lightMap();
  var t8 = material.get$bumpMap();
  var t9 = material.get$specularMap();
  var t10 = material.get$vertexColors();
  var t11 = material.get$fog();
  var t12 = material.get$sizeAttenuation();
  var t13 = material.get$skinning();
  var t14 = this.supportsBoneTextures === true && !(object == null) && typeof object === 'object' && object !== null && !!object.is$SkinnedMesh && object.useVertexTexture === true;
  var t15 = !(object == null);
  var t16 = t15 && typeof object === 'object' && object !== null && !!object.is$SkinnedMesh ? $.propertyTypeCast(object, 'is$SkinnedMesh').get$boneTextureWidth() : null;
  t15 = t15 && typeof object === 'object' && object !== null && !!object.is$SkinnedMesh ? $.propertyTypeCast(object, 'is$SkinnedMesh').get$boneTextureHeight() : null;
  var t17 = material.get$morphTargets();
  var t18 = material.get$morphNormals();
  var t19 = this.maxMorphTargets;
  var t20 = this.maxMorphNormals;
  var t21 = $.index(maxLightCount, 'directional');
  var t22 = $.index(maxLightCount, 'point');
  var t23 = $.index(maxLightCount, 'spot');
  var t24 = this.shadowMapEnabled === true && object.get$receiveShadow() === true;
  var t25 = this.shadowMapSoft;
  var t26 = this.shadowMapDebug;
  var t27 = this.shadowMapCascade;
  var t28 = material.get$alphaTest();
  var t29 = material.get$metal();
  var t30 = material.get$perPixel();
  var t31 = material.get$wrapAround();
  material.set$program(this.buildProgram$36$alphaTest$boneTextureHeight$boneTextureWidth$bumpMap$doubleSided$envMap$fog$lightMap$map$maxBones$maxDirLights$maxMorphNormals$maxMorphTargets$maxPointLights$maxShadows$maxSpotLights$metal$morphNormals$morphTargets$perPixel$shadowMapCascade$shadowMapDebug$shadowMapEnabled$shadowMapSoft$sizeAttenuation$skinning$specularMap$useFog$useVertexTexture$vertexColors$wrapAround(shaderID, t1, t2, t3, t4, t28, t15, t16, t8, material.get$side() === 2, t6, fog, t7, t5, maxBones, t21, t20, t19, t22, maxShadows, t23, t29, t18, t17, t30, t27, t26, t24, t25, t12, t13, t9, t11, t14, t10, t31));
  var attributes = material.get$program().get$attributes();
  if ($.geB($.index(attributes, 'position'), 0))
    this._gl.enableVertexAttribArray$1($.index(attributes, 'position'));
  if ($.geB($.index(attributes, 'color'), 0))
    this._gl.enableVertexAttribArray$1($.index(attributes, 'color'));
  if ($.geB($.index(attributes, 'normal'), 0))
    this._gl.enableVertexAttribArray$1($.index(attributes, 'normal'));
  if ($.geB($.index(attributes, 'tangent'), 0))
    this._gl.enableVertexAttribArray$1($.index(attributes, 'tangent'));
  if (material.get$skinning() === true && $.geB($.index(attributes, 'skinVertexA'), 0) && $.geB($.index(attributes, 'skinVertexB'), 0) && $.geB($.index(attributes, 'skinIndex'), 0) && $.geB($.index(attributes, 'skinWeight'), 0)) {
    this._gl.enableVertexAttribArray$1($.index(attributes, 'skinVertexA'));
    this._gl.enableVertexAttribArray$1($.index(attributes, 'skinVertexB'));
    this._gl.enableVertexAttribArray$1($.index(attributes, 'skinIndex'));
    this._gl.enableVertexAttribArray$1($.index(attributes, 'skinWeight'));
  }
  if (!(material.get$attributes() == null))
    for (var t1 = $.iterator(material.get$attributes()), a = null; t1.hasNext$0() === true;) {
      a = t1.next$0();
      if (!($.index(attributes, a) == null) && $.geB($.index(attributes, a), 0))
        this._gl.enableVertexAttribArray$1($.index(attributes, a));
    }
  if (material.get$morphTargets() === true) {
    material.set$numSupportedMorphTargets(0);
    for (var id = null, i = 0; i < t19; ++i) {
      id = 'morphTarget' + $.S(i);
      if ($.geB($.index(attributes, id), 0)) {
        this._gl.enableVertexAttribArray$1($.index(attributes, id));
        material.set$numSupportedMorphTargets($.add(material.get$numSupportedMorphTargets(), 1));
      }
    }
  }
  if (material.get$morphNormals() === true) {
    material.set$numSupportedMorphNormals(0);
    for (id = null, i = 0; i < t20; ++i) {
      id = 'morphNormal' + $.S(i);
      if ($.geB($.index(attributes, id), 0)) {
        this._gl.enableVertexAttribArray$1($.index(attributes, id));
        material.set$numSupportedMorphNormals($.add(material.get$numSupportedMorphNormals(), 1));
      }
    }
  }
  material.set$uniformsList([]);
  $.forEach(material.get$uniforms(), new $.WebGLRenderer_initMaterial_anon(material));
},
 setMaterialShaders$2: function(material, shaders) {
  material.set$uniforms($.UniformsUtils_clone($.index(shaders, 'uniforms')));
  material.set$vertexShader($.index(shaders, 'vertexShader'));
  material.set$fragmentShader($.index(shaders, 'fragmentShader'));
},
 setProgram$5: function(camera, lights, fog, material, object) {
  if (material.get$needsUpdate() === true) {
    if (!(material.get$program() == null))
      this.deallocateMaterial$1(material);
    this.initMaterial$4(material, lights, fog, object);
    material.set$needsUpdate(false);
  }
  if (material.get$morphTargets() === true)
    if (object.get$__webglMorphTargetInfluences() !== true)
      object.set$__webglMorphTargetInfluences($._TypedArrayFactoryProvider_Float32Array(this.maxMorphTargets));
  var program = material.get$program();
  var p_uniforms = program.get$uniforms();
  var m_uniforms = material.get$uniforms();
  var t1 = this._currentProgram;
  if (!(program == null ? t1 == null : program === t1)) {
    this._gl.useProgram$1(program.get$glProgram());
    this._currentProgram = program;
    var refreshMaterial = true;
  } else
    refreshMaterial = false;
  t1 = material.get$id();
  var t2 = this._currentMaterialId;
  if (!(t1 == null ? t2 == null : t1 === t2)) {
    this._currentMaterialId = material.get$id();
    refreshMaterial = true;
  }
  if (!refreshMaterial) {
    t1 = this._currentCamera;
    t2 = !(camera == null ? t1 == null : camera === t1);
    t1 = t2;
  } else
    t1 = true;
  if (t1) {
    this._gl.uniformMatrix4fv$3($.index(p_uniforms, 'projectionMatrix'), false, camera.get$_projectionMatrixArray());
    t1 = this._currentCamera;
    if (!(camera == null ? t1 == null : camera === t1))
      this._currentCamera = camera;
  }
  if (refreshMaterial) {
    if (!(fog == null) && material.get$fog() === true)
      this.refreshUniformsFog$2(m_uniforms, fog);
    if (material.get$isMeshPhongMaterial() === true || material.get$isMeshLambertMaterial() === true || material.get$lights() === true) {
      if (this._lightsNeedUpdate === true) {
        this.setupLights$2(program, lights);
        this._lightsNeedUpdate = false;
      }
      this.refreshUniformsLights$2(m_uniforms, this._lights);
    }
    if (material.get$isMeshBasicMaterial() === true || material.get$isMeshLambertMaterial() === true || material.get$isMeshPhongMaterial() === true)
      this.refreshUniformsCommon$2(m_uniforms, material);
    if (material.get$isLineBasicMaterial() === true)
      this.refreshUniformsLine$2(m_uniforms, material);
    else if (material.get$isParticleBasicMaterial() === true)
      this.refreshUniformsParticle$2(m_uniforms, material);
    else if (material.get$isMeshPhongMaterial() === true)
      this.refreshUniformsPhong$2(m_uniforms, material);
    else if (material.get$isMeshLambertMaterial() === true)
      this.refreshUniformsLambert$2(m_uniforms, material);
    else if (material.get$isMeshDepthMaterial() === true) {
      t1 = camera.get$near();
      $.index(m_uniforms, 'mNear').set$value(t1);
      t1 = camera.get$far();
      $.index(m_uniforms, 'mFar').set$value(t1);
      t1 = material.get$opacity();
      $.index(m_uniforms, 'opacity').set$value(t1);
    } else if (material.get$isMeshNormalMaterial() === true) {
      t1 = material.get$opacity();
      $.index(m_uniforms, 'opacity').set$value(t1);
    }
    if (object.get$receiveShadow() === true && material.get$_shadowPass() !== true)
      this.refreshUniformsShadow$2(m_uniforms, lights);
    this.loadUniformsGeneric$2(program, material.get$uniformsList());
    if (material.get$isShaderMaterial() === true || material.get$isMeshPhongMaterial() === true || !(material.get$envMap() == null))
      if (!($.index(p_uniforms, 'cameraPosition') == null)) {
        var position = camera.get$matrixWorld().getPosition$0();
        this._gl.uniform3f$4($.index(p_uniforms, 'cameraPosition'), position.get$x(), position.get$y(), position.get$z());
      }
    if (material.get$isMeshPhongMaterial() === true || material.get$isMeshLambertMaterial() === true || material.get$isShaderMaterial() === true || material.get$skinning() === true)
      if (!($.index(p_uniforms, 'viewMatrix') == null))
        this._gl.uniformMatrix4fv$3($.index(p_uniforms, 'viewMatrix'), false, camera.get$_viewMatrixArray());
  }
  if (material.get$skinning() === true)
    if (this.supportsBoneTextures === true && object.get$useVertexTexture() === true) {
      if (!($.index(p_uniforms, 'boneTexture') == null)) {
        this._gl.uniform1i$2($.index(p_uniforms, 'boneTexture'), 12);
        this.setTexture$2(object.get$boneTexture(), 12);
      }
    } else if (!($.index(p_uniforms, 'boneGlobalMatrices') == null))
      this._gl.uniformMatrix4fv$3($.index(p_uniforms, 'boneGlobalMatrices'), false, object.get$boneMatrices());
  this.loadUniformsMatrices$2(p_uniforms, object);
  if (!($.index(p_uniforms, 'modelMatrix') == null))
    this._gl.uniformMatrix4fv$3($.index(p_uniforms, 'modelMatrix'), false, object.get$matrixWorld().get$elements());
  return program;
},
 refreshUniformsCommon$2: function(uniforms, material) {
  var t1 = material.get$opacity();
  $.index(uniforms, 'opacity').set$value(t1);
  t1 = this.gammaInput === true;
  if (t1)
    $.index(uniforms, 'diffuse').get$value().copyGammaToLinear$1(material.get$color());
  else {
    var t2 = material.get$color();
    $.index(uniforms, 'diffuse').set$value(t2);
  }
  t2 = material.get$map();
  $.index(uniforms, 'map').set$texture(t2);
  t2 = material.get$lightMap();
  $.index(uniforms, 'lightMap').set$texture(t2);
  t2 = material.get$specularMap();
  $.index(uniforms, 'specularMap').set$texture(t2);
  if (!(material.get$bumpMap() == null)) {
    t2 = material.get$bumpMap();
    $.index(uniforms, 'bumpMap').set$texture(t2);
    t2 = material.get$bumpScale();
    $.index(uniforms, 'bumpScale').set$value(t2);
  }
  if (!(material.get$map() == null))
    var uvScaleMap = material.get$map();
  else if (!(material.get$specularMap() == null))
    uvScaleMap = material.get$specularMap();
  else
    uvScaleMap = !(material.get$bumpMap() == null) ? material.get$bumpMap() : null;
  if (!(uvScaleMap == null)) {
    var offset = uvScaleMap.get$offset();
    var repeat = uvScaleMap.get$repeat();
    $.index(uniforms, 'offsetRepeat').get$value().setValues$4(offset.get$x(), offset.get$y(), repeat.get$x(), repeat.get$y());
  }
  t2 = material.get$envMap();
  $.index(uniforms, 'envMap').set$texture(t2);
  t2 = material.get$envMap();
  t2 = typeof t2 === 'object' && t2 !== null && !!t2.is$WebGLRenderTargetCube ? 1 : -1;
  $.index(uniforms, 'flipEnvMap').set$value(t2);
  if (t1) {
    t1 = material.get$reflectivity();
    $.index(uniforms, 'reflectivity').set$value(t1);
  } else {
    t1 = material.get$reflectivity();
    $.index(uniforms, 'reflectivity').set$value(t1);
  }
  t1 = material.get$refractionRatio();
  $.index(uniforms, 'refractionRatio').set$value(t1);
  t1 = material.get$combine();
  $.index(uniforms, 'combine').set$value(t1);
  if (!(material.get$envMap() == null)) {
    t1 = material.get$envMap().get$mapping();
    t1 = typeof t1 === 'object' && t1 !== null && !!t1.is$CubeRefractionMapping;
  } else
    t1 = false;
  $.index(uniforms, 'useRefract').set$value(t1);
},
 refreshUniformsLine$2: function(uniforms, material) {
  var t1 = material.get$color();
  $.index(uniforms, 'diffuse').set$value(t1);
  t1 = material.get$opacity();
  $.index(uniforms, 'opacity').set$value(t1);
},
 refreshUniformsParticle$2: function(uniforms, material) {
  var t1 = material.get$color();
  $.index(uniforms, 'psColor').set$value(t1);
  t1 = material.get$opacity();
  $.index(uniforms, 'opacity').set$value(t1);
  t1 = material.get$size();
  $.index(uniforms, 'size').set$value(t1);
  t1 = $.div(this.canvas.get$height(), 2);
  $.index(uniforms, 'scale').set$value(t1);
  t1 = material.get$map();
  $.index(uniforms, 'map').set$texture(t1);
},
 refreshUniformsFog$2: function(uniforms, fog) {
  var t1 = fog.get$color();
  $.index(uniforms, 'fogColor').set$value(t1);
  if (typeof fog === 'object' && fog !== null && !!fog.is$Fog) {
    t1 = fog.near;
    $.index(uniforms, 'fogNear').set$value(t1);
    t1 = fog.far;
    $.index(uniforms, 'fogFar').set$value(t1);
  } else if (typeof fog === 'object' && fog !== null && !!fog.is$FogExp2) {
    t1 = fog.density;
    $.index(uniforms, 'fogDensity').set$value(t1);
  }
},
 refreshUniformsPhong$2: function(uniforms, material) {
  var t1 = material.get$shininess();
  $.index(uniforms, 'shininess').set$value(t1);
  if (this.gammaInput === true) {
    $.index(uniforms, 'ambient').get$value().copyGammaToLinear$1(material.get$ambient());
    $.index(uniforms, 'emissive').get$value().copyGammaToLinear$1(material.get$emissive());
    $.index(uniforms, 'specular').get$value().copyGammaToLinear$1(material.get$specular());
  } else {
    t1 = material.get$ambient();
    $.index(uniforms, 'ambient').set$value(t1);
    t1 = material.get$emissive();
    $.index(uniforms, 'emissive').set$value(t1);
    t1 = material.get$specular();
    $.index(uniforms, 'specular').set$value(t1);
  }
  if (material.get$wrapAround() === true)
    $.index(uniforms, 'wrapRGB').get$value().copy$1(material.get$wrapRGB());
},
 refreshUniformsLambert$2: function(uniforms, material) {
  if (this.gammaInput === true) {
    $.index(uniforms, 'ambient').get$value().copyGammaToLinear$1(material.get$ambient());
    $.index(uniforms, 'emissive').get$value().copyGammaToLinear$1(material.get$emissive());
  } else {
    var t1 = material.get$ambient();
    $.index(uniforms, 'ambient').set$value(t1);
    t1 = material.get$emissive();
    $.index(uniforms, 'emissive').set$value(t1);
  }
  if (material.get$wrapAround() === true)
    $.index(uniforms, 'wrapRGB').get$value().copy$1(material.get$wrapRGB());
},
 refreshUniformsLights$2: function(uniforms, lights) {
  var t1 = $.index(lights, 'ambient');
  $.index(uniforms, 'ambientLightColor').set$value(t1);
  t1 = $.index($.index(lights, 'directional'), 'colors');
  $.index(uniforms, 'directionalLightColor').set$value(t1);
  t1 = $.index($.index(lights, 'directional'), 'positions');
  $.index(uniforms, 'directionalLightDirection').set$value(t1);
  t1 = $.index($.index(lights, 'point'), 'colors');
  $.index(uniforms, 'pointLightColor').set$value(t1);
  t1 = $.index($.index(lights, 'point'), 'positions');
  $.index(uniforms, 'pointLightPosition').set$value(t1);
  t1 = $.index($.index(lights, 'point'), 'distances');
  $.index(uniforms, 'pointLightDistance').set$value(t1);
  t1 = $.index($.index(lights, 'spot'), 'colors');
  $.index(uniforms, 'spotLightColor').set$value(t1);
  t1 = $.index($.index(lights, 'spot'), 'positions');
  $.index(uniforms, 'spotLightPosition').set$value(t1);
  t1 = $.index($.index(lights, 'spot'), 'distances');
  $.index(uniforms, 'spotLightDistance').set$value(t1);
  t1 = $.index($.index(lights, 'spot'), 'directions');
  $.index(uniforms, 'spotLightDirection').set$value(t1);
  t1 = $.index($.index(lights, 'spot'), 'angles');
  $.index(uniforms, 'spotLightAngle').set$value(t1);
  t1 = $.index($.index(lights, 'spot'), 'exponents');
  $.index(uniforms, 'spotLightExponent').set$value(t1);
},
 refreshUniformsShadow$2: function(uniforms, lights) {
  if (typeof lights !== 'string' && (typeof lights !== 'object' || lights === null || lights.constructor !== Array && !lights.is$JavaScriptIndexingBehavior()))
    return this.refreshUniformsShadow$2$bailout(1, uniforms, lights);
  if ($.index(uniforms, 'shadowMatrix') === true)
    for (var il = lights.length, i = 0, j = 0; i < il; ++i) {
      if (i < 0 || i >= lights.length)
        throw $.ioore(i);
      var light = lights[i];
      if (light.get$castShadow() !== true)
        continue;
      if (!(typeof light === 'object' && light !== null && !!light.is$SpotLight))
        var t1 = typeof light === 'object' && light !== null && !!light.is$DirectionalLight && light.get$shadowCascade() !== true;
      else
        t1 = true;
      if (t1) {
        $.indexSet($.index(uniforms, 'shadowMap').get$texture(), j, light.get$shadowMap());
        $.indexSet($.index(uniforms, 'shadowMapSize').get$value(), j, light.get$shadowMapSize());
        $.indexSet($.index(uniforms, 'shadowMatrix').get$value(), j, light.get$shadowMatrix());
        $.indexSet($.index(uniforms, 'shadowDarkness').get$value(), j, light.get$shadowDarkness());
        $.indexSet($.index(uniforms, 'shadowBias').get$value(), j, light.get$shadowBias());
        ++j;
      }
    }
},
 refreshUniformsShadow$2$bailout: function(state, uniforms, lights) {
  if ($.index(uniforms, 'shadowMatrix') === true)
    for (var il = $.get$length(lights), i = 0, j = 0; $.ltB(i, il); ++i) {
      var light = $.index(lights, i);
      if (light.get$castShadow() !== true)
        continue;
      if (!(typeof light === 'object' && light !== null && !!light.is$SpotLight))
        var t1 = typeof light === 'object' && light !== null && !!light.is$DirectionalLight && light.get$shadowCascade() !== true;
      else
        t1 = true;
      if (t1) {
        $.indexSet($.index(uniforms, 'shadowMap').get$texture(), j, light.get$shadowMap());
        $.indexSet($.index(uniforms, 'shadowMapSize').get$value(), j, light.get$shadowMapSize());
        $.indexSet($.index(uniforms, 'shadowMatrix').get$value(), j, light.get$shadowMatrix());
        $.indexSet($.index(uniforms, 'shadowDarkness').get$value(), j, light.get$shadowDarkness());
        $.indexSet($.index(uniforms, 'shadowBias').get$value(), j, light.get$shadowBias());
        ++j;
      }
    }
},
 loadUniformsMatrices$2: function(uniforms, object) {
  this._gl.uniformMatrix4fv$3($.index(uniforms, 'modelViewMatrix'), false, object.get$_modelViewMatrix().get$elements());
  if (!($.index(uniforms, 'normalMatrix') == null))
    this._gl.uniformMatrix3fv$3($.index(uniforms, 'normalMatrix'), false, object.get$_normalMatrix().get$elements());
},
 loadUniformsGeneric$2: function(program, uniforms) {
  if (typeof uniforms !== 'string' && (typeof uniforms !== 'object' || uniforms === null || uniforms.constructor !== Array && !uniforms.is$JavaScriptIndexingBehavior()))
    return this.loadUniformsGeneric$2$bailout(1, program, uniforms, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var jl = uniforms.length;
  for (var il = null, j = 0, uniform = null, value = null, offset = null, i = null, location$ = null, type = null, texture = null; j < jl; ++j) {
    var t1 = program.get$uniforms();
    if (j < 0 || j >= uniforms.length)
      throw $.ioore(j);
    location$ = $.index(t1, $.index(uniforms[j], 1));
    if (location$ == null)
      continue;
    if (j < 0 || j >= uniforms.length)
      throw $.ioore(j);
    uniform = $.index(uniforms[j], 0);
    type = uniform.get$type();
    value = uniform.get$value();
    if (type === 'i')
      this._gl.uniform1i$2(location$, value);
    else if (type === 'f')
      this._gl.uniform1f$2(location$, value);
    else if (type === 'v2')
      this._gl.uniform2f$3(location$, value.get$x(), value.get$y());
    else if (type === 'v3')
      this._gl.uniform3f$4(location$, value.get$x(), value.get$y(), value.get$z());
    else if (type === 'v4')
      this._gl.uniform4f$5(location$, value.get$x(), value.get$y(), value.get$z(), value.get$w());
    else if (type === 'c')
      this._gl.uniform3f$4(location$, value.get$r(), value.get$g(), value.get$b());
    else if (type === 'iv1')
      this._gl.uniform1iv$2(location$, value);
    else if (type === 'iv')
      this._gl.uniform3iv$2(location$, value);
    else if (type === 'fv1')
      this._gl.uniform1fv$2(location$, value);
    else if (type === 'fv') {
      t1 = this._gl;
      t1.uniform3fv$2(location$, typeof value === 'object' && value !== null && (value.constructor === Array || value.is$List()) ? $._TypedArrayFactoryProvider_Float32Array$fromList(value) : value);
    } else if (type === 'v2v') {
      if (uniform.get$_lib0_array() == null) {
        t1 = $.get$length(value);
        if (typeof t1 !== 'number')
          throw $.iae(t1);
        uniform.set$_lib0_array($._TypedArrayFactoryProvider_Float32Array(2 * t1));
      }
      il = $.get$length(value);
      for (i = 0; $.ltB(i, il); ++i) {
        offset = i * 2;
        $.indexSet(uniform.get$_lib0_array(), offset, $.index(value, i).get$x());
        $.indexSet(uniform.get$_lib0_array(), offset + 1, $.index(value, i).get$y());
      }
      this._gl.uniform2fv$2(location$, uniform.get$_lib0_array());
    } else if (type === 'v3v') {
      if (uniform.get$_lib0_array() == null) {
        t1 = $.get$length(value);
        if (typeof t1 !== 'number')
          throw $.iae(t1);
        uniform.set$_lib0_array($._TypedArrayFactoryProvider_Float32Array(3 * t1));
      }
      il = $.get$length(value);
      for (i = 0; $.ltB(i, il); ++i) {
        offset = i * 3;
        $.indexSet(uniform.get$_lib0_array(), offset, $.index(value, i).get$x());
        $.indexSet(uniform.get$_lib0_array(), offset + 1, $.index(value, i).get$y());
        $.indexSet(uniform.get$_lib0_array(), offset + 2, $.index(value, i).get$z());
      }
      this._gl.uniform3fv$2(location$, uniform.get$_lib0_array());
    } else if (type === 'v4v') {
      if (uniform.get$_lib0_array() == null) {
        t1 = $.get$length(value);
        if (typeof t1 !== 'number')
          throw $.iae(t1);
        uniform.set$_lib0_array($._TypedArrayFactoryProvider_Float32Array(4 * t1));
      }
      il = $.get$length(value);
      for (i = 0; $.ltB(i, il); ++i) {
        offset = i * 4;
        $.indexSet(uniform.get$_lib0_array(), offset, $.index(value, i).get$x());
        $.indexSet(uniform.get$_lib0_array(), offset + 1, $.index(value, i).get$y());
        $.indexSet(uniform.get$_lib0_array(), offset + 2, $.index(value, i).get$z());
        $.indexSet(uniform.get$_lib0_array(), offset + 3, $.index(value, i).get$w());
      }
      this._gl.uniform4fv$2(location$, uniform.get$_lib0_array());
    } else if (type === 'm4') {
      if (uniform.get$_lib0_array() == null)
        uniform.set$_lib0_array($._TypedArrayFactoryProvider_Float32Array(16));
      value.flattenToArray$1(uniform.get$_lib0_array());
      this._gl.uniformMatrix4fv$3(location$, false, uniform.get$_lib0_array());
    } else if (type === 'm4v') {
      if (uniform.get$_lib0_array() == null) {
        t1 = $.get$length(value);
        if (typeof t1 !== 'number')
          throw $.iae(t1);
        uniform.set$_lib0_array($._TypedArrayFactoryProvider_Float32Array(16 * t1));
      }
      il = $.get$length(value);
      for (i = 0; $.ltB(i, il); ++i)
        $.index(value, i).flattenToArrayOffset$2(uniform.get$_lib0_array(), i * 16);
      this._gl.uniformMatrix4fv$3(location$, false, uniform.get$_lib0_array());
    } else if (type === 't') {
      this._gl.uniform1i$2(location$, value);
      texture = uniform.get$texture();
      if (texture == null)
        continue;
      t1 = texture.get$image();
      if (typeof t1 === 'object' && t1 !== null && (t1.constructor === Array || t1.is$List()) && $.get$length(texture.get$image()) === 6)
        this.setCubeTexture$2(texture, value);
      else if (typeof texture === 'object' && texture !== null && !!texture.is$WebGLRenderTargetCube)
        this.setCubeTextureDynamic$2(texture, value);
      else
        this.setTexture$2(texture, value);
    } else if (type === 'tv') {
      if (uniform.get$_lib0_array() == null) {
        uniform.set$_lib0_array([]);
        il = $.get$length(uniform.get$texture());
        if (typeof il !== 'number')
          return this.loadUniformsGeneric$2$bailout(2, uniform, type, value, program, offset, location$, texture, il, jl, j, uniforms);
        for (i = 0; i < il; ++i)
          $.indexSet(uniform.get$_lib0_array(), i, $.add(value, i));
      }
      this._gl.uniform1iv$2(location$, uniform.get$_lib0_array());
      il = $.get$length(uniform.get$texture());
      for (i = 0; $.ltB(i, il); ++i) {
        texture = $.index(uniform.get$texture(), i);
        if (texture !== true)
          continue;
        this.setTexture$2(texture, $.index(uniform.get$_lib0_array(), i));
      }
    }
  }
},
 loadUniformsGeneric$2$bailout: function(state, env0, env1, env2, env3, env4, env5, env6, env7, env8, env9, env10) {
  switch (state) {
    case 1:
      var program = env0;
      var uniforms = env1;
      break;
    case 2:
      uniform = env0;
      type = env1;
      value = env2;
      program = env3;
      offset = env4;
      location$ = env5;
      texture = env6;
      il = env7;
      jl = env8;
      j = env9;
      uniforms = env10;
      break;
  }
  switch (state) {
    case 0:
    case 1:
      state = 0;
      var jl = $.get$length(uniforms);
      var il = null;
      var j = 0;
      var uniform = null;
      var value = null;
      var offset = null;
      var i = null;
      var location$ = null;
      var type = null;
      var texture = null;
    case 2:
      L0:
        while (true)
          switch (state) {
            case 0:
              if (!$.ltB(j, jl))
                break L0;
            case 2:
              c$0: {
                switch (state) {
                  case 0:
                    location$ = $.index(program.get$uniforms(), $.index($.index(uniforms, j), 1));
                    if (location$ == null)
                      break c$0;
                    uniform = $.index($.index(uniforms, j), 0);
                    type = uniform.get$type();
                    value = uniform.get$value();
                  case 2:
                    if (state === 0 && type === 'i')
                      this._gl.uniform1i$2(location$, value);
                    else
                      switch (state) {
                        case 0:
                        case 2:
                          if (state === 0 && type === 'f')
                            this._gl.uniform1f$2(location$, value);
                          else
                            switch (state) {
                              case 0:
                              case 2:
                                if (state === 0 && type === 'v2')
                                  this._gl.uniform2f$3(location$, value.get$x(), value.get$y());
                                else
                                  switch (state) {
                                    case 0:
                                    case 2:
                                      if (state === 0 && type === 'v3')
                                        this._gl.uniform3f$4(location$, value.get$x(), value.get$y(), value.get$z());
                                      else
                                        switch (state) {
                                          case 0:
                                          case 2:
                                            if (state === 0 && type === 'v4')
                                              this._gl.uniform4f$5(location$, value.get$x(), value.get$y(), value.get$z(), value.get$w());
                                            else
                                              switch (state) {
                                                case 0:
                                                case 2:
                                                  if (state === 0 && type === 'c')
                                                    this._gl.uniform3f$4(location$, value.get$r(), value.get$g(), value.get$b());
                                                  else
                                                    switch (state) {
                                                      case 0:
                                                      case 2:
                                                        if (state === 0 && type === 'iv1')
                                                          this._gl.uniform1iv$2(location$, value);
                                                        else
                                                          switch (state) {
                                                            case 0:
                                                            case 2:
                                                              if (state === 0 && type === 'iv')
                                                                this._gl.uniform3iv$2(location$, value);
                                                              else
                                                                switch (state) {
                                                                  case 0:
                                                                  case 2:
                                                                    if (state === 0 && type === 'fv1')
                                                                      this._gl.uniform1fv$2(location$, value);
                                                                    else
                                                                      switch (state) {
                                                                        case 0:
                                                                        case 2:
                                                                          if (state === 0 && type === 'fv') {
                                                                            var t1 = this._gl;
                                                                            t1.uniform3fv$2(location$, typeof value === 'object' && value !== null && (value.constructor === Array || value.is$List()) ? $._TypedArrayFactoryProvider_Float32Array$fromList(value) : value);
                                                                          } else
                                                                            switch (state) {
                                                                              case 0:
                                                                              case 2:
                                                                                if (state === 0 && type === 'v2v') {
                                                                                  if (uniform.get$_lib0_array() == null) {
                                                                                    t1 = $.get$length(value);
                                                                                    if (typeof t1 !== 'number')
                                                                                      throw $.iae(t1);
                                                                                    uniform.set$_lib0_array($._TypedArrayFactoryProvider_Float32Array(2 * t1));
                                                                                  }
                                                                                  il = $.get$length(value);
                                                                                  for (i = 0; $.ltB(i, il); ++i) {
                                                                                    offset = i * 2;
                                                                                    $.indexSet(uniform.get$_lib0_array(), offset, $.index(value, i).get$x());
                                                                                    $.indexSet(uniform.get$_lib0_array(), offset + 1, $.index(value, i).get$y());
                                                                                  }
                                                                                  this._gl.uniform2fv$2(location$, uniform.get$_lib0_array());
                                                                                } else
                                                                                  switch (state) {
                                                                                    case 0:
                                                                                    case 2:
                                                                                      if (state === 0 && type === 'v3v') {
                                                                                        if (uniform.get$_lib0_array() == null) {
                                                                                          t1 = $.get$length(value);
                                                                                          if (typeof t1 !== 'number')
                                                                                            throw $.iae(t1);
                                                                                          uniform.set$_lib0_array($._TypedArrayFactoryProvider_Float32Array(3 * t1));
                                                                                        }
                                                                                        il = $.get$length(value);
                                                                                        for (i = 0; $.ltB(i, il); ++i) {
                                                                                          offset = i * 3;
                                                                                          $.indexSet(uniform.get$_lib0_array(), offset, $.index(value, i).get$x());
                                                                                          $.indexSet(uniform.get$_lib0_array(), offset + 1, $.index(value, i).get$y());
                                                                                          $.indexSet(uniform.get$_lib0_array(), offset + 2, $.index(value, i).get$z());
                                                                                        }
                                                                                        this._gl.uniform3fv$2(location$, uniform.get$_lib0_array());
                                                                                      } else
                                                                                        switch (state) {
                                                                                          case 0:
                                                                                          case 2:
                                                                                            if (state === 0 && type === 'v4v') {
                                                                                              if (uniform.get$_lib0_array() == null) {
                                                                                                t1 = $.get$length(value);
                                                                                                if (typeof t1 !== 'number')
                                                                                                  throw $.iae(t1);
                                                                                                uniform.set$_lib0_array($._TypedArrayFactoryProvider_Float32Array(4 * t1));
                                                                                              }
                                                                                              il = $.get$length(value);
                                                                                              for (i = 0; $.ltB(i, il); ++i) {
                                                                                                offset = i * 4;
                                                                                                $.indexSet(uniform.get$_lib0_array(), offset, $.index(value, i).get$x());
                                                                                                $.indexSet(uniform.get$_lib0_array(), offset + 1, $.index(value, i).get$y());
                                                                                                $.indexSet(uniform.get$_lib0_array(), offset + 2, $.index(value, i).get$z());
                                                                                                $.indexSet(uniform.get$_lib0_array(), offset + 3, $.index(value, i).get$w());
                                                                                              }
                                                                                              this._gl.uniform4fv$2(location$, uniform.get$_lib0_array());
                                                                                            } else
                                                                                              switch (state) {
                                                                                                case 0:
                                                                                                case 2:
                                                                                                  if (state === 0 && type === 'm4') {
                                                                                                    if (uniform.get$_lib0_array() == null)
                                                                                                      uniform.set$_lib0_array($._TypedArrayFactoryProvider_Float32Array(16));
                                                                                                    value.flattenToArray$1(uniform.get$_lib0_array());
                                                                                                    this._gl.uniformMatrix4fv$3(location$, false, uniform.get$_lib0_array());
                                                                                                  } else
                                                                                                    switch (state) {
                                                                                                      case 0:
                                                                                                      case 2:
                                                                                                        if (state === 0 && type === 'm4v') {
                                                                                                          if (uniform.get$_lib0_array() == null) {
                                                                                                            t1 = $.get$length(value);
                                                                                                            if (typeof t1 !== 'number')
                                                                                                              throw $.iae(t1);
                                                                                                            uniform.set$_lib0_array($._TypedArrayFactoryProvider_Float32Array(16 * t1));
                                                                                                          }
                                                                                                          il = $.get$length(value);
                                                                                                          for (i = 0; $.ltB(i, il); ++i)
                                                                                                            $.index(value, i).flattenToArrayOffset$2(uniform.get$_lib0_array(), i * 16);
                                                                                                          this._gl.uniformMatrix4fv$3(location$, false, uniform.get$_lib0_array());
                                                                                                        } else
                                                                                                          switch (state) {
                                                                                                            case 0:
                                                                                                            case 2:
                                                                                                              if (state === 0 && type === 't') {
                                                                                                                this._gl.uniform1i$2(location$, value);
                                                                                                                texture = uniform.get$texture();
                                                                                                                if (texture == null)
                                                                                                                  break c$0;
                                                                                                                t1 = texture.get$image();
                                                                                                                if (typeof t1 === 'object' && t1 !== null && (t1.constructor === Array || t1.is$List()) && $.get$length(texture.get$image()) === 6)
                                                                                                                  this.setCubeTexture$2(texture, value);
                                                                                                                else if (typeof texture === 'object' && texture !== null && !!texture.is$WebGLRenderTargetCube)
                                                                                                                  this.setCubeTextureDynamic$2(texture, value);
                                                                                                                else
                                                                                                                  this.setTexture$2(texture, value);
                                                                                                              } else
                                                                                                                switch (state) {
                                                                                                                  case 0:
                                                                                                                  case 2:
                                                                                                                    if (state === 2 || state === 0 && type === 'tv')
                                                                                                                      switch (state) {
                                                                                                                        case 0:
                                                                                                                        case 2:
                                                                                                                          if (state === 2 || state === 0 && uniform.get$_lib0_array() == null)
                                                                                                                            switch (state) {
                                                                                                                              case 0:
                                                                                                                                uniform.set$_lib0_array([]);
                                                                                                                                il = $.get$length(uniform.get$texture());
                                                                                                                              case 2:
                                                                                                                                state = 0;
                                                                                                                                for (i = 0; $.ltB(i, il); ++i)
                                                                                                                                  $.indexSet(uniform.get$_lib0_array(), i, $.add(value, i));
                                                                                                                            }
                                                                                                                          this._gl.uniform1iv$2(location$, uniform.get$_lib0_array());
                                                                                                                          il = $.get$length(uniform.get$texture());
                                                                                                                          for (i = 0; $.ltB(i, il); ++i) {
                                                                                                                            texture = $.index(uniform.get$texture(), i);
                                                                                                                            if (texture !== true)
                                                                                                                              continue;
                                                                                                                            this.setTexture$2(texture, $.index(uniform.get$_lib0_array(), i));
                                                                                                                          }
                                                                                                                      }
                                                                                                                }
                                                                                                          }
                                                                                                    }
                                                                                              }
                                                                                        }
                                                                                  }
                                                                            }
                                                                      }
                                                                }
                                                          }
                                                    }
                                              }
                                        }
                                  }
                            }
                      }
                }
              }
              ++j;
          }
  }
},
 setupMatrices$2: function(object, camera) {
  object.get$_modelViewMatrix().multiply$2(camera.get$matrixWorldInverse(), object.get$matrixWorld());
  object.get$_normalMatrix().getInverse$1(object.get$_modelViewMatrix());
  object.get$_normalMatrix().transpose$0();
},
 setupLights$2: function(program, lights) {
  if (typeof lights !== 'string' && (typeof lights !== 'object' || lights === null || lights.constructor !== Array && !lights.is$JavaScriptIndexingBehavior()))
    return this.setupLights$2$bailout(1, lights, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var zlights = this._lights;
  var dcolors = $.index($.index(zlights, 'directional'), 'colors');
  if (typeof dcolors !== 'object' || dcolors === null || (dcolors.constructor !== Array || !!dcolors.immutable$list) && !dcolors.is$JavaScriptIndexingBehavior())
    return this.setupLights$2$bailout(2, lights, zlights, dcolors, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var dpositions = $.index($.index(zlights, 'directional'), 'positions');
  if (typeof dpositions !== 'object' || dpositions === null || (dpositions.constructor !== Array || !!dpositions.immutable$list) && !dpositions.is$JavaScriptIndexingBehavior())
    return this.setupLights$2$bailout(3, lights, dpositions, zlights, dcolors, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var pcolors = $.index($.index(zlights, 'point'), 'colors');
  if (typeof pcolors !== 'object' || pcolors === null || (pcolors.constructor !== Array || !!pcolors.immutable$list) && !pcolors.is$JavaScriptIndexingBehavior())
    return this.setupLights$2$bailout(4, lights, dpositions, zlights, dcolors, pcolors, 0, 0, 0, 0, 0, 0, 0, 0);
  var ppositions = $.index($.index(zlights, 'point'), 'positions');
  if (typeof ppositions !== 'object' || ppositions === null || (ppositions.constructor !== Array || !!ppositions.immutable$list) && !ppositions.is$JavaScriptIndexingBehavior())
    return this.setupLights$2$bailout(5, lights, dpositions, zlights, pcolors, ppositions, dcolors, 0, 0, 0, 0, 0, 0, 0);
  var pdistances = $.index($.index(zlights, 'point'), 'distances');
  if (typeof pdistances !== 'object' || pdistances === null || (pdistances.constructor !== Array || !!pdistances.immutable$list) && !pdistances.is$JavaScriptIndexingBehavior())
    return this.setupLights$2$bailout(6, lights, dpositions, zlights, pcolors, ppositions, dcolors, pdistances, 0, 0, 0, 0, 0, 0);
  var scolors = $.index($.index(zlights, 'spot'), 'colors');
  if (typeof scolors !== 'object' || scolors === null || (scolors.constructor !== Array || !!scolors.immutable$list) && !scolors.is$JavaScriptIndexingBehavior())
    return this.setupLights$2$bailout(7, lights, dpositions, zlights, scolors, pcolors, ppositions, dcolors, pdistances, 0, 0, 0, 0, 0);
  var spositions = $.index($.index(zlights, 'spot'), 'positions');
  if (typeof spositions !== 'object' || spositions === null || (spositions.constructor !== Array || !!spositions.immutable$list) && !spositions.is$JavaScriptIndexingBehavior())
    return this.setupLights$2$bailout(8, lights, dpositions, zlights, scolors, pcolors, spositions, ppositions, dcolors, pdistances, 0, 0, 0, 0);
  var sdistances = $.index($.index(zlights, 'spot'), 'distances');
  if (typeof sdistances !== 'object' || sdistances === null || (sdistances.constructor !== Array || !!sdistances.immutable$list) && !sdistances.is$JavaScriptIndexingBehavior())
    return this.setupLights$2$bailout(9, lights, dpositions, zlights, scolors, pcolors, spositions, ppositions, dcolors, sdistances, pdistances, 0, 0, 0);
  var sdirections = $.index($.index(zlights, 'spot'), 'directions');
  if (typeof sdirections !== 'object' || sdirections === null || (sdirections.constructor !== Array || !!sdirections.immutable$list) && !sdirections.is$JavaScriptIndexingBehavior())
    return this.setupLights$2$bailout(10, lights, dpositions, zlights, scolors, pcolors, sdirections, spositions, ppositions, dcolors, sdistances, pdistances, 0, 0);
  var sangles = $.index($.index(zlights, 'spot'), 'angles');
  if (typeof sangles !== 'object' || sangles === null || (sangles.constructor !== Array || !!sangles.immutable$list) && !sangles.is$JavaScriptIndexingBehavior())
    return this.setupLights$2$bailout(11, lights, scolors, spositions, dcolors, sdistances, dpositions, zlights, sdirections, pcolors, sangles, ppositions, pdistances, 0);
  var sexponents = $.index($.index(zlights, 'spot'), 'exponents');
  if (typeof sexponents !== 'object' || sexponents === null || (sexponents.constructor !== Array || !!sexponents.immutable$list) && !sexponents.is$JavaScriptIndexingBehavior())
    return this.setupLights$2$bailout(12, lights, scolors, spositions, dcolors, sdistances, dpositions, zlights, sdirections, pcolors, sangles, ppositions, sexponents, pdistances);
  var ll = lights.length;
  for (var t1 = this.gammaInput, t2 = this._direction, position = null, intensity = null, slength = 0, g = 0, distance = null, dlength = 0, soffset = 0, b = 0, r = 0, plength = 0, color = null, l = 0, doffset = 0, light = null, poffset = 0; l < ll; ++l) {
    if (l < 0 || l >= lights.length)
      throw $.ioore(l);
    light = lights[l];
    if ((typeof light === 'object' && light !== null && !!light.is$DirectionalLight || typeof light === 'object' && light !== null && !!light.is$SpotLight) && $.get$dynamic(light).get$onlyShadow() === true || light.get$visible() !== true)
      continue;
    color = light.get$color();
    if (typeof light === 'object' && light !== null && !!light.is$DirectionalLight || typeof light === 'object' && light !== null && !!light.is$SpotLight || typeof light === 'object' && light !== null && !!light.is$PointLight) {
      intensity = $.get$dynamic(light).get$intensity();
      distance = $.get$dynamic(light).get$distance();
    }
    if (typeof light === 'object' && light !== null && !!light.is$AmbientLight) {
      var t3 = color.get$r();
      if (t1) {
        t3 = $.mul(t3, t3);
        if (typeof t3 !== 'number')
          throw $.iae(t3);
        r += t3;
        t3 = color.get$g();
        t3 = $.mul(t3, t3);
        if (typeof t3 !== 'number')
          throw $.iae(t3);
        g += t3;
        t3 = color.get$b();
        t3 = $.mul(t3, t3);
        if (typeof t3 !== 'number')
          throw $.iae(t3);
        b += t3;
      } else {
        if (typeof t3 !== 'number')
          throw $.iae(t3);
        r += t3;
        t3 = color.get$g();
        if (typeof t3 !== 'number')
          throw $.iae(t3);
        g += t3;
        t3 = color.get$b();
        if (typeof t3 !== 'number')
          throw $.iae(t3);
        b += t3;
      }
    } else if (typeof light === 'object' && light !== null && !!light.is$DirectionalLight) {
      doffset = dlength * 3;
      t3 = doffset + 3;
      $.set$length(dcolors, t3);
      $.set$length(dpositions, t3);
      t3 = doffset + 2;
      var t4 = doffset + 1;
      var t5 = color.get$r();
      if (t1) {
        var t6 = $.mul($.mul($.mul(t5, t5), intensity), intensity);
        if (doffset < 0 || doffset >= dcolors.length)
          throw $.ioore(doffset);
        dcolors[doffset] = t6;
        t6 = color.get$g();
        var t7 = $.mul($.mul($.mul(t6, t6), intensity), intensity);
        if (t4 < 0 || t4 >= dcolors.length)
          throw $.ioore(t4);
        dcolors[t4] = t7;
        t7 = color.get$b();
        var t8 = $.mul($.mul($.mul(t7, t7), intensity), intensity);
        if (t3 < 0 || t3 >= dcolors.length)
          throw $.ioore(t3);
        dcolors[t3] = t8;
      } else {
        t5 = $.mul(t5, intensity);
        if (doffset < 0 || doffset >= dcolors.length)
          throw $.ioore(doffset);
        dcolors[doffset] = t5;
        t5 = $.mul(color.get$g(), intensity);
        if (t4 < 0 || t4 >= dcolors.length)
          throw $.ioore(t4);
        dcolors[t4] = t5;
        t5 = $.mul(color.get$b(), intensity);
        if (t3 < 0 || t3 >= dcolors.length)
          throw $.ioore(t3);
        dcolors[t3] = t5;
      }
      t2.copy$1(light.matrixWorld.getPosition$0());
      t2.subSelf$1(light.target.matrixWorld.getPosition$0());
      t2.normalize$0();
      t5 = t2.x;
      if (doffset < 0 || doffset >= dpositions.length)
        throw $.ioore(doffset);
      dpositions[doffset] = t5;
      t5 = t2.y;
      if (t4 < 0 || t4 >= dpositions.length)
        throw $.ioore(t4);
      dpositions[t4] = t5;
      t5 = t2.z;
      if (t3 < 0 || t3 >= dpositions.length)
        throw $.ioore(t3);
      dpositions[t3] = t5;
      ++dlength;
    } else if (typeof light === 'object' && light !== null && !!light.is$PointLight) {
      poffset = plength * 3;
      t3 = poffset + 3;
      $.set$length(pcolors, t3);
      $.set$length(ppositions, t3);
      t3 = poffset + 1;
      t4 = color.get$r();
      t5 = poffset + 2;
      if (t1) {
        t6 = $.mul($.mul($.mul(t4, t4), intensity), intensity);
        if (poffset < 0 || poffset >= pcolors.length)
          throw $.ioore(poffset);
        pcolors[poffset] = t6;
        t6 = color.get$g();
        t7 = $.mul($.mul($.mul(t6, t6), intensity), intensity);
        if (t3 < 0 || t3 >= pcolors.length)
          throw $.ioore(t3);
        pcolors[t3] = t7;
        t7 = color.get$b();
        t8 = $.mul($.mul($.mul(t7, t7), intensity), intensity);
        if (t5 < 0 || t5 >= pcolors.length)
          throw $.ioore(t5);
        pcolors[t5] = t8;
      } else {
        t4 = $.mul(t4, intensity);
        if (poffset < 0 || poffset >= pcolors.length)
          throw $.ioore(poffset);
        pcolors[poffset] = t4;
        t4 = $.mul(color.get$g(), intensity);
        if (t3 < 0 || t3 >= pcolors.length)
          throw $.ioore(t3);
        pcolors[t3] = t4;
        t4 = $.mul(color.get$b(), intensity);
        if (t5 < 0 || t5 >= pcolors.length)
          throw $.ioore(t5);
        pcolors[t5] = t4;
      }
      position = light.matrixWorld.getPosition$0();
      t4 = position.get$x();
      if (poffset < 0 || poffset >= ppositions.length)
        throw $.ioore(poffset);
      ppositions[poffset] = t4;
      t4 = position.get$y();
      if (t3 < 0 || t3 >= ppositions.length)
        throw $.ioore(t3);
      ppositions[t3] = t4;
      t4 = position.get$z();
      if (t5 < 0 || t5 >= ppositions.length)
        throw $.ioore(t5);
      ppositions[t5] = t4;
      if (plength < 0 || plength >= pdistances.length)
        throw $.ioore(plength);
      pdistances[plength] = distance;
      ++plength;
    } else if (typeof light === 'object' && light !== null && !!light.is$SpotLight) {
      soffset = slength * 3;
      t3 = soffset + 3;
      $.set$length(scolors, t3);
      $.set$length(spositions, t3);
      $.set$length(sdirections, t3);
      var slength0 = slength + 1;
      $.set$length(sdistances, slength0);
      t3 = soffset + 1;
      t4 = soffset + 2;
      t5 = color.get$r();
      if (t1) {
        t6 = $.mul($.mul($.mul(t5, t5), intensity), intensity);
        if (soffset < 0 || soffset >= scolors.length)
          throw $.ioore(soffset);
        scolors[soffset] = t6;
        t6 = color.get$g();
        t7 = $.mul($.mul($.mul(t6, t6), intensity), intensity);
        if (t3 < 0 || t3 >= scolors.length)
          throw $.ioore(t3);
        scolors[t3] = t7;
        t7 = color.get$b();
        t8 = $.mul($.mul($.mul(t7, t7), intensity), intensity);
        if (t4 < 0 || t4 >= scolors.length)
          throw $.ioore(t4);
        scolors[t4] = t8;
      } else {
        t5 = $.mul(t5, intensity);
        if (soffset < 0 || soffset >= scolors.length)
          throw $.ioore(soffset);
        scolors[soffset] = t5;
        t5 = $.mul(color.get$g(), intensity);
        if (t3 < 0 || t3 >= scolors.length)
          throw $.ioore(t3);
        scolors[t3] = t5;
        t5 = $.mul(color.get$b(), intensity);
        if (t4 < 0 || t4 >= scolors.length)
          throw $.ioore(t4);
        scolors[t4] = t5;
      }
      position = light.matrixWorld.getPosition$0();
      t5 = position.get$x();
      if (soffset < 0 || soffset >= spositions.length)
        throw $.ioore(soffset);
      spositions[soffset] = t5;
      t5 = position.get$y();
      if (t3 < 0 || t3 >= spositions.length)
        throw $.ioore(t3);
      spositions[t3] = t5;
      t5 = position.get$z();
      if (t4 < 0 || t4 >= spositions.length)
        throw $.ioore(t4);
      spositions[t4] = t5;
      if (slength < 0 || slength >= sdistances.length)
        throw $.ioore(slength);
      sdistances[slength] = distance;
      t2.copy$1(position);
      t2.subSelf$1(light.target.get$matrixWorld().getPosition$0());
      t2.normalize$0();
      t5 = t2.x;
      if (soffset < 0 || soffset >= sdirections.length)
        throw $.ioore(soffset);
      sdirections[soffset] = t5;
      t5 = t2.y;
      if (t3 < 0 || t3 >= sdirections.length)
        throw $.ioore(t3);
      sdirections[t3] = t5;
      t5 = t2.z;
      if (t4 < 0 || t4 >= sdirections.length)
        throw $.ioore(t4);
      sdirections[t4] = t5;
      t5 = $.cos(light.angle);
      if (slength < 0 || slength >= sangles.length)
        throw $.ioore(slength);
      sangles[slength] = t5;
      t5 = light.exponent;
      if (slength < 0 || slength >= sexponents.length)
        throw $.ioore(slength);
      sexponents[slength] = t5;
      slength = slength0;
    }
  }
  ll = dcolors.length;
  for (l = dlength * 3; l < ll; ++l) {
    if (l < 0 || l >= dcolors.length)
      throw $.ioore(l);
    dcolors[l] = 0;
  }
  ll = pcolors.length;
  for (l = plength * 3; l < ll; ++l) {
    if (l < 0 || l >= pcolors.length)
      throw $.ioore(l);
    pcolors[l] = 0;
  }
  ll = scolors.length;
  for (l = slength * 3; l < ll; ++l) {
    if (l < 0 || l >= scolors.length)
      throw $.ioore(l);
    scolors[l] = 0;
  }
  $.indexSet($.index(zlights, 'directional'), 'length', dlength);
  $.indexSet($.index(zlights, 'point'), 'length', plength);
  $.indexSet($.index(zlights, 'spot'), 'length', slength);
  $.indexSet($.index(zlights, 'ambient'), 0, r);
  $.indexSet($.index(zlights, 'ambient'), 1, g);
  $.indexSet($.index(zlights, 'ambient'), 2, b);
},
 setupLights$2$bailout: function(state, env0, env1, env2, env3, env4, env5, env6, env7, env8, env9, env10, env11, env12) {
  switch (state) {
    case 1:
      var lights = env0;
      break;
    case 2:
      lights = env0;
      zlights = env1;
      dcolors = env2;
      break;
    case 3:
      lights = env0;
      dpositions = env1;
      zlights = env2;
      dcolors = env3;
      break;
    case 4:
      lights = env0;
      dpositions = env1;
      zlights = env2;
      dcolors = env3;
      pcolors = env4;
      break;
    case 5:
      lights = env0;
      dpositions = env1;
      zlights = env2;
      pcolors = env3;
      ppositions = env4;
      dcolors = env5;
      break;
    case 6:
      lights = env0;
      dpositions = env1;
      zlights = env2;
      pcolors = env3;
      ppositions = env4;
      dcolors = env5;
      pdistances = env6;
      break;
    case 7:
      lights = env0;
      dpositions = env1;
      zlights = env2;
      scolors = env3;
      pcolors = env4;
      ppositions = env5;
      dcolors = env6;
      pdistances = env7;
      break;
    case 8:
      lights = env0;
      dpositions = env1;
      zlights = env2;
      scolors = env3;
      pcolors = env4;
      spositions = env5;
      ppositions = env6;
      dcolors = env7;
      pdistances = env8;
      break;
    case 9:
      lights = env0;
      dpositions = env1;
      zlights = env2;
      scolors = env3;
      pcolors = env4;
      spositions = env5;
      ppositions = env6;
      dcolors = env7;
      sdistances = env8;
      pdistances = env9;
      break;
    case 10:
      lights = env0;
      dpositions = env1;
      zlights = env2;
      scolors = env3;
      pcolors = env4;
      sdirections = env5;
      spositions = env6;
      ppositions = env7;
      dcolors = env8;
      sdistances = env9;
      pdistances = env10;
      break;
    case 11:
      lights = env0;
      scolors = env1;
      spositions = env2;
      dcolors = env3;
      sdistances = env4;
      dpositions = env5;
      zlights = env6;
      sdirections = env7;
      pcolors = env8;
      sangles = env9;
      ppositions = env10;
      pdistances = env11;
      break;
    case 12:
      lights = env0;
      scolors = env1;
      spositions = env2;
      dcolors = env3;
      sdistances = env4;
      dpositions = env5;
      zlights = env6;
      sdirections = env7;
      pcolors = env8;
      sangles = env9;
      ppositions = env10;
      sexponents = env11;
      pdistances = env12;
      break;
  }
  switch (state) {
    case 0:
    case 1:
      state = 0;
      var zlights = this._lights;
      var dcolors = $.index($.index(zlights, 'directional'), 'colors');
    case 2:
      state = 0;
      var dpositions = $.index($.index(zlights, 'directional'), 'positions');
    case 3:
      state = 0;
      var pcolors = $.index($.index(zlights, 'point'), 'colors');
    case 4:
      state = 0;
      var ppositions = $.index($.index(zlights, 'point'), 'positions');
    case 5:
      state = 0;
      var pdistances = $.index($.index(zlights, 'point'), 'distances');
    case 6:
      state = 0;
      var scolors = $.index($.index(zlights, 'spot'), 'colors');
    case 7:
      state = 0;
      var spositions = $.index($.index(zlights, 'spot'), 'positions');
    case 8:
      state = 0;
      var sdistances = $.index($.index(zlights, 'spot'), 'distances');
    case 9:
      state = 0;
      var sdirections = $.index($.index(zlights, 'spot'), 'directions');
    case 10:
      state = 0;
      var sangles = $.index($.index(zlights, 'spot'), 'angles');
    case 11:
      state = 0;
      var sexponents = $.index($.index(zlights, 'spot'), 'exponents');
    case 12:
      state = 0;
      var ll = $.get$length(lights);
      for (var t1 = this.gammaInput === true, t2 = this._direction, position = null, intensity = null, slength = 0, g = 0, distance = null, dlength = 0, soffset = 0, b = 0, r = 0, plength = 0, color = null, l = 0, doffset = 0, light = null, poffset = 0; $.ltB(l, ll); ++l) {
        light = $.index(lights, l);
        if ((typeof light === 'object' && light !== null && !!light.is$DirectionalLight || typeof light === 'object' && light !== null && !!light.is$SpotLight) && $.get$dynamic(light).get$onlyShadow() === true || light.get$visible() !== true)
          continue;
        color = light.get$color();
        if (typeof light === 'object' && light !== null && !!light.is$DirectionalLight || typeof light === 'object' && light !== null && !!light.is$SpotLight || typeof light === 'object' && light !== null && !!light.is$PointLight) {
          intensity = $.get$dynamic(light).get$intensity();
          distance = $.get$dynamic(light).get$distance();
        }
        if (typeof light === 'object' && light !== null && !!light.is$AmbientLight) {
          var t3 = color.get$r();
          if (t1) {
            t3 = $.mul(t3, t3);
            if (typeof t3 !== 'number')
              throw $.iae(t3);
            r += t3;
            t3 = color.get$g();
            t3 = $.mul(t3, t3);
            if (typeof t3 !== 'number')
              throw $.iae(t3);
            g += t3;
            t3 = color.get$b();
            t3 = $.mul(t3, t3);
            if (typeof t3 !== 'number')
              throw $.iae(t3);
            b += t3;
          } else {
            if (typeof t3 !== 'number')
              throw $.iae(t3);
            r += t3;
            t3 = color.get$g();
            if (typeof t3 !== 'number')
              throw $.iae(t3);
            g += t3;
            t3 = color.get$b();
            if (typeof t3 !== 'number')
              throw $.iae(t3);
            b += t3;
          }
        } else if (typeof light === 'object' && light !== null && !!light.is$DirectionalLight) {
          doffset = dlength * 3;
          t3 = doffset + 3;
          $.set$length(dcolors, t3);
          $.set$length(dpositions, t3);
          t3 = doffset + 2;
          var t4 = doffset + 1;
          var t5 = color.get$r();
          if (t1) {
            $.indexSet(dcolors, doffset, $.mul($.mul($.mul(t5, t5), intensity), intensity));
            var t6 = color.get$g();
            $.indexSet(dcolors, t4, $.mul($.mul($.mul(t6, t6), intensity), intensity));
            t4 = color.get$b();
            $.indexSet(dcolors, t3, $.mul($.mul($.mul(t4, t4), intensity), intensity));
          } else {
            $.indexSet(dcolors, doffset, $.mul(t5, intensity));
            $.indexSet(dcolors, t4, $.mul(color.get$g(), intensity));
            $.indexSet(dcolors, t3, $.mul(color.get$b(), intensity));
          }
          t2.copy$1(light.matrixWorld.getPosition$0());
          t2.subSelf$1(light.target.get$matrixWorld().getPosition$0());
          t2.normalize$0();
          $.indexSet(dpositions, doffset, t2.get$x());
          $.indexSet(dpositions, doffset + 1, t2.get$y());
          $.indexSet(dpositions, doffset + 2, t2.get$z());
          ++dlength;
        } else if (typeof light === 'object' && light !== null && !!light.is$PointLight) {
          poffset = plength * 3;
          t3 = poffset + 3;
          $.set$length(pcolors, t3);
          $.set$length(ppositions, t3);
          t3 = poffset + 1;
          t4 = color.get$r();
          t5 = poffset + 2;
          if (t1) {
            $.indexSet(pcolors, poffset, $.mul($.mul($.mul(t4, t4), intensity), intensity));
            t6 = color.get$g();
            $.indexSet(pcolors, t3, $.mul($.mul($.mul(t6, t6), intensity), intensity));
            t3 = color.get$b();
            $.indexSet(pcolors, t5, $.mul($.mul($.mul(t3, t3), intensity), intensity));
          } else {
            $.indexSet(pcolors, poffset, $.mul(t4, intensity));
            $.indexSet(pcolors, t3, $.mul(color.get$g(), intensity));
            $.indexSet(pcolors, t5, $.mul(color.get$b(), intensity));
          }
          position = light.matrixWorld.getPosition$0();
          $.indexSet(ppositions, poffset, position.get$x());
          $.indexSet(ppositions, poffset + 1, position.get$y());
          $.indexSet(ppositions, poffset + 2, position.get$z());
          $.indexSet(pdistances, plength, distance);
          ++plength;
        } else if (typeof light === 'object' && light !== null && !!light.is$SpotLight) {
          soffset = slength * 3;
          t3 = soffset + 3;
          $.set$length(scolors, t3);
          $.set$length(spositions, t3);
          $.set$length(sdirections, t3);
          var slength0 = slength + 1;
          $.set$length(sdistances, slength0);
          t3 = soffset + 1;
          t4 = soffset + 2;
          t5 = color.get$r();
          if (t1) {
            $.indexSet(scolors, soffset, $.mul($.mul($.mul(t5, t5), intensity), intensity));
            t6 = color.get$g();
            $.indexSet(scolors, t3, $.mul($.mul($.mul(t6, t6), intensity), intensity));
            t3 = color.get$b();
            $.indexSet(scolors, t4, $.mul($.mul($.mul(t3, t3), intensity), intensity));
          } else {
            $.indexSet(scolors, soffset, $.mul(t5, intensity));
            $.indexSet(scolors, t3, $.mul(color.get$g(), intensity));
            $.indexSet(scolors, t4, $.mul(color.get$b(), intensity));
          }
          position = light.matrixWorld.getPosition$0();
          $.indexSet(spositions, soffset, position.get$x());
          t3 = soffset + 1;
          $.indexSet(spositions, t3, position.get$y());
          t4 = soffset + 2;
          $.indexSet(spositions, t4, position.get$z());
          $.indexSet(sdistances, slength, distance);
          t2.copy$1(position);
          t2.subSelf$1(light.target.get$matrixWorld().getPosition$0());
          t2.normalize$0();
          $.indexSet(sdirections, soffset, t2.get$x());
          $.indexSet(sdirections, t3, t2.get$y());
          $.indexSet(sdirections, t4, t2.get$z());
          $.indexSet(sangles, slength, $.cos(light.angle));
          $.indexSet(sexponents, slength, light.exponent);
          slength = slength0;
        }
      }
      ll = $.get$length(dcolors);
      for (l = dlength * 3; $.ltB(l, ll); ++l)
        $.indexSet(dcolors, l, 0);
      ll = $.get$length(pcolors);
      for (l = plength * 3; $.ltB(l, ll); ++l)
        $.indexSet(pcolors, l, 0);
      ll = $.get$length(scolors);
      for (l = slength * 3; $.ltB(l, ll); ++l)
        $.indexSet(scolors, l, 0);
      $.indexSet($.index(zlights, 'directional'), 'length', dlength);
      $.indexSet($.index(zlights, 'point'), 'length', plength);
      $.indexSet($.index(zlights, 'spot'), 'length', slength);
      $.indexSet($.index(zlights, 'ambient'), 0, r);
      $.indexSet($.index(zlights, 'ambient'), 1, g);
      $.indexSet($.index(zlights, 'ambient'), 2, b);
  }
},
 setMaterialFaces$1: function(material) {
  var doubleSided = material.get$side() === 2;
  var flipSided = material.get$side() === 1;
  if (!(this._oldDoubleSided === doubleSided)) {
    var t1 = this._gl;
    if (doubleSided)
      t1.disable$1(2884);
    else
      t1.enable$1(2884);
    this._oldDoubleSided = doubleSided;
  }
  if (!(this._oldFlipSided === flipSided)) {
    t1 = this._gl;
    if (flipSided)
      t1.frontFace$1(2304);
    else
      t1.frontFace$1(2305);
    this._oldFlipSided = flipSided;
  }
},
 setDepthTest$1: function(depthTest) {
  var t1 = this._oldDepthTest;
  if (!(t1 == null ? depthTest == null : t1 === depthTest)) {
    t1 = depthTest === true;
    var t2 = this._gl;
    if (t1)
      t2.enable$1(2929);
    else
      t2.disable$1(2929);
    this._oldDepthTest = depthTest;
  }
},
 setDepthWrite$1: function(depthWrite) {
  var t1 = this._oldDepthWrite;
  if (!(t1 == null ? depthWrite == null : t1 === depthWrite)) {
    this._gl.depthMask$1(depthWrite);
    this._oldDepthWrite = depthWrite;
  }
},
 setLineWidth$1: function(width) {
  var t1 = this._oldLineWidth;
  if (!(width == null ? t1 == null : width === t1)) {
    this._gl.lineWidth$1(width);
    this._oldLineWidth = width;
  }
},
 setPolygonOffset$3: function(polygonoffset, factor, units) {
  var t1 = this._oldPolygonOffset;
  if (!(t1 == null ? polygonoffset == null : t1 === polygonoffset)) {
    t1 = polygonoffset === true;
    var t2 = this._gl;
    if (t1)
      t2.enable$1(32823);
    else
      t2.disable$1(32823);
    this._oldPolygonOffset = polygonoffset;
  }
  if (polygonoffset === true) {
    t1 = this._oldPolygonOffsetFactor;
    if (t1 == null ? factor == null : t1 === factor) {
      t1 = this._oldPolygonOffsetUnits;
      t2 = !(t1 == null ? units == null : t1 === units);
      t1 = t2;
    } else
      t1 = true;
  } else
    t1 = false;
  if (t1) {
    this._gl.polygonOffset$2(factor, units);
    this._oldPolygonOffsetFactor = factor;
    this._oldPolygonOffsetUnits = units;
  }
},
 setBlending$4: function(blending, blendEquation, blendSrc, blendDst) {
  var t1 = this._oldBlending;
  if (!(blending == null ? t1 == null : blending === t1)) {
    if (blending === 0)
      this._gl.disable$1(3042);
    else if (blending === 2) {
      this._gl.enable$1(3042);
      this._gl.blendEquation$1(32774);
      this._gl.blendFunc$2(770, 1);
    } else if (blending === 3) {
      this._gl.enable$1(3042);
      this._gl.blendEquation$1(32774);
      this._gl.blendFunc$2(0, 769);
    } else if (blending === 4) {
      this._gl.enable$1(3042);
      this._gl.blendEquation$1(32774);
      this._gl.blendFunc$2(0, 768);
    } else {
      t1 = blending === 5;
      var t2 = this._gl;
      if (t1)
        t2.enable$1(3042);
      else {
        t2.enable$1(3042);
        this._gl.blendEquationSeparate$2(32774, 32774);
        this._gl.blendFuncSeparate$4(770, 771, 1, 771);
      }
    }
    this._oldBlending = blending;
  }
  if (blending === 5) {
    t1 = this._oldBlendEquation;
    if (!(blendEquation == null ? t1 == null : blendEquation === t1)) {
      this._gl.blendEquation$1(this.paramThreeToGL$1(blendEquation));
      this._oldBlendEquation = blendEquation;
    }
    t1 = this._oldBlendSrc;
    if (blendSrc == null ? t1 == null : blendSrc === t1) {
      t1 = this._oldBlendDst;
      t2 = !(blendDst == null ? t1 == null : blendDst === t1);
      t1 = t2;
    } else
      t1 = true;
    if (t1) {
      this._gl.blendFunc$2(this.paramThreeToGL$1(blendSrc), this.paramThreeToGL$1(blendDst));
      this._oldBlendSrc = blendSrc;
      this._oldBlendDst = blendDst;
    }
  } else {
    this._oldBlendEquation = null;
    this._oldBlendSrc = null;
    this._oldBlendDst = null;
  }
},
 setBlending$1: function(blending) {
  return this.setBlending$4(blending,null,null,null)
},
 buildProgram$36: function(shaderID, fragmentShader, vertexShader, uniforms, attributes, maxDirLights, maxPointLights, maxSpotLights, maxShadows, maxBones, map, envMap, lightMap, bumpMap, specularMap, vertexColors, skinning, useVertexTexture, boneTextureWidth, boneTextureHeight, morphTargets, morphNormals, perPixel, wrapAround, doubleSided, shadowMapEnabled, shadowMapSoft, shadowMapDebug, shadowMapCascade, sizeAttenuation, fog, useFog, maxMorphTargets, maxMorphNormals, alphaTest, metal) {
  var t1 = {};
  if (typeof maxMorphTargets !== 'number')
    return this.buildProgram$36$bailout(1, shaderID, fragmentShader, vertexShader, uniforms, attributes, maxDirLights, maxPointLights, maxSpotLights, maxShadows, maxBones, map, envMap, lightMap, bumpMap, specularMap, vertexColors, skinning, useVertexTexture, boneTextureWidth, boneTextureHeight, morphTargets, morphNormals, perPixel, wrapAround, doubleSided, shadowMapEnabled, shadowMapSoft, shadowMapDebug, shadowMapCascade, sizeAttenuation, fog, useFog, maxMorphTargets, maxMorphNormals, alphaTest, metal, t1);
  var chunks = [];
  if (!(shaderID == null))
    chunks.push(shaderID);
  else {
    chunks.push(fragmentShader);
    chunks.push(vertexShader);
  }
  var code = 'maxDirLights' + $.S(maxDirLights) + 'maxPointLights' + $.S(maxPointLights) + 'maxSpotLights' + $.S(maxSpotLights) + 'maxShadows' + $.S(maxShadows) + 'maxBones' + $.S(maxBones) + 'map' + $.S(map) + 'envMap' + $.S(envMap) + 'lightMap' + $.S(lightMap) + 'bumpMap' + $.S(bumpMap) + 'specularMap' + $.S(specularMap) + 'vertexColors' + $.S(vertexColors) + 'skinning' + $.S(skinning) + 'useVertexTexture' + $.S(useVertexTexture) + 'boneTextureWidth' + $.S(boneTextureWidth) + 'boneTextureHeight' + $.S(boneTextureHeight) + 'morphTargets' + $.S(morphTargets) + 'morphNormals' + $.S(morphNormals) + 'perPixel' + $.S(perPixel) + 'wrapAround' + $.S(wrapAround) + 'doubleSided' + $.S(doubleSided) + 'shadowMapEnabled' + $.S(shadowMapEnabled) + 'shadowMapSoft' + $.S(shadowMapSoft) + 'shadowMapDebug' + $.S(shadowMapDebug) + 'shadowMapCascade' + $.S(shadowMapCascade) + 'sizeAttenuation' + $.S(sizeAttenuation);
  var t2 = this._programs;
  var pl = t2.length;
  for (var p = 0; p < pl; ++p) {
    if (p < 0 || p >= pl)
      throw $.ioore(p);
    var program = t2[p];
    if (program.get$code() === code) {
      program.set$usedTimes($.add(program.get$usedTimes(), 1));
      return program;
    }
  }
  var glprogram = this._gl.createProgram$0();
  var t3 = this.precision;
  var t4 = 'precision ' + t3 + ' float;';
  var t5 = this.supportsVertexTextures === true ? '#define VERTEX_TEXTURES' : '';
  var t6 = this.gammaInput;
  var t7 = t6 ? '#define GAMMA_INPUT' : '';
  var t8 = this.gammaOutput;
  var t9 = t8 ? '#define GAMMA_OUTPUT' : '';
  var t10 = this.physicallyBasedShading;
  var t11 = t10 ? '#define PHYSICALLY_BASED_SHADING' : '';
  var t12 = '#define MAX_DIR_LIGHTS ' + $.S(maxDirLights);
  var t13 = '#define MAX_POINT_LIGHTS ' + $.S(maxPointLights);
  var t14 = '#define MAX_SPOT_LIGHTS ' + $.S(maxSpotLights);
  var t15 = '#define MAX_SHADOWS ' + $.S(maxShadows);
  var t16 = '#define MAX_BONES ' + $.S(maxBones);
  var t17 = !(map == null);
  var t18 = t17 ? '#define USE_MAP' : '';
  var t19 = !(envMap == null);
  var t20 = t19 ? '#define USE_ENVMAP' : '';
  var t21 = !(lightMap == null);
  var t22 = t21 ? '#define USE_LIGHTMAP' : '';
  var t23 = !(bumpMap == null);
  var t24 = t23 ? '#define USE_BUMPMAP' : '';
  var t25 = !(specularMap == null);
  var t26 = t25 ? '#define USE_SPECULARMAP' : '';
  var t27 = !$.eqB(vertexColors, 0) ? '#define USE_COLOR' : '';
  var t28 = skinning === true ? '#define USE_SKINNING' : '';
  var t29 = useVertexTexture === true;
  var t30 = t29 ? '#define BONE_TEXTURE' : '';
  var t31 = !(boneTextureWidth == null) ? '#define N_BONE_PIXEL_X ' + $.S($.toStringAsFixed(boneTextureWidth, 1)) : '';
  var t32 = !(boneTextureHeight == null) ? '#define N_BONE_PIXEL_Y ' + $.S($.toStringAsFixed(boneTextureHeight, 1)) : '';
  var t33 = morphTargets === true ? '#define USE_MORPHTARGETS' : '';
  var t34 = morphNormals === true ? '#define USE_MORPHNORMALS' : '';
  var t35 = perPixel === true;
  var t36 = t35 ? '#define PHONG_PER_PIXEL' : '';
  var t37 = wrapAround === true;
  var t38 = t37 ? '#define WRAP_AROUND' : '';
  var t39 = doubleSided === true;
  var t40 = t39 ? '#define DOUBLE_SIDED' : '';
  var t41 = shadowMapEnabled === true;
  var t42 = t41 ? '#define USE_SHADOWMAP' : '';
  var t43 = shadowMapSoft === true;
  var t44 = t43 ? '#define SHADOWMAP_SOFT' : '';
  var t45 = shadowMapDebug ? '#define SHADOWMAP_DEBUG' : '';
  var t46 = shadowMapCascade === true;
  var t47 = t46 ? '#define SHADOWMAP_CASCADE' : '';
  var prefix_vertex = $.Strings_join([t4, t5, t7, t9, t11, t12, t13, t14, t15, t16, t18, t20, t22, t24, t26, t27, t28, t30, t31, t32, t33, t34, t36, t38, t40, t42, t44, t45, t47, sizeAttenuation === true ? '#define USE_SIZEATTENUATION' : '', 'uniform mat4 modelMatrix;', 'uniform mat4 modelViewMatrix;', 'uniform mat4 projectionMatrix;', 'uniform mat4 viewMatrix;', 'uniform mat3 normalMatrix;', 'uniform vec3 cameraPosition;', 'attribute vec3 position;', 'attribute vec3 normal;', 'attribute vec2 uv;', 'attribute vec2 uv2;', '#ifdef USE_COLOR', 'attribute vec3 color;', '#endif', '#ifdef USE_MORPHTARGETS', 'attribute vec3 morphTarget0;', 'attribute vec3 morphTarget1;', 'attribute vec3 morphTarget2;', 'attribute vec3 morphTarget3;', '#ifdef USE_MORPHNORMALS', 'attribute vec3 morphNormal0;', 'attribute vec3 morphNormal1;', 'attribute vec3 morphNormal2;', 'attribute vec3 morphNormal3;', '#else', 'attribute vec3 morphTarget4;', 'attribute vec3 morphTarget5;', 'attribute vec3 morphTarget6;', 'attribute vec3 morphTarget7;', '#endif', '#endif', '#ifdef USE_SKINNING', 'attribute vec4 skinVertexA;', 'attribute vec4 skinVertexB;', 'attribute vec4 skinIndex;', 'attribute vec4 skinWeight;', '#endif', ''], '\n');
  var t48 = 'precision ' + t3 + ' float;';
  t3 = t23 ? '#extension GL_OES_standard_derivatives : enable' : '';
  t4 = '#define MAX_DIR_LIGHTS ' + $.S(maxDirLights);
  t5 = '#define MAX_POINT_LIGHTS ' + $.S(maxPointLights);
  t7 = '#define MAX_SPOT_LIGHTS ' + $.S(maxSpotLights);
  t9 = '#define MAX_SHADOWS ' + $.S(maxShadows);
  t11 = !$.eqB(alphaTest, 0) ? '#define ALPHATEST ' + $.S(alphaTest) : '';
  t6 = t6 ? '#define GAMMA_INPUT' : '';
  t8 = t8 ? '#define GAMMA_OUTPUT' : '';
  t10 = t10 ? '#define PHYSICALLY_BASED_SHADING' : '';
  t12 = useFog === true;
  t13 = t12 && !(fog == null) ? '#define USE_FOG' : '';
  t12 = t12 && typeof fog === 'object' && fog !== null && !!fog.is$FogExp2 ? '#define FOG_EXP2' : '';
  t14 = t17 ? '#define USE_MAP' : '';
  t15 = t19 ? '#define USE_ENVMAP' : '';
  t16 = t21 ? '#define USE_LIGHTMAP' : '';
  t17 = t23 ? '#define USE_BUMPMAP' : '';
  t18 = t25 ? '#define USE_SPECULARMAP' : '';
  t19 = !$.eqB(vertexColors, 0) ? '#define USE_COLOR' : '';
  t20 = metal === true ? '#define METAL' : '';
  t21 = t35 ? '#define PHONG_PER_PIXEL' : '';
  t22 = t37 ? '#define WRAP_AROUND' : '';
  t23 = t39 ? '#define DOUBLE_SIDED' : '';
  t24 = t41 ? '#define USE_SHADOWMAP' : '';
  t25 = t43 ? '#define SHADOWMAP_SOFT' : '';
  t26 = shadowMapDebug ? '#define SHADOWMAP_DEBUG' : '';
  var glFragmentShader = this.getShader$2('fragment', $.S($.Strings_join([t48, t3, t4, t5, t7, t9, t11, t6, t8, t10, t13, t12, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t46 ? '#define SHADOWMAP_CASCADE' : '', 'uniform mat4 viewMatrix;', 'uniform vec3 cameraPosition;', ''], '\n')) + $.S(fragmentShader));
  var glVertexShader = this.getShader$2('vertex', $.S(prefix_vertex) + $.S(vertexShader));
  this._gl.attachShader$2(glprogram, glVertexShader);
  this._gl.attachShader$2(glprogram, glFragmentShader);
  this._gl.linkProgram$1(glprogram);
  if (this._gl.getProgramParameter$2(glprogram, 35714) !== true) {
    var status$ = this._gl.getProgramParameter$2(glprogram, 35715);
    var error = this._gl.getError$0();
    $.print('Could not initialise shader\nVALIDATE_STATUS: ' + $.S(status$) + ', gl error [' + $.S(error) + ']');
  }
  this._gl.deleteShader$1(glFragmentShader);
  this._gl.deleteShader$1(glVertexShader);
  t3 = this._programs_counter;
  this._programs_counter = t3 + 1;
  program = $.Program$(t3, glprogram, code, 1);
  t1.identifiers_1 = null;
  t1.identifiers_1 = ['viewMatrix', 'modelViewMatrix', 'projectionMatrix', 'normalMatrix', 'modelMatrix', 'cameraPosition', 'morphTargetInfluences'];
  t3 = t1.identifiers_1;
  if (t29)
    $.add$1(t3, 'boneTexture');
  else
    $.add$1(t3, 'boneGlobalMatrices');
  $.forEach(uniforms, new $.WebGLRenderer_buildProgram_anon(t1));
  this.cacheUniformLocations$2(program, t1.identifiers_1);
  t1.identifiers_1 = ['position', 'normal', 'uv', 'uv2', 'tangent', 'color', 'skinVertexA', 'skinVertexB', 'skinIndex', 'skinWeight'];
  for (var i = 0; i < maxMorphTargets; ++i)
    $.add$1(t1.identifiers_1, 'morphTarget' + $.S(i));
  for (i = 0; $.ltB(i, maxMorphNormals); ++i)
    $.add$1(t1.identifiers_1, 'morphNormal' + $.S(i));
  if (!(attributes == null))
    $.forEach(attributes, new $.WebGLRenderer_buildProgram_anon0(t1));
  this.cacheAttributeLocations$2(program, t1.identifiers_1);
  t2.push(program);
  t2 = t2.length;
  this.info.memory.set$programs(t2);
  return program;
},
 buildProgram$36$bailout: function(state, shaderID, fragmentShader, vertexShader, uniforms, attributes, maxDirLights, maxPointLights, maxSpotLights, maxShadows, maxBones, map, envMap, lightMap, bumpMap, specularMap, vertexColors, skinning, useVertexTexture, boneTextureWidth, boneTextureHeight, morphTargets, morphNormals, perPixel, wrapAround, doubleSided, shadowMapEnabled, shadowMapSoft, shadowMapDebug, shadowMapCascade, sizeAttenuation, fog, useFog, maxMorphTargets, maxMorphNormals, alphaTest, metal, t1) {
  var chunks = [];
  if (!(shaderID == null))
    chunks.push(shaderID);
  else {
    chunks.push(fragmentShader);
    chunks.push(vertexShader);
  }
  var code = 'maxDirLights' + $.S(maxDirLights) + 'maxPointLights' + $.S(maxPointLights) + 'maxSpotLights' + $.S(maxSpotLights) + 'maxShadows' + $.S(maxShadows) + 'maxBones' + $.S(maxBones) + 'map' + $.S(map) + 'envMap' + $.S(envMap) + 'lightMap' + $.S(lightMap) + 'bumpMap' + $.S(bumpMap) + 'specularMap' + $.S(specularMap) + 'vertexColors' + $.S(vertexColors) + 'skinning' + $.S(skinning) + 'useVertexTexture' + $.S(useVertexTexture) + 'boneTextureWidth' + $.S(boneTextureWidth) + 'boneTextureHeight' + $.S(boneTextureHeight) + 'morphTargets' + $.S(morphTargets) + 'morphNormals' + $.S(morphNormals) + 'perPixel' + $.S(perPixel) + 'wrapAround' + $.S(wrapAround) + 'doubleSided' + $.S(doubleSided) + 'shadowMapEnabled' + $.S(shadowMapEnabled) + 'shadowMapSoft' + $.S(shadowMapSoft) + 'shadowMapDebug' + $.S(shadowMapDebug) + 'shadowMapCascade' + $.S(shadowMapCascade) + 'sizeAttenuation' + $.S(sizeAttenuation);
  var t2 = this._programs;
  var pl = t2.length;
  for (var p = 0; p < pl; ++p) {
    if (p < 0 || p >= t2.length)
      throw $.ioore(p);
    var program = t2[p];
    if (program.get$code() === code) {
      program.set$usedTimes($.add(program.get$usedTimes(), 1));
      return program;
    }
  }
  var glprogram = this._gl.createProgram$0();
  var t3 = this.precision;
  var t4 = 'precision ' + t3 + ' float;';
  var t5 = this.supportsVertexTextures === true ? '#define VERTEX_TEXTURES' : '';
  var t6 = this.gammaInput === true;
  var t7 = t6 ? '#define GAMMA_INPUT' : '';
  var t8 = this.gammaOutput === true;
  var t9 = t8 ? '#define GAMMA_OUTPUT' : '';
  var t10 = this.physicallyBasedShading === true;
  var t11 = t10 ? '#define PHYSICALLY_BASED_SHADING' : '';
  var t12 = '#define MAX_DIR_LIGHTS ' + $.S(maxDirLights);
  var t13 = '#define MAX_POINT_LIGHTS ' + $.S(maxPointLights);
  var t14 = '#define MAX_SPOT_LIGHTS ' + $.S(maxSpotLights);
  var t15 = '#define MAX_SHADOWS ' + $.S(maxShadows);
  var t16 = '#define MAX_BONES ' + $.S(maxBones);
  var t17 = !(map == null);
  var t18 = t17 ? '#define USE_MAP' : '';
  var t19 = !(envMap == null);
  var t20 = t19 ? '#define USE_ENVMAP' : '';
  var t21 = !(lightMap == null);
  var t22 = t21 ? '#define USE_LIGHTMAP' : '';
  var t23 = !(bumpMap == null);
  var t24 = t23 ? '#define USE_BUMPMAP' : '';
  var t25 = !(specularMap == null);
  var t26 = t25 ? '#define USE_SPECULARMAP' : '';
  var t27 = !$.eqB(vertexColors, 0) ? '#define USE_COLOR' : '';
  var t28 = skinning === true ? '#define USE_SKINNING' : '';
  var t29 = useVertexTexture === true;
  var t30 = t29 ? '#define BONE_TEXTURE' : '';
  var t31 = !(boneTextureWidth == null) ? '#define N_BONE_PIXEL_X ' + $.S($.toStringAsFixed(boneTextureWidth, 1)) : '';
  var t32 = !(boneTextureHeight == null) ? '#define N_BONE_PIXEL_Y ' + $.S($.toStringAsFixed(boneTextureHeight, 1)) : '';
  var t33 = morphTargets === true ? '#define USE_MORPHTARGETS' : '';
  var t34 = morphNormals === true ? '#define USE_MORPHNORMALS' : '';
  var t35 = perPixel === true;
  var t36 = t35 ? '#define PHONG_PER_PIXEL' : '';
  var t37 = wrapAround === true;
  var t38 = t37 ? '#define WRAP_AROUND' : '';
  var t39 = doubleSided === true;
  var t40 = t39 ? '#define DOUBLE_SIDED' : '';
  var t41 = shadowMapEnabled === true;
  var t42 = t41 ? '#define USE_SHADOWMAP' : '';
  var t43 = shadowMapSoft === true;
  var t44 = t43 ? '#define SHADOWMAP_SOFT' : '';
  var t45 = shadowMapDebug ? '#define SHADOWMAP_DEBUG' : '';
  var t46 = shadowMapCascade === true;
  var t47 = t46 ? '#define SHADOWMAP_CASCADE' : '';
  var prefix_vertex = $.Strings_join([t4, t5, t7, t9, t11, t12, t13, t14, t15, t16, t18, t20, t22, t24, t26, t27, t28, t30, t31, t32, t33, t34, t36, t38, t40, t42, t44, t45, t47, sizeAttenuation === true ? '#define USE_SIZEATTENUATION' : '', 'uniform mat4 modelMatrix;', 'uniform mat4 modelViewMatrix;', 'uniform mat4 projectionMatrix;', 'uniform mat4 viewMatrix;', 'uniform mat3 normalMatrix;', 'uniform vec3 cameraPosition;', 'attribute vec3 position;', 'attribute vec3 normal;', 'attribute vec2 uv;', 'attribute vec2 uv2;', '#ifdef USE_COLOR', 'attribute vec3 color;', '#endif', '#ifdef USE_MORPHTARGETS', 'attribute vec3 morphTarget0;', 'attribute vec3 morphTarget1;', 'attribute vec3 morphTarget2;', 'attribute vec3 morphTarget3;', '#ifdef USE_MORPHNORMALS', 'attribute vec3 morphNormal0;', 'attribute vec3 morphNormal1;', 'attribute vec3 morphNormal2;', 'attribute vec3 morphNormal3;', '#else', 'attribute vec3 morphTarget4;', 'attribute vec3 morphTarget5;', 'attribute vec3 morphTarget6;', 'attribute vec3 morphTarget7;', '#endif', '#endif', '#ifdef USE_SKINNING', 'attribute vec4 skinVertexA;', 'attribute vec4 skinVertexB;', 'attribute vec4 skinIndex;', 'attribute vec4 skinWeight;', '#endif', ''], '\n');
  var t48 = 'precision ' + t3 + ' float;';
  t3 = t23 ? '#extension GL_OES_standard_derivatives : enable' : '';
  t4 = '#define MAX_DIR_LIGHTS ' + $.S(maxDirLights);
  t5 = '#define MAX_POINT_LIGHTS ' + $.S(maxPointLights);
  t7 = '#define MAX_SPOT_LIGHTS ' + $.S(maxSpotLights);
  t9 = '#define MAX_SHADOWS ' + $.S(maxShadows);
  t11 = !$.eqB(alphaTest, 0) ? '#define ALPHATEST ' + $.S(alphaTest) : '';
  t6 = t6 ? '#define GAMMA_INPUT' : '';
  t8 = t8 ? '#define GAMMA_OUTPUT' : '';
  t10 = t10 ? '#define PHYSICALLY_BASED_SHADING' : '';
  t12 = useFog === true;
  t13 = t12 && !(fog == null) ? '#define USE_FOG' : '';
  t12 = t12 && typeof fog === 'object' && fog !== null && !!fog.is$FogExp2 ? '#define FOG_EXP2' : '';
  t14 = t17 ? '#define USE_MAP' : '';
  t15 = t19 ? '#define USE_ENVMAP' : '';
  t16 = t21 ? '#define USE_LIGHTMAP' : '';
  t17 = t23 ? '#define USE_BUMPMAP' : '';
  t18 = t25 ? '#define USE_SPECULARMAP' : '';
  t19 = !$.eqB(vertexColors, 0) ? '#define USE_COLOR' : '';
  t20 = metal === true ? '#define METAL' : '';
  t21 = t35 ? '#define PHONG_PER_PIXEL' : '';
  t22 = t37 ? '#define WRAP_AROUND' : '';
  t23 = t39 ? '#define DOUBLE_SIDED' : '';
  t24 = t41 ? '#define USE_SHADOWMAP' : '';
  t25 = t43 ? '#define SHADOWMAP_SOFT' : '';
  t26 = shadowMapDebug ? '#define SHADOWMAP_DEBUG' : '';
  var glFragmentShader = this.getShader$2('fragment', $.S($.Strings_join([t48, t3, t4, t5, t7, t9, t11, t6, t8, t10, t13, t12, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t46 ? '#define SHADOWMAP_CASCADE' : '', 'uniform mat4 viewMatrix;', 'uniform vec3 cameraPosition;', ''], '\n')) + $.S(fragmentShader));
  var glVertexShader = this.getShader$2('vertex', $.S(prefix_vertex) + $.S(vertexShader));
  this._gl.attachShader$2(glprogram, glVertexShader);
  this._gl.attachShader$2(glprogram, glFragmentShader);
  this._gl.linkProgram$1(glprogram);
  if (this._gl.getProgramParameter$2(glprogram, 35714) !== true) {
    var status$ = this._gl.getProgramParameter$2(glprogram, 35715);
    var error = this._gl.getError$0();
    $.print('Could not initialise shader\nVALIDATE_STATUS: ' + $.S(status$) + ', gl error [' + $.S(error) + ']');
  }
  this._gl.deleteShader$1(glFragmentShader);
  this._gl.deleteShader$1(glVertexShader);
  t3 = this._programs_counter;
  this._programs_counter = t3 + 1;
  program = $.Program$(t3, glprogram, code, 1);
  t1.identifiers_1 = null;
  t1.identifiers_1 = ['viewMatrix', 'modelViewMatrix', 'projectionMatrix', 'normalMatrix', 'modelMatrix', 'cameraPosition', 'morphTargetInfluences'];
  t3 = t1.identifiers_1;
  if (t29)
    $.add$1(t3, 'boneTexture');
  else
    $.add$1(t3, 'boneGlobalMatrices');
  $.forEach(uniforms, new $.WebGLRenderer_buildProgram_anon(t1));
  this.cacheUniformLocations$2(program, t1.identifiers_1);
  t1.identifiers_1 = ['position', 'normal', 'uv', 'uv2', 'tangent', 'color', 'skinVertexA', 'skinVertexB', 'skinIndex', 'skinWeight'];
  for (var i = 0; $.ltB(i, maxMorphTargets); ++i)
    $.add$1(t1.identifiers_1, 'morphTarget' + $.S(i));
  for (i = 0; $.ltB(i, maxMorphNormals); ++i)
    $.add$1(t1.identifiers_1, 'morphNormal' + $.S(i));
  if (!(attributes == null))
    $.forEach(attributes, new $.WebGLRenderer_buildProgram_anon0(t1));
  this.cacheAttributeLocations$2(program, t1.identifiers_1);
  t2.push(program);
  t2 = t2.length;
  this.info.get$memory().set$programs(t2);
  return program;
},
 buildProgram$36$alphaTest$boneTextureHeight$boneTextureWidth$bumpMap$doubleSided$envMap$fog$lightMap$map$maxBones$maxDirLights$maxMorphNormals$maxMorphTargets$maxPointLights$maxShadows$maxSpotLights$metal$morphNormals$morphTargets$perPixel$shadowMapCascade$shadowMapDebug$shadowMapEnabled$shadowMapSoft$sizeAttenuation$skinning$specularMap$useFog$useVertexTexture$vertexColors$wrapAround: function(shaderID,fragmentShader,vertexShader,uniforms,attributes,alphaTest,boneTextureHeight,boneTextureWidth,bumpMap,doubleSided,envMap,fog,lightMap,map,maxBones,maxDirLights,maxMorphNormals,maxMorphTargets,maxPointLights,maxShadows,maxSpotLights,metal,morphNormals,morphTargets,perPixel,shadowMapCascade,shadowMapDebug,shadowMapEnabled,shadowMapSoft,sizeAttenuation,skinning,specularMap,useFog,useVertexTexture,vertexColors,wrapAround) {
  return this.buildProgram$36(shaderID,fragmentShader,vertexShader,uniforms,attributes,maxDirLights,maxPointLights,maxSpotLights,maxShadows,maxBones,map,envMap,lightMap,bumpMap,specularMap,vertexColors,skinning,useVertexTexture,boneTextureWidth,boneTextureHeight,morphTargets,morphNormals,perPixel,wrapAround,doubleSided,shadowMapEnabled,shadowMapSoft,shadowMapDebug,shadowMapCascade,sizeAttenuation,fog,useFog,maxMorphTargets,maxMorphNormals,alphaTest,metal)
},
 cacheUniformLocations$2: function(program, identifiers) {
  if (typeof identifiers !== 'string' && (typeof identifiers !== 'object' || identifiers === null || identifiers.constructor !== Array && !identifiers.is$JavaScriptIndexingBehavior()))
    return this.cacheUniformLocations$2$bailout(1, program, identifiers);
  var l = identifiers.length;
  for (var t1 = program.glProgram, i = 0, id = null; i < l; ++i) {
    if (i < 0 || i >= identifiers.length)
      throw $.ioore(i);
    id = identifiers[i];
    $.indexSet(program.uniforms, id, this._gl.getUniformLocation$2(t1, id));
  }
},
 cacheUniformLocations$2$bailout: function(state, program, identifiers) {
  var l = $.get$length(identifiers);
  for (var t1 = program.glProgram, i = 0, id = null; $.ltB(i, l); ++i) {
    id = $.index(identifiers, i);
    $.indexSet(program.uniforms, id, this._gl.getUniformLocation$2(t1, id));
  }
},
 cacheAttributeLocations$2: function(program, identifiers) {
  if (typeof identifiers !== 'string' && (typeof identifiers !== 'object' || identifiers === null || identifiers.constructor !== Array && !identifiers.is$JavaScriptIndexingBehavior()))
    return this.cacheAttributeLocations$2$bailout(1, program, identifiers, 0, 0);
  var l = identifiers.length;
  var t1 = program.attributes;
  if (typeof t1 !== 'object' || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
    return this.cacheAttributeLocations$2$bailout(2, program, identifiers, t1, l);
  var t3 = program.glProgram;
  var i = 0;
  var id = null;
  for (; i < l; ++i) {
    if (i < 0 || i >= identifiers.length)
      throw $.ioore(i);
    id = identifiers[i];
    var t2 = this._gl.getAttribLocation$2(t3, id);
    if (id !== (id | 0))
      throw $.iae(id);
    if (id < 0 || id >= t1.length)
      throw $.ioore(id);
    t1[id] = t2;
  }
},
 cacheAttributeLocations$2$bailout: function(state, env0, env1, env2, env3) {
  switch (state) {
    case 1:
      var program = env0;
      var identifiers = env1;
      break;
    case 2:
      program = env0;
      identifiers = env1;
      t1 = env2;
      l = env3;
      break;
  }
  switch (state) {
    case 0:
    case 1:
      state = 0;
      var l = $.get$length(identifiers);
      var t1 = program.attributes;
    case 2:
      state = 0;
      var t3 = program.glProgram;
      var i = 0;
      var id = null;
      for (; $.ltB(i, l); ++i) {
        id = $.index(identifiers, i);
        $.indexSet(t1, id, this._gl.getAttribLocation$2(t3, id));
      }
  }
},
 addLineNumbers$1: function(string) {
  var chunks = string.split('\n');
  if (typeof chunks !== 'object' || chunks === null || (chunks.constructor !== Array || !!chunks.immutable$list) && !chunks.is$JavaScriptIndexingBehavior())
    return this.addLineNumbers$1$bailout(1, chunks);
  var il = chunks.length;
  for (var i = 0; i < il; ++i) {
    var t1 = $.S(i + 1) + ':';
    if (i < 0 || i >= chunks.length)
      throw $.ioore(i);
    var t2 = t1 + $.S(chunks[i]);
    if (i < 0 || i >= chunks.length)
      throw $.ioore(i);
    chunks[i] = t2;
  }
  return chunks.join$1('\n');
},
 addLineNumbers$1$bailout: function(state, chunks) {
  var il = $.get$length(chunks);
  for (var i = 0; $.ltB(i, il); ++i)
    $.indexSet(chunks, i, $.S(i + 1) + ':' + $.S($.index(chunks, i)));
  return chunks.join$1('\n');
},
 getShader$2: function(type, string) {
  if (type === 'fragment')
    var shader = this._gl.createShader$1(35632);
  else
    shader = type === 'vertex' ? this._gl.createShader$1(35633) : null;
  this._gl.shaderSource$2(shader, string);
  this._gl.compileShader$1(shader);
  if (this._gl.getShaderParameter$2(shader, 35713) !== true) {
    $.print(this._gl.getShaderInfoLog$1(shader));
    $.print(this.addLineNumbers$1(string));
    return;
  }
  return shader;
},
 isPowerOfTwo$1: function(value) {
  return $.and(value, $.sub(value, 1)) === 0;
},
 setTextureParameters$3: function(textureType, texture, isImagePowerOfTwo) {
  var t1 = this._gl;
  if (isImagePowerOfTwo) {
    t1.texParameteri$3(textureType, 10242, this.paramThreeToGL$1(texture.get$wrapS()));
    this._gl.texParameteri$3(textureType, 10243, this.paramThreeToGL$1(texture.get$wrapT()));
    this._gl.texParameteri$3(textureType, 10240, this.paramThreeToGL$1(texture.get$magFilter()));
    this._gl.texParameteri$3(textureType, 10241, this.paramThreeToGL$1(texture.get$minFilter()));
  } else {
    t1.texParameteri$3(textureType, 10242, 33071);
    this._gl.texParameteri$3(textureType, 10243, 33071);
    this._gl.texParameteri$3(textureType, 10240, this.filterFallback$1(texture.get$magFilter()));
    this._gl.texParameteri$3(textureType, 10241, this.filterFallback$1(texture.get$minFilter()));
  }
  if (!(this._glExtensionTextureFilterAnisotropic == null) && !(texture.get$type() === 15))
    if ($.gtB(texture.get$anisotropy(), 1) || !($.index(texture, '__oldAnisotropy') == null)) {
      this._gl.texParameterf$3(textureType, 34046, $.min(texture.get$anisotropy(), this.maxAnisotropy));
      $.indexSet(texture, '__oldAnisotropy', texture.get$anisotropy());
    }
},
 setTexture$2: function(texture, slot) {
  if (texture.get$needsUpdate() === true) {
    if ($.index(texture, '__webglInit') == null) {
      $.indexSet(texture, '__webglInit', true);
      $.indexSet(texture, '__webglTexture', this._gl.createTexture$0());
      var t1 = this.info.memory;
      var t2 = t1.get$textures();
      if (typeof t2 !== 'number')
        return this.setTexture$2$bailout(1, texture, slot, t1, t2);
      t1.set$textures(t2 + 1);
    }
    t1 = this._gl;
    if (typeof slot !== 'number')
      throw $.iae(slot);
    t1.activeTexture$1(33984 + slot);
    this._gl.bindTexture$2(3553, $.index(texture, '__webglTexture'));
    t1 = this._gl;
    t1.pixelStorei$2(37440, texture.get$flipY() === true ? 1 : 0);
    t1 = this._gl;
    t1.pixelStorei$2(37441, texture.get$premultiplyAlpha() === true ? 1 : 0);
    var image = texture.get$image();
    var isImagePowerOfTwo = this.isPowerOfTwo$1(image.get$width()) === true && this.isPowerOfTwo$1(image.get$height()) === true;
    var glFormat = this.paramThreeToGL$1(texture.get$format());
    var glType = this.paramThreeToGL$1(texture.get$type());
    this.setTextureParameters$3(3553, texture, isImagePowerOfTwo);
    t1 = typeof texture === 'object' && texture !== null && !!texture.is$DataTexture;
    t2 = this._gl;
    if (t1)
      t2.texImage2D$9(3553, 0, glFormat, image.get$width(), image.get$height(), 0, glFormat, glType, image.get$data());
    else
      t2.texImage2D$6(3553, 0, glFormat, glFormat, glType, texture.get$image());
    if (texture.get$generateMipmaps() === true && isImagePowerOfTwo)
      this._gl.generateMipmap$1(3553);
    texture.set$needsUpdate(false);
    if (!(texture.get$onUpdate() == null))
      texture.onUpdate$0();
  } else {
    t1 = this._gl;
    if (typeof slot !== 'number')
      throw $.iae(slot);
    t1.activeTexture$1(33984 + slot);
    this._gl.bindTexture$2(3553, $.index(texture, '__webglTexture'));
  }
},
 setTexture$2$bailout: function(state, env0, env1, env2, env3) {
  switch (state) {
    case 1:
      var texture = env0;
      var slot = env1;
      t1 = env2;
      t2 = env3;
      break;
  }
  switch (state) {
    case 0:
    case 1:
      if (state === 1 || state === 0 && texture.get$needsUpdate() === true)
        switch (state) {
          case 0:
          case 1:
            if (state === 1 || state === 0 && $.index(texture, '__webglInit') == null)
              switch (state) {
                case 0:
                  $.indexSet(texture, '__webglInit', true);
                  $.indexSet(texture, '__webglTexture', this._gl.createTexture$0());
                  var t1 = this.info.get$memory();
                  var t2 = t1.get$textures();
                case 1:
                  state = 0;
                  t1.set$textures($.add(t2, 1));
              }
            t1 = this._gl;
            if (typeof slot !== 'number')
              throw $.iae(slot);
            t1.activeTexture$1(33984 + slot);
            this._gl.bindTexture$2(3553, $.index(texture, '__webglTexture'));
            t1 = this._gl;
            t1.pixelStorei$2(37440, texture.get$flipY() === true ? 1 : 0);
            t1 = this._gl;
            t1.pixelStorei$2(37441, texture.get$premultiplyAlpha() === true ? 1 : 0);
            var image = texture.get$image();
            var isImagePowerOfTwo = this.isPowerOfTwo$1(image.get$width()) === true && this.isPowerOfTwo$1(image.get$height()) === true;
            var glFormat = this.paramThreeToGL$1(texture.get$format());
            var glType = this.paramThreeToGL$1(texture.get$type());
            this.setTextureParameters$3(3553, texture, isImagePowerOfTwo);
            t1 = typeof texture === 'object' && texture !== null && !!texture.is$DataTexture;
            t2 = this._gl;
            if (t1)
              t2.texImage2D$9(3553, 0, glFormat, image.get$width(), image.get$height(), 0, glFormat, glType, image.get$data());
            else
              t2.texImage2D$6(3553, 0, glFormat, glFormat, glType, texture.get$image());
            if (texture.get$generateMipmaps() === true && isImagePowerOfTwo)
              this._gl.generateMipmap$1(3553);
            texture.set$needsUpdate(false);
            if (!(texture.get$onUpdate() == null))
              texture.onUpdate$0();
        }
      else {
        t1 = this._gl;
        if (typeof slot !== 'number')
          throw $.iae(slot);
        t1.activeTexture$1(33984 + slot);
        this._gl.bindTexture$2(3553, $.index(texture, '__webglTexture'));
      }
  }
},
 clampToMaxSize$2: function(image, maxSize) {
  if (typeof maxSize !== 'number')
    return this.clampToMaxSize$2$bailout(1, image, maxSize, 0, 0, 0);
  var t1 = image.get$width();
  if (typeof t1 !== 'number')
    return this.clampToMaxSize$2$bailout(2, image, maxSize, t1, 0, 0);
  if (t1 <= maxSize) {
    t1 = image.get$height();
    if (typeof t1 !== 'number')
      return this.clampToMaxSize$2$bailout(3, image, maxSize, t1, 0, 0);
    t1 = t1 <= maxSize;
  } else
    t1 = false;
  if (t1)
    return image;
  var maxDimension = $.max(image.get$width(), image.get$height());
  t1 = image.get$width();
  if (typeof t1 !== 'number')
    return this.clampToMaxSize$2$bailout(4, image, maxSize, maxDimension, t1, 0);
  var newWidth = $.floor(t1 * maxSize / maxDimension);
  var t3 = image.get$height();
  if (typeof t3 !== 'number')
    return this.clampToMaxSize$2$bailout(5, image, maxSize, newWidth, maxDimension, t3);
  var newHeight = $.floor(t3 * maxSize / maxDimension);
  var canvas = $._Elements_CanvasElement(null, null);
  canvas.set$width(newWidth);
  canvas.set$height(newHeight);
  canvas.get$context2d().drawImage$9(image, 0, 0, image.get$width(), image.get$height(), 0, 0, newWidth, newHeight);
  return canvas;
},
 clampToMaxSize$2$bailout: function(state, env0, env1, env2, env3, env4) {
  switch (state) {
    case 1:
      var image = env0;
      var maxSize = env1;
      break;
    case 2:
      image = env0;
      maxSize = env1;
      t1 = env2;
      break;
    case 3:
      image = env0;
      maxSize = env1;
      t1 = env2;
      break;
    case 4:
      image = env0;
      maxSize = env1;
      maxDimension = env2;
      t1 = env3;
      break;
    case 5:
      image = env0;
      maxSize = env1;
      newWidth = env2;
      maxDimension = env3;
      t3 = env4;
      break;
  }
  switch (state) {
    case 0:
    case 1:
      state = 0;
      var t1 = image.get$width();
    case 2:
      state = 0;
    case 3:
      if (state === 3 || state === 0 && $.leB(t1, maxSize))
        switch (state) {
          case 0:
            t1 = image.get$height();
          case 3:
            state = 0;
            t1 = $.leB(t1, maxSize);
        }
      else
        t1 = false;
      if (t1)
        return image;
      var maxDimension = $.max(image.get$width(), image.get$height());
      t1 = image.get$width();
    case 4:
      state = 0;
      var newWidth = $.floor($.div($.mul(t1, maxSize), maxDimension));
      var t3 = image.get$height();
    case 5:
      state = 0;
      var newHeight = $.floor($.div($.mul(t3, maxSize), maxDimension));
      var canvas = $._Elements_CanvasElement(null, null);
      canvas.set$width(newWidth);
      canvas.set$height(newHeight);
      canvas.get$context2d().drawImage$9(image, 0, 0, image.get$width(), image.get$height(), 0, 0, newWidth, newHeight);
      return canvas;
  }
},
 setCubeTexture$2: function(texture, slot) {
  if ($.get$length(texture.get$image()) === 6)
    if (texture.get$needsUpdate() === true) {
      if ($.index(texture.get$image(), '__webglTextureCube') !== true)
        $.indexSet(texture.get$image(), '__webglTextureCube', this._gl.createTexture$0());
      var t1 = this._gl;
      if (typeof slot !== 'number')
        throw $.iae(slot);
      t1.activeTexture$1(33984 + slot);
      this._gl.bindTexture$2(34067, $.index(texture.get$image(), '__webglTextureCube'));
      t1 = this._gl;
      t1.pixelStorei$2(37440, texture.get$flipY() === true ? 1 : 0);
      var cubeImage = [];
      for (var t1 = this.autoScaleCubemaps, t2 = this.maxCubemapSize, i = 0; i < 6; ++i) {
        var t3 = texture.get$image();
        if (typeof t3 !== 'string' && (typeof t3 !== 'object' || t3 === null || t3.constructor !== Array && !t3.is$JavaScriptIndexingBehavior()))
          return this.setCubeTexture$2$bailout(1, texture, t2, cubeImage, t1, i, t3);
        var t5 = t3.length;
        if (t1) {
          if (i < 0 || i >= t5)
            throw $.ioore(i);
          var t4 = this.clampToMaxSize$2(t3[i], t2);
          if (i < 0 || i >= cubeImage.length)
            throw $.ioore(i);
          cubeImage[i] = t4;
        } else {
          if (i < 0 || i >= t5)
            throw $.ioore(i);
          t3 = t3[i];
          if (i < 0 || i >= cubeImage.length)
            throw $.ioore(i);
          cubeImage[i] = t3;
        }
      }
      if (0 >= cubeImage.length)
        throw $.ioore(0);
      var image = cubeImage[0];
      var isImagePowerOfTwo = this.isPowerOfTwo$1($.get$dynamic(image).get$width()) === true && this.isPowerOfTwo$1($.get$dynamic(image).get$height()) === true;
      var glFormat = this.paramThreeToGL$1(texture.get$format());
      var glType = this.paramThreeToGL$1(texture.get$type());
      this.setTextureParameters$3(34067, texture, isImagePowerOfTwo);
      for (i = 0; i < 6; ++i) {
        t1 = this._gl;
        t2 = 34069 + i;
        if (i < 0 || i >= cubeImage.length)
          throw $.ioore(i);
        t1.texImage2D$6(t2, 0, glFormat, glFormat, glType, cubeImage[i]);
      }
      if (texture.get$generateMipmaps() === true && isImagePowerOfTwo)
        this._gl.generateMipmap$1(34067);
      texture.set$needsUpdate(false);
      if (texture.get$onUpdate() === true)
        texture.onUpdate$0();
    } else {
      t1 = this._gl;
      if (typeof slot !== 'number')
        throw $.iae(slot);
      t1.activeTexture$1(33984 + slot);
      this._gl.bindTexture$2(34067, $.index(texture.get$image(), '__webglTextureCube'));
    }
},
 setCubeTexture$2$bailout: function(state, env0, env1, env2, env3, env4, env5) {
  switch (state) {
    case 1:
      var texture = env0;
      t2 = env1;
      cubeImage = env2;
      t1 = env3;
      i = env4;
      t3 = env5;
      break;
  }
  switch (state) {
    case 0:
    case 1:
      if (state === 1 || state === 0 && $.get$length(texture.get$image()) === 6)
        switch (state) {
          case 0:
          case 1:
            if (state === 1 || state === 0 && texture.get$needsUpdate() === true)
              switch (state) {
                case 0:
                  if ($.index(texture.get$image(), '__webglTextureCube') !== true)
                    $.indexSet(texture.get$image(), '__webglTextureCube', this._gl.createTexture$0());
                  var t1 = this._gl;
                  if (typeof slot !== 'number')
                    throw $.iae(slot);
                  t1.activeTexture$1(33984 + slot);
                  this._gl.bindTexture$2(34067, $.index(texture.get$image(), '__webglTextureCube'));
                  t1 = this._gl;
                  t1.pixelStorei$2(37440, texture.get$flipY() === true ? 1 : 0);
                  var cubeImage = [];
                  t1 = this.autoScaleCubemaps === true;
                  var t2 = this.maxCubemapSize;
                  var i = 0;
                case 1:
                  L0:
                    while (true)
                      switch (state) {
                        case 0:
                          if (!(i < 6))
                            break L0;
                          var t3 = texture.get$image();
                        case 1:
                          state = 0;
                          if (t1) {
                            var t4 = this.clampToMaxSize$2($.index(t3, i), t2);
                            if (i < 0 || i >= cubeImage.length)
                              throw $.ioore(i);
                            cubeImage[i] = t4;
                          } else {
                            t3 = $.index(t3, i);
                            if (i < 0 || i >= cubeImage.length)
                              throw $.ioore(i);
                            cubeImage[i] = t3;
                          }
                          ++i;
                      }
                  if (0 >= cubeImage.length)
                    throw $.ioore(0);
                  var image = cubeImage[0];
                  var isImagePowerOfTwo = this.isPowerOfTwo$1($.get$dynamic(image).get$width()) === true && this.isPowerOfTwo$1($.get$dynamic(image).get$height()) === true;
                  var glFormat = this.paramThreeToGL$1(texture.get$format());
                  var glType = this.paramThreeToGL$1(texture.get$type());
                  this.setTextureParameters$3(34067, texture, isImagePowerOfTwo);
                  for (i = 0; i < 6; ++i) {
                    t1 = this._gl;
                    t2 = 34069 + i;
                    if (i < 0 || i >= cubeImage.length)
                      throw $.ioore(i);
                    t1.texImage2D$6(t2, 0, glFormat, glFormat, glType, cubeImage[i]);
                  }
                  if (texture.get$generateMipmaps() === true && isImagePowerOfTwo)
                    this._gl.generateMipmap$1(34067);
                  texture.set$needsUpdate(false);
                  if (texture.get$onUpdate() === true)
                    texture.onUpdate$0();
              }
            else {
              t1 = this._gl;
              if (typeof slot !== 'number')
                throw $.iae(slot);
              t1.activeTexture$1(33984 + slot);
              this._gl.bindTexture$2(34067, $.index(texture.get$image(), '__webglTextureCube'));
            }
        }
  }
},
 setCubeTextureDynamic$2: function(texture, slot) {
  var t1 = this._gl;
  if (typeof slot !== 'number')
    throw $.iae(slot);
  t1.activeTexture$1(33984 + slot);
  this._gl.bindTexture$2(34067, texture.operator$index$1('__webglTexture'));
},
 setupFrameBuffer$3: function(framebuffer, renderTarget, textureTarget) {
  this._gl.bindFramebuffer$2(36160, framebuffer);
  this._gl.framebufferTexture2D$5(36160, 36064, textureTarget, renderTarget.operator$index$1('__webglTexture'), 0);
},
 setupRenderBuffer$2: function(renderbuffer, renderTarget) {
  this._gl.bindRenderbuffer$2(36161, renderbuffer);
  var t1 = renderTarget.get$depthBuffer() === true;
  if (t1 && renderTarget.get$stencilBuffer() !== true) {
    this._gl.renderbufferStorage$4(36161, 33189, renderTarget.get$width(), renderTarget.get$height());
    this._gl.framebufferRenderbuffer$4(36160, 36096, 36161, renderbuffer);
  } else {
    t1 = t1 && renderTarget.get$stencilBuffer() === true;
    var t2 = this._gl;
    if (t1) {
      t2.renderbufferStorage$4(36161, 34041, renderTarget.get$width(), renderTarget.get$height());
      this._gl.framebufferRenderbuffer$4(36160, 33306, 36161, renderbuffer);
    } else
      t2.renderbufferStorage$4(36161, 32854, renderTarget.get$width(), renderTarget.get$height());
  }
},
 setRenderTarget$1: function(renderTarget) {
  var isCube = typeof renderTarget === 'object' && renderTarget !== null && !!renderTarget.is$WebGLRenderTargetCube;
  if (!(renderTarget == null) && renderTarget.get$__webglFramebuffer() == null) {
    if (renderTarget.get$depthBuffer() == null)
      renderTarget.set$depthBuffer(true);
    if (renderTarget.get$stencilBuffer() == null)
      renderTarget.set$stencilBuffer(true);
    renderTarget.set$__webglTexture(this._gl.createTexture$0());
    var isTargetPowerOfTwo = this.isPowerOfTwo$1(renderTarget.get$width()) === true && this.isPowerOfTwo$1(renderTarget.get$height()) === true;
    var glFormat = this.paramThreeToGL$1(renderTarget.get$format());
    var glType = this.paramThreeToGL$1(renderTarget.get$type());
    if (isCube) {
      renderTarget.__webglFramebuffer = [];
      renderTarget.__webglRenderbuffer = [];
      this._gl.bindTexture$2(34067, renderTarget.__webglTexture);
      this.setTextureParameters$3(34067, renderTarget, isTargetPowerOfTwo);
      for (var i = 0; i < 6; ++i) {
        $.indexSet(renderTarget.__webglFramebuffer, i, this._gl.createFramebuffer$0());
        $.indexSet(renderTarget.__webglRenderbuffer, i, this._gl.createRenderbuffer$0());
        var t1 = this._gl;
        var t2 = 34069 + i;
        t1.texImage2D$9(t2, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);
        this.setupFrameBuffer$3($.index(renderTarget.__webglFramebuffer, i), renderTarget, t2);
        this.setupRenderBuffer$2($.index(renderTarget.__webglRenderbuffer, i), renderTarget);
      }
      if (isTargetPowerOfTwo)
        this._gl.generateMipmap$1(34067);
      renderTarget = renderTarget;
    } else {
      renderTarget.set$__webglFramebuffer(this._gl.createFramebuffer$0());
      renderTarget.set$__webglRenderbuffer(this._gl.createRenderbuffer$0());
      this._gl.bindTexture$2(3553, renderTarget.get$__webglTexture());
      this.setTextureParameters$3(3553, renderTarget, isTargetPowerOfTwo);
      this._gl.texImage2D$9(3553, 0, glFormat, renderTarget.get$width(), renderTarget.get$height(), 0, glFormat, glType, null);
      this.setupFrameBuffer$3(renderTarget.get$__webglFramebuffer(), renderTarget, 3553);
      this.setupRenderBuffer$2(renderTarget.get$__webglRenderbuffer(), renderTarget);
      if (isTargetPowerOfTwo)
        this._gl.generateMipmap$1(3553);
    }
    t1 = this._gl;
    if (isCube)
      t1.bindTexture$2(34067, null);
    else
      t1.bindTexture$2(3553, null);
    this._gl.bindRenderbuffer$2(36161, null);
    this._gl.bindFramebuffer$2(36160, null);
  }
  if (!(renderTarget == null)) {
    var framebuffer = renderTarget.get$__webglFramebuffer();
    if (isCube)
      framebuffer = $.index(framebuffer, renderTarget.get$activeCubeFace());
    var width = renderTarget.get$width();
    var height = renderTarget.get$height();
    var vx = 0;
    var vy = 0;
  } else {
    width = this._viewportWidth;
    height = this._viewportHeight;
    vx = this._viewportX;
    vy = this._viewportY;
    framebuffer = null;
  }
  t1 = this._currentFramebuffer;
  if (!(framebuffer == null ? t1 == null : framebuffer === t1)) {
    this._gl.bindFramebuffer$2(36160, framebuffer);
    this._gl.viewport$4(vx, vy, width, height);
    this._currentFramebuffer = framebuffer;
  }
  this._currentWidth = width;
  this._currentHeight = height;
},
 updateRenderTargetMipmap$1: function(renderTarget) {
  var t1 = typeof renderTarget === 'object' && renderTarget !== null && !!renderTarget.is$WebGLRenderTargetCube;
  var t2 = this._gl;
  if (t1) {
    t2.bindTexture$2(34067, renderTarget.__webglTexture);
    this._gl.generateMipmap$1(34067);
    this._gl.bindTexture$2(34067, null);
  } else {
    t2.bindTexture$2(3553, renderTarget.get$__webglTexture());
    this._gl.generateMipmap$1(3553);
    this._gl.bindTexture$2(3553, null);
  }
},
 filterFallback$1: function(f) {
  if (f === 3 || f === 4 || f === 5)
    return 9728;
  return 9729;
},
 paramThreeToGL$1: function(p) {
  if (p === 0)
    return 10497;
  if (p === 1)
    return 33071;
  if (p === 2)
    return 33648;
  if (p === 3)
    return 9728;
  if (p === 4)
    return 9984;
  if (p === 5)
    return 9986;
  if (p === 6)
    return 9729;
  if (p === 7)
    return 9985;
  if (p === 8)
    return 9987;
  if (p === 10)
    return 5121;
  if (p === 1016)
    return 32819;
  if (p === 1017)
    return 32820;
  if (p === 1018)
    return 33635;
  if (p === 9)
    return 5120;
  if (p === 11)
    return 5122;
  if (p === 12)
    return 5123;
  if (p === 13)
    return 5124;
  if (p === 14)
    return 5125;
  if (p === 15)
    return 5126;
  if (p === 16)
    return 6406;
  if (p === 17)
    return 6407;
  if (p === 18)
    return 6408;
  if (p === 19)
    return 6409;
  if (p === 20)
    return 6410;
  if (p === 100)
    return 32774;
  if (p === 101)
    return 32778;
  if (p === 102)
    return 32779;
  if (p === 200)
    return 0;
  if (p === 201)
    return 1;
  if (p === 202)
    return 768;
  if (p === 203)
    return 769;
  if (p === 204)
    return 770;
  if (p === 205)
    return 771;
  if (p === 206)
    return 772;
  if (p === 207)
    return 773;
  if (p === 208)
    return 774;
  if (p === 209)
    return 775;
  if (p === 210)
    return 776;
  $.print('[paramThreeToGL] Unknown param ' + $.S(p));
  return 0;
},
 allocateBones$1: function(object) {
  if (this.supportsBoneTextures === true && !(object == null) && typeof object === 'object' && object !== null && !!object.is$SkinnedMesh && object.useVertexTexture === true)
    return 1024;
  else {
    var nVertexMatrices = $.toInt($.floor($.div($.sub(this._gl.getParameter$1(36347), 20), 4)));
    if (!(object == null) && typeof object === 'object' && object !== null && !!object.is$SkinnedMesh) {
      var maxBones = $.min($.get$length(object.get$bones()), nVertexMatrices);
      if ($.ltB(maxBones, $.get$length(object.get$bones())))
        $.print('WebGLRenderer: too many bones - ' + $.S($.get$length(object.get$bones())) + ' , this GPU supports just ' + $.S(maxBones) + '  (try OpenGL instead of ANGLE)');
    } else
      maxBones = nVertexMatrices;
    return maxBones;
  }
},
 allocateLights$1: function(lights) {
  if (typeof lights !== 'string' && (typeof lights !== 'object' || lights === null || lights.constructor !== Array && !lights.is$JavaScriptIndexingBehavior()))
    return this.allocateLights$1$bailout(1, lights);
  var ll = lights.length;
  for (var l = 0, dirLights = 0, pointLights = 0, light = null, spotLights = 0; l < ll; ++l) {
    if (l < 0 || l >= lights.length)
      throw $.ioore(l);
    light = lights[l];
    if ((typeof light === 'object' && light !== null && !!light.is$DirectionalLight || typeof light === 'object' && light !== null && !!light.is$SpotLight) && $.get$dynamic(light).get$onlyShadow() === true)
      continue;
    if (typeof light === 'object' && light !== null && !!light.is$DirectionalLight)
      ++dirLights;
    if (typeof light === 'object' && light !== null && !!light.is$PointLight)
      ++pointLights;
    if (typeof light === 'object' && light !== null && !!light.is$SpotLight)
      ++spotLights;
  }
  var t1 = pointLights + spotLights + dirLights;
  var t2 = this.maxLights;
  if (t1 <= t2) {
    var maxPointLights = pointLights;
    var maxSpotLights = spotLights;
    var maxDirLights = dirLights;
  } else {
    maxDirLights = $.ceil(t2 * dirLights / (pointLights + dirLights));
    if (typeof maxDirLights !== 'number')
      throw $.iae(maxDirLights);
    maxPointLights = t2 - maxDirLights;
    maxSpotLights = maxPointLights;
  }
  return $.makeLiteralMap(['directional', maxDirLights, 'point', maxPointLights, 'spot', maxSpotLights]);
},
 allocateLights$1$bailout: function(state, lights) {
  var ll = $.get$length(lights);
  for (var l = 0, dirLights = 0, pointLights = 0, light = null, spotLights = 0; $.ltB(l, ll); ++l) {
    light = $.index(lights, l);
    if ((typeof light === 'object' && light !== null && !!light.is$DirectionalLight || typeof light === 'object' && light !== null && !!light.is$SpotLight) && $.get$dynamic(light).get$onlyShadow() === true)
      continue;
    if (typeof light === 'object' && light !== null && !!light.is$DirectionalLight)
      ++dirLights;
    if (typeof light === 'object' && light !== null && !!light.is$PointLight)
      ++pointLights;
    if (typeof light === 'object' && light !== null && !!light.is$SpotLight)
      ++spotLights;
  }
  var t1 = pointLights + spotLights + dirLights;
  var t2 = this.maxLights;
  if (t1 <= t2) {
    var maxPointLights = pointLights;
    var maxSpotLights = spotLights;
    var maxDirLights = dirLights;
  } else {
    maxDirLights = $.ceil(t2 * dirLights / (pointLights + dirLights));
    if (typeof maxDirLights !== 'number')
      throw $.iae(maxDirLights);
    maxPointLights = t2 - maxDirLights;
    maxSpotLights = maxPointLights;
  }
  return $.makeLiteralMap(['directional', maxDirLights, 'point', maxPointLights, 'spot', maxSpotLights]);
},
 allocateShadows$1: function(lights) {
  if (typeof lights !== 'string' && (typeof lights !== 'object' || lights === null || lights.constructor !== Array && !lights.is$JavaScriptIndexingBehavior()))
    return this.allocateShadows$1$bailout(1, lights);
  var ll = lights.length;
  for (var maxShadows = 0, l = 0, light = null; l < ll; ++l) {
    if (l < 0 || l >= lights.length)
      throw $.ioore(l);
    light = lights[l];
    if (light.get$castShadow() !== true)
      continue;
    if (typeof light === 'object' && light !== null && !!light.is$SpotLight)
      ++maxShadows;
    if (typeof light === 'object' && light !== null && !!light.is$DirectionalLight && light.get$shadowCascade() !== true)
      ++maxShadows;
  }
  return maxShadows;
},
 allocateShadows$1$bailout: function(state, lights) {
  var ll = $.get$length(lights);
  for (var maxShadows = 0, l = 0, light = null; $.ltB(l, ll); ++l) {
    light = $.index(lights, l);
    if (light.get$castShadow() !== true)
      continue;
    if (typeof light === 'object' && light !== null && !!light.is$SpotLight)
      ++maxShadows;
    if (typeof light === 'object' && light !== null && !!light.is$DirectionalLight && light.get$shadowCascade() !== true)
      ++maxShadows;
  }
  return maxShadows;
},
 initGL$0: function() {
  try {
    this._gl = this.canvas.getContext$1('experimental-webgl');
    if (this._gl == null)
      throw $.$$throw('Error creating WebGL context.');
  } catch (exception) {
    var t1 = $.unwrapException(exception);
    var error = t1;
    $.print(error);
  }

  this._glExtensionTextureFloat = this._gl.getExtension$1('OES_texture_float');
  this._glExtensionStandardDerivatives = this._gl.getExtension$1('OES_standard_derivatives');
  this._glExtensionTextureFilterAnisotropic = this._gl.getExtension$1('EXT_texture_filter_anisotropic');
  if (this._glExtensionTextureFilterAnisotropic == null)
    this._glExtensionTextureFilterAnisotropic = this._gl.getExtension$1('MOZ_EXT_texture_filter_anisotropic');
  if (this._glExtensionTextureFilterAnisotropic == null)
    this._glExtensionTextureFilterAnisotropic = this._gl.getExtension$1('WEBKIT_EXT_texture_filter_anisotropic');
  if (this._glExtensionTextureFloat == null)
    $.print('THREE.WebGLRenderer: Float textures not supported.');
  if (this._glExtensionStandardDerivatives == null)
    $.print('THREE.WebGLRenderer: Standard derivatives not supported.');
  if (this._glExtensionTextureFilterAnisotropic == null)
    $.print('THREE.WebGLRenderer: Anisotropic texture filtering not supported.');
},
 setDefaultGLState$0: function() {
  this._gl.clearColor$4(0, 0, 0, 1);
  this._gl.clearDepth$1(1);
  this._gl.clearStencil$1(0);
  this._gl.enable$1(2929);
  this._gl.depthFunc$1(515);
  this._gl.frontFace$1(2305);
  this._gl.cullFace$1(1029);
  this._gl.enable$1(2884);
  this._gl.enable$1(3042);
  this._gl.blendEquation$1(32774);
  this._gl.blendFunc$2(770, 771);
  var t1 = this._gl;
  var t2 = this.clearColor;
  t1.clearColor$4(t2.get$r(), t2.get$g(), t2.get$b(), this.clearAlpha);
},
 WebGLRenderer$10: function(canvas, precision, alpha, premultipliedAlpha, antialias, stencil, preserveDrawingBuffer, clearColor, clearAlpha, maxLights) {
  this._lights = $.makeLiteralMap(['ambient', [0, 0, 0], 'directional', $.makeLiteralMap(['length', 0, 'colors', [], 'positions', []]), 'point', $.makeLiteralMap(['length', 0, 'colors', [], 'positions', [], 'distances', []]), 'spot', $.makeLiteralMap(['length', 0, 'colors', [], 'positions', [], 'distances', [], 'directions', [], 'angles', [], 'exponents', []])]);
  if (this.canvas == null)
    this.canvas = $._Elements_CanvasElement(null, null);
  if (this.clearColor == null)
    this.clearColor = $.Color$(0);
  this.initGL$0();
  this.setDefaultGLState$0();
  this.maxVertexTextures = this._gl.getParameter$1(35660);
  this.maxTextureSize = this._gl.getParameter$1(3379);
  this.maxCubemapSize = this._gl.getParameter$1(34076);
  this.maxAnisotropy = !(this._glExtensionTextureFilterAnisotropic == null) ? this._gl.getParameter$1(34047) : 0;
  this.supportsVertexTextures = $.gt(this.maxVertexTextures, 0);
  this.supportsBoneTextures = this.supportsVertexTextures === true && !(this._glExtensionTextureFloat == null);
}
};

$$.WebGLRendererInfo = {"":
 ["memory?", "render="],
 "super": "Object",
 render$1: function(arg0) { return this.render.call$1(arg0); },
 render$2: function(arg0, arg1) { return this.render.call$2(arg0, arg1); },
 render$4: function(arg0, arg1, arg2, arg3) { return this.render.call$4(arg0, arg1, arg2, arg3); },
 WebGLRendererInfo$0: function() {
  this.memory = $.WebGLRendererMemoryInfo$();
  this.render = $.WebGLRendererRenderInfo$();
}
};

$$.WebGLRendererMemoryInfo = {"":
 ["programs=", "geometries=", "textures="],
 "super": "Object"
};

$$.WebGLRendererRenderInfo = {"":
 ["calls=", "vertices=", "faces=", "points="],
 "super": "Object"
};

$$.Program = {"":
 ["id=", "glProgram?", "code?", "usedTimes=", "attributes?", "uniforms="],
 "super": "Object"
};

$$.Buffer = {"":
 ["glbuffer", "belongsToAttribute="],
 "super": "Object"
};

$$.WebGLObject = {"":
 ["__webglInit=", "__webglActive=", "_modelViewMatrix=", "_normalMatrix=", "_normalMatrixArray", "_modelViewMatrixArray", "modelMatrixArray", "buffer=", "object?", "opaque=", "transparent=", "render=", "z=", "__webglMorphTargetInfluences="],
 "super": "Object",
 render$1: function(arg0) { return this.render.call$1(arg0); },
 render$2: function(arg0, arg1) { return this.render.call$2(arg0, arg1); },
 render$4: function(arg0, arg1, arg2, arg3) { return this.render.call$4(arg0, arg1, arg2, arg3); },
 get$geometry: function() {
  return this.get$_hasGeometry() === true ? $.get$dynamic(this.object).get$geometry() : null;
},
 get$webglgeometry: function() {
  return !(this.get$geometry() == null) ? $.WebGLGeometry_WebGLGeometry$from(this.get$geometry()) : null;
},
 get$material: function() {
  return $.get$dynamic(this.object).get$material();
},
 get$webglmaterial: function() {
  return $.WebGLMaterial_WebGLMaterial$from(this.get$material());
},
 get$matrixWorld: function() {
  return this.object.get$matrixWorld();
},
 get$_hasGeometry: function() {
  var t1 = this.object;
  return typeof t1 === 'object' && t1 !== null && !!t1.is$Mesh || typeof t1 === 'object' && t1 !== null && !!t1.is$ParticleSystem || typeof t1 === 'object' && t1 !== null && !!t1.is$Line;
},
 get$morphTargetBase: function() {
  return $.get$dynamic(this.object).get$morphTargetBase();
},
 get$receiveShadow: function() {
  return this.object.get$receiveShadow();
},
 get$morphTargetForcedOrder: function() {
  return $.propertyTypeCast(this.object, 'is$Mesh').get$morphTargetForcedOrder();
},
 get$morphTargetInfluences: function() {
  return $.propertyTypeCast(this.object, 'is$Mesh').get$morphTargetInfluences();
},
 get$useVertexTexture: function() {
  return $.get$dynamic(this.object).get$useVertexTexture();
},
 get$boneMatrices: function() {
  return $.get$dynamic(this.object).get$boneMatrices();
},
 get$boneTexture: function() {
  return $.get$dynamic(this.object).get$boneTexture();
}
};

$$.WebGLGeometry = {"":
 ["id=", "_vertices", "faces3?", "faces4?", "materialIndex?", "numMorphTargets?", "numMorphNormals?", "geometryGroups=", "geometryGroupsList=", "verticesNeedUpdate=", "morphTargetsNeedUpdate=", "elementsNeedUpdate=", "uvsNeedUpdate=", "normalsNeedUpdate=", "tangentsNeedUpdate=", "colorsNeedUpdate=", "__inittedArrays=", "__vertexArray=", "__normalArray=", "__tangentArray=", "__colorArray=", "__uvArray=", "__uv2Array=", "__skinVertexAArray=", "__skinVertexBArray=", "__skinIndexArray=", "__skinWeightArray=", "__faceArray=", "__lineArray=", "__morphTargetsArrays=", "__morphNormalsArrays=", "__webglFaceCount=", "__webglLineCount=", "__webglParticleCount=", "__webglVertexCount=", "__sortArray=", "__webglCustomAttributesList=", "__webglVertexBuffer=", "__webglNormalBuffer=", "__webglTangentBuffer=", "__webglColorBuffer=", "__webglUVBuffer=", "__webglUV2Buffer=", "__webglSkinVertexABuffer=", "__webglSkinVertexBBuffer=", "__webglSkinIndicesBuffer=", "__webglSkinWeightsBuffer=", "__webglFaceBuffer=", "__webglLineBuffer=", "__webglMorphTargetsBuffers=", "__webglMorphNormalsBuffers=", "_geometry"],
 "super": "Object",
 set$vertices: function(n) {
  this._vertices = n;
  return n;
},
 get$vertices: function() {
  var t1 = this._vertices;
  if (t1 == null && !(this._geometry == null))
    return this._geometry.get$vertices();
  return t1;
},
 get$morphTargets: function() {
  return this._geometry.get$morphTargets();
},
 get$morphNormals: function() {
  return this._geometry.get$morphNormals();
},
 get$faces: function() {
  return this._geometry.get$faces();
},
 get$Dynamic: function() {
  return this._geometry.get$Dynamic();
},
 get$faceVertexUvs: function() {
  return this._geometry.get$faceVertexUvs();
},
 get$colors: function() {
  return this._geometry.get$colors();
},
 get$skinIndices: function() {
  return this._geometry.get$skinIndices();
},
 get$skinWeights: function() {
  return this._geometry.get$skinWeights();
},
 get$skinVerticesA: function() {
  return $.index(this._geometry, 'skinVerticesA');
},
 get$skinVerticesB: function() {
  return $.index(this._geometry, 'skinVerticesB');
},
 get$hasTangents: function() {
  return this._geometry.get$hasTangents();
}
};

$$.WebGLMaterial = {"":
 ["_material", "program=", "_fragmentShader", "_vertexShader", "_uniforms", "uniformsList=", "numSupportedMorphTargets=", "numSupportedMorphNormals=", "_shadowPass?"],
 "super": "Object",
 get$attributes: function() {
  return this.get$isShaderMaterial() === true ? $.propertyTypeCast(this._material, 'is$ShaderMaterial').get$attributes() : null;
},
 get$fragmentShader: function() {
  return this.get$isShaderMaterial() === true ? $.propertyTypeCast(this._material, 'is$ShaderMaterial').get$fragmentShader() : this._fragmentShader;
},
 get$vertexShader: function() {
  return this.get$isShaderMaterial() === true ? $.propertyTypeCast(this._material, 'is$ShaderMaterial').get$vertexShader() : this._vertexShader;
},
 get$uniforms: function() {
  return this.get$isShaderMaterial() === true ? $.propertyTypeCast(this._material, 'is$ShaderMaterial').get$uniforms() : this._uniforms;
},
 set$fragmentShader: function(v) {
  if (this.get$isShaderMaterial() === true)
    $.propertyTypeCast(this._material, 'is$ShaderMaterial').set$fragmentShader(v);
  else
    this._fragmentShader = v;
  return v;
},
 set$vertexShader: function(v) {
  if (this.get$isShaderMaterial() === true)
    $.propertyTypeCast(this._material, 'is$ShaderMaterial').set$vertexShader(v);
  else
    this._vertexShader = v;
  return v;
},
 set$uniforms: function(v) {
  if (this.get$isShaderMaterial() === true)
    $.propertyTypeCast(this._material, 'is$ShaderMaterial').set$uniforms(v);
  else
    this._uniforms = v;
  return v;
},
 get$needsSmoothNormals: function() {
  return !(this._material == null) && !(this.get$shading() == null) && $.eqB(this.get$shading(), 2);
},
 get$needsNormals: function() {
  var t1 = this._material;
  return !(typeof t1 === 'object' && t1 !== null && !!t1.is$MeshBasicMaterial && this.get$envMap() == null || typeof t1 === 'object' && t1 !== null && !!t1.is$MeshDepthMaterial);
},
 get$name: function() {
  return this._material.get$name();
},
 get$id: function() {
  return this._material.get$id();
},
 get$side: function() {
  return this._material.get$side();
},
 get$opacity: function() {
  return this._material.get$opacity();
},
 get$blending: function() {
  return this._material.get$blending();
},
 get$blendSrc: function() {
  return this._material.get$blendSrc();
},
 get$blendDst: function() {
  return this._material.get$blendDst();
},
 get$blendEquation: function() {
  return this._material.get$blendEquation();
},
 blendEquation$1: function(arg0) { return this.get$blendEquation().call$1(arg0); },
 get$alphaTest: function() {
  return this._material.get$alphaTest();
},
 get$polygonOffsetFactor: function() {
  return this._material.get$polygonOffsetFactor();
},
 get$polygonOffsetUnits: function() {
  return this._material.get$polygonOffsetUnits();
},
 get$transparent: function() {
  return this._material.get$transparent();
},
 get$depthTest: function() {
  return this._material.get$depthTest();
},
 get$depthWrite: function() {
  return this._material.get$depthWrite();
},
 get$polygonOffset: function() {
  return this._material.get$polygonOffset();
},
 polygonOffset$2: function(arg0, arg1) { return this.get$polygonOffset().call$2(arg0, arg1); },
 get$visible: function() {
  return this._material.get$visible();
},
 get$needsUpdate: function() {
  return this._material.get$needsUpdate();
},
 set$needsUpdate: function(flag) {
  this._material.set$needsUpdate(flag);
  return flag;
},
 get$vertexColors: function() {
  return this.get$_hasVertexColors() === true ? $.get$dynamic(this._material).get$vertexColors() : 0;
},
 get$color: function() {
  return $.get$dynamic(this._material).get$color();
},
 get$ambient: function() {
  return $.get$dynamic(this._material).get$ambient();
},
 get$emissive: function() {
  return $.get$dynamic(this._material).get$emissive();
},
 get$lights: function() {
  return this.get$isShaderMaterial() === true && $.propertyTypeCast(this._material, 'is$ShaderMaterial').get$lights();
},
 get$morphTargets: function() {
  return this.get$_hasMorhTargets() === true && $.get$dynamic(this._material).get$morphTargets();
},
 get$morphNormals: function() {
  return this.get$_hasMorphNormals() === true && $.get$dynamic(this._material).get$morphNormals();
},
 get$metal: function() {
  return this.get$isMeshPhongMaterial() === true && $.propertyTypeCast(this._material, 'is$MeshPhongMaterial').get$metal();
},
 get$perPixel: function() {
  return this.get$isMeshPhongMaterial() === true && $.propertyTypeCast(this._material, 'is$MeshPhongMaterial').get$perPixel();
},
 get$wrapAround: function() {
  return this.get$_hasWrapAround() === true && $.get$dynamic(this._material).get$wrapAround();
},
 get$fog: function() {
  return this.get$_hasFog() === true && $.get$dynamic(this._material).get$fog();
},
 get$shading: function() {
  return $.get$dynamic(this._material).get$shading();
},
 get$map: function() {
  return this.get$_hasTextureMap() === true ? $.get$dynamic(this._material).get$map() : null;
},
 map$1: function(arg0) { return this.get$map().call$1(arg0); },
 get$envMap: function() {
  return this.get$_hasEnvMap() === true ? $.get$dynamic(this._material).get$envMap() : null;
},
 get$lightMap: function() {
  return this.get$_hasLightMap() === true ? $.get$dynamic(this._material).get$lightMap() : null;
},
 get$bumpMap: function() {
  return this.get$isMeshPhongMaterial() === true ? $.propertyTypeCast(this._material, 'is$MeshPhongMaterial').get$bumpMap() : null;
},
 get$specularMap: function() {
  return this.get$_hasSpecularMap() === true ? $.get$dynamic(this._material).get$specularMap() : null;
},
 get$wireframe: function() {
  return this.get$isLineBasicMaterial() !== true && this.get$isParticleBasicMaterial() !== true && $.get$dynamic(this._material).get$wireframe() === true;
},
 get$wireframeLinewidth: function() {
  return this.get$isLineBasicMaterial() === true ? $.get$dynamic(this._material).get$wireframeLinewidth() : null;
},
 get$linewidth: function() {
  return this.get$isLineBasicMaterial() === true ? $.get$dynamic(this._material).get$linewidth() : null;
},
 get$reflectivity: function() {
  return $.get$dynamic(this._material).get$reflectivity();
},
 get$refractionRatio: function() {
  return $.get$dynamic(this._material).get$refractionRatio();
},
 get$combine: function() {
  return $.get$dynamic(this._material).get$combine();
},
 get$skinning: function() {
  return this.get$_hasSkinning() === true && $.get$dynamic(this._material).get$skinning();
},
 get$sizeAttenuation: function() {
  return this.get$isParticleBasicMaterial() === true && $.propertyTypeCast(this._material, 'is$ParticleBasicMaterial').get$sizeAttenuation();
},
 get$size: function() {
  return this.get$isParticleBasicMaterial() === true ? $.propertyTypeCast(this._material, 'is$ParticleBasicMaterial').get$size() : null;
},
 get$isShaderMaterial: function() {
  var t1 = this._material;
  return typeof t1 === 'object' && t1 !== null && !!t1.is$ShaderMaterial;
},
 get$isMeshDepthMaterial: function() {
  var t1 = this._material;
  return typeof t1 === 'object' && t1 !== null && !!t1.is$MeshDepthMaterial;
},
 get$isMeshNormalMaterial: function() {
  var t1 = this._material;
  return typeof t1 === 'object' && t1 !== null && !!t1.is$MeshNormalMaterial;
},
 get$isMeshBasicMaterial: function() {
  var t1 = this._material;
  return typeof t1 === 'object' && t1 !== null && !!t1.is$MeshBasicMaterial;
},
 get$isMeshLambertMaterial: function() {
  var t1 = this._material;
  return typeof t1 === 'object' && t1 !== null && !!t1.is$MeshLambertMaterial;
},
 get$isMeshPhongMaterial: function() {
  var t1 = this._material;
  return typeof t1 === 'object' && t1 !== null && !!t1.is$MeshPhongMaterial;
},
 get$isLineBasicMaterial: function() {
  var t1 = this._material;
  return typeof t1 === 'object' && t1 !== null && !!t1.is$LineBasicMaterial;
},
 get$isParticleBasicMaterial: function() {
  var t1 = this._material;
  return typeof t1 === 'object' && t1 !== null && !!t1.is$ParticleBasicMaterial;
},
 get$_hasWrapAround: function() {
  return this.get$isMeshLambertMaterial() === true || this.get$isMeshPhongMaterial() === true;
},
 get$_hasLightMap: function() {
  return this.get$isMeshBasicMaterial() === true || this.get$isMeshLambertMaterial() === true || this.get$isMeshPhongMaterial() === true;
},
 get$_hasEnvMap: function() {
  return this.get$isMeshBasicMaterial() === true || this.get$isMeshLambertMaterial() === true || this.get$isMeshPhongMaterial() === true;
},
 get$_hasSpecularMap: function() {
  return this.get$isMeshBasicMaterial() === true || this.get$isMeshLambertMaterial() === true || this.get$isMeshPhongMaterial() === true;
},
 get$_hasTextureMap: function() {
  return this.get$isMeshBasicMaterial() === true || this.get$isMeshLambertMaterial() === true || this.get$isMeshPhongMaterial() === true || this.get$isParticleBasicMaterial() === true;
},
 get$_hasSkinning: function() {
  return this.get$isMeshBasicMaterial() === true || this.get$isMeshLambertMaterial() === true || this.get$isMeshPhongMaterial() === true || this.get$isShaderMaterial() === true;
},
 get$_hasMorhTargets: function() {
  return this.get$isMeshBasicMaterial() === true || this.get$isMeshLambertMaterial() === true || this.get$isMeshPhongMaterial() === true || this.get$isShaderMaterial() === true;
},
 get$_hasMorphNormals: function() {
  return this.get$isMeshLambertMaterial() === true || this.get$isMeshPhongMaterial() === true || this.get$isShaderMaterial() === true;
},
 get$_hasVertexColors: function() {
  return this.get$isLineBasicMaterial() === true || this.get$isMeshBasicMaterial() === true || this.get$isMeshLambertMaterial() === true || this.get$isMeshPhongMaterial() === true || this.get$isParticleBasicMaterial() === true || this.get$isShaderMaterial() === true;
},
 get$_hasFog: function() {
  return this.get$isLineBasicMaterial() === true || this.get$isMeshBasicMaterial() === true || this.get$isMeshLambertMaterial() === true || this.get$isMeshPhongMaterial() === true || this.get$isParticleBasicMaterial() === true || this.get$isShaderMaterial() === true;
}
};

$$.WebGLCamera = {"":
 ["_camera", "_viewMatrixArray?", "_projectionMatrixArray?"],
 "super": "Object",
 get$near: function() {
  return this._camera.get$near();
},
 get$far: function() {
  return this._camera.get$far();
},
 get$parent: function() {
  return this._camera.get$parent();
},
 get$matrixWorld: function() {
  return this._camera.get$matrixWorld();
},
 get$matrixWorldInverse: function() {
  return this._camera.get$matrixWorldInverse();
},
 get$projectionMatrix: function() {
  return this._camera.get$projectionMatrix();
},
 updateMatrixWorld$1: function(force) {
  return this._camera.updateMatrixWorld$0();
},
 updateMatrixWorld$0: function() {
  return this.updateMatrixWorld$1(false)
}
};

$$.Uniform = {"":
 ["type?", "value=", "texture="],
 "super": "Object"
};

$$.Scene = {"":
 ["fog?", "overrideMaterial?", "objects", "lights?", "__objectsAdded?", "__objectsRemoved?", "id", "name", "properties", "parent", "children", "up", "position", "rotation", "scale", "eulerOrder", "_dynamic", "doubleSided", "flipSided", "rotationAutoUpdate", "renderDepth", "matrix", "matrixWorld", "matrixRotationWorld", "matrixAutoUpdate", "matrixWorldNeedsUpdate", "quaternion", "useQuaternion", "boundRadius", "boundRadiusScale", "visible", "castShadow", "receiveShadow", "frustumCulled", "_vector", "__data"],
 "super": "Object3D",
 addObject$1: function(object) {
  if (typeof object === 'object' && object !== null && !!object.is$Light) {
    var t1 = this.lights;
    if ($.indexOf$1(t1, object) === -1)
      t1.push(object);
  } else if (!(typeof object === 'object' && object !== null && !!object.is$Camera || typeof object === 'object' && object !== null && !!object.is$Bone)) {
    t1 = this.objects;
    if ($.indexOf$1(t1, object) === -1) {
      t1.push(object);
      this.__objectsAdded.push(object);
      t1 = this.__objectsRemoved;
      var i = $.indexOf$1(t1, object);
      if (!(i === -1))
        $.removeRange(t1, i, 1);
    }
  }
  var c = 0;
  while (true) {
    t1 = $.get$length(object.get$children());
    if (typeof t1 !== 'number')
      return this.addObject$1$bailout(1, object, c, t1);
    if (!(c < t1))
      break;
    t1 = object.get$children();
    if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.addObject$1$bailout(2, object, c, t1);
    if (c < 0 || c >= t1.length)
      throw $.ioore(c);
    this.addObject$1(t1[c]);
    ++c;
  }
},
 addObject$1$bailout: function(state, env0, env1, env2) {
  switch (state) {
    case 1:
      var object = env0;
      c = env1;
      t1 = env2;
      break;
    case 2:
      object = env0;
      c = env1;
      t1 = env2;
      break;
  }
  switch (state) {
    case 0:
      if (typeof object === 'object' && object !== null && !!object.is$Light) {
        var t1 = this.lights;
        if ($.indexOf$1(t1, object) === -1)
          t1.push(object);
      } else if (!(typeof object === 'object' && object !== null && !!object.is$Camera || typeof object === 'object' && object !== null && !!object.is$Bone)) {
        t1 = this.objects;
        if ($.indexOf$1(t1, object) === -1) {
          t1.push(object);
          this.__objectsAdded.push(object);
          t1 = this.__objectsRemoved;
          var i = $.indexOf$1(t1, object);
          if (!(i === -1))
            $.removeRange(t1, i, 1);
        }
      }
      var c = 0;
    default:
      L0:
        while (true)
          switch (state) {
            case 0:
              t1 = $.get$length(object.get$children());
            case 1:
              state = 0;
              if (!$.ltB(c, t1))
                break L0;
              t1 = object.get$children();
            case 2:
              state = 0;
              this.addObject$1($.index(t1, c));
              ++c;
          }
  }
},
 removeObject$1: function(object) {
  if (typeof object === 'object' && object !== null && !!object.is$Light) {
    var t1 = this.lights;
    var i = $.indexOf$1(t1, object);
    if (!(i === -1))
      $.removeRange(t1, i, 1);
  } else if (!(typeof object === 'object' && object !== null && !!object.is$Camera)) {
    t1 = this.objects;
    i = $.indexOf$1(t1, object);
    if (!(i === -1)) {
      $.removeRange(t1, i, 1);
      this.__objectsRemoved.push(object);
      t1 = this.__objectsAdded;
      var ai = $.indexOf$1(t1, object);
      if (!(ai === -1))
        $.removeRange(t1, ai, 1);
    }
  }
  var c = 0;
  while (true) {
    t1 = $.get$length(object.get$children());
    if (typeof t1 !== 'number')
      return this.removeObject$1$bailout(1, object, c, t1);
    if (!(c < t1))
      break;
    t1 = object.get$children();
    if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.removeObject$1$bailout(2, object, c, t1);
    if (c < 0 || c >= t1.length)
      throw $.ioore(c);
    this.removeObject$1(t1[c]);
    ++c;
  }
},
 removeObject$1$bailout: function(state, env0, env1, env2) {
  switch (state) {
    case 1:
      var object = env0;
      c = env1;
      t1 = env2;
      break;
    case 2:
      object = env0;
      c = env1;
      t1 = env2;
      break;
  }
  switch (state) {
    case 0:
      if (typeof object === 'object' && object !== null && !!object.is$Light) {
        var t1 = this.lights;
        var i = $.indexOf$1(t1, object);
        if (!(i === -1))
          $.removeRange(t1, i, 1);
      } else if (!(typeof object === 'object' && object !== null && !!object.is$Camera)) {
        t1 = this.objects;
        i = $.indexOf$1(t1, object);
        if (!(i === -1)) {
          $.removeRange(t1, i, 1);
          this.__objectsRemoved.push(object);
          t1 = this.__objectsAdded;
          var ai = $.indexOf$1(t1, object);
          if (!(ai === -1))
            $.removeRange(t1, ai, 1);
        }
      }
      var c = 0;
    default:
      L0:
        while (true)
          switch (state) {
            case 0:
              t1 = $.get$length(object.get$children());
            case 1:
              state = 0;
              if (!$.ltB(c, t1))
                break L0;
              t1 = object.get$children();
            case 2:
              state = 0;
              this.removeObject$1($.index(t1, c));
              ++c;
          }
  }
},
 Scene$0: function() {
  this.fog = null;
  this.overrideMaterial = null;
  this.matrixAutoUpdate = false;
  this.objects = [];
  this.lights = [];
  this.__objectsAdded = [];
  this.__objectsRemoved = [];
},
 is$Scene: true
};

$$.Texture = {"":
 ["_id?", "image=", "_mapping", "wrapS=", "wrapT=", "magFilter?", "minFilter?", "format?", "type?", "anisotropy=", "offset?", "repeat?", "generateMipmaps?", "premultiplyAlpha?", "needsUpdate=", "onUpdate?", "flipY?", "__data"],
 "super": "Object",
 onUpdate$0: function() { return this.onUpdate.call$0(); },
 get$mapping: function() {
  return this._mapping;
},
 clone$0: function() {
  var clonedTexture = $.Texture$(this.image, this._mapping, this.wrapS, this.wrapT, this.magFilter, this.minFilter, this.format, this.type, this.anisotropy);
  clonedTexture.offset.copy$1(this.offset);
  clonedTexture.repeat.copy$1(this.repeat);
  return clonedTexture;
},
 get$_data: function() {
  if (this.__data == null)
    this.__data = $.makeLiteralMap([]);
  return this.__data;
},
 operator$index$1: function(key) {
  return $.index(this.get$_data(), key);
},
 operator$indexSet$2: function(key, value) {
  $.indexSet(this.get$_data(), key, value);
  return value;
},
 Texture$9: function(image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {
  var t1 = $.Three_TextureCount;
  $.Three_TextureCount = $.add(t1, 1);
  this._id = t1;
  this._mapping = !(mapping == null) ? mapping : null;
  this.offset = $.Vector2$(0, 0);
  this.repeat = $.Vector2$(1, 1);
  this.generateMipmaps = true;
  this.premultiplyAlpha = false;
  this.flipY = true;
  this.needsUpdate = false;
  this.onUpdate = null;
},
 is$Texture: true
};

$$.WebGL_Geometries_render_anon = {"":
 ["timer_0"],
 "super": "Closure",
 call$1: function(object) {
  var t1 = this.timer_0;
  var t2 = $.mul(t1, 5);
  object.get$rotation().set$x(t2);
  t1 = $.mul(t1, 2.5);
  object.get$rotation().set$y(t1);
}
};

$$.DateImplementation_toString_fourDigits = {"":
 [],
 "super": "Closure",
 call$1: function(n) {
  var absN = $.abs(n);
  var sign = $.ltB(n, 0) ? '-' : '';
  if ($.geB(absN, 1000))
    return $.S(n);
  if ($.geB(absN, 100))
    return sign + '0' + $.S(absN);
  if ($.geB(absN, 10))
    return sign + '00' + $.S(absN);
  return sign + '000' + $.S(absN);
}
};

$$.DateImplementation_toString_threeDigits = {"":
 [],
 "super": "Closure",
 call$1: function(n) {
  if ($.geB(n, 100))
    return $.S(n);
  if ($.geB(n, 10))
    return '0' + $.S(n);
  return '00' + $.S(n);
}
};

$$.DateImplementation_toString_twoDigits = {"":
 [],
 "super": "Closure",
 call$1: function(n) {
  if ($.geB(n, 10))
    return $.S(n);
  return '0' + $.S(n);
}
};

$$._convertDartToNative_PrepareForStructuredClone_findSlot = {"":
 ["copies_3", "values_2"],
 "super": "Closure",
 call$1: function(value) {
  var t1 = this.values_2;
  var length$ = t1.length;
  for (var i = 0; i < length$; ++i) {
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    var t2 = t1[i];
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  t1.push(value);
  this.copies_3.push(null);
  return length$;
}
};

$$._convertDartToNative_PrepareForStructuredClone_readSlot = {"":
 ["copies_4"],
 "super": "Closure",
 call$1: function(i) {
  var t1 = this.copies_4;
  if (i !== (i | 0))
    throw $.iae(i);
  if (i < 0 || i >= t1.length)
    throw $.ioore(i);
  return t1[i];
}
};

$$._convertDartToNative_PrepareForStructuredClone_writeSlot = {"":
 ["copies_5"],
 "super": "Closure",
 call$2: function(i, x) {
  var t1 = this.copies_5;
  if (i !== (i | 0))
    throw $.iae(i);
  if (i < 0 || i >= t1.length)
    throw $.ioore(i);
  t1[i] = x;
}
};

$$._convertDartToNative_PrepareForStructuredClone_cleanupSlots = {"":
 [],
 "super": "Closure",
 call$0: function() {
}
};

$$._convertDartToNative_PrepareForStructuredClone_walk = {"":
 ["writeSlot_8", "findSlot_7", "readSlot_6"],
 "super": "Closure",
 call$1: function(e) {
  var t1 = {};
  if (e == null)
    return e;
  if (typeof e === 'boolean')
    return e;
  if (typeof e === 'number')
    return e;
  if (typeof e === 'string')
    return e;
  if (typeof e === 'object' && e !== null && !!e.is$Date)
    throw $.$$throw($.CTC2);
  if (typeof e === 'object' && e !== null && !!e.is$RegExp)
    throw $.$$throw($.CTC3);
  if (typeof e === 'object' && e !== null && e.is$_FileImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$File())
    throw $.$$throw($.CTC4);
  if (typeof e === 'object' && e !== null && e.is$_BlobImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$Blob())
    throw $.$$throw($.CTC5);
  if (typeof e === 'object' && e !== null && e.is$_FileListImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$FileList())
    throw $.$$throw($.CTC6);
  if (typeof e === 'object' && e !== null && e.is$_ImageDataImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ImageData())
    throw $.$$throw($.CTC6);
  if (typeof e === 'object' && e !== null && e.is$_ArrayBufferImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
    throw $.$$throw($.CTC7);
  if (typeof e === 'object' && e !== null && e.is$_ArrayBufferViewImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
    throw $.$$throw($.CTC8);
  if (typeof e === 'object' && e !== null && e.is$Map()) {
    var slot = this.findSlot_7.call$1(e);
    t1.copy_1 = this.readSlot_6.call$1(slot);
    var t2 = t1.copy_1;
    if (!(t2 == null))
      return t2;
    t1.copy_1 = {};
    this.writeSlot_8.call$2(slot, t1.copy_1);
    e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(this, t1));
    return t1.copy_1;
  }
  if (typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List())) {
    if (typeof e !== 'object' || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(1, e, 0, 0, 0, 0, 0, 0);
    var length$ = e.length;
    slot = this.findSlot_7.call$1(e);
    t2 = this.readSlot_6;
    var copy = t2.call$1(slot);
    if (!(copy == null)) {
      if (true === copy) {
        copy = new Array(length$);
        this.writeSlot_8.call$2(slot, copy);
      }
      return copy;
    }
    t1 = e instanceof Array && !!!(e.immutable$list);
    var t3 = this.writeSlot_8;
    if (t1) {
      t3.call$2(slot, true);
      for (var i = 0; i < length$; ++i) {
        if (i < 0 || i >= e.length)
          throw $.ioore(i);
        var element = e[i];
        var elementCopy = this.call$1(element);
        if (!(elementCopy == null ? element == null : elementCopy === element)) {
          copy = t2.call$1(slot);
          if (true === copy) {
            copy = new Array(length$);
            t3.call$2(slot, copy);
          }
          if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
            return this.call$1$bailout(2, copy, i, t3, e, length$, elementCopy, slot);
          for (var j = 0; j < i; ++j) {
            if (j < 0 || j >= e.length)
              throw $.ioore(j);
            t1 = e[j];
            if (j < 0 || j >= copy.length)
              throw $.ioore(j);
            copy[j] = t1;
          }
          if (i < 0 || i >= copy.length)
            throw $.ioore(i);
          copy[i] = elementCopy;
          ++i;
          break;
        }
      }
      if (copy == null) {
        t3.call$2(slot, e);
        copy = e;
      }
    } else {
      copy = new Array(length$);
      t3.call$2(slot, copy);
      i = 0;
    }
    if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(3, e, copy, length$, i, 0, 0, 0);
    for (; i < length$; ++i) {
      if (i < 0 || i >= e.length)
        throw $.ioore(i);
      t1 = this.call$1(e[i]);
      if (i < 0 || i >= copy.length)
        throw $.ioore(i);
      copy[i] = t1;
    }
    return copy;
  }
  throw $.$$throw($.CTC9);
},
 call$1$bailout: function(state, env0, env1, env2, env3, env4, env5, env6) {
  switch (state) {
    case 1:
      var e = env0;
      break;
    case 2:
      copy = env0;
      i = env1;
      t3 = env2;
      e = env3;
      length$ = env4;
      elementCopy = env5;
      slot = env6;
      break;
    case 3:
      e = env0;
      copy = env1;
      length$ = env2;
      i = env3;
      break;
  }
  switch (state) {
    case 0:
      var t1 = {};
      if (e == null)
        return e;
      if (typeof e === 'boolean')
        return e;
      if (typeof e === 'number')
        return e;
      if (typeof e === 'string')
        return e;
      if (typeof e === 'object' && e !== null && !!e.is$Date)
        throw $.$$throw($.CTC2);
      if (typeof e === 'object' && e !== null && !!e.is$RegExp)
        throw $.$$throw($.CTC3);
      if (typeof e === 'object' && e !== null && e.is$_FileImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$File())
        throw $.$$throw($.CTC4);
      if (typeof e === 'object' && e !== null && e.is$_BlobImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$Blob())
        throw $.$$throw($.CTC5);
      if (typeof e === 'object' && e !== null && e.is$_FileListImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$FileList())
        throw $.$$throw($.CTC6);
      if (typeof e === 'object' && e !== null && e.is$_ImageDataImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ImageData())
        throw $.$$throw($.CTC6);
      if (typeof e === 'object' && e !== null && e.is$_ArrayBufferImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
        throw $.$$throw($.CTC7);
      if (typeof e === 'object' && e !== null && e.is$_ArrayBufferViewImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
        throw $.$$throw($.CTC8);
      if (typeof e === 'object' && e !== null && e.is$Map()) {
        var slot = this.findSlot_7.call$1(e);
        t1.copy_1 = this.readSlot_6.call$1(slot);
        var t2 = t1.copy_1;
        if (!(t2 == null))
          return t2;
        t1.copy_1 = {};
        this.writeSlot_8.call$2(slot, t1.copy_1);
        e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(this, t1));
        return t1.copy_1;
      }
    default:
      if (state === 3 || state === 2 || state === 1 || state === 0 && typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List()))
        switch (state) {
          case 0:
          case 1:
            state = 0;
            var length$ = $.get$length(e);
            slot = this.findSlot_7.call$1(e);
            t2 = this.readSlot_6;
            var copy = t2.call$1(slot);
            if (!(copy == null)) {
              if (true === copy) {
                copy = new Array(length$);
                this.writeSlot_8.call$2(slot, copy);
              }
              return copy;
            }
            t1 = e instanceof Array && !!!(e.immutable$list);
            var t3 = this.writeSlot_8;
          case 2:
            if (state === 2 || state === 0 && t1)
              switch (state) {
                case 0:
                  t3.call$2(slot, true);
                  var i = 0;
                case 2:
                  L0:
                    while (true)
                      switch (state) {
                        case 0:
                          if (!$.ltB(i, length$))
                            break L0;
                          var element = $.index(e, i);
                          var elementCopy = this.call$1(element);
                        case 2:
                          if (state === 2 || state === 0 && !(elementCopy == null ? element == null : elementCopy === element))
                            switch (state) {
                              case 0:
                                copy = t2.call$1(slot);
                                if (true === copy) {
                                  copy = new Array(length$);
                                  t3.call$2(slot, copy);
                                }
                              case 2:
                                state = 0;
                                for (var j = 0; j < i; ++j)
                                  $.indexSet(copy, j, $.index(e, j));
                                $.indexSet(copy, i, elementCopy);
                                ++i;
                                break L0;
                            }
                          ++i;
                      }
                  if (copy == null) {
                    t3.call$2(slot, e);
                    copy = e;
                  }
              }
            else {
              copy = new Array(length$);
              t3.call$2(slot, copy);
              i = 0;
            }
          case 3:
            state = 0;
            for (; $.ltB(i, length$); ++i)
              $.indexSet(copy, i, this.call$1($.index(e, i)));
            return copy;
        }
      throw $.$$throw($.CTC9);
  }
}
};

$$._convertDartToNative_PrepareForStructuredClone_walk_anon = {"":
 ["walk_9", "box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  this.box_0.copy_1[key] = this.walk_9.call$1(value);
}
};

$$.Maps__emitMap_anon = {"":
 ["result_3", "box_0", "visiting_2"],
 "super": "Closure",
 call$2: function(k, v) {
  var t1 = this.box_0;
  if (t1.first_1 !== true)
    $.add$1(this.result_3, ', ');
  t1.first_1 = false;
  t1 = this.result_3;
  var t2 = this.visiting_2;
  $.Collections__emitObject(k, t1, t2);
  $.add$1(t1, ': ');
  $.Collections__emitObject(v, t1, t2);
}
};

$$.invokeClosure_anon = {"":
 ["closure_0"],
 "super": "Closure",
 call$0: function() {
  return this.closure_0.call$0();
}
};

$$.invokeClosure_anon0 = {"":
 ["closure_2", "arg1_1"],
 "super": "Closure",
 call$0: function() {
  return this.closure_2.call$1(this.arg1_1);
}
};

$$.invokeClosure_anon1 = {"":
 ["closure_5", "arg1_4", "arg2_3"],
 "super": "Closure",
 call$0: function() {
  return this.closure_5.call$2(this.arg1_4, this.arg2_3);
}
};

$$.DoubleLinkedQueue_length__ = {"":
 ["box_0"],
 "super": "Closure",
 call$1: function(element) {
  var t1 = this.box_0;
  t1.counter_1 = $.add(t1.counter_1, 1);
}
};

$$._convertNativeToDart_AcceptStructuredClone_findSlot = {"":
 ["copies_1", "values_0"],
 "super": "Closure",
 call$1: function(value) {
  var t1 = this.values_0;
  var length$ = t1.length;
  for (var i = 0; i < length$; ++i) {
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    var t2 = t1[i];
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  t1.push(value);
  this.copies_1.push(null);
  return length$;
}
};

$$._convertNativeToDart_AcceptStructuredClone_readSlot = {"":
 ["copies_2"],
 "super": "Closure",
 call$1: function(i) {
  var t1 = this.copies_2;
  if (i !== (i | 0))
    throw $.iae(i);
  if (i < 0 || i >= t1.length)
    throw $.ioore(i);
  return t1[i];
}
};

$$._convertNativeToDart_AcceptStructuredClone_writeSlot = {"":
 ["copies_3"],
 "super": "Closure",
 call$2: function(i, x) {
  var t1 = this.copies_3;
  if (i !== (i | 0))
    throw $.iae(i);
  if (i < 0 || i >= t1.length)
    throw $.ioore(i);
  t1[i] = x;
}
};

$$._convertNativeToDart_AcceptStructuredClone_walk = {"":
 ["writeSlot_6", "findSlot_5", "readSlot_4"],
 "super": "Closure",
 call$1: function(e) {
  if (typeof e !== 'object' || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.is$JavaScriptIndexingBehavior())
    return this.call$1$bailout(1, e, 0, 0);
  if (e instanceof Date)
    throw $.$$throw($.CTC2);
  if (e instanceof RegExp)
    throw $.$$throw($.CTC3);
  if ($._isJavaScriptSimpleObject(e)) {
    var slot = this.findSlot_5.call$1(e);
    var copy = this.readSlot_4.call$1(slot);
    if (!(copy == null))
      return copy;
    copy = $.makeLiteralMap([]);
    if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(2, e, slot, copy);
    this.writeSlot_6.call$2(slot, copy);
    for (var t1 = $.iterator(Object.keys(e)); t1.hasNext$0() === true;) {
      var t2 = t1.next$0();
      var t3 = this.call$1(e[t2]);
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= copy.length)
        throw $.ioore(t2);
      copy[t2] = t3;
    }
    return copy;
  }
  if (e instanceof Array) {
    slot = this.findSlot_5.call$1(e);
    copy = this.readSlot_4.call$1(slot);
    if (!(copy == null))
      return copy;
    this.writeSlot_6.call$2(slot, e);
    var length$ = e.length;
    for (var i = 0; i < length$; ++i) {
      if (i < 0 || i >= e.length)
        throw $.ioore(i);
      t1 = this.call$1(e[i]);
      if (i < 0 || i >= e.length)
        throw $.ioore(i);
      e[i] = t1;
    }
    return e;
  }
  return e;
},
 call$1$bailout: function(state, env0, env1, env2) {
  switch (state) {
    case 1:
      var e = env0;
      break;
    case 2:
      e = env0;
      slot = env1;
      copy = env2;
      break;
  }
  switch (state) {
    case 0:
    case 1:
      state = 0;
      if (e == null)
        return e;
      if (typeof e === 'boolean')
        return e;
      if (typeof e === 'number')
        return e;
      if (typeof e === 'string')
        return e;
      if (e instanceof Date)
        throw $.$$throw($.CTC2);
      if (e instanceof RegExp)
        throw $.$$throw($.CTC3);
    case 2:
      if (state === 2 || state === 0 && $._isJavaScriptSimpleObject(e))
        switch (state) {
          case 0:
            var slot = this.findSlot_5.call$1(e);
            var copy = this.readSlot_4.call$1(slot);
            if (!(copy == null))
              return copy;
            copy = $.makeLiteralMap([]);
          case 2:
            state = 0;
            this.writeSlot_6.call$2(slot, copy);
            for (var t1 = $.iterator(Object.keys(e)); t1.hasNext$0() === true;) {
              var t2 = t1.next$0();
              $.indexSet(copy, t2, this.call$1(e[t2]));
            }
            return copy;
        }
      if (e instanceof Array) {
        slot = this.findSlot_5.call$1(e);
        copy = this.readSlot_4.call$1(slot);
        if (!(copy == null))
          return copy;
        this.writeSlot_6.call$2(slot, e);
        var length$ = $.get$length(e);
        for (var i = 0; $.ltB(i, length$); ++i)
          $.indexSet(e, i, this.call$1($.index(e, i)));
        return e;
      }
      return e;
  }
}
};

$$.LinkedHashMapImplementation_forEach__ = {"":
 ["f_0"],
 "super": "Closure",
 call$1: function(entry) {
  this.f_0.call$2(entry.get$key(), entry.get$value());
}
};

$$._convertNativeToDart_IDBKey_containsDate = {"":
 [],
 "super": "Closure",
 call$1: function(object) {
  if (object instanceof Date)
    return true;
  if (typeof object === 'object' && object !== null && (object.constructor === Array || object.is$List())) {
    if (typeof object !== 'object' || object === null || object.constructor !== Array && !object.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(1, object);
    for (var i = 0; t1 = object.length, i < t1; ++i) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      if (this.call$1(object[i]) === true)
        return true;
    }
  }
  return false;
  var t1;
},
 call$1$bailout: function(state, env0) {
  switch (state) {
    case 1:
      var object = env0;
      break;
  }
  switch (state) {
    case 0:
      if (object instanceof Date)
        return true;
    case 1:
      if (state === 1 || state === 0 && typeof object === 'object' && object !== null && (object.constructor === Array || object.is$List()))
        switch (state) {
          case 0:
          case 1:
            state = 0;
            for (var i = 0; $.ltB(i, $.get$length(object)); ++i)
              if (this.call$1($.index(object, i)) === true)
                return true;
        }
      return false;
  }
}
};

$$.FilteredElementList__filtered_anon = {"":
 [],
 "super": "Closure",
 call$1: function(n) {
  return typeof n === 'object' && n !== null && n.is$Element();
}
};

$$._ChildrenElementList_filter_anon = {"":
 ["f_1", "output_0"],
 "super": "Closure",
 call$1: function(element) {
  if (this.f_1.call$1(element) === true)
    this.output_0.push(element);
}
};

$$.FilteredElementList_removeRange_anon = {"":
 [],
 "super": "Closure",
 call$1: function(el) {
  return el.remove$0();
}
};

$$.WebGLRenderer_renderImmediateObject_function = {"":
 ["this_2", "material_1", "program_0"],
 "super": "Closure",
 call$1: function(object) {
  this.this_2.renderBufferImmediate$3(object, this.program_0, this.material_1);
}
};

$$.WebGLRenderer_initMaterial_anon = {"":
 ["material_0"],
 "super": "Closure",
 call$2: function(k, u) {
  return $.add$1(this.material_0.get$uniformsList(), [u, k]);
}
};

$$.UniformsUtils_merge_anon = {"":
 ["box_0", "merged_2"],
 "super": "Closure",
 call$2: function(k, _) {
  $.indexSet(this.merged_2, k, $.index(this.box_0.tmp_1, k));
}
};

$$.UniformsUtils_clone_anon = {"":
 ["uniforms_dst_0"],
 "super": "Closure",
 call$2: function(k, u) {
  var parameter_src = u.get$value();
  if (typeof parameter_src === 'object' && parameter_src !== null && !!parameter_src.is$Color || typeof parameter_src === 'object' && parameter_src !== null && !!parameter_src.is$Vector2 || typeof parameter_src === 'object' && parameter_src !== null && !!parameter_src.is$Vector3 || typeof parameter_src === 'object' && parameter_src !== null && !!parameter_src.is$Vector4 || typeof parameter_src === 'object' && parameter_src !== null && !!parameter_src.is$Matrix4 || typeof parameter_src === 'object' && parameter_src !== null && !!parameter_src.is$Texture)
    var parameter_dst = parameter_src.clone$0();
  else
    parameter_dst = typeof parameter_src === 'object' && parameter_src !== null && (parameter_src.constructor === Array || parameter_src.is$List()) ? $.ListImplementation_List$from(parameter_src) : parameter_src;
  $.indexSet(this.uniforms_dst_0, k, $.Uniform$(u.get$type(), parameter_dst, u.get$texture()));
}
};

$$.WebGLRenderer_buildProgram_anon = {"":
 ["box_0"],
 "super": "Closure",
 call$2: function(u, _) {
  return $.add$1(this.box_0.identifiers_1, u);
}
};

$$.WebGLRenderer_buildProgram_anon0 = {"":
 ["box_0"],
 "super": "Closure",
 call$2: function(a, _) {
  return $.add$1(this.box_0.identifiers_1, a);
}
};

$$.ConstantMap_forEach_anon = {"":
 ["this_1", "f_0"],
 "super": "Closure",
 call$1: function(key) {
  return this.f_0.call$2(key, $.index(this.this_1, key));
}
};

$$.WebGLRenderer_addObject_anon = {"":
 ["webglobject_3", "box_0", "this_2"],
 "super": "Closure",
 call$2: function(k, geometryGroup) {
  if (geometryGroup.get$__webglVertexBuffer() == null) {
    var t1 = this.this_2;
    t1.createMeshBuffers$1(geometryGroup);
    t1.initMeshBuffers$2(geometryGroup, this.webglobject_3);
    t1 = this.box_0;
    t1.geometry_1.set$verticesNeedUpdate(true);
    t1.geometry_1.set$morphTargetsNeedUpdate(true);
    t1.geometry_1.set$elementsNeedUpdate(true);
    t1.geometry_1.set$uvsNeedUpdate(true);
    t1.geometry_1.set$normalsNeedUpdate(true);
    t1.geometry_1.set$tangentsNeedUpdate(true);
    t1.geometry_1.set$colorsNeedUpdate(true);
  }
}
};

$$.WebGLRenderer_addObject_anon0 = {"":
 ["webglobject_6", "scene_5", "this_4"],
 "super": "Closure",
 call$2: function(k, geometryGroup) {
  this.this_4.addBuffer$3($.index(this.scene_5, '__webglObjects'), geometryGroup, this.webglobject_6);
}
};

$$.WebGLRenderer_initDirectBuffers_anon = {"":
 ["this_3", "box_0"],
 "super": "Closure",
 call$2: function(a, v) {
  var t1 = a === 'index';
  var t2 = this.box_0;
  if (t1)
    t2.type_2 = 34963;
  else
    t2.type_2 = 34962;
  t1 = this.box_0;
  t1.attribute_1 = v;
  t2 = this.this_3;
  var t3 = t2.get$_gl().createBuffer$0();
  t1.attribute_1.set$buffer(t3);
  t2.get$_gl().bindBuffer$2(t1.type_2, t1.attribute_1.get$buffer());
  t2.get$_gl().bufferData$3(t1.type_2, t1.attribute_1.get$array(), 35044);
}
};

$$.WebGLRenderer_sortFacesByMaterial_anon = {"":
 ["this_1", "geometry_0"],
 "super": "Closure",
 call$2: function(k, g) {
  var t1 = this.this_1;
  var t2 = t1.get$_geometryGroupCounter();
  t1.set$_geometryGroupCounter($.add(t2, 1));
  g.set$id(t2);
  $.add$1(this.geometry_0.get$geometryGroupsList(), g);
}
};

$$.WebGLRenderer_initMeshBuffers_anon = {"":
 ["this_3", "nvertices_2", "material_1", "geometryGroup_0"],
 "super": "Closure",
 call$1: function(a) {
  var originalAttribute = $.index(this.material_1.get$attributes(), a);
  if (typeof originalAttribute !== 'string' && (typeof originalAttribute !== 'object' || originalAttribute === null || originalAttribute.constructor !== Array && !originalAttribute.is$JavaScriptIndexingBehavior()))
    return this.call$1$bailout(1, a, originalAttribute, 0);
  var attribute = $.makeLiteralMap([]);
  if (typeof attribute !== 'object' || attribute === null || (attribute.constructor !== Array || !!attribute.immutable$list) && !attribute.is$JavaScriptIndexingBehavior())
    return this.call$1$bailout(2, a, attribute, originalAttribute);
  for (var t1 = $.iterator(originalAttribute); t1.hasNext$0() === true;) {
    var t2 = t1.next$0();
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    if (t2 < 0 || t2 >= originalAttribute.length)
      throw $.ioore(t2);
    var t3 = originalAttribute[t2];
    if (t2 < 0 || t2 >= attribute.length)
      throw $.ioore(t2);
    attribute[t2] = t3;
  }
  throw $.iae('__webglInitialized');
  if ('__webglInitialized' < 0 || '__webglInitialized' >= attribute.length)
    throw $.ioore('__webglInitialized');
  if (!(attribute.__webglInitialized == null || $.eqB(attribute.__webglInitialized, false))) {
    throw $.iae('createUniqueBuffers');
    if ('createUniqueBuffers' < 0 || 'createUniqueBuffers' >= attribute.length)
      throw $.ioore('createUniqueBuffers');
    t1 = !(attribute.createUniqueBuffers == null) && attribute.createUniqueBuffers === true;
  } else
    t1 = true;
  if (t1) {
    if ('__webglInitialized' < 0 || '__webglInitialized' >= attribute.length)
      throw $.ioore('__webglInitialized');
    attribute.__webglInitialized = true;
    throw $.iae('type');
    t1 = attribute.length;
    if ('type' < 0 || 'type' >= t1)
      throw $.ioore('type');
    if (attribute.type === 'v2')
      var size = 2;
    else if (attribute.type === 'v3')
      size = 3;
    else if (attribute.type === 'v4')
      size = 4;
    else
      size = attribute.type === 'c' ? 3 : 1;
    throw $.iae('size');
    if ('size' < 0 || 'size' >= t1)
      throw $.ioore('size');
    attribute.size = size;
    t2 = $._TypedArrayFactoryProvider_Float32Array($.mul(this.nvertices_2, size));
    throw $.iae('array');
    if ('array' < 0 || 'array' >= attribute.length)
      throw $.ioore('array');
    attribute.array = t2;
    var buffer = $.Buffer$(this.this_3._gl.createBuffer$0());
    buffer.belongsToAttribute = a;
    throw $.iae('buffer');
    if ('buffer' < 0 || 'buffer' >= attribute.length)
      throw $.ioore('buffer');
    attribute.buffer = buffer;
    originalAttribute.set$needsUpdate(true);
    throw $.iae('__original');
    if ('__original' < 0 || '__original' >= attribute.length)
      throw $.ioore('__original');
    attribute.__original = originalAttribute;
  }
  $.add$1(this.geometryGroup_0.get$__webglCustomAttributesList(), attribute);
},
 call$1$bailout: function(state, env0, env1, env2) {
  switch (state) {
    case 1:
      var a = env0;
      originalAttribute = env1;
      break;
    case 2:
      a = env0;
      attribute = env1;
      originalAttribute = env2;
      break;
  }
  switch (state) {
    case 0:
      var originalAttribute = $.index(this.material_1.get$attributes(), a);
    case 1:
      state = 0;
      var attribute = $.makeLiteralMap([]);
    case 2:
      state = 0;
      for (var t1 = $.iterator(originalAttribute); t1.hasNext$0() === true;) {
        var t2 = t1.next$0();
        $.indexSet(attribute, t2, $.index(originalAttribute, t2));
      }
      if (!($.index(attribute, '__webglInitialized') == null || $.eqB($.index(attribute, '__webglInitialized'), false)))
        t1 = !($.index(attribute, 'createUniqueBuffers') == null) && $.index(attribute, 'createUniqueBuffers') === true;
      else
        t1 = true;
      if (t1) {
        $.indexSet(attribute, '__webglInitialized', true);
        if ($.index(attribute, 'type') === 'v2')
          var size = 2;
        else if ($.index(attribute, 'type') === 'v3')
          size = 3;
        else if ($.index(attribute, 'type') === 'v4')
          size = 4;
        else
          size = $.index(attribute, 'type') === 'c' ? 3 : 1;
        $.indexSet(attribute, 'size', size);
        $.indexSet(attribute, 'array', $._TypedArrayFactoryProvider_Float32Array($.mul(this.nvertices_2, size)));
        var buffer = $.Buffer$(this.this_3.get$_gl().createBuffer$0());
        buffer.belongsToAttribute = a;
        $.indexSet(attribute, 'buffer', buffer);
        originalAttribute.set$needsUpdate(true);
        $.indexSet(attribute, '__original', originalAttribute);
      }
      $.add$1(this.geometryGroup_0.get$__webglCustomAttributesList(), attribute);
  }
}
};

$$.WebGLRenderer_setParticleBuffers_function = {"":
 [],
 "super": "Closure",
 call$2: function(a, b) {
  return $.sub($.index(b, 0), $.index(a, 0));
}
};

$$.Object3D_updateMatrixWorld_anon = {"":
 ["box_0"],
 "super": "Closure",
 call$1: function(c) {
  return c.updateMatrixWorld$1(this.box_0.force_1);
}
};

$$.Vector3_setEulerFromRotationMatrix_anon = {"":
 [],
 "super": "Closure",
 call$1: function(x) {
  return $.min($.max(x, -1), 1);
}
};

$$.Geometry_computeFaceNormals_anon = {"":
 ["cb_6", "box_0", "this_5", "ab_4"],
 "super": "Closure",
 call$1: function(face) {
  var t1 = this.this_5;
  var vA = $.index(t1.get$vertices(), face.get$a());
  var t2 = this.box_0;
  t2.vA_1 = vA;
  t2.vB_2 = $.index(t1.get$vertices(), face.get$b());
  t2.vC_3 = $.index(t1.get$vertices(), face.get$c());
  var t3 = this.cb_6;
  t3.sub$2(t2.vC_3, t2.vB_2);
  var t4 = this.ab_4;
  t4.sub$2(t2.vA_1, t2.vB_2);
  t3.crossSelf$1(t4);
  if (t3.isZero$0() !== true)
    t3.normalize$0();
  face.get$normal().copy$1(t3);
}
};

$$.Geometry_computeCentroids_anon = {"":
 ["this_0"],
 "super": "Closure",
 call$1: function(face) {
  face.get$centroid().setValues$3(0, 0, 0);
  if (typeof face === 'object' && face !== null && !!face.is$Face3) {
    var t1 = face.centroid;
    var t2 = this.this_0;
    t1.addSelf$1($.index(t2.get$vertices(), face.a));
    t1.addSelf$1($.index(t2.get$vertices(), face.b));
    t1.addSelf$1($.index(t2.get$vertices(), face.c));
    t1.divideScalar$1(3);
  } else if (typeof face === 'object' && face !== null && !!face.is$Face4) {
    t1 = face.centroid;
    t2 = this.this_0;
    t1.addSelf$1($.index(t2.get$vertices(), face.a));
    t1.addSelf$1($.index(t2.get$vertices(), face.b));
    t1.addSelf$1($.index(t2.get$vertices(), face.c));
    t1.addSelf$1($.index(t2.get$vertices(), face.d));
    t1.divideScalar$1(4);
  }
}
};

$$.Face3_clone_anon = {"":
 [],
 "super": "Closure",
 call$1: function(v) {
  return v.clone$0();
}
};

$$.Face3_clone_anon0 = {"":
 [],
 "super": "Closure",
 call$1: function(v) {
  return v.clone$0();
}
};

$$.Face3_clone_anon1 = {"":
 [],
 "super": "Closure",
 call$1: function(v) {
  return v.clone$0();
}
};

$$.Face4_clone_anon = {"":
 [],
 "super": "Closure",
 call$1: function(v) {
  return v.clone$0();
}
};

$$.Face4_clone_anon0 = {"":
 [],
 "super": "Closure",
 call$1: function(v) {
  return v.clone$0();
}
};

$$.Face4_clone_anon1 = {"":
 [],
 "super": "Closure",
 call$1: function(v) {
  return v.clone$0();
}
};

$$.Geometry_computeBoundingSphere_anon = {"":
 ["box_0"],
 "super": "Closure",
 call$2: function(curMaxRadiusSq, vertex) {
  var radiusSq = vertex.lengthSq$0();
  var t1 = this.box_0;
  t1.radiusSq_1 = radiusSq;
  return $.gtB(t1.radiusSq_1, curMaxRadiusSq) ? t1.radiusSq_1 : curMaxRadiusSq;
}
};

$$.Geometry_computeVertexNormals_anon = {"":
 ["this_2"],
 "super": "Closure",
 call$1: function(_) {
  return $.add$1(this.this_2.get$__tmpVertices(), $.Vector3$(0, 0, 0));
}
};

$$.Geometry_computeVertexNormals_anon0 = {"":
 [],
 "super": "Closure",
 call$1: function(face) {
  if (typeof face === 'object' && face !== null && !!face.is$Face3)
    face.vertexNormals = [$.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0)];
  else if (typeof face === 'object' && face !== null && !!face.is$Face4)
    face.vertexNormals = [$.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0)];
}
};

$$.Geometry_computeVertexNormals_anon1 = {"":
 ["box_0"],
 "super": "Closure",
 call$1: function(face) {
  if (typeof face === 'object' && face !== null && !!face.is$Face3) {
    var t1 = this.box_0;
    $.index(t1.vertices_1, face.a).addSelf$1(face.normal);
    $.index(t1.vertices_1, face.b).addSelf$1(face.normal);
    $.index(t1.vertices_1, face.c).addSelf$1(face.normal);
  } else if (typeof face === 'object' && face !== null && !!face.is$Face4) {
    t1 = this.box_0;
    var t2 = $.index(t1.vertices_1, face.a);
    var t3 = face.normal;
    t2.addSelf$1(t3);
    $.index(t1.vertices_1, face.b).addSelf$1(t3);
    $.index(t1.vertices_1, face.c).addSelf$1(t3);
    $.index(t1.vertices_1, face.d).addSelf$1(t3);
  }
}
};

$$.Geometry_computeVertexNormals_anon2 = {"":
 [],
 "super": "Closure",
 call$1: function(v) {
  return v.normalize$0();
}
};

$$.Geometry_computeVertexNormals_anon3 = {"":
 ["box_0"],
 "super": "Closure",
 call$1: function(face) {
  if (typeof face === 'object' && face !== null && !!face.is$Face3) {
    var t1 = $.index(face.vertexNormals, 0);
    var t2 = this.box_0;
    t1.copy$1($.index(t2.vertices_1, face.a));
    $.index(face.vertexNormals, 1).copy$1($.index(t2.vertices_1, face.b));
    $.index(face.vertexNormals, 2).copy$1($.index(t2.vertices_1, face.c));
  } else if (typeof face === 'object' && face !== null && !!face.is$Face4) {
    t1 = $.index(face.vertexNormals, 0);
    t2 = this.box_0;
    t1.copy$1($.index(t2.vertices_1, face.a));
    $.index(face.vertexNormals, 1).copy$1($.index(t2.vertices_1, face.b));
    $.index(face.vertexNormals, 2).copy$1($.index(t2.vertices_1, face.c));
    $.index(face.vertexNormals, 3).copy$1($.index(t2.vertices_1, face.d));
  }
}
};

$$.createMultiMaterialObject_anon = {"":
 ["geometry_1", "group_0"],
 "super": "Closure",
 call$1: function(material) {
  $.add$1(this.group_0, $.Mesh$(this.geometry_1, material));
}
};

$$.anon = {"":
 [],
 "super": "Closure",
 call$1: function(pt) {
  return pt.clone$0();
}
};

$$.anon0 = {"":
 ["this_0"],
 "super": "Closure",
 call$1: function(vertex) {
  this.this_0._prepare$1($.PolyhedronGeometryVertex$($.index(vertex, 0), $.index(vertex, 1), $.index(vertex, 2)));
}
};

$$.anon1 = {"":
 ["this_2", "detail_1"],
 "super": "Closure",
 call$1: function(face) {
  var t1 = this.this_2;
  return t1._make$4($.index(t1.get$_p(), $.index(face, 0)), $.index(t1.get$_p(), $.index(face, 1)), $.index(t1.get$_p(), $.index(face, 2)), this.detail_1);
}
};

$$.anon2 = {"":
 ["this_3"],
 "super": "Closure",
 call$1: function(v) {
  return $.add$1(this.this_3.get$vertices(), v.get$vertex());
}
};

$$.anon3 = {"":
 ["radius_4"],
 "super": "Closure",
 call$1: function(vertex) {
  return vertex.multiplyScalar$1(this.radius_4);
}
};

$$.loadTexture_function = {"":
 ["texture_1", "onLoad_0"],
 "super": "Closure",
 call$1: function(event$) {
  var t1 = event$.get$content();
  var t2 = this.texture_1;
  t2.set$image(t1);
  t2.set$needsUpdate(true);
  t1 = this.onLoad_0;
  if (!(t1 == null))
    t1.call$1(t2);
}
};

$$.loadTexture_function0 = {"":
 ["onError_2"],
 "super": "Closure",
 call$1: function(event$) {
  var t1 = this.onError_2;
  if (!(t1 == null))
    t1.call$1(event$.get$message());
}
};

$$.ImageLoader_load_anon = {"":
 ["this_2", "box_0"],
 "super": "Closure",
 call$1: function(_) {
  this.this_2.dispatchEvent$1($.EventEmitterEvent$('load', null, this.box_0.image_1));
}
};

$$.ImageLoader_load_anon0 = {"":
 ["this_4", "url_3"],
 "super": "Closure",
 call$1: function(_) {
  this.this_4.dispatchEvent$1($.EventEmitterEvent$('error', 'Couldn\'t load URL [' + this.url_3 + ']', null));
}
};

$$.EventEmitter_dispatchEvent_anon = {"":
 ["event_0"],
 "super": "Closure",
 call$1: function(listener) {
  return listener.call$1(this.event_0);
}
};

$$.startRootIsolate_anon = {"":
 [],
 "super": "Closure",
 call$0: function() {
  $._TimerFactory__factory = $._timerFactory;
  return;
}
};

$$._BaseSendPort_call_anon = {"":
 ["port_1", "completer_0"],
 "super": "Closure",
 call$2: function(value, ignoreReplyTo) {
  this.port_1.close$0();
  var t1 = typeof value === 'object' && value !== null && !!value.is$Exception;
  var t2 = this.completer_0;
  if (t1)
    t2.completeException$1(value);
  else
    t2.complete$1(value);
}
};

$$._WorkerSendPort_send_anon = {"":
 ["this_2", "message_1", "replyTo_0"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.this_2;
  var t2 = this.replyTo_0;
  t1._checkReplyTo$1(t2);
  var workerMessage = $._serializeMessage($.makeLiteralMap(['command', 'message', 'port', t1, 'msg', this.message_1, 'replyTo', t2]));
  if ($._globalState().get$isWorker() === true)
    $._globalState().get$mainManager().postMessage$1(workerMessage);
  else
    $.index($._globalState().get$managers(), t1.get$_workerId()).postMessage$1(workerMessage);
}
};

$$._waitForPendingPorts_anon = {"":
 ["callback_0"],
 "super": "Closure",
 call$1: function(_) {
  return this.callback_0.call$0();
}
};

$$.Futures_wait_anon = {"":
 ["completer_5", "pos_4", "box_0", "result_3", "values_2"],
 "super": "Closure",
 call$1: function(value) {
  var t1 = this.values_2;
  var t2 = this.pos_4;
  if (t2 < 0 || t2 >= t1.length)
    throw $.ioore(t2);
  t1[t2] = value;
  t2 = this.box_0;
  var remaining = $.sub(t2.remaining_1, 1);
  t2.remaining_1 = remaining;
  if ($.eqB(remaining, 0) && this.result_3.get$isComplete() !== true)
    this.completer_5.complete$1(t1);
}
};

$$.Futures_wait_anon0 = {"":
 ["future_8", "completer_7", "result_6"],
 "super": "Closure",
 call$1: function(exception) {
  if (this.result_6.get$isComplete() !== true)
    this.completer_7.completeException$2(exception, this.future_8.get$stackTrace());
  return true;
}
};

$$._PendingSendPortFinder_visitList_anon = {"":
 ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_0._dispatch$1(e);
}
};

$$._PendingSendPortFinder_visitMap_anon = {"":
 ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_0._dispatch$1(e);
}
};

$$._StorageImpl_getValues_anon = {"":
 ["values_0"],
 "super": "Closure",
 call$2: function(k, v) {
  return this.values_0.push(v);
}
};

$$.LinkedHashMapImplementation_getValues__ = {"":
 ["list_2", "box_0"],
 "super": "Closure",
 call$1: function(entry) {
  var t1 = this.list_2;
  var t2 = this.box_0;
  var t3 = t2.index_1;
  t2.index_1 = $.add(t3, 1);
  t2 = entry.get$value();
  if (t3 !== (t3 | 0))
    throw $.iae(t3);
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  t1[t3] = t2;
}
};

$$.HashMapImplementation_getValues__ = {"":
 ["list_2", "box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1 = this.list_2;
  var t2 = this.box_0;
  var t3 = t2.i_1;
  t2.i_1 = $.add(t3, 1);
  if (t3 !== (t3 | 0))
    throw $.iae(t3);
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  t1[t3] = value;
}
};

$$.ConstantMap_getValues_anon = {"":
 ["this_1", "result_0"],
 "super": "Closure",
 call$1: function(key) {
  return this.result_0.push($.index(this.this_1, key));
}
};

$$._NativeJsSendPort_send_anon = {"":
 ["this_5", "message_4", "replyTo_3"],
 "super": "Closure",
 call$0: function() {
  var t1 = {};
  var t2 = this.this_5;
  var t3 = this.replyTo_3;
  t2._checkReplyTo$1(t3);
  var isolate = $.index($._globalState().get$isolates(), t2.get$_isolateId());
  if (isolate == null)
    return;
  if (t2.get$_receivePort().get$_callback() == null)
    return;
  var shouldSerialize = !($._globalState().get$currentContext() == null) && !$.eqB($._globalState().get$currentContext().get$id(), t2.get$_isolateId());
  var msg = this.message_4;
  t1.msg_1 = msg;
  t1.reply_2 = t3;
  if (shouldSerialize) {
    t1.msg_1 = $._serializeMessage(t1.msg_1);
    t1.reply_2 = $._serializeMessage(t1.reply_2);
  }
  $._globalState().get$topEventLoop().enqueue$3(isolate, new $._NativeJsSendPort_send_anon0(t2, t1, shouldSerialize), 'receive ' + $.S(msg));
}
};

$$._NativeJsSendPort_send_anon0 = {"":
 ["this_7", "box_0", "shouldSerialize_6"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.this_7;
  if (!(t1.get$_receivePort().get$_callback() == null)) {
    if (this.shouldSerialize_6 === true) {
      var t2 = this.box_0;
      t2.msg_1 = $._deserializeMessage(t2.msg_1);
      t2.reply_2 = $._deserializeMessage(t2.reply_2);
    }
    t1 = t1.get$_receivePort();
    t2 = this.box_0;
    t1._callback$2(t2.msg_1, t2.reply_2);
  }
}
};

$$._StorageImpl_getKeys_anon = {"":
 ["keys_0"],
 "super": "Closure",
 call$2: function(k, v) {
  return this.keys_0.push(k);
}
};

$$.LinkedHashMapImplementation_getKeys__ = {"":
 ["list_2", "box_0"],
 "super": "Closure",
 call$1: function(entry) {
  var t1 = this.list_2;
  var t2 = this.box_0;
  var t3 = t2.index_10;
  t2.index_10 = $.add(t3, 1);
  t2 = entry.get$key();
  if (t3 !== (t3 | 0))
    throw $.iae(t3);
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  t1[t3] = t2;
}
};

$$.HashMapImplementation_getKeys__ = {"":
 ["list_2", "box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1 = this.list_2;
  var t2 = this.box_0;
  var t3 = t2.i_10;
  t2.i_10 = $.add(t3, 1);
  if (t3 !== (t3 | 0))
    throw $.iae(t3);
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  t1[t3] = key;
}
};

$$._Copier_visitMap_anon = {"":
 ["this_2", "box_0"],
 "super": "Closure",
 call$2: function(key, val) {
  var t1 = this.box_0.copy_10;
  var t2 = this.this_2;
  $.indexSet(t1, t2._dispatch$1(key), t2._dispatch$1(val));
}
};

$$._EventLoop__runHelper_next = {"":
 ["this_0"],
 "super": "Closure",
 call$0: function() {
  if (this.this_0.runIteration$0() !== true)
    return;
  $._window().setTimeout$2(this, 0);
}
};

$$.anon4 = {"":
 ["this_1", "callback_0"],
 "super": "Closure",
 call$0: function() {
  return this.callback_0.call$1(this.this_1);
}
};

$$.anon5 = {"":
 ["this_1", "callback_0"],
 "super": "Closure",
 call$0: function() {
  return this.callback_0.call$1(this.this_1);
}
};

$$.BoundClosure = {'':
 ['self', 'target'],
 'super': 'Closure',
call$1: function(p0) { return this.self[this.target](p0); }
};
$$.BoundClosure0 = {'':
 ['self', 'target'],
 'super': 'Closure',
call$0: function() { return this.self[this.target](); }
};
$$.BoundClosure1 = {'':
 ['self', 'target'],
 'super': 'Closure',
call$1: function(p0) { return this.self[this.target](p0); },
 call$0: function() {
  return this.call$1($)
}
};
$$.BoundClosure2 = {'':
 ['self', 'target'],
 'super': 'Closure',
call$1: function(p0) { return this.self[this.target](p0); },
 call$0: function() {
  return this.call$1($)
}
};
$$.BoundClosure3 = {'':
 ['self', 'target'],
 'super': 'Closure',
call$2: function(p0, p1) { return this.self[this.target](p0, p1); }
};
$$.BoundClosure4 = {'':
 ['self', 'target'],
 'super': 'Closure',
call$2: function(p0, p1) { return this.self[this.target](p0, p1); },
 call$1: function(url) {
  return this.call$2(url,null)
}
};
$.div$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a / b;
  return a.operator$div$1(b);
};

$._InputElementEventsImpl$ = function(_ptr) {
  return new $._InputElementEventsImpl(_ptr);
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$._TypedArrayFactoryProvider__U16 = function(arg) {
return new Uint16Array(arg);
};

$.eqB = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b) === true;
  return a === b;
};

$.set$length = function(receiver, newLength) {
  if ($.isJsArray(receiver)) {
    $.checkNull(newLength);
    if (!(typeof newLength === 'number' && Math.floor(newLength) === newLength))
      throw $.$$throw($.IllegalArgumentException$(newLength));
    if (newLength < 0)
      throw $.$$throw($.IndexOutOfRangeException$(newLength));
    $.checkGrowable(receiver, 'set length');
    receiver.length = newLength;
  } else
    receiver.set$length(newLength);
  return newLength;
};

$._Device_userAgent = function() {
  return $.window().get$navigator().get$userAgent();
};

$.checkNum = function(value) {
  if (!(typeof value === 'number')) {
    $.checkNull(value);
    throw $.$$throw($.IllegalArgumentException$(value));
  }
  return value;
};

$._TextTrackListEventsImpl$ = function(_ptr) {
  return new $._TextTrackListEventsImpl(_ptr);
};

$.StackTrace$ = function(stack) {
  return new $.StackTrace(stack);
};

$._MediaStreamTrackEventsImpl$ = function(_ptr) {
  return new $._MediaStreamTrackEventsImpl(_ptr);
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$.isJsArray = function(value) {
  return !(value == null) && value.constructor === Array;
};

$._fillStatics = function(context) {
  $globals = context.isolateStatics;
  $static_init();

};

$.ListIterator$ = function(list) {
  return new $.ListIterator(0, list);
};

$._JavaScriptAudioNodeEventsImpl$ = function(_ptr) {
  return new $._JavaScriptAudioNodeEventsImpl(_ptr);
};

$.TorusGeometry$ = function(radius, tube, segmentsR, segmentsT, arc) {
  var t1 = $.Three_GeometryCount;
  $.Three_GeometryCount = $.add(t1, 1);
  t1 = new $.TorusGeometry(radius, tube, segmentsR, segmentsT, arc, t1, '', [], [], [], [], [[]], [[]], [], [], [], [], [], null, null, null, false, false, null);
  t1.TorusGeometry$5(radius, tube, segmentsR, segmentsT, arc);
  return t1;
};

$._IDBTransactionEventsImpl$ = function(_ptr) {
  return new $._IDBTransactionEventsImpl(_ptr);
};

$.WebGLRendererMemoryInfo$ = function() {
  return new $.WebGLRendererMemoryInfo(0, 0, 0);
};

$.buildDynamicMetadata = function(inputTable) {
  var result = [];
  for (var i = 0; i < inputTable.length; ++i) {
    var tag = inputTable[i][0];
    var array = inputTable[i];
    var tags = array[1];
    var set = {};
    var tagNames = tags.split('|');
    for (var j = 0, index = 1; j < tagNames.length; ++j) {
      $.propertySet(set, tagNames[j], true);
      index = j;
      array = tagNames;
    }
    result.push($.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.DualPivotQuicksort__dualPivotQuicksort = function(a, left, right, compare) {
  if (typeof a !== 'object' || a === null || (a.constructor !== Array || !!a.immutable$list) && !a.is$JavaScriptIndexingBehavior())
    return $.DualPivotQuicksort__dualPivotQuicksort$bailout(1, a, left, right, compare, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  var sixth = $.tdiv($.add($.sub(right, left), 1), 6);
  if (typeof sixth !== 'number')
    throw $.iae(sixth);
  var index1 = left + sixth;
  var index5 = $.sub(right, sixth);
  if (typeof right !== 'number')
    throw $.iae(right);
  var index3 = $.tdiv(left + right, 2);
  var index2 = index3 - sixth;
  var index4 = index3 + sixth;
  if (index1 !== (index1 | 0))
    throw $.iae(index1);
  var t1 = a.length;
  if (index1 < 0 || index1 >= t1)
    throw $.ioore(index1);
  var el1 = a[index1];
  if (index2 !== (index2 | 0))
    throw $.iae(index2);
  if (index2 < 0 || index2 >= t1)
    throw $.ioore(index2);
  var el2 = a[index2];
  if (index3 !== (index3 | 0))
    throw $.iae(index3);
  if (index3 < 0 || index3 >= t1)
    throw $.ioore(index3);
  var el3 = a[index3];
  if (index4 !== (index4 | 0))
    throw $.iae(index4);
  if (index4 < 0 || index4 >= t1)
    throw $.ioore(index4);
  var el4 = a[index4];
  if (index5 !== (index5 | 0))
    throw $.iae(index5);
  if (index5 < 0 || index5 >= t1)
    throw $.ioore(index5);
  var el5 = a[index5];
  if ($.gtB(compare.call$2(el1, el2), 0)) {
    var t0 = el1;
    el1 = el2;
    el2 = t0;
  }
  if ($.gtB(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if ($.gtB(compare.call$2(el1, el3), 0)) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if ($.gtB(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.gtB(compare.call$2(el1, el4), 0)) {
    t0 = el1;
    el1 = el4;
    el4 = t0;
  }
  if ($.gtB(compare.call$2(el3, el4), 0)) {
    t0 = el3;
    el3 = el4;
    el4 = t0;
  }
  if ($.gtB(compare.call$2(el2, el5), 0)) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if ($.gtB(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.gtB(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if (index1 < 0 || index1 >= a.length)
    throw $.ioore(index1);
  a[index1] = el1;
  if (index3 < 0 || index3 >= a.length)
    throw $.ioore(index3);
  a[index3] = el3;
  if (index5 < 0 || index5 >= a.length)
    throw $.ioore(index5);
  a[index5] = el5;
  if (left !== (left | 0))
    throw $.iae(left);
  t1 = a.length;
  if (left < 0 || left >= t1)
    throw $.ioore(left);
  var t2 = a[left];
  if (index2 < 0 || index2 >= t1)
    throw $.ioore(index2);
  a[index2] = t2;
  if (right !== (right | 0))
    throw $.iae(right);
  t2 = a.length;
  if (right < 0 || right >= t2)
    throw $.ioore(right);
  var t3 = a[right];
  if (index4 < 0 || index4 >= t2)
    throw $.ioore(index4);
  a[index4] = t3;
  var less = left + 1;
  var great = right - 1;
  var pivots_are_equal = $.eqB(compare.call$2(el2, el4), 0);
  if (pivots_are_equal)
    for (var k = less; k <= great; ++k) {
      if (k !== (k | 0))
        throw $.iae(k);
      if (k < 0 || k >= a.length)
        throw $.ioore(k);
      var ak = a[k];
      var comp = compare.call$2(ak, el2);
      if (typeof comp !== 'number')
        return $.DualPivotQuicksort__dualPivotQuicksort$bailout(2, a, left, compare, less, k, index1, index5, el2, pivots_are_equal, right, ak, comp, el4, great);
      if (comp === 0)
        continue;
      if (comp < 0) {
        if (!(k === less)) {
          if (less !== (less | 0))
            throw $.iae(less);
          t1 = a.length;
          if (less < 0 || less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k < 0 || k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          if (less < 0 || less >= a.length)
            throw $.ioore(less);
          a[less] = ak;
        }
        ++less;
      } else
        for (var less0 = less + 1; true;) {
          if (great !== (great | 0))
            throw $.iae(great);
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          comp = compare.call$2(a[great], el2);
          if ($.gtB(comp, 0)) {
            --great;
            continue;
          } else {
            t1 = $.ltB(comp, 0);
            var great0 = great - 1;
            t2 = a.length;
            if (t1) {
              if (less !== (less | 0))
                throw $.iae(less);
              if (less < 0 || less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k < 0 || k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              t1 = a.length;
              if (great < 0 || great >= t1)
                throw $.ioore(great);
              t3 = a[great];
              if (less < 0 || less >= t1)
                throw $.ioore(less);
              a[less] = t3;
              if (great < 0 || great >= a.length)
                throw $.ioore(great);
              a[great] = ak;
              great = great0;
              less = less0;
              break;
            } else {
              if (great < 0 || great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k < 0 || k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              if (great < 0 || great >= a.length)
                throw $.ioore(great);
              a[great] = ak;
              great = great0;
              break;
            }
          }
        }
    }
  else
    for (k = less; k <= great; ++k) {
      if (k !== (k | 0))
        throw $.iae(k);
      if (k < 0 || k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.ltB(compare.call$2(ak, el2), 0)) {
        if (!(k === less)) {
          if (less !== (less | 0))
            throw $.iae(less);
          t1 = a.length;
          if (less < 0 || less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k < 0 || k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          if (less < 0 || less >= a.length)
            throw $.ioore(less);
          a[less] = ak;
        }
        ++less;
      } else if ($.gtB(compare.call$2(ak, el4), 0))
        for (less0 = less + 1; true;) {
          if (great !== (great | 0))
            throw $.iae(great);
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.gtB(compare.call$2(a[great], el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great < 0 || great >= a.length)
              throw $.ioore(great);
            t1 = $.ltB(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t2 = a.length;
            if (t1) {
              if (less !== (less | 0))
                throw $.iae(less);
              if (less < 0 || less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k < 0 || k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              t1 = a.length;
              if (great < 0 || great >= t1)
                throw $.ioore(great);
              t3 = a[great];
              if (less < 0 || less >= t1)
                throw $.ioore(less);
              a[less] = t3;
              if (great < 0 || great >= a.length)
                throw $.ioore(great);
              a[great] = ak;
              great = great0;
              less = less0;
            } else {
              if (great < 0 || great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k < 0 || k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              if (great < 0 || great >= a.length)
                throw $.ioore(great);
              a[great] = ak;
              great = great0;
            }
            break;
          }
        }
    }
  t1 = less - 1;
  if (t1 !== (t1 | 0))
    throw $.iae(t1);
  t2 = a.length;
  if (t1 < 0 || t1 >= t2)
    throw $.ioore(t1);
  t3 = a[t1];
  if (left < 0 || left >= t2)
    throw $.ioore(left);
  a[left] = t3;
  if (t1 < 0 || t1 >= a.length)
    throw $.ioore(t1);
  a[t1] = el2;
  t1 = great + 1;
  if (t1 !== (t1 | 0))
    throw $.iae(t1);
  t3 = a.length;
  if (t1 < 0 || t1 >= t3)
    throw $.ioore(t1);
  var t4 = a[t1];
  if (right < 0 || right >= t3)
    throw $.ioore(right);
  a[right] = t4;
  if (t1 < 0 || t1 >= a.length)
    throw $.ioore(t1);
  a[t1] = el4;
  $.DualPivotQuicksort__doSort(a, left, less - 2, compare);
  $.DualPivotQuicksort__doSort(a, great + 2, right, compare);
  if (pivots_are_equal)
    return;
  if (less < index1 && great > index5) {
    while (true) {
      if (less !== (less | 0))
        throw $.iae(less);
      if (less < 0 || less >= a.length)
        throw $.ioore(less);
      if (!$.eqB(compare.call$2(a[less], el2), 0))
        break;
      ++less;
    }
    while (true) {
      if (great !== (great | 0))
        throw $.iae(great);
      if (great < 0 || great >= a.length)
        throw $.ioore(great);
      if (!$.eqB(compare.call$2(a[great], el4), 0))
        break;
      --great;
    }
    for (k = less; k <= great; ++k) {
      if (k !== (k | 0))
        throw $.iae(k);
      if (k < 0 || k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.eqB(compare.call$2(ak, el2), 0)) {
        if (!(k === less)) {
          if (less !== (less | 0))
            throw $.iae(less);
          t1 = a.length;
          if (less < 0 || less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k < 0 || k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          if (less < 0 || less >= a.length)
            throw $.ioore(less);
          a[less] = ak;
        }
        ++less;
      } else if ($.eqB(compare.call$2(ak, el4), 0))
        for (less0 = less + 1; true;) {
          if (great !== (great | 0))
            throw $.iae(great);
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.eqB(compare.call$2(a[great], el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great < 0 || great >= a.length)
              throw $.ioore(great);
            t1 = $.ltB(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t2 = a.length;
            if (t1) {
              if (less !== (less | 0))
                throw $.iae(less);
              if (less < 0 || less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k < 0 || k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              t1 = a.length;
              if (great < 0 || great >= t1)
                throw $.ioore(great);
              t3 = a[great];
              if (less < 0 || less >= t1)
                throw $.ioore(less);
              a[less] = t3;
              if (great < 0 || great >= a.length)
                throw $.ioore(great);
              a[great] = ak;
              great = great0;
              less = less0;
            } else {
              if (great < 0 || great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k < 0 || k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              if (great < 0 || great >= a.length)
                throw $.ioore(great);
              a[great] = ak;
              great = great0;
            }
            break;
          }
        }
    }
    $.DualPivotQuicksort__doSort(a, less, great, compare);
  } else
    $.DualPivotQuicksort__doSort(a, less, great, compare);
};

$.dynamicFunction = function(name$) {
  var f = Object.prototype[name$];
  if (!(f == null) && !!f.methods)
    return f.methods;
  var methods = {};
  var dartMethod = Object.getPrototypeOf($.CTC25)[name$];
  if (!(dartMethod == null))
    $.propertySet(methods, 'Object', dartMethod);
  var bind = function() {return $.dynamicBind.call$4(this, name$, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, name$, bind);
  return methods;
};

$.ListImplementation_List$from = function(other) {
  var result = $.ListImplementation_List(null);
  for (var t1 = $.iterator(other); t1.hasNext$0() === true;)
    result.push(t1.next$0());
  return result;
};

$._Timer$repeating = function(milliSeconds, callback) {
  var t1 = new $._Timer(false, null);
  t1._Timer$repeating$2(milliSeconds, callback);
  return t1;
};

$._EventSourceEventsImpl$ = function(_ptr) {
  return new $._EventSourceEventsImpl(_ptr);
};

$._convertDartToNative_PrepareForStructuredClone = function(value) {
  var values = [];
  var copies = [];
  var t1 = new $._convertDartToNative_PrepareForStructuredClone_findSlot(copies, values);
  var t2 = new $._convertDartToNative_PrepareForStructuredClone_readSlot(copies);
  var t3 = new $._convertDartToNative_PrepareForStructuredClone_writeSlot(copies);
  var t4 = new $._convertDartToNative_PrepareForStructuredClone_cleanupSlots();
  var copy = new $._convertDartToNative_PrepareForStructuredClone_walk(t3, t1, t2).call$1(value);
  t4.call$0();
  return copy;
};

$.floor = function(receiver) {
  if (!(typeof receiver === 'number'))
    return receiver.floor$0();
  return Math.floor(receiver);
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
};

$._WebSocketEventsImpl$ = function(_ptr) {
  return new $._WebSocketEventsImpl(_ptr);
};

$.UniformsUtils_clone = function(uniforms_src) {
  var uniforms_dst = $.makeLiteralMap([]);
  $.forEach(uniforms_src, new $.UniformsUtils_clone_anon(uniforms_dst));
  return uniforms_dst;
};

$.shr = function(a, b) {
  if ($.checkNumbers(a, b)) {
    if (b < 0)
      throw $.$$throw($.IllegalArgumentException$(b));
    if (a > 0) {
      if (b > 31)
        return 0;
      return a >>> b;
    }
    if (b > 31)
      b = 31;
    return (a >> b) >>> 0;
  }
  return a.operator$shr$1(b);
};

$._convertDartToNative_SerializedScriptValue = function(value) {
  return $._convertDartToNative_PrepareForStructuredClone(value);
};

$._deserializeMessage = function(message) {
  if ($._globalState().get$needSerialization() === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$.and = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a & b) >>> 0;
  return a.operator$and$1(b);
};

$._MediaStreamEventsImpl$ = function(_ptr) {
  return new $._MediaStreamEventsImpl(_ptr);
};

$.hashCode = function(receiver) {
  if (typeof receiver === 'number')
    return receiver & 0x1FFFFFFF;
  if (!(typeof receiver === 'string'))
    return receiver.hashCode$0();
  var length$ = receiver.length;
  for (var hash = 0, i = 0; i < length$; ++i) {
    var hash0 = 536870911 & hash + receiver.charCodeAt(i);
    var hash1 = 536870911 & hash0 + 524287 & hash0 << 10;
    hash1 = (hash1 ^ $.shr(hash1, 6)) >>> 0;
    hash = hash1;
  }
  hash0 = 536870911 & hash + 67108863 & hash << 3;
  hash0 = (hash0 ^ $.shr(hash0, 11)) >>> 0;
  return 536870911 & hash0 + 16383 & hash0 << 15;
};

$.FutureImpl_FutureImpl$immediate = function(value) {
  var res = $.FutureImpl$();
  res._setValue$1(value);
  return res;
};

$.mul$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a * b;
  return a.operator$mul$1(b);
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $.Futures_wait(finder.ports).then$1(new $._waitForPendingPorts_anon(callback));
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
};

$.contains$1 = function(receiver, other) {
  if (!(typeof receiver === 'string'))
    return receiver.contains$1(other);
  return $.contains$2(receiver, other, 0);
};

$.Matrix4$ = function(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
  var t1 = new $.Matrix4($._TypedArrayFactoryProvider_Float32Array(16));
  t1.Matrix4$16(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44);
  return t1;
};

$._EventsImpl$ = function(_ptr) {
  return new $._EventsImpl(_ptr);
};

$._RTCPeerConnectionEventsImpl$ = function(_ptr) {
  return new $._RTCPeerConnectionEventsImpl(_ptr);
};

$.neg = function(a) {
  if (typeof a === "number")
    return -a;
  return a.negate$0();
};

$.NoSuchMethodError$ = function(_receiver, _functionName, _arguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _functionName, _arguments, existingArgumentNames);
};

$.SphereGeometry$ = function(radius, segmentsWidth, segmentsHeight, phiStart, phiLength, thetaStart, thetaLength) {
  var t1 = $.Three_GeometryCount;
  $.Three_GeometryCount = $.add(t1, 1);
  t1 = new $.SphereGeometry(radius, t1, '', [], [], [], [], [[]], [[]], [], [], [], [], [], null, null, null, false, false, null);
  t1.SphereGeometry$7(radius, segmentsWidth, segmentsHeight, phiStart, phiLength, thetaStart, thetaLength);
  return t1;
};

$.Strings_join = function(strings, separator) {
  return $.StringImplementation_join(strings, separator);
};

$.StringImplementation_join = function(strings, separator) {
  $.checkNull(strings);
  $.checkNull(separator);
  return $.stringJoinUnchecked($.StringImplementation__toJsStringArray(strings), separator);
};

$.add$1 = function(receiver, value) {
  if ($.isJsArray(receiver)) {
    $.checkGrowable(receiver, 'add');
    receiver.push(value);
    return;
  }
  return receiver.add$1(value);
};

$.get$length = function(receiver) {
  if (typeof receiver === 'string' || $.isJsArray(receiver))
    return receiver.length;
  else
    return receiver.get$length();
};

$.dynamicBind = function(obj, name$, methods, arguments$) {
  var tag = $.getTypeNameOf(obj);
  var method = methods[tag];
  if (method == null && !($._dynamicMetadata0() == null))
    for (var i = 0; i < $._dynamicMetadata0().length; ++i) {
      var entry = $._dynamicMetadata0()[i];
      if (entry.get$_set()[tag]) {
        method = methods[entry.get$_tag()];
        if (!(method == null))
          break;
      }
    }
  if (method == null)
    method = methods['Object'];
  var proto = Object.getPrototypeOf(obj);
  if (method == null)
    method = function () {if (Object.getPrototypeOf(this) === proto) {throw new TypeError(name$ + " is not a function");} else {return Object.prototype[name$].apply(this, arguments);}};
  if (!proto.hasOwnProperty(name$))
    $.defineProperty(proto, name$, method);
  return method.apply(obj, arguments$);
};

$.main = function() {
  $.WebGL_Geometries$().run$0();
};

$.Face3$ = function(a, b, c, normalOrVertexNormals, colorOrVertexColors, materialIndex) {
  var t1 = new $.Face3(a, b, c, null, null, null, null, null, materialIndex, null);
  t1.Face3$6(a, b, c, normalOrVertexNormals, colorOrVertexColors, materialIndex);
  return t1;
};

$.ceil = function(receiver) {
  if (!(typeof receiver === 'number'))
    return receiver.ceil$0();
  return Math.ceil(receiver);
};

$.Primitives_getYear = function(receiver) {
  return receiver.isUtc === true ? $.Primitives_lazyAsJsDate(receiver).getUTCFullYear() : $.Primitives_lazyAsJsDate(receiver).getFullYear();
};

$._FrozenElementListIterator$ = function(_list) {
  return new $._FrozenElementListIterator(_list, 0);
};

$.Primitives_getHours = function(receiver) {
  return receiver.isUtc === true ? $.Primitives_lazyAsJsDate(receiver).getUTCHours() : $.Primitives_lazyAsJsDate(receiver).getHours();
};

$.Maps_mapToString = function(m) {
  var result = $.StringBufferImpl$('');
  $.Maps__emitMap(m, result, $.ListImplementation_List(null));
  return result.toString$0();
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  if ($.eqB(numberOfArguments, 0))
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if ($.eqB(numberOfArguments, 1))
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(closure, arg1));
  else if ($.eqB(numberOfArguments, 2))
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(closure, arg1, arg2));
  else
    throw $.$$throw($.ExceptionImplementation$('Unsupported number of arguments for wrapped closure'));
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$.geB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a >= b : $.ge$slow(a, b) === true;
};

$._isJavaScriptSimpleObject = function(value) {
  return Object.getPrototypeOf(value) === Object.prototype;
};

$.StringMatch$ = function(_start, str, pattern) {
  return new $.StringMatch(_start, str, pattern);
};

$.ioore = function(index) {
  throw $.$$throw($.IndexOutOfRangeException$(index));
};

$._ChildNodeListLazy$ = function(_this) {
  return new $._ChildNodeListLazy(_this);
};

$._callInIsolate = function(isolate, function$) {
  isolate.eval$1(function$);
  $._globalState().get$topEventLoop().run$0();
};

$._convertNativeToDart_IDBKey = function(nativeKey) {
  if (new $._convertNativeToDart_IDBKey_containsDate().call$1(nativeKey) === true)
    throw $.$$throw($.CTC14);
  return nativeKey;
};

$.leB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a <= b : $.le$slow(a, b) === true;
};

$.DateImplementation$fromMillisecondsSinceEpoch = function(millisecondsSinceEpoch, isUtc) {
  var t1 = new $.DateImplementation(millisecondsSinceEpoch, isUtc);
  t1.DateImplementation$fromMillisecondsSinceEpoch$2(millisecondsSinceEpoch, isUtc);
  return t1;
};

$.mod = function(a, b) {
  if ($.checkNumbers(a, b)) {
    var result = a % b;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (b < 0)
      return result - b;
    else
      return result + b;
  }
  return a.operator$mod$1(b);
};

$._IDBRequestEventsImpl$ = function(_ptr) {
  return new $._IDBRequestEventsImpl(_ptr);
};

$.ImageLoader$ = function() {
  return new $.ImageLoader(null, $.makeLiteralMap([]));
};

$.Collections_collectionToString = function(c) {
  var result = $.StringBufferImpl$('');
  $.Collections__emitCollection(c, result, $.ListImplementation_List(null));
  return result.toString$0();
};

$._SharedWorkerContextEventsImpl$ = function(_ptr) {
  return new $._SharedWorkerContextEventsImpl(_ptr);
};

$.indexOf$2 = function(receiver, element, start) {
  if ($.isJsArray(receiver)) {
    if (!(typeof start === 'number' && Math.floor(start) === start))
      throw $.$$throw($.IllegalArgumentException$(start));
    return $.Arrays_indexOf(receiver, element, start, receiver.length);
  } else if (typeof receiver === 'string') {
    $.checkNull(element);
    if (!(typeof start === 'number' && Math.floor(start) === start))
      throw $.$$throw($.IllegalArgumentException$(start));
    if (!(typeof element === 'string'))
      throw $.$$throw($.IllegalArgumentException$(element));
    if (start < 0)
      return -1;
    return receiver.indexOf(element, start);
  }
  return receiver.indexOf$2(element, start);
};

$.EventEmitterEvent$ = function(type, message, content$) {
  return new $.EventEmitterEvent(type, message, content$);
};

$._TextTrackEventsImpl$ = function(_ptr) {
  return new $._TextTrackEventsImpl(_ptr);
};

$.DoubleLinkedQueue$ = function() {
  var t1 = new $.DoubleLinkedQueue(null);
  t1.DoubleLinkedQueue$0();
  return t1;
};

$.StringBufferImpl$ = function(content$) {
  var t1 = new $.StringBufferImpl(null, null);
  t1.StringBufferImpl$1(content$);
  return t1;
};

$.LineBasicMaterial$ = function(color, linewidth, linecap, linejoin, vertexColors, fog, name$, side, opacity, transparent, blending, blendSrc, blendDst, blendEquation, depthTest, depthWrite, polygonOffset, polygonOffsetFactor, polygonOffsetUnits, alphaTest, overdraw, visible) {
  var t1 = $.Color$(color);
  var t2 = $.Three_MaterialCount;
  $.Three_MaterialCount = $.add(t2, 1);
  return new $.LineBasicMaterial(t1, linewidth, linecap, linejoin, fog, vertexColors, name$, t2, side, opacity, blending, blendSrc, blendDst, blendEquation, alphaTest, polygonOffset, polygonOffsetFactor, polygonOffsetUnits, transparent, depthTest, depthWrite, overdraw, visible, true, null);
};

$._SVGElementInstanceEventsImpl$ = function(_ptr) {
  return new $._SVGElementInstanceEventsImpl(_ptr);
};

$.Primitives_getDay = function(receiver) {
  return receiver.isUtc === true ? $.Primitives_lazyAsJsDate(receiver).getUTCDate() : $.Primitives_lazyAsJsDate(receiver).getDate();
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.add = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a + b : $.add$slow(a, b);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator = $.iterator(keyValuePairs);
  var result = $.LinkedHashMapImplementation$();
  for (; iterator.hasNext$0() === true;)
    result.operator$indexSet$2(iterator.next$0(), iterator.next$0());
  return result;
};

$._TypedArrayFactoryProvider__F32 = function(arg) {
return new Float32Array(arg);
};

$.Scene$ = function() {
  var t1 = $.Three_Object3DCount;
  $.Three_Object3DCount = $.add(t1, 1);
  t1 = new $.Scene(null, null, null, null, null, null, t1, '', $.makeLiteralMap([]), null, [], $.Vector3$(0, 1, 0), $.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0), $.Vector3$(1, 1, 1), 'XYZ', null, null, null, true, null, $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), true, true, $.Quaternion$(0, 0, 0, 1), false, 0, 1, true, false, false, true, $.Vector3$(0, 0, 0), null);
  t1.Scene$0();
  return t1;
};

$.Matrix4___v1 = function() {
  if ($.Matrix4____v1 == null)
    $.Matrix4____v1 = $.Vector3$(0, 0, 0);
  return $.Matrix4____v1;
};

$.Vector3$ = function(x, y, z) {
  return new $.Vector3(x, y, z);
};

$.NoMoreElementsException$ = function() {
  return new $.NoMoreElementsException();
};

$.WebGLObject$_internal = function(object, opaque, transparent, buffer, render, z) {
  return new $.WebGLObject(false, null, null, null, null, null, null, buffer, object, opaque, transparent, render, z, null);
};

$.addAll = function(receiver, collection) {
  if (!$.isJsArray(receiver))
    return receiver.addAll$1(collection);
  var iterator = $.iterator(collection);
  for (; iterator.hasNext$0() === true;)
    $.add$1(receiver, iterator.next$0());
};

$._Elements_ImageElement = function(src, width, height) {
  var _e = $._document().$dom_createElement$1('img');
  if (!(src == null))
    _e.set$src(src);
  if (!(width == null))
    _e.set$width(width);
  if (!(height == null))
    _e.set$height(height);
  return _e;
};

$.gt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a > b;
  return a.operator$gt$1(b);
};

$.WebGLCamera$_internal = function(camera) {
  return new $.WebGLCamera(camera, $._TypedArrayFactoryProvider_Float32Array(16), $._TypedArrayFactoryProvider_Float32Array(16));
};

$.typeNameInChrome = function(obj) {
  var name$ = obj.constructor.name;
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'WebKitMutationObserver')
    return 'MutationObserver';
  if (name$ === 'FormData')
    return 'DOMFormData';
  return name$;
};

$.Collections__emitCollection = function(c, result, visiting) {
  $.add$1(visiting, c);
  var isList = typeof c === 'object' && c !== null && (c.constructor === Array || c.is$List());
  $.add$1(result, isList ? '[' : '{');
  for (var t1 = $.iterator(c), first = true; t1.hasNext$0() === true;) {
    var t2 = t1.next$0();
    if (!first)
      $.add$1(result, ', ');
    $.Collections__emitObject(t2, result, visiting);
    first = false;
  }
  $.add$1(result, isList ? ']' : '}');
  $.removeLast(visiting);
};

$.FilteredElementList$ = function(node) {
  return new $.FilteredElementList(node, node.get$nodes());
};

$._document = function() {
return document;
};

$._FrameSetElementEventsImpl$ = function(_ptr) {
  return new $._FrameSetElementEventsImpl(_ptr);
};

$._IDBDatabaseEventsImpl$ = function(_ptr) {
  return new $._IDBDatabaseEventsImpl(_ptr);
};

$.allMatches = function(receiver, str) {
  if (!(typeof receiver === 'string'))
    return receiver.allMatches$1(str);
  $.checkString(str);
  return $.allMatchesInStringUnchecked(receiver, str);
};

$.toStringForNativeObject = function(obj) {
  return 'Instance of ' + $.getTypeNameOf(obj);
};

$.OctahedronGeometry_OctahedronGeometry = function(radius, detail) {
  return $.OctahedronGeometry$_internal([[1, 0, 0], [-1, 0, 0], [0, 1, 0], [0, -1, 0], [0, 0, 1], [0, 0, -1]], [[0, 2, 4], [0, 4, 3], [0, 3, 5], [0, 5, 2], [1, 2, 5], [1, 5, 3], [1, 3, 4], [1, 4, 2]], radius, detail);
};

$.Mesh$ = function(geometry, material) {
  var t1 = $.Three_Object3DCount;
  $.Three_Object3DCount = $.add(t1, 1);
  t1 = new $.Mesh(geometry, material, null, null, null, null, t1, '', $.makeLiteralMap([]), null, [], $.Vector3$(0, 1, 0), $.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0), $.Vector3$(1, 1, 1), 'XYZ', null, null, null, true, null, $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), true, true, $.Quaternion$(0, 0, 0, 1), false, 0, 1, true, false, false, true, $.Vector3$(0, 0, 0), null);
  t1.Mesh$2(geometry, material);
  return t1;
};

$._Collections_map = function(source, destination, f) {
  for (var t1 = $.iterator(source); t1.hasNext$0() === true;)
    destination.push(f.call$1(t1.next$0()));
  return destination;
};

$.CubeGeomSides$ = function(px, nx, py, ny, pz, nz) {
  return new $.CubeGeomSides(px, nx, py, ny, pz, nz);
};

$.ltB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b) === true;
};

$.tdiv = function(a, b) {
  if ($.checkNumbers(a, b))
    return $.truncate(a / b);
  return a.operator$tdiv$1(b);
};

$._MediaStreamTrackListEventsImpl$ = function(_ptr) {
  return new $._MediaStreamTrackListEventsImpl(_ptr);
};

$.pow = function(value, exponent) {
  $.checkNum(value);
  $.checkNum(exponent);
  return Math.pow(value, exponent);
};

$.S = function(value) {
  var res = $.toString(value);
  if (!(typeof res === 'string'))
    throw $.$$throw($.IllegalArgumentException$(value));
  return res;
};

$._DoubleLinkedQueueIterator$ = function(_sentinel) {
  var t1 = new $._DoubleLinkedQueueIterator(_sentinel, null);
  t1._DoubleLinkedQueueIterator$1(_sentinel);
  return t1;
};

$.Vector4$ = function(x, y, z, w) {
  return new $.Vector4(x, y, z, w);
};

$._Device_isIE = function() {
  return $._Device_isOpera() !== true && $.contains$2($._Device_userAgent(), 'MSIE', 0) === true;
};

$.sort = function(receiver, compare) {
  if (!$.isJsArray(receiver))
    return receiver.sort$1(compare);
  $.checkMutable(receiver, 'sort');
  $.DualPivotQuicksort_sort(receiver, compare);
};

$.DualPivotQuicksort_sort = function(a, compare) {
  $.DualPivotQuicksort__doSort(a, 0, $.sub($.get$length(a), 1), compare);
};

$.startRootIsolate = function(entry) {
  var t1 = $._Manager$();
  $._globalState0(t1);
  if ($._globalState().get$isWorker() === true)
    return;
  var rootContext = $._IsolateContext$();
  $._globalState().set$rootContext(rootContext);
  $._fillStatics(rootContext);
  $._globalState().set$currentContext(rootContext);
  if (!($._window() == null))
    rootContext.eval$1(new $.startRootIsolate_anon());
  rootContext.eval$1(entry);
  $._globalState().get$topEventLoop().run$0();
};

$.lt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a < b;
  return a.operator$lt$1(b);
};

$.Collections__emitObject = function(o, result, visiting) {
  if (typeof o === 'object' && o !== null && (o.constructor === Array || o.is$Collection()))
    if ($.Collections__containsRef(visiting, o))
      $.add$1(result, typeof o === 'object' && o !== null && (o.constructor === Array || o.is$List()) ? '[...]' : '{...}');
    else
      $.Collections__emitCollection(o, result, visiting);
  else if (typeof o === 'object' && o !== null && o.is$Map())
    if ($.Collections__containsRef(visiting, o))
      $.add$1(result, '{...}');
    else
      $.Maps__emitMap(o, result, visiting);
  else
    $.add$1(result, o == null ? 'null' : o);
};

$._DedicatedWorkerContextEventsImpl$ = function(_ptr) {
  return new $._DedicatedWorkerContextEventsImpl(_ptr);
};

$.Object3D$ = function() {
  var t1 = $.Three_Object3DCount;
  $.Three_Object3DCount = $.add(t1, 1);
  return new $.Object3D(t1, '', $.makeLiteralMap([]), null, [], $.Vector3$(0, 1, 0), $.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0), $.Vector3$(1, 1, 1), 'XYZ', null, null, null, true, null, $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), true, true, $.Quaternion$(0, 0, 0, 1), false, 0, 1, true, false, false, true, $.Vector3$(0, 0, 0), null);
};

$.WebGLCamera_WebGLCamera = function(camera) {
  if ($.index(camera, '__webglCamera') == null)
    $.indexSet(camera, '__webglCamera', $.WebGLCamera$_internal(camera));
  return $.index(camera, '__webglCamera');
};

$.truncate = function(receiver) {
  return receiver < 0 ? $.ceil(receiver) : $.floor(receiver);
};

$._EventLoop$ = function() {
  return new $._EventLoop($.DoubleLinkedQueue$());
};

$.substringUnchecked = function(receiver, startIndex, endIndex) {
  return receiver.substring(startIndex, endIndex);
};

$.LatheGeometry$ = function(points, steps, angle) {
  var t1 = $.Three_GeometryCount;
  $.Three_GeometryCount = $.add(t1, 1);
  t1 = new $.LatheGeometry(steps, angle, t1, '', [], [], [], [], [[]], [[]], [], [], [], [], [], null, null, null, false, false, null);
  t1.LatheGeometry$3(points, steps, angle);
  return t1;
};

$.Line$ = function(geometry, material, type) {
  var t1 = $.Three_Object3DCount;
  $.Three_Object3DCount = $.add(t1, 1);
  t1 = new $.Line(geometry, material, type, t1, '', $.makeLiteralMap([]), null, [], $.Vector3$(0, 1, 0), $.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0), $.Vector3$(1, 1, 1), 'XYZ', null, null, null, true, null, $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), true, true, $.Quaternion$(0, 0, 0, 1), false, 0, 1, true, false, false, true, $.Vector3$(0, 0, 0), null);
  t1.Line$3(geometry, material, type);
  return t1;
};

$._convertNativeToDart_IDBAny = function(object) {
  return $._convertNativeToDart_AcceptStructuredClone(object);
};

$.reduce = function(receiver, initialValue, f) {
  if (!$.isJsArray(receiver))
    return receiver.reduce$2(initialValue, f);
  else
    return $.Collections_reduce(receiver, initialValue, f);
};

$.Collections_reduce = function(iterable, initialValue, combine) {
  for (var t1 = $.iterator(iterable); t1.hasNext$0() === true;)
    initialValue = combine.call$2(initialValue, t1.next$0());
  return initialValue;
};

$._AudioContextEventsImpl$ = function(_ptr) {
  return new $._AudioContextEventsImpl(_ptr);
};

$.typeNameInSafari = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'WebKitMutationObserver')
    return 'MutationObserver';
  if (name$ === 'FormData')
    return 'DOMFormData';
  return name$;
};

$._ElementAttributeMap$ = function(_element) {
  return new $._ElementAttributeMap(_element);
};

$.contains$2 = function(receiver, other, startIndex) {
  if (!(typeof receiver === 'string'))
    return receiver.contains$2(other, startIndex);
  $.checkNull(other);
  return $.stringContainsUnchecked(receiver, other, startIndex);
};

$.CircleGeometry$ = function(radius, segments, thetaStart, thetaLength) {
  var t1 = $.Three_GeometryCount;
  $.Three_GeometryCount = $.add(t1, 1);
  t1 = new $.CircleGeometry(radius, segments, thetaStart, null, t1, '', [], [], [], [], [[]], [[]], [], [], [], [], [], null, null, null, false, false, null);
  t1.CircleGeometry$4(radius, segments, thetaStart, thetaLength);
  return t1;
};

$._WorkerContextEventsImpl$ = function(_ptr) {
  return new $._WorkerContextEventsImpl(_ptr);
};

$._ElementEventsImpl$ = function(_ptr) {
  return new $._ElementEventsImpl(_ptr);
};

$.Primitives_getMonth = function(receiver) {
  return receiver.isUtc === true ? $.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : $.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === 'undefined') {
    var t1 = [];
    $._dynamicMetadata(t1);
  }
  return $dynamicMetadata;
};

$.isNegative = function(receiver) {
  return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
};

$.add$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a + b;
  return a.operator$add$1(b);
};

$.jsHasOwnProperty = function(jsObject, property) {
  return jsObject.hasOwnProperty(property);
};

$.WebGL_Geometries$ = function() {
  return new $.WebGL_Geometries(null, null, null, null);
};

$.AxisHelper$ = function() {
  var t1 = $.Three_Object3DCount;
  $.Three_Object3DCount = $.add(t1, 1);
  t1 = new $.AxisHelper(t1, '', $.makeLiteralMap([]), null, [], $.Vector3$(0, 1, 0), $.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0), $.Vector3$(1, 1, 1), 'XYZ', null, null, null, true, null, $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), true, true, $.Quaternion$(0, 0, 0, 1), false, 0, 1, true, false, false, true, $.Vector3$(0, 0, 0), null);
  t1.AxisHelper$0();
  return t1;
};

$._PendingSendPortFinder$ = function() {
  var t1 = $._MessageTraverserVisitedMap$();
  t1 = new $._PendingSendPortFinder([], t1);
  t1._PendingSendPortFinder$0();
  return t1;
};

$.Futures_wait = function(futures) {
  var t1 = {};
  if (typeof futures !== 'string' && (typeof futures !== 'object' || futures === null || futures.constructor !== Array && !futures.is$JavaScriptIndexingBehavior()))
    return $.Futures_wait$bailout(1, futures, t1);
  if ($.isEmpty(futures) === true)
    return $.FutureImpl_FutureImpl$immediate($.CTC0);
  var completer = $.CompleterImpl$();
  var result = completer.get$future();
  t1.remaining_1 = futures.length;
  var values = $.ListImplementation_List(futures.length);
  for (var i = 0; t2 = futures.length, i < t2; ++i) {
    if (i < 0 || i >= t2)
      throw $.ioore(i);
    var future = futures[i];
    future.then$1(new $.Futures_wait_anon(completer, i, t1, result, values));
    future.handleException$1(new $.Futures_wait_anon0(future, completer, result));
  }
  return result;
  var t2;
};

$.DateImplementation$now = function() {
  var t1 = new $.DateImplementation($.Primitives_dateNow(), false);
  t1.DateImplementation$now$0();
  return t1;
};

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  if (typeof src !== 'string' && (typeof src !== 'object' || src === null || src.constructor !== Array && !src.is$JavaScriptIndexingBehavior()))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== 'object' || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !dst.is$JavaScriptIndexingBehavior())
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (var i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= src.length)
        throw $.ioore(i);
      var t1 = src[i];
      if (j !== (j | 0))
        throw $.iae(j);
      if (j < 0 || j >= dst.length)
        throw $.ioore(j);
      dst[j] = t1;
    }
  else
    for (t1 = srcStart + count, i = srcStart, j = dstStart; i < t1; ++i, ++j) {
      if (i < 0 || i >= src.length)
        throw $.ioore(i);
      var t2 = src[i];
      if (j < 0 || j >= dst.length)
        throw $.ioore(j);
      dst[j] = t2;
    }
};

$._PeerConnection00EventsImpl$ = function(_ptr) {
  return new $._PeerConnection00EventsImpl(_ptr);
};

$._AbstractWorkerEventsImpl$ = function(_ptr) {
  return new $._AbstractWorkerEventsImpl(_ptr);
};

$.indexSet = function(a, index, value) {
  if (a.constructor === Array && !a.immutable$list) {
    var key = index >>> 0;
    if (key === index && key < a.length) {
      a[key] = value;
      return;
    }
  }
  $.indexSet$slow(a, index, value);
};

$.index$slow = function(a, index) {
  if (typeof a === 'string' || $.isJsArray(a)) {
    if (!(typeof index === 'number' && Math.floor(index) === index)) {
      if (!(typeof index === 'number'))
        throw $.$$throw($.IllegalArgumentException$(index));
      if (!($.truncate(index) === index))
        throw $.$$throw($.IllegalArgumentException$(index));
    }
    if ($.ltB(index, 0) || $.geB(index, $.get$length(a)))
      throw $.$$throw($.IndexOutOfRangeException$(index));
    return a[index];
  }
  return a.operator$index$1(index);
};

$.div = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a / b : $.div$slow(a, b);
};

$._Elements_CanvasElement = function(width, height) {
  var _e = $._document().$dom_createElement$1('canvas');
  if (!(width == null))
    _e.set$width(width);
  if (!(height == null))
    _e.set$height(height);
  return _e;
};

$.$$throw = function(ex) {
  if (ex == null)
    ex = $.CTC;
  var jsError = new Error();
  jsError.name = ex;
  jsError.description = ex;
  jsError.dartException = ex;
  jsError.toString = $.toStringWrapper.call$0;
  throw jsError;
};

$._MessagePortEventsImpl$ = function(_ptr) {
  return new $._MessagePortEventsImpl(_ptr);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$._Device_isFirefox = function() {
  return $.contains$2($._Device_userAgent(), 'Firefox', 0);
};

$.min = function(a, b) {
  if (typeof a === 'number') {
    if (typeof b === 'number') {
      if (a > b)
        return b;
      if (a < b)
        return a;
      if (typeof b === 'number') {
        if (typeof a === 'number')
          if (a === 0)
            return (a + b) * a * b;
        if (a === 0 && $.isNegative(b) === true || $.isNaN(b) === true)
          return b;
        return a;
      }
      return a;
    }
    throw $.$$throw($.IllegalArgumentException$(b));
  }
  throw $.$$throw($.IllegalArgumentException$(a));
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedOperationException$(reason));
};

$.ShaderLib = function() {
  if ($.__ShaderLib == null)
    $.__ShaderLib = $.makeLiteralMap(['depth', $.makeLiteralMap(['uniforms', $.makeLiteralMap(['mNear', $.Uniform$('f', 1, null), 'mFar', $.Uniform$('f', 2000, null), 'opacity', $.Uniform$('f', 1, null)]), 'vertexShader', $.Strings_join(['void main() {', 'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'], '\n'), 'fragmentShader', $.Strings_join(['uniform float mNear;', 'uniform float mFar;', 'uniform float opacity;', 'void main() {', 'float depth = gl_FragCoord.z / gl_FragCoord.w;', 'float color = 1.0 - smoothstep( mNear, mFar, depth );', 'gl_FragColor = vec4( vec3( color ), opacity );', '}'], '\n')]), 'normal', $.makeLiteralMap(['uniforms', $.makeLiteralMap(['opacity', $.Uniform$('f', 1, null)]), 'vertexShader', $.Strings_join(['varying vec3 vNormal;', 'void main() {', 'vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );', 'vNormal = normalMatrix * normal;', 'gl_Position = projectionMatrix * mvPosition;', '}'], '\n'), 'fragmentShader', $.Strings_join(['uniform float opacity;', 'varying vec3 vNormal;', 'void main() {', 'gl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );', '}'], '\n')]), 'basic', $.makeLiteralMap(['uniforms', $.UniformsUtils_merge([$.index($.UniformsLib(), 'common'), $.index($.UniformsLib(), 'fog'), $.index($.UniformsLib(), 'shadowmap')]), 'vertexShader', $.Strings_join([$.index($.ShaderChunk(), 'map_pars_vertex'), $.index($.ShaderChunk(), 'lightmap_pars_vertex'), $.index($.ShaderChunk(), 'envmap_pars_vertex'), $.index($.ShaderChunk(), 'color_pars_vertex'), $.index($.ShaderChunk(), 'skinning_pars_vertex'), $.index($.ShaderChunk(), 'morphtarget_pars_vertex'), $.index($.ShaderChunk(), 'shadowmap_pars_vertex'), 'void main() {', 'vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );', $.index($.ShaderChunk(), 'map_vertex'), $.index($.ShaderChunk(), 'lightmap_vertex'), $.index($.ShaderChunk(), 'envmap_vertex'), $.index($.ShaderChunk(), 'color_vertex'), $.index($.ShaderChunk(), 'skinbase_vertex'), $.index($.ShaderChunk(), 'skinning_vertex'), $.index($.ShaderChunk(), 'morphtarget_vertex'), $.index($.ShaderChunk(), 'default_vertex'), $.index($.ShaderChunk(), 'shadowmap_vertex'), '}'], '\n'), 'fragmentShader', $.Strings_join(['uniform vec3 diffuse;', 'uniform float opacity;', $.index($.ShaderChunk(), 'color_pars_fragment'), $.index($.ShaderChunk(), 'map_pars_fragment'), $.index($.ShaderChunk(), 'lightmap_pars_fragment'), $.index($.ShaderChunk(), 'envmap_pars_fragment'), $.index($.ShaderChunk(), 'fog_pars_fragment'), $.index($.ShaderChunk(), 'shadowmap_pars_fragment'), $.index($.ShaderChunk(), 'specularmap_pars_fragment'), 'void main() {', 'gl_FragColor = vec4( diffuse, opacity );', $.index($.ShaderChunk(), 'map_fragment'), $.index($.ShaderChunk(), 'alphatest_fragment'), $.index($.ShaderChunk(), 'specularmap_fragment'), $.index($.ShaderChunk(), 'lightmap_fragment'), $.index($.ShaderChunk(), 'color_fragment'), $.index($.ShaderChunk(), 'envmap_fragment'), $.index($.ShaderChunk(), 'shadowmap_fragment'), $.index($.ShaderChunk(), 'linear_to_gamma_fragment'), $.index($.ShaderChunk(), 'fog_fragment'), '}'], '\n')]), 'lambert', $.makeLiteralMap(['uniforms', $.UniformsUtils_merge([$.index($.UniformsLib(), 'common'), $.index($.UniformsLib(), 'fog'), $.index($.UniformsLib(), 'lights'), $.index($.UniformsLib(), 'shadowmap'), $.makeLiteralMap(['ambient', $.Uniform$('c', $.Color$(16777215), null), 'emissive', $.Uniform$('c', $.Color$(0), null), 'wrapRGB', $.Uniform$('v3', $.Vector3$(1, 1, 1), null)])]), 'vertexShader', $.Strings_join(['varying vec3 vLightFront;', '#ifdef DOUBLE_SIDED', 'varying vec3 vLightBack;', '#endif', $.index($.ShaderChunk(), 'map_pars_vertex'), $.index($.ShaderChunk(), 'lightmap_pars_vertex'), $.index($.ShaderChunk(), 'envmap_pars_vertex'), $.index($.ShaderChunk(), 'lights_lambert_pars_vertex'), $.index($.ShaderChunk(), 'color_pars_vertex'), $.index($.ShaderChunk(), 'skinning_pars_vertex'), $.index($.ShaderChunk(), 'morphtarget_pars_vertex'), $.index($.ShaderChunk(), 'shadowmap_pars_vertex'), 'void main() {', 'vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );', $.index($.ShaderChunk(), 'map_vertex'), $.index($.ShaderChunk(), 'lightmap_vertex'), $.index($.ShaderChunk(), 'envmap_vertex'), $.index($.ShaderChunk(), 'color_vertex'), $.index($.ShaderChunk(), 'morphnormal_vertex'), $.index($.ShaderChunk(), 'skinbase_vertex'), $.index($.ShaderChunk(), 'skinnormal_vertex'), $.index($.ShaderChunk(), 'defaultnormal_vertex'), '#ifndef USE_ENVMAP', 'vec4 mPosition = modelMatrix * vec4( position, 1.0 );', '#endif', $.index($.ShaderChunk(), 'lights_lambert_vertex'), $.index($.ShaderChunk(), 'skinning_vertex'), $.index($.ShaderChunk(), 'morphtarget_vertex'), $.index($.ShaderChunk(), 'default_vertex'), $.index($.ShaderChunk(), 'shadowmap_vertex'), '}'], '\n'), 'fragmentShader', $.Strings_join(['uniform float opacity;', 'varying vec3 vLightFront;', '#ifdef DOUBLE_SIDED', 'varying vec3 vLightBack;', '#endif', $.index($.ShaderChunk(), 'color_pars_fragment'), $.index($.ShaderChunk(), 'map_pars_fragment'), $.index($.ShaderChunk(), 'lightmap_pars_fragment'), $.index($.ShaderChunk(), 'envmap_pars_fragment'), $.index($.ShaderChunk(), 'fog_pars_fragment'), $.index($.ShaderChunk(), 'shadowmap_pars_fragment'), $.index($.ShaderChunk(), 'specularmap_pars_fragment'), 'void main() {', 'gl_FragColor = vec4( vec3 ( 1.0 ), opacity );', $.index($.ShaderChunk(), 'map_fragment'), $.index($.ShaderChunk(), 'alphatest_fragment'), $.index($.ShaderChunk(), 'specularmap_fragment'), '#ifdef DOUBLE_SIDED', 'if ( gl_FrontFacing )', 'gl_FragColor.xyz *= vLightFront;', 'else', 'gl_FragColor.xyz *= vLightBack;', '#else', 'gl_FragColor.xyz *= vLightFront;', '#endif', $.index($.ShaderChunk(), 'lightmap_fragment'), $.index($.ShaderChunk(), 'color_fragment'), $.index($.ShaderChunk(), 'envmap_fragment'), $.index($.ShaderChunk(), 'shadowmap_fragment'), $.index($.ShaderChunk(), 'linear_to_gamma_fragment'), $.index($.ShaderChunk(), 'fog_fragment'), '}'], '\n')]), 'phong', $.makeLiteralMap(['uniforms', $.UniformsUtils_merge([$.index($.UniformsLib(), 'common'), $.index($.UniformsLib(), 'bump'), $.index($.UniformsLib(), 'fog'), $.index($.UniformsLib(), 'lights'), $.index($.UniformsLib(), 'shadowmap'), $.makeLiteralMap(['ambient', $.Uniform$('c', $.Color$(16777215), null), 'emissive', $.Uniform$('c', $.Color$(0), null), 'specular', $.Uniform$('c', $.Color$(1118481), null), 'shininess', $.Uniform$('f', 30, null), 'wrapRGB', $.Uniform$('v3', $.Vector3$(1, 1, 1), null)])]), 'vertexShader', $.Strings_join(['varying vec3 vViewPosition;', 'varying vec3 vNormal;', $.index($.ShaderChunk(), 'map_pars_vertex'), $.index($.ShaderChunk(), 'lightmap_pars_vertex'), $.index($.ShaderChunk(), 'envmap_pars_vertex'), $.index($.ShaderChunk(), 'lights_phong_pars_vertex'), $.index($.ShaderChunk(), 'color_pars_vertex'), $.index($.ShaderChunk(), 'skinning_pars_vertex'), $.index($.ShaderChunk(), 'morphtarget_pars_vertex'), $.index($.ShaderChunk(), 'shadowmap_pars_vertex'), 'void main() {', 'vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );', $.index($.ShaderChunk(), 'map_vertex'), $.index($.ShaderChunk(), 'lightmap_vertex'), $.index($.ShaderChunk(), 'envmap_vertex'), $.index($.ShaderChunk(), 'color_vertex'), '#ifndef USE_ENVMAP', 'vec4 mPosition = modelMatrix * vec4( position, 1.0 );', '#endif', 'vViewPosition = -mvPosition.xyz;', $.index($.ShaderChunk(), 'morphnormal_vertex'), $.index($.ShaderChunk(), 'skinbase_vertex'), $.index($.ShaderChunk(), 'skinnormal_vertex'), $.index($.ShaderChunk(), 'defaultnormal_vertex'), 'vNormal = transformedNormal;', $.index($.ShaderChunk(), 'lights_phong_vertex'), $.index($.ShaderChunk(), 'skinning_vertex'), $.index($.ShaderChunk(), 'morphtarget_vertex'), $.index($.ShaderChunk(), 'default_vertex'), $.index($.ShaderChunk(), 'shadowmap_vertex'), '}'], '\n'), 'fragmentShader', $.Strings_join(['uniform vec3 diffuse;', 'uniform float opacity;', 'uniform vec3 ambient;', 'uniform vec3 emissive;', 'uniform vec3 specular;', 'uniform float shininess;', $.index($.ShaderChunk(), 'color_pars_fragment'), $.index($.ShaderChunk(), 'map_pars_fragment'), $.index($.ShaderChunk(), 'lightmap_pars_fragment'), $.index($.ShaderChunk(), 'envmap_pars_fragment'), $.index($.ShaderChunk(), 'fog_pars_fragment'), $.index($.ShaderChunk(), 'lights_phong_pars_fragment'), $.index($.ShaderChunk(), 'shadowmap_pars_fragment'), $.index($.ShaderChunk(), 'bumpmap_pars_fragment'), $.index($.ShaderChunk(), 'specularmap_pars_fragment'), 'void main() {', 'gl_FragColor = vec4( vec3 ( 1.0 ), opacity );', $.index($.ShaderChunk(), 'map_fragment'), $.index($.ShaderChunk(), 'alphatest_fragment'), $.index($.ShaderChunk(), 'specularmap_fragment'), $.index($.ShaderChunk(), 'lights_phong_fragment'), $.index($.ShaderChunk(), 'lightmap_fragment'), $.index($.ShaderChunk(), 'color_fragment'), $.index($.ShaderChunk(), 'envmap_fragment'), $.index($.ShaderChunk(), 'shadowmap_fragment'), $.index($.ShaderChunk(), 'linear_to_gamma_fragment'), $.index($.ShaderChunk(), 'fog_fragment'), '}'], '\n')]), 'particle_basic', $.makeLiteralMap(['uniforms', $.UniformsUtils_merge([$.index($.UniformsLib(), 'particle'), $.index($.UniformsLib(), 'shadowmap')]), 'vertexShader', $.Strings_join(['uniform float size;', 'uniform float scale;', $.index($.ShaderChunk(), 'color_pars_vertex'), $.index($.ShaderChunk(), 'shadowmap_pars_vertex'), 'void main() {', $.index($.ShaderChunk(), 'color_vertex'), 'vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );', '#ifdef USE_SIZEATTENUATION', 'gl_PointSize = size * ( scale / length( mvPosition.xyz ) );', '#else', 'gl_PointSize = size;', '#endif', 'gl_Position = projectionMatrix * mvPosition;', $.index($.ShaderChunk(), 'shadowmap_vertex'), '}'], '\n'), 'fragmentShader', $.Strings_join(['uniform vec3 psColor;', 'uniform float opacity;', $.index($.ShaderChunk(), 'color_pars_fragment'), $.index($.ShaderChunk(), 'map_particle_pars_fragment'), $.index($.ShaderChunk(), 'fog_pars_fragment'), $.index($.ShaderChunk(), 'shadowmap_pars_fragment'), 'void main() {', 'gl_FragColor = vec4( psColor, opacity );', $.index($.ShaderChunk(), 'map_particle_fragment'), $.index($.ShaderChunk(), 'alphatest_fragment'), $.index($.ShaderChunk(), 'color_fragment'), $.index($.ShaderChunk(), 'shadowmap_fragment'), $.index($.ShaderChunk(), 'fog_fragment'), '}'], '\n')]), 'depthRGBA', $.makeLiteralMap(['uniforms', $.makeLiteralMap([]), 'vertexShader', $.Strings_join([$.index($.ShaderChunk(), 'skinning_pars_vertex'), $.index($.ShaderChunk(), 'morphtarget_pars_vertex'), 'void main() {', 'vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );', $.index($.ShaderChunk(), 'skinbase_vertex'), $.index($.ShaderChunk(), 'skinning_vertex'), $.index($.ShaderChunk(), 'morphtarget_vertex'), $.index($.ShaderChunk(), 'default_vertex'), '}'], '\n'), 'fragmentShader', $.Strings_join(['vec4 pack_depth( const in float depth ) {', 'const vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );', 'const vec4 bit_mask  = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );', 'vec4 res = fract( depth * bit_shift );', 'res -= res.xxyz * bit_mask;', 'return res;', '}', 'void main() {', 'gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );', '}'], '\n')])]);
  return $.__ShaderLib;
};

$.UniformsLib = function() {
  if ($.__UniformsLib == null)
    $.__UniformsLib = $.makeLiteralMap(['common', $.makeLiteralMap(['diffuse', $.Uniform$('c', $.Color$(15658734), null), 'opacity', $.Uniform$('f', 1, null), 'map', $.Uniform$('t', 0, null), 'offsetRepeat', $.Uniform$('v4', $.Vector4$(0, 0, 1, 1), null), 'lightMap', $.Uniform$('t', 2, null), 'specularMap', $.Uniform$('t', 3, null), 'envMap', $.Uniform$('t', 1, null), 'flipEnvMap', $.Uniform$('f', -1, null), 'useRefract', $.Uniform$('i', 0, null), 'reflectivity', $.Uniform$('f', 1, null), 'refractionRatio', $.Uniform$('f', 0.98, null), 'combine', $.Uniform$('i', 0, null), 'morphTargetInfluences', $.Uniform$('f', 0, null)]), 'bump', $.makeLiteralMap(['bumpMap', $.Uniform$('t', 4, null), 'bumpScale', $.Uniform$('f', 1, null)]), 'fog', $.makeLiteralMap(['fogDensity', $.Uniform$('f', 0.00025, null), 'fogNear', $.Uniform$('f', 1, null), 'fogFar', $.Uniform$('f', 2000, null), 'fogColor', $.Uniform$('c', $.Color$(16777215), null)]), 'lights', $.makeLiteralMap(['ambientLightColor', $.Uniform$('fv', [], null), 'directionalLightDirection', $.Uniform$('fv', [], null), 'directionalLightColor', $.Uniform$('fv', [], null), 'pointLightColor', $.Uniform$('fv', [], null), 'pointLightPosition', $.Uniform$('fv', [], null), 'pointLightDistance', $.Uniform$('fv1', [], null), 'spotLightColor', $.Uniform$('fv', [], null), 'spotLightPosition', $.Uniform$('fv', [], null), 'spotLightDirection', $.Uniform$('fv', [], null), 'spotLightDistance', $.Uniform$('fv1', [], null), 'spotLightAngle', $.Uniform$('fv1', [], null), 'spotLightExponent', $.Uniform$('fv1', [], null)]), 'particle', $.makeLiteralMap(['psColor', $.Uniform$('c', $.Color$(15658734), null), 'opacity', $.Uniform$('f', 1, null), 'size', $.Uniform$('f', 1, null), 'scale', $.Uniform$('f', 1, null), 'map', $.Uniform$('t', 0, null), 'fogDensity', $.Uniform$('f', 0.00025, null), 'fogNear', $.Uniform$('f', 1, null), 'fogFar', $.Uniform$('f', 2000, null), 'fogColor', $.Uniform$('c', $.Color$(16777215), null)]), 'shadowmap', $.makeLiteralMap(['shadowMap', $.Uniform$('tv', 6, []), 'shadowMapSize', $.Uniform$('v2v', [], null), 'shadowBias', $.Uniform$('fv1', [], null), 'shadowDarkness', $.Uniform$('fv1', [], null), 'shadowMatrix', $.Uniform$('m4v', [], null)])]);
  return $.__UniformsLib;
};

$.index = function(a, index) {
  if (typeof a == "string" || a.constructor === Array) {
    var key = index >>> 0;
    if (key === index && key < a.length)
      return a[key];
  }
  return $.index$slow(a, index);
};

$.le$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a <= b;
  return a.operator$le$1(b);
};

$.WebGLGeometry$_internal = function(geometry) {
  return new $.WebGLGeometry(geometry.get$id(), null, null, null, 0, 0, 0, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, geometry);
};

$.typeNameInOpera = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'FormData')
    return 'DOMFormData';
  return name$;
};

$.loadTexture = function(url, mapping, onLoad, onError) {
  var image = $._Elements_ImageElement(null, null, null);
  var texture = $.Texture$(image, mapping, 1, 1, 6, 8, 18, 10, 1);
  var loader = $.ImageLoader$();
  loader.addEventListener$2('load', new $.loadTexture_function(texture, onLoad));
  loader.addEventListener$2('error', new $.loadTexture_function0(onError));
  loader.crossOrigin = $.crossOrigin;
  loader.load$2(url, image);
  return texture;
};

$.xor = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a ^ b) >>> 0;
  return a.operator$xor$1(b);
};

$.substring$1 = function(receiver, startIndex) {
  if (!(typeof receiver === 'string'))
    return receiver.substring$1(startIndex);
  return $.substring$2(receiver, startIndex, null);
};

$._window = function() {
  return typeof window != "undefined" ? window : null;
};

$.Matrix4___v2 = function() {
  if ($.Matrix4____v2 == null)
    $.Matrix4____v2 = $.Vector3$(0, 0, 0);
  return $.Matrix4____v2;
};

$.Primitives_dateNow = function() {
  return Date.now();
};

$.last = function(receiver) {
  if (!$.isJsArray(receiver))
    return receiver.last$0();
  return $.index(receiver, $.sub($.get$length(receiver), 1));
};

$.NotImplementedException$ = function(message) {
  return new $.NotImplementedException(message);
};

$.acos = function(value) {
  return Math.acos($.checkNum(value));
};

$.WebGLMaterial_WebGLMaterial$from = function(material) {
  if ($.index(material, '__webglMaterial') == null)
    $.indexSet(material, '__webglMaterial', $.WebGLMaterial$_internal(material));
  return $.index(material, '__webglMaterial');
};

$.eq = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b);
  return a === b;
};

$.NullPointerException$ = function(functionName, arguments$) {
  return new $.NullPointerException(functionName, arguments$);
};

$._DoubleLinkedQueueEntrySentinel$ = function() {
  var t1 = new $._DoubleLinkedQueueEntrySentinel(null, null, null);
  t1.DoubleLinkedQueueEntry$1(null);
  t1._DoubleLinkedQueueEntrySentinel$0();
  return t1;
};

$.MeshBasicMaterial$ = function(map, color, lightMap, specularMap, envMap, combine, reflectivity, refractionRatio, shading, vertexColors, fog, wireframe, wireframeLinewidth, wireframeLinecap, wireframeLinejoin, skinning, morphTargets, name$, side, opacity, transparent, blending, blendSrc, blendDst, blendEquation, depthTest, depthWrite, polygonOffset, polygonOffsetFactor, polygonOffsetUnits, alphaTest, overdraw, visible) {
  var t1 = $.Color$(color);
  var t2 = $.Three_MaterialCount;
  $.Three_MaterialCount = $.add(t2, 1);
  return new $.MeshBasicMaterial(t1, map, lightMap, specularMap, envMap, combine, reflectivity, refractionRatio, shading, wireframe, wireframeLinewidth, wireframeLinecap, wireframeLinejoin, skinning, morphTargets, vertexColors, fog, name$, t2, side, opacity, blending, blendSrc, blendDst, blendEquation, alphaTest, polygonOffset, polygonOffsetFactor, polygonOffsetUnits, transparent, depthTest, depthWrite, overdraw, visible, true, null);
};

$.toStringWrapper = function() {
  return $.toString(this.dartException);
};

$._ElementList$ = function(list) {
  return new $._ElementList(list);
};

$.gtB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b) === true;
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  if (typeof other === 'string')
    return !($.indexOf$2(receiver, other, startIndex) === -1);
  else if (typeof other === 'object' && other !== null && !!other.is$JSSyntaxRegExp)
    return other.hasMatch$1($.substring$1(receiver, startIndex));
  else
    return $.iterator($.allMatches(other, $.substring$1(receiver, startIndex))).hasNext$0();
};

$.shl = function(a, b) {
  if ($.checkNumbers(a, b)) {
    if (b < 0)
      throw $.$$throw($.IllegalArgumentException$(b));
    if (b > 31)
      return 0;
    return (a << b) >>> 0;
  }
  return a.operator$shl$1(b);
};

$.Primitives_objectToString = function(object) {
  return 'Instance of \'' + $.S($.Primitives_objectTypeName(object)) + '\'';
};

$._currentIsolate = function() {
  return $._globalState().get$currentContext();
};

$.Geometry$ = function() {
  var t1 = $.Three_GeometryCount;
  $.Three_GeometryCount = $.add(t1, 1);
  return new $.Geometry(t1, '', [], [], [], [], [[]], [[]], [], [], [], [], [], null, null, null, false, false, null);
};

$.WebGLRendererRenderInfo$ = function() {
  return new $.WebGLRendererRenderInfo(0, 0, 0, 0);
};

$.PolyhedronGeometryVertex$ = function(x, y, z) {
  return new $.PolyhedronGeometryVertex($.Vector3$(x, y, z), null, null);
};

$._NotificationEventsImpl$ = function(_ptr) {
  return new $._NotificationEventsImpl(_ptr);
};

$.toStringAsFixed = function(receiver, fractionDigits) {
  if (!(typeof receiver === 'number'))
    return receiver.toStringAsFixed$1(fractionDigits);
  $.checkNum(fractionDigits);
  var result = receiver.toFixed(fractionDigits);
  if (receiver === 0 && $.isNegative(receiver) === true)
    return '-' + result;
  return result;
};

$.DoubleLinkedQueueEntry$ = function(e) {
  var t1 = new $.DoubleLinkedQueueEntry(null, null, null);
  t1.DoubleLinkedQueueEntry$1(e);
  return t1;
};

$.startsWith = function(receiver, other) {
  $.checkString(other);
  var length$ = other.length;
  if (length$ > receiver.length)
    return false;
  return other == receiver.substring(0, length$);
};

$.getRange = function(receiver, start, length$) {
  if (!$.isJsArray(receiver))
    return receiver.getRange$2(start, length$);
  if (0 === length$)
    return [];
  $.checkNull(start);
  $.checkNull(length$);
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.IllegalArgumentException$(start));
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$))
    throw $.$$throw($.IllegalArgumentException$(length$));
  var t1 = length$ < 0;
  if (t1)
    throw $.$$throw($.IllegalArgumentException$(length$));
  if (start < 0)
    throw $.$$throw($.IndexOutOfRangeException$(start));
  var end = start + length$;
  if ($.gtB(end, $.get$length(receiver)))
    throw $.$$throw($.IndexOutOfRangeException$(length$));
  if (t1)
    throw $.$$throw($.IllegalArgumentException$(length$));
  return receiver.slice(start, end);
};

$._Lists_getRange = function(a, start, length$, accumulator) {
  if (typeof a !== 'string' && (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $._Lists_getRange$bailout(1, a, start, length$, accumulator);
  if (typeof start !== 'number')
    return $._Lists_getRange$bailout(1, a, start, length$, accumulator);
  if ($.ltB(length$, 0))
    throw $.$$throw($.IllegalArgumentException$('length'));
  if (start < 0)
    throw $.$$throw($.IndexOutOfRangeException$(start));
  if (typeof length$ !== 'number')
    throw $.iae(length$);
  var end = start + length$;
  if (end > a.length)
    throw $.$$throw($.IndexOutOfRangeException$(end));
  for (var i = start; i < end; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    accumulator.push(a[i]);
  }
  return accumulator;
};

$.FutureAlreadyCompleteException$ = function() {
  return new $.FutureAlreadyCompleteException();
};

$.Frustum$ = function() {
  return new $.Frustum([$.Vector4$(0, 0, 0, 1), $.Vector4$(0, 0, 0, 1), $.Vector4$(0, 0, 0, 1), $.Vector4$(0, 0, 0, 1), $.Vector4$(0, 0, 0, 1), $.Vector4$(0, 0, 0, 1)]);
};

$.convertDartClosureToJS = function(closure, arity) {
  if (closure == null)
    return;
  var function$ = closure.$identity;
  if (!!function$)
    return function$;
  function$ = function() {
    return $.invokeClosure.call$5(closure, $._currentIsolate(), arity, arguments[0], arguments[1]);
  };
  closure.$identity = function$;
  return function$;
};

$.ObjectNotClosureException$ = function() {
  return new $.ObjectNotClosureException();
};

$.clear = function(receiver) {
  if (!$.isJsArray(receiver))
    return receiver.clear$0();
  $.set$length(receiver, 0);
};

$.Primitives_objectTypeName = function(object) {
  var name$ = $.constructorNameFallback(object);
  if ($.eqB(name$, 'Object')) {
    var decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === 'string')
      name$ = decompiled;
  }
  return $.charCodeAt(name$, 0) === 36 ? $.substring$1(name$, 1) : name$;
};

$.round = function(receiver) {
  if (!(typeof receiver === 'number'))
    return receiver.round$0();
  if (receiver < 0)
    return -Math.round(-receiver);
  else
    return Math.round(receiver);
};

$.print = function(obj) {
  if (typeof obj === 'string')
    $.Primitives_printString(obj);
  else
    $.Primitives_printString($.toString(obj));
};

$.WebGLObject_WebGLObject = function(object, opaque, transparent, buffer, render, z) {
  if ($.index(object, '__webglObject') == null)
    $.indexSet(object, '__webglObject', $.WebGLObject$_internal(object, opaque, transparent, buffer, render, z));
  return $.index(object, '__webglObject');
};

$.forEach = function(receiver, f) {
  if (!$.isJsArray(receiver))
    return receiver.forEach$1(f);
  else
    return $.Collections_forEach(receiver, f);
};

$.StackOverflowException$ = function() {
  return new $.StackOverflowException();
};

$.isEmpty = function(receiver) {
  if (typeof receiver === 'string' || $.isJsArray(receiver))
    return receiver.length === 0;
  return receiver.isEmpty$0();
};

$.Collections_forEach = function(iterable, f) {
  for (var t1 = $.iterator(iterable); t1.hasNext$0() === true;)
    f.call$1(t1.next$0());
};

$._Collections_forEach = function(iterable, f) {
  for (var t1 = $.iterator(iterable); t1.hasNext$0() === true;)
    f.call$1(t1.next$0());
};

$.AmbientLight$ = function(hex) {
  var t1 = $.Color$(hex);
  var t2 = $.Three_Object3DCount;
  $.Three_Object3DCount = $.add(t2, 1);
  return new $.AmbientLight(t1, t2, '', $.makeLiteralMap([]), null, [], $.Vector3$(0, 1, 0), $.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0), $.Vector3$(1, 1, 1), 'XYZ', null, null, null, true, null, $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), true, true, $.Quaternion$(0, 0, 0, 1), false, 0, 1, true, false, false, true, $.Vector3$(0, 0, 0), null);
};

$._convertNativeToDart_AcceptStructuredClone = function(object) {
  var values = [];
  var copies = [];
  var t1 = new $._convertNativeToDart_AcceptStructuredClone_findSlot(copies, values);
  var t2 = new $._convertNativeToDart_AcceptStructuredClone_readSlot(copies);
  return new $._convertNativeToDart_AcceptStructuredClone_walk(new $._convertNativeToDart_AcceptStructuredClone_writeSlot(copies), t1, t2).call$1(object);
};

$.max = function(a, b) {
  if (typeof a === 'number') {
    if (typeof b === 'number') {
      if (a > b)
        return a;
      if (a < b)
        return b;
      if (typeof b === 'number') {
        if (typeof a === 'number')
          if (a === 0)
            return a + b;
        if ($.isNaN(b) === true)
          return b;
        return a;
      }
      if (b === 0 && $.isNegative(a) === true)
        return b;
      return a;
    }
    throw $.$$throw($.IllegalArgumentException$(b));
  }
  throw $.$$throw($.IllegalArgumentException$(a));
};

$._FrozenElementList$_wrap = function(_nodeList) {
  return new $._FrozenElementList(_nodeList);
};

$.UniformsUtils_merge = function(uniforms) {
  var t1 = {};
  t1.tmp_1 = null;
  var merged = $.makeLiteralMap([]);
  for (var u = 0; t2 = uniforms.length, u < t2; ++u) {
    if (u < 0 || u >= t2)
      throw $.ioore(u);
    t1.tmp_1 = $.UniformsUtils_clone(uniforms[u]);
    $.forEach(t1.tmp_1, new $.UniformsUtils_merge_anon(t1, merged));
  }
  return merged;
  var t2;
};

$.DualPivotQuicksort_insertionSort_ = function(a, left, right, compare) {
  if (typeof a !== 'object' || a === null || (a.constructor !== Array || !!a.immutable$list) && !a.is$JavaScriptIndexingBehavior())
    return $.DualPivotQuicksort_insertionSort_$bailout(1, a, left, right, compare);
  if (typeof right !== 'number')
    return $.DualPivotQuicksort_insertionSort_$bailout(1, a, left, right, compare);
  for (var i = left + 1; i <= right; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    var el = a[i];
    var j = i;
    while (true) {
      if (j > left) {
        var t1 = j - 1;
        if (t1 !== (t1 | 0))
          throw $.iae(t1);
        if (t1 < 0 || t1 >= a.length)
          throw $.ioore(t1);
        var t2 = $.gtB(compare.call$2(a[t1], el), 0);
        t1 = t2;
      } else
        t1 = false;
      if (!t1)
        break;
      var j0 = j - 1;
      if (j0 !== (j0 | 0))
        throw $.iae(j0);
      t1 = a.length;
      if (j0 < 0 || j0 >= t1)
        throw $.ioore(j0);
      t2 = a[j0];
      if (j !== (j | 0))
        throw $.iae(j);
      if (j < 0 || j >= t1)
        throw $.ioore(j);
      a[j] = t2;
      j = j0;
    }
    if (j !== (j | 0))
      throw $.iae(j);
    if (j < 0 || j >= a.length)
      throw $.ioore(j);
    a[j] = el;
  }
};

$.ge$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a >= b;
  return a.operator$ge$1(b);
};

$.getFunctionForTypeNameOf = function() {
  if (!(typeof(navigator) === 'object'))
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if ($.contains(userAgent, 'Chrome') || $.contains(userAgent, 'DumpRenderTree'))
    return $.typeNameInChrome;
  else if ($.contains(userAgent, 'Firefox'))
    return $.typeNameInFirefox;
  else if ($.contains(userAgent, 'MSIE'))
    return $.typeNameInIE;
  else if ($.contains(userAgent, 'Opera'))
    return $.typeNameInOpera;
  else if ($.contains(userAgent, 'Safari'))
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.CastExceptionImplementation$ = function(actualType, expectedType) {
  return new $.CastExceptionImplementation(actualType, expectedType);
};

$.indexSet$slow = function(a, index, value) {
  if ($.isJsArray(a)) {
    if (!(typeof index === 'number' && Math.floor(index) === index))
      throw $.$$throw($.IllegalArgumentException$(index));
    if (index < 0 || $.geB(index, $.get$length(a)))
      throw $.$$throw($.IndexOutOfRangeException$(index));
    $.checkMutable(a, 'indexed set');
    a[index] = value;
    return;
  }
  a.operator$indexSet$2(index, value);
};

$.Texture$ = function(image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {
  var t1 = new $.Texture(null, image, null, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, null, null, null, null, null, null, null, null);
  t1.Texture$9(image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
  return t1;
};

$.gt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b);
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$.charCodeAt = function(receiver, index) {
  if (typeof receiver === 'string') {
    if (index < 0)
      throw $.$$throw($.IndexOutOfRangeException$(index));
    if (index >= receiver.length)
      throw $.$$throw($.IndexOutOfRangeException$(index));
    return receiver.charCodeAt(index);
  } else
    return receiver.charCodeAt$1(index);
};

$.removeRange = function(receiver, start, length$) {
  if (!$.isJsArray(receiver))
    return receiver.removeRange$2(start, length$);
  $.checkGrowable(receiver, 'removeRange');
  if (length$ === 0)
    return;
  $.checkNull(start);
  $.checkNull(length$);
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.IllegalArgumentException$(start));
  if (length$ < 0)
    throw $.$$throw($.IllegalArgumentException$(length$));
  var receiverLength = receiver.length;
  if (start < 0 || start >= receiverLength)
    throw $.$$throw($.IndexOutOfRangeException$(start));
  var t1 = start + length$;
  if (t1 > receiverLength)
    throw $.$$throw($.IndexOutOfRangeException$(t1));
  var t2 = receiverLength - length$;
  $.Arrays_copy(receiver, t1, receiver, start, t2 - start);
  $.set$length(receiver, t2);
};

$.ListImplementation_List = function(length$) {
  return $.Primitives_newList(length$);
};

$.document = function() {
return document;
};

$.mul = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a * b : $.mul$slow(a, b);
};

$._browserPrefix = function() {
  if ($._cachedBrowserPrefix == null)
    if ($._Device_isFirefox() === true)
      $._cachedBrowserPrefix = '-moz-';
    else if ($._Device_isIE() === true)
      $._cachedBrowserPrefix = '-ms-';
    else if ($._Device_isOpera() === true)
      $._cachedBrowserPrefix = '-o-';
    else
      $._cachedBrowserPrefix = '-webkit-';
  return $._cachedBrowserPrefix;
};

$._BodyElementEventsImpl$ = function(_ptr) {
  return new $._BodyElementEventsImpl(_ptr);
};

$._Timer$ = function(milliSeconds, callback) {
  var t1 = new $._Timer(true, null);
  t1._Timer$2(milliSeconds, callback);
  return t1;
};

$.iterator = function(receiver) {
  if ($.isJsArray(receiver))
    return $.ListIterator$(receiver);
  return receiver.iterator$0();
};

$.isNaN = function(receiver) {
  return isNaN(receiver);
};

$.Face4$ = function(a, b, c, d, normalOrVertexNormals, colorOrVertexColors, materialIndex) {
  var t1 = new $.Face4(a, b, c, d, null, null, null, null, null, materialIndex, null);
  t1.Face4$7(a, b, c, d, normalOrVertexNormals, colorOrVertexColors, materialIndex);
  return t1;
};

$.TetrahedronGeometry_TetrahedronGeometry = function(radius, detail) {
  return $.TetrahedronGeometry$_internal([[1, 1, 1], [-1, -1, 1], [-1, 1, -1], [1, -1, -1]], [[2, 1, 0], [0, 3, 2], [1, 3, 0], [2, 3, 1]], radius, detail);
};

$.toInt = function(receiver) {
  if (!(typeof receiver === 'number'))
    return receiver.toInt$0();
  if ($.isNaN(receiver) === true)
    throw $.$$throw($.FormatException$('NaN'));
  if ($.isInfinite(receiver) === true)
    throw $.$$throw($.FormatException$('Infinity'));
  var truncated = $.truncate(receiver);
  return truncated == -0.0 ? 0 : truncated;
};

$.IcosahedronGeometry$_internal = function(vertices, faces, radius, details) {
  var t1 = [];
  var t2 = $.Three_GeometryCount;
  $.Three_GeometryCount = $.add(t2, 1);
  t2 = new $.IcosahedronGeometry(null, t1, t2, '', [], [], [], [], [[]], [[]], [], [], [], [], [], null, null, null, false, false, null);
  t2.PolyhedronGeometry$4(vertices, faces, radius, details);
  return t2;
};

$.createMultiMaterialObject = function(geometry, materials) {
  var group = $.Object3D$();
  $.forEach(materials, new $.createMultiMaterialObject_anon(geometry, group));
  return group;
};

$.UnsupportedOperationException$ = function(_message) {
  return new $.UnsupportedOperationException(_message);
};

$.removeLast = function(receiver) {
  if ($.isJsArray(receiver)) {
    $.checkGrowable(receiver, 'removeLast');
    if ($.get$length(receiver) === 0)
      throw $.$$throw($.IndexOutOfRangeException$(-1));
    return receiver.pop();
  }
  return receiver.removeLast$0();
};

$.addLast = function(receiver, value) {
  if (!$.isJsArray(receiver))
    return receiver.addLast$1(value);
  $.checkGrowable(receiver, 'addLast');
  receiver.push(value);
};

$._HttpRequestEventsImpl$ = function(_ptr) {
  return new $._HttpRequestEventsImpl(_ptr);
};

$.BoundingSphere$ = function(radius) {
  return new $.BoundingSphere(radius);
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$.abs = function(receiver) {
  if (!(typeof receiver === 'number'))
    return receiver.abs$0();
  return Math.abs(receiver);
};

$.Primitives_printString = function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof console == "object") {
    console.log(string);
    return;
  }
  if (typeof write == "function") {
    write(string);
    write("\n");
  }
};

$.Primitives_getMilliseconds = function(receiver) {
  return receiver.isUtc === true ? $.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() : $.Primitives_lazyAsJsDate(receiver).getMilliseconds();
};

$.WebGLGeometry_WebGLGeometry$from = function(geometry) {
  if ($.index(geometry, '__webglBuffer') == null)
    $.indexSet(geometry, '__webglBuffer', $.WebGLGeometry$_internal(geometry));
  return $.index(geometry, '__webglBuffer');
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.Matrix4___v3 = function() {
  if ($.Matrix4____v3 == null)
    $.Matrix4____v3 = $.Vector3$(0, 0, 0);
  return $.Matrix4____v3;
};

$._WorkerEventsImpl$ = function(_ptr) {
  return new $._WorkerEventsImpl(_ptr);
};

$.ExceptionImplementation$ = function(msg) {
  return new $.ExceptionImplementation(msg);
};

$.Uniform$ = function(type, value, texture) {
  return new $.Uniform(type, value, texture);
};

$.typeNameInFirefox = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'Document')
    return 'HTMLDocument';
  if (name$ === 'XMLDocument')
    return 'Document';
  if (name$ === 'WorkerMessageEvent')
    return 'MessageEvent';
  if (name$ === 'DragEvent')
    return 'MouseEvent';
  if (name$ === 'DataTransfer')
    return 'Clipboard';
  if (name$ === 'FormData')
    return 'DOMFormData';
  return name$;
};

$.sub$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a - b;
  return a.operator$sub$1(b);
};

$.Color$ = function(hex) {
  var t1 = new $.Color(1, 1, 1);
  t1.Color$1(hex);
  return t1;
};

$.OctahedronGeometry$_internal = function(vertices, faces, radius, details) {
  var t1 = [];
  var t2 = $.Three_GeometryCount;
  $.Three_GeometryCount = $.add(t2, 1);
  t2 = new $.OctahedronGeometry(null, t1, t2, '', [], [], [], [], [[]], [[]], [], [], [], [], [], null, null, null, false, false, null);
  t2.PolyhedronGeometry$4(vertices, faces, radius, details);
  return t2;
};

$.Matrix3$ = function() {
  return new $.Matrix3($._TypedArrayFactoryProvider_Float32Array(9));
};

$.get$dynamic = function(receiver) {
  return receiver;
};

$.typeNameInIE = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'Document') {
    if (!!obj.xmlVersion)
      return 'Document';
    return 'HTMLDocument';
  }
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'DataTransfer')
    return 'Clipboard';
  if (name$ === 'DragEvent')
    return 'MouseEvent';
  if (name$ === 'HTMLDDElement')
    return 'HTMLElement';
  if (name$ === 'HTMLDTElement')
    return 'HTMLElement';
  if (name$ === 'HTMLTableDataCellElement')
    return 'HTMLTableCellElement';
  if (name$ === 'HTMLTableHeaderCellElement')
    return 'HTMLTableCellElement';
  if (name$ === 'HTMLPhraseElement')
    return 'HTMLElement';
  if (name$ === 'MSStyleCSSProperties')
    return 'CSSStyleDeclaration';
  if (name$ === 'MouseWheelEvent')
    return 'WheelEvent';
  if (name$ === 'FormData')
    return 'DOMFormData';
  return name$;
};

$.Primitives_newList = function(length$) {
  if (length$ == null)
    return new Array();
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$) || length$ < 0)
    throw $.$$throw($.IllegalArgumentException$(length$));
  var result = new Array(length$);
  result.fixed$length = true;
  return result;
};

$.ge = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a >= b : $.ge$slow(a, b);
};

$._convertDartToNative_ImageData = function(imageData) {
  if (typeof imageData === 'object' && imageData !== null && imageData.is$_ImageDataImpl())
    return imageData;
  return {data: imageData.get$data(), height: imageData.get$height(), width: imageData.get$width()};
};

$._globalState = function() {
return $globalState;
};

$._globalState0 = function(val) {
$globalState = val;
};

$.substring$2 = function(receiver, startIndex, endIndex) {
  if (!(typeof receiver === 'string'))
    return receiver.substring$2(startIndex, endIndex);
  $.checkNum(startIndex);
  var length$ = receiver.length;
  if (endIndex == null)
    endIndex = length$;
  $.checkNum(endIndex);
  if (startIndex < 0)
    throw $.$$throw($.IndexOutOfRangeException$(startIndex));
  if ($.gtB(startIndex, endIndex))
    throw $.$$throw($.IndexOutOfRangeException$(startIndex));
  if ($.gtB(endIndex, length$))
    throw $.$$throw($.IndexOutOfRangeException$(endIndex));
  return $.substringUnchecked(receiver, startIndex, endIndex);
};

$.window = function() {
return window;
};

$.Buffer$ = function(glbuffer) {
  return new $.Buffer(glbuffer, null);
};

$.HashMapImplementation$ = function() {
  var t1 = new $.HashMapImplementation(null, null, null, null, null);
  t1.HashMapImplementation$0();
  return t1;
};

$.Primitives_getMinutes = function(receiver) {
  return receiver.isUtc === true ? $.Primitives_lazyAsJsDate(receiver).getUTCMinutes() : $.Primitives_lazyAsJsDate(receiver).getMinutes();
};

$.Program$ = function(id, glProgram, code, usedTimes) {
  var t1 = $.makeLiteralMap([]);
  return new $.Program(id, glProgram, code, usedTimes, $.makeLiteralMap([]), t1);
};

$.Primitives_lazyAsJsDate = function(receiver) {
  if (receiver.date === (void 0))
    receiver.date = new Date(receiver.millisecondsSinceEpoch);
  return receiver.date;
};

$._FixedSizeListIterator$ = function(array) {
  return new $._FixedSizeListIterator($.get$length(array), array, 0);
};

$.propertyTypeCast = function(value, property) {
  if (value == null || !!value[property])
    return value;
  $.propertyTypeCastError(value, property);
};

$._FileReaderEventsImpl$ = function(_ptr) {
  return new $._FileReaderEventsImpl(_ptr);
};

$._TypedArrayFactoryProvider_Float32Array$fromList = function(list) {
  return $._TypedArrayFactoryProvider__F32(list);
};

$.HashMapImplementation__nextProbe = function(currentProbe, numberOfProbes, length$) {
  return $.and($.add(currentProbe, numberOfProbes), $.sub(length$, 1));
};

$.PlaneGeometry$ = function(width, height, segmentsWidth, segmentsHeight) {
  var t1 = $.Three_GeometryCount;
  $.Three_GeometryCount = $.add(t1, 1);
  t1 = new $.PlaneGeometry(t1, '', [], [], [], [], [[]], [[]], [], [], [], [], [], null, null, null, false, false, null);
  t1.PlaneGeometry$4(width, height, segmentsWidth, segmentsHeight);
  return t1;
};

$.isInfinite = function(receiver) {
  return receiver == Infinity || receiver == -Infinity;
};

$.CompleterImpl$ = function() {
  return new $.CompleterImpl($.FutureImpl$());
};

$.HashMapImplementation__computeLoadLimit = function(capacity) {
  return $.tdiv(capacity * 3, 4);
};

$.DirectionalLight$ = function(hex, intensity, distance) {
  var t1 = $.Color$(hex);
  var t2 = $.Three_Object3DCount;
  $.Three_Object3DCount = $.add(t2, 1);
  t2 = new $.DirectionalLight(null, null, intensity, distance, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t1, t2, '', $.makeLiteralMap([]), null, [], $.Vector3$(0, 1, 0), $.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0), $.Vector3$(1, 1, 1), 'XYZ', null, null, null, true, null, $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), true, true, $.Quaternion$(0, 0, 0, 1), false, 0, 1, true, false, false, true, $.Vector3$(0, 0, 0), null);
  t2.DirectionalLight$3(hex, intensity, distance);
  return t2;
};

$._WindowEventsImpl$ = function(_ptr) {
  return new $._WindowEventsImpl(_ptr);
};

$._EventListenerListImpl$ = function(_ptr, _type) {
  return new $._EventListenerListImpl(_ptr, _type);
};

$.iae = function(argument) {
  throw $.$$throw($.IllegalArgumentException$(argument));
};

$._DOMApplicationCacheEventsImpl$ = function(_ptr) {
  return new $._DOMApplicationCacheEventsImpl(_ptr);
};

$.Vector2$ = function(x, y) {
  return new $.Vector2(x, y);
};

$.StringImplementation__toJsStringArray = function(strings) {
  if (typeof strings !== 'object' || strings === null || (strings.constructor !== Array || !!strings.immutable$list) && !strings.is$JavaScriptIndexingBehavior())
    return $.StringImplementation__toJsStringArray$bailout(1, strings);
  $.checkNull(strings);
  var length$ = strings.length;
  if ($.isJsArray(strings)) {
    for (var i = 0; i < length$; ++i) {
      if (i < 0 || i >= strings.length)
        throw $.ioore(i);
      var string = strings[i];
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.IllegalArgumentException$(string));
    }
    var array = strings;
  } else {
    array = $.ListImplementation_List(length$);
    for (i = 0; i < length$; ++i) {
      if (i < 0 || i >= strings.length)
        throw $.ioore(i);
      string = strings[i];
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.IllegalArgumentException$(string));
      if (i < 0 || i >= array.length)
        throw $.ioore(i);
      array[i] = string;
    }
  }
  return array;
};

$.WebGLMaterial$_internal = function(material) {
  return new $.WebGLMaterial(material, null, null, null, null, null, null, null, null);
};

$.WebGLGeometry$ = function(faces3, faces4, materialIndex, vertices, numMorphTargets, numMorphNormals) {
  return new $.WebGLGeometry(null, vertices, faces3, faces4, materialIndex, numMorphTargets, numMorphNormals, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
};

$._timerFactory = function(millis, callback, repeating) {
  return repeating === true ? $._Timer$repeating(millis, callback) : $._Timer$(millis, callback);
};

$.TetrahedronGeometry$_internal = function(vertices, faces, radius, details) {
  var t1 = [];
  var t2 = $.Three_GeometryCount;
  $.Three_GeometryCount = $.add(t2, 1);
  t2 = new $.TetrahedronGeometry(null, t1, t2, '', [], [], [], [], [[]], [[]], [], [], [], [], [], null, null, null, false, false, null);
  t2.PolyhedronGeometry$4(vertices, faces, radius, details);
  return t2;
};

$._TypedArrayFactoryProvider_Float32Array = function(length$) {
  return $._TypedArrayFactoryProvider__F32(length$);
};

$.PerspectiveCamera$ = function(fov, aspect, near, far) {
  var t1 = $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
  var t2 = $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
  var t3 = $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
  var t4 = $.Three_Object3DCount;
  $.Three_Object3DCount = $.add(t4, 1);
  t4 = new $.PerspectiveCamera(fov, aspect, null, null, null, null, null, null, t1, t2, t3, near, far, t4, '', $.makeLiteralMap([]), null, [], $.Vector3$(0, 1, 0), $.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0), $.Vector3$(1, 1, 1), 'XYZ', null, null, null, true, null, $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), true, true, $.Quaternion$(0, 0, 0, 1), false, 0, 1, true, false, false, true, $.Vector3$(0, 0, 0), null);
  t4.PerspectiveCamera$4(fov, aspect, near, far);
  return t4;
};

$.constructorNameFallback = function(obj) {
  var constructor$ = obj.constructor;
  if (typeof(constructor$) === 'function') {
    var name$ = constructor$.name;
    if (typeof name$ === 'string')
      var t1 = !(name$ === '') && !(name$ === 'Object') && !(name$ === 'Function.prototype');
    else
      t1 = false;
    if (t1)
      return name$;
  }
  var string = Object.prototype.toString.call(obj);
  return string.substring(8, string.length - 1);
};

$.FormatException$ = function(message) {
  return new $.FormatException(message);
};

$.asin = function(value) {
  return Math.asin($.checkNum(value));
};

$.indexOf$1 = function(receiver, element) {
  if ($.isJsArray(receiver))
    return $.Arrays_indexOf(receiver, element, 0, receiver.length);
  else if (typeof receiver === 'string') {
    $.checkNull(element);
    if (!(typeof element === 'string'))
      throw $.$$throw($.IllegalArgumentException$(element));
    return receiver.indexOf(element);
  }
  return receiver.indexOf$1(element);
};

$.atan2 = function(a, b) {
  return Math.atan2($.checkNum(a), $.checkNum(b));
};

$.filter = function(receiver, predicate) {
  if (!$.isJsArray(receiver))
    return receiver.filter$1(predicate);
  else
    return $.Collections_filter(receiver, [], predicate);
};

$._ChildrenElementList$_wrap = function(element) {
  return new $._ChildrenElementList(element, element.get$$$dom_children());
};

$.unwrapException = function(ex) {
  if ("dartException" in ex)
    return ex.dartException;
  var message = ex.message;
  if (ex instanceof TypeError) {
    var type = ex.type;
    var name$ = ex.arguments ? ex.arguments[0] : "";
    if ($.eqB(type, 'property_not_function') || $.eqB(type, 'called_non_callable') || $.eqB(type, 'non_object_property_call') || $.eqB(type, 'non_object_property_load'))
      if (typeof name$ === 'string' && $.startsWith(name$, 'call$') === true)
        return $.ObjectNotClosureException$();
      else
        return $.NullPointerException$(null, $.CTC0);
    else if ($.eqB(type, 'undefined_method'))
      if (typeof name$ === 'string' && $.startsWith(name$, 'call$') === true)
        return $.ObjectNotClosureException$();
      else
        return $.NoSuchMethodError$('', name$, [], null);
    var ieErrorCode = ex.number & 0xffff;
    var ieFacilityNumber = ex.number>>16 & 0x1FFF;
    if (typeof message === 'string')
      if ($.endsWith(message, 'is null') === true || $.endsWith(message, 'is undefined') === true || $.endsWith(message, 'is null or undefined') === true)
        return $.NullPointerException$(null, $.CTC0);
      else {
        if ($.contains$1(message, ' is not a function') !== true)
          var t1 = ieErrorCode === 438 && ieFacilityNumber === 10;
        else
          t1 = true;
        if (t1)
          return $.NoSuchMethodError$('', '<unknown>', [], null);
      }
    return $.ExceptionImplementation$(typeof message === 'string' ? message : '');
  }
  if (ex instanceof RangeError) {
    if (typeof message === 'string' && $.contains$1(message, 'call stack') === true)
      return $.StackOverflowException$();
    return $.IllegalArgumentException$('');
  }
  if (typeof InternalError == 'function' && ex instanceof InternalError)
    if (typeof message === 'string' && message === 'too much recursion')
      return $.StackOverflowException$();
  return ex;
};

$.Quaternion$ = function(x, y, z, w) {
  return new $.Quaternion(x, y, z, w);
};

$.Collections_filter = function(source, destination, f) {
  for (var t1 = $.iterator(source); t1.hasNext$0() === true;) {
    var t2 = t1.next$0();
    if (f.call$1(t2) === true)
      destination.push(t2);
  }
  return destination;
};

$.checkNumbers = function(a, b) {
  if (typeof a === 'number')
    if (typeof b === 'number')
      return true;
    else {
      $.checkNull(b);
      throw $.$$throw($.IllegalArgumentException$(b));
    }
  return false;
};

$._ReceivePortImpl$ = function() {
  var t1 = $._ReceivePortImpl__nextFreeId;
  $._ReceivePortImpl__nextFreeId = $.add(t1, 1);
  t1 = new $._ReceivePortImpl(t1, null);
  t1._ReceivePortImpl$0();
  return t1;
};

$._NodeListWrapper$ = function(list) {
  return new $._NodeListWrapper(list);
};

$.stringJoinUnchecked = function(array, separator) {
  return array.join(separator);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$._Collections_filter = function(source, destination, f) {
  for (var t1 = $.iterator(source); t1.hasNext$0() === true;) {
    var t2 = t1.next$0();
    if (f.call$1(t2) === true)
      destination.push(t2);
  }
  return destination;
};

$.checkString = function(value) {
  if (!(typeof value === 'string')) {
    $.checkNull(value);
    throw $.$$throw($.IllegalArgumentException$(value));
  }
  return value;
};

$._Lists_indexOf = function(a, element, startIndex, endIndex) {
  if (typeof a !== 'string' && (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $._Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof startIndex !== 'number')
    return $._Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof endIndex !== 'number')
    return $._Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (var i = startIndex; i < endIndex; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$.TorusKnotGeometry$ = function(radius, tube, segmentsR, segmentsT, p, q, heightScale) {
  var t1 = $.Three_GeometryCount;
  $.Three_GeometryCount = $.add(t1, 1);
  t1 = new $.TorusKnotGeometry(radius, tube, segmentsR, segmentsT, p, q, heightScale, null, t1, '', [], [], [], [], [[]], [[]], [], [], [], [], [], null, null, null, false, false, null);
  t1.TorusKnotGeometry$7(radius, tube, segmentsR, segmentsT, p, q, heightScale);
  return t1;
};

$._Device_isOpera = function() {
  return $.contains$2($._Device_userAgent(), 'Opera', 0);
};

$.CylinderGeometry$ = function(radiusTop, radiusBottom, height, segmentsRadius, segmentsHeight, openEnded) {
  var t1 = $.Three_GeometryCount;
  $.Three_GeometryCount = $.add(t1, 1);
  t1 = new $.CylinderGeometry(radiusTop, radiusBottom, height, null, null, null, t1, '', [], [], [], [], [[]], [[]], [], [], [], [], [], null, null, null, false, false, null);
  t1.CylinderGeometry$6(radiusTop, radiusBottom, height, segmentsRadius, segmentsHeight, openEnded);
  return t1;
};

$._ElementFactoryProvider_Element$tag = function(tag) {
return document.createElement(tag)
};

$.map = function(receiver, f) {
  if (!$.isJsArray(receiver))
    return receiver.map$1(f);
  else
    return $.Collections_map(receiver, [], f);
};

$.CubeGeometry$ = function(width, height, depth, segmentsWidth, segmentsHeight, segmentsDepth, materialOrList, sides) {
  var t1 = $.Three_GeometryCount;
  $.Three_GeometryCount = $.add(t1, 1);
  t1 = new $.CubeGeometry(null, segmentsWidth, segmentsHeight, segmentsDepth, t1, '', [], [], [], [], [[]], [[]], [], [], [], [], [], null, null, null, false, false, null);
  t1.CubeGeometry$8(width, height, depth, segmentsWidth, segmentsHeight, segmentsDepth, materialOrList, sides);
  return t1;
};

$.contains = function(userAgent, name$) {
  return !(userAgent.indexOf(name$) === -1);
};

$._TextTrackCueEventsImpl$ = function(_ptr) {
  return new $._TextTrackCueEventsImpl(_ptr);
};

$.Random_Random = function(seed) {
  return $.CTC24;
};

$.ShaderChunk = function() {
  if ($.__ShaderChunk == null)
    $.__ShaderChunk = $.makeLiteralMap(['fog_pars_fragment', $.Strings_join(['#ifdef USE_FOG', 'uniform vec3 fogColor;', '#ifdef FOG_EXP2', 'uniform float fogDensity;', '#else', 'uniform float fogNear;', 'uniform float fogFar;', '#endif', '#endif'], '\n'), 'fog_fragment', $.Strings_join(['#ifdef USE_FOG', 'float depth = gl_FragCoord.z / gl_FragCoord.w;', '#ifdef FOG_EXP2', 'const float LOG2 = 1.442695;', 'float fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );', 'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );', '#else', 'float fogFactor = smoothstep( fogNear, fogFar, depth );', '#endif', 'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );', '#endif'], '\n'), 'envmap_pars_fragment', $.Strings_join(['#ifdef USE_ENVMAP', 'uniform float reflectivity;', 'uniform samplerCube envMap;', 'uniform float flipEnvMap;', 'uniform int combine;', '#ifdef USE_BUMPMAP', 'uniform bool useRefract;', 'uniform float refractionRatio;', '#else', 'varying vec3 vReflect;', '#endif', '#endif'], '\n'), 'envmap_fragment', $.Strings_join(['#ifdef USE_ENVMAP', 'vec3 reflectVec;', '#ifdef USE_BUMPMAP', 'vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );', 'if ( useRefract ) {', 'reflectVec = refract( cameraToVertex, normal, refractionRatio );', '} else { ', 'reflectVec = reflect( cameraToVertex, normal );', '}', '#else', 'reflectVec = vReflect;', '#endif', '#ifdef DOUBLE_SIDED', 'float flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );', 'vec4 cubeColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );', '#else', 'vec4 cubeColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );', '#endif', '#ifdef GAMMA_INPUT', 'cubeColor.xyz *= cubeColor.xyz;', '#endif', 'if ( combine == 1 ) {', 'gl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularStrength * reflectivity );', '} else {', 'gl_FragColor.xyz = mix( gl_FragColor.xyz, gl_FragColor.xyz * cubeColor.xyz, specularStrength * reflectivity );', '}', '#endif'], '\n'), 'envmap_pars_vertex', $.Strings_join(['#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP )', 'varying vec3 vReflect;', 'uniform float refractionRatio;', 'uniform bool useRefract;', '#endif'], '\n'), 'envmap_vertex', $.Strings_join(['#ifdef USE_ENVMAP', 'vec4 mPosition = modelMatrix * vec4( position, 1.0 );', '#endif', '#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP )', 'vec3 nWorld = mat3( modelMatrix[ 0 ].xyz, modelMatrix[ 1 ].xyz, modelMatrix[ 2 ].xyz ) * normal;', 'if ( useRefract ) {', 'vReflect = refract( normalize( mPosition.xyz - cameraPosition ), normalize( nWorld.xyz ), refractionRatio );', '} else {', 'vReflect = reflect( normalize( mPosition.xyz - cameraPosition ), normalize( nWorld.xyz ) );', '}', '#endif'], '\n'), 'map_particle_pars_fragment', $.Strings_join(['#ifdef USE_MAP', 'uniform sampler2D map;', '#endif'], '\n'), 'map_particle_fragment', $.Strings_join(['#ifdef USE_MAP', 'gl_FragColor = gl_FragColor * texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );', '#endif'], '\n'), 'map_pars_vertex', $.Strings_join(['#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_SPECULARMAP )', 'varying vec2 vUv;', 'uniform vec4 offsetRepeat;', '#endif'], '\n'), 'map_pars_fragment', $.Strings_join(['#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_SPECULARMAP )', 'varying vec2 vUv;', '#endif', '#ifdef USE_MAP', 'uniform sampler2D map;', '#endif'], '\n'), 'map_vertex', $.Strings_join(['#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_SPECULARMAP )', 'vUv = uv * offsetRepeat.zw + offsetRepeat.xy;', '#endif'], '\n'), 'map_fragment', $.Strings_join(['#ifdef USE_MAP', '#ifdef GAMMA_INPUT', 'vec4 texelColor = texture2D( map, vUv );', 'texelColor.xyz *= texelColor.xyz;', 'gl_FragColor = gl_FragColor * texelColor;', '#else', 'gl_FragColor = gl_FragColor * texture2D( map, vUv );', '#endif', '#endif'], '\n'), 'lightmap_pars_fragment', $.Strings_join(['#ifdef USE_LIGHTMAP', 'varying vec2 vUv2;', 'uniform sampler2D lightMap;', '#endif'], '\n'), 'lightmap_pars_vertex', $.Strings_join(['#ifdef USE_LIGHTMAP', 'varying vec2 vUv2;', '#endif'], '\n'), 'lightmap_fragment', $.Strings_join(['#ifdef USE_LIGHTMAP', 'gl_FragColor = gl_FragColor * texture2D( lightMap, vUv2 );', '#endif'], '\n'), 'lightmap_vertex', $.Strings_join(['#ifdef USE_LIGHTMAP', 'vUv2 = uv2;', '#endif'], '\n'), 'bumpmap_pars_fragment', $.Strings_join(['#ifdef USE_BUMPMAP', 'uniform sampler2D bumpMap;', 'uniform float bumpScale;', 'vec2 dHdxy_fwd() {', 'vec2 dSTdx = dFdx( vUv );', 'vec2 dSTdy = dFdy( vUv );', 'float Hll = bumpScale * texture2D( bumpMap, vUv ).x;', 'float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;', 'float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;', 'return vec2( dBx, dBy );', '}', 'vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {', 'vec3 vSigmaX = dFdx( surf_pos );', 'vec3 vSigmaY = dFdy( surf_pos );', 'vec3 vN = surf_norm;', 'vec3 R1 = cross( vSigmaY, vN );', 'vec3 R2 = cross( vN, vSigmaX );', 'float fDet = dot( vSigmaX, R1 );', 'vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );', 'return normalize( abs( fDet ) * surf_norm - vGrad );', '}', '#endif'], '\n'), 'specularmap_pars_fragment', $.Strings_join(['#ifdef USE_SPECULARMAP', 'uniform sampler2D specularMap;', '#endif'], '\n'), 'specularmap_fragment', $.Strings_join(['float specularStrength;', '#ifdef USE_SPECULARMAP', 'vec4 texelSpecular = texture2D( specularMap, vUv );', 'specularStrength = texelSpecular.r;', '#else', 'specularStrength = 1.0;', '#endif'], '\n'), 'lights_lambert_pars_vertex', $.Strings_join(['uniform vec3 ambient;', 'uniform vec3 diffuse;', 'uniform vec3 emissive;', 'uniform vec3 ambientLightColor;', '#if MAX_DIR_LIGHTS > 0', 'uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];', 'uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];', '#endif', '#if MAX_POINT_LIGHTS > 0', 'uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];', 'uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];', 'uniform float pointLightDistance[ MAX_POINT_LIGHTS ];', '#endif', '#if MAX_SPOT_LIGHTS > 0', 'uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];', 'uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];', 'uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];', 'uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];', 'uniform float spotLightAngle[ MAX_SPOT_LIGHTS ];', 'uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];', '#endif', '#ifdef WRAP_AROUND', 'uniform vec3 wrapRGB;', '#endif'], '\n'), 'lights_lambert_vertex', $.Strings_join(['vLightFront = vec3( 0.0 );', '#ifdef DOUBLE_SIDED', 'vLightBack = vec3( 0.0 );', '#endif', 'transformedNormal = normalize( transformedNormal );', '#if MAX_DIR_LIGHTS > 0', 'for( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {', 'vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );', 'vec3 dirVector = normalize( lDirection.xyz );', 'float dotProduct = dot( transformedNormal, dirVector );', 'vec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );', '#ifdef DOUBLE_SIDED', 'vec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );', '#ifdef WRAP_AROUND', 'vec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );', '#endif', '#endif', '#ifdef WRAP_AROUND', 'vec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );', 'directionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );', '#ifdef DOUBLE_SIDED', 'directionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );', '#endif', '#endif', 'vLightFront += directionalLightColor[ i ] * directionalLightWeighting;', '#ifdef DOUBLE_SIDED', 'vLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;', '#endif', '}', '#endif', '#if MAX_POINT_LIGHTS > 0', 'for( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {', 'vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );', 'vec3 lVector = lPosition.xyz - mvPosition.xyz;', 'float lDistance = 1.0;', 'if ( pointLightDistance[ i ] > 0.0 )', 'lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );', 'lVector = normalize( lVector );', 'float dotProduct = dot( transformedNormal, lVector );', 'vec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );', '#ifdef DOUBLE_SIDED', 'vec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );', '#ifdef WRAP_AROUND', 'vec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );', '#endif', '#endif', '#ifdef WRAP_AROUND', 'vec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );', 'pointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );', '#ifdef DOUBLE_SIDED', 'pointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );', '#endif', '#endif', 'vLightFront += pointLightColor[ i ] * pointLightWeighting * lDistance;', '#ifdef DOUBLE_SIDED', 'vLightBack += pointLightColor[ i ] * pointLightWeightingBack * lDistance;', '#endif', '}', '#endif', '#if MAX_SPOT_LIGHTS > 0', 'for( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {', 'vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );', 'vec3 lVector = lPosition.xyz - mvPosition.xyz;', 'lVector = normalize( lVector );', 'float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - mPosition.xyz ) );', 'if ( spotEffect > spotLightAngle[ i ] ) {', 'spotEffect = pow( spotEffect, spotLightExponent[ i ] );', 'float lDistance = 1.0;', 'if ( spotLightDistance[ i ] > 0.0 )', 'lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );', 'float dotProduct = dot( transformedNormal, lVector );', 'vec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );', '#ifdef DOUBLE_SIDED', 'vec3 spotLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );', '#ifdef WRAP_AROUND', 'vec3 spotLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );', '#endif', '#endif', '#ifdef WRAP_AROUND', 'vec3 spotLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );', 'spotLightWeighting = mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );', '#ifdef DOUBLE_SIDED', 'spotLightWeightingBack = mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );', '#endif', '#endif', 'vLightFront += spotLightColor[ i ] * spotLightWeighting * lDistance * spotEffect;', '#ifdef DOUBLE_SIDED', 'vLightBack += spotLightColor[ i ] * spotLightWeightingBack * lDistance * spotEffect;', '#endif', '}', '}', '#endif', 'vLightFront = vLightFront * diffuse + ambient * ambientLightColor + emissive;', '#ifdef DOUBLE_SIDED', 'vLightBack = vLightBack * diffuse + ambient * ambientLightColor + emissive;', '#endif'], '\n'), 'lights_phong_pars_vertex', $.Strings_join(['#ifndef PHONG_PER_PIXEL', '#if MAX_POINT_LIGHTS > 0', 'uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];', 'uniform float pointLightDistance[ MAX_POINT_LIGHTS ];', 'varying vec4 vPointLight[ MAX_POINT_LIGHTS ];', '#endif', '#if MAX_SPOT_LIGHTS > 0', 'uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];', 'uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];', 'varying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];', '#endif', '#endif', '#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )', 'varying vec3 vWorldPosition;', '#endif'], '\n'), 'lights_phong_vertex', $.Strings_join(['#ifndef PHONG_PER_PIXEL', '#if MAX_POINT_LIGHTS > 0', 'for( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {', 'vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );', 'vec3 lVector = lPosition.xyz - mvPosition.xyz;', 'float lDistance = 1.0;', 'if ( pointLightDistance[ i ] > 0.0 )', 'lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );', 'vPointLight[ i ] = vec4( lVector, lDistance );', '}', '#endif', '#if MAX_SPOT_LIGHTS > 0', 'for( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {', 'vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );', 'vec3 lVector = lPosition.xyz - mvPosition.xyz;', 'float lDistance = 1.0;', 'if ( spotLightDistance[ i ] > 0.0 )', 'lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );', 'vSpotLight[ i ] = vec4( lVector, lDistance );', '}', '#endif', '#endif', '#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )', 'vWorldPosition = mPosition.xyz;', '#endif'], '\n'), 'lights_phong_pars_fragment', $.Strings_join(['uniform vec3 ambientLightColor;', '#if MAX_DIR_LIGHTS > 0', 'uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];', 'uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];', '#endif', '#if MAX_POINT_LIGHTS > 0', 'uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];', '#ifdef PHONG_PER_PIXEL', 'uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];', 'uniform float pointLightDistance[ MAX_POINT_LIGHTS ];', '#else', 'varying vec4 vPointLight[ MAX_POINT_LIGHTS ];', '#endif', '#endif', '#if MAX_SPOT_LIGHTS > 0', 'uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];', 'uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];', 'uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];', 'uniform float spotLightAngle[ MAX_SPOT_LIGHTS ];', 'uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];', '#ifdef PHONG_PER_PIXEL', 'uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];', '#else', 'varying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];', '#endif', '#endif', '#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )', 'varying vec3 vWorldPosition;', '#endif', '#ifdef WRAP_AROUND', 'uniform vec3 wrapRGB;', '#endif', 'varying vec3 vViewPosition;', 'varying vec3 vNormal;'], '\n'), 'lights_phong_fragment', $.Strings_join(['vec3 normal = normalize( vNormal );', 'vec3 viewPosition = normalize( vViewPosition );', '#ifdef DOUBLE_SIDED', 'normal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );', '#endif', '#ifdef USE_BUMPMAP', 'normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );', '#endif', '#if MAX_POINT_LIGHTS > 0', 'vec3 pointDiffuse  = vec3( 0.0 );', 'vec3 pointSpecular = vec3( 0.0 );', 'for ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {', '#ifdef PHONG_PER_PIXEL', 'vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );', 'vec3 lVector = lPosition.xyz + vViewPosition.xyz;', 'float lDistance = 1.0;', 'if ( pointLightDistance[ i ] > 0.0 )', 'lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );', 'lVector = normalize( lVector );', '#else', 'vec3 lVector = normalize( vPointLight[ i ].xyz );', 'float lDistance = vPointLight[ i ].w;', '#endif', 'float dotProduct = dot( normal, lVector );', '#ifdef WRAP_AROUND', 'float pointDiffuseWeightFull = max( dotProduct, 0.0 );', 'float pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );', 'vec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );', '#else', 'float pointDiffuseWeight = max( dotProduct, 0.0 );', '#endif', 'pointDiffuse  += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;', 'vec3 pointHalfVector = normalize( lVector + viewPosition );', 'float pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );', 'float pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );', '#ifdef PHYSICALLY_BASED_SHADING', 'float specularNormalization = ( shininess + 2.0001 ) / 8.0;', 'vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, pointHalfVector ), 5.0 );', 'pointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;', '#else', 'pointSpecular += specular * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance;', '#endif', '}', '#endif', '#if MAX_SPOT_LIGHTS > 0', 'vec3 spotDiffuse  = vec3( 0.0 );', 'vec3 spotSpecular = vec3( 0.0 );', 'for ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {', '#ifdef PHONG_PER_PIXEL', 'vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );', 'vec3 lVector = lPosition.xyz + vViewPosition.xyz;', 'float lDistance = 1.0;', 'if ( spotLightDistance[ i ] > 0.0 )', 'lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );', 'lVector = normalize( lVector );', '#else', 'vec3 lVector = normalize( vSpotLight[ i ].xyz );', 'float lDistance = vSpotLight[ i ].w;', '#endif', 'float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );', 'if ( spotEffect > spotLightAngle[ i ] ) {', 'spotEffect = pow( spotEffect, spotLightExponent[ i ] );', 'float dotProduct = dot( normal, lVector );', '#ifdef WRAP_AROUND', 'float spotDiffuseWeightFull = max( dotProduct, 0.0 );', 'float spotDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );', 'vec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );', '#else', 'float spotDiffuseWeight = max( dotProduct, 0.0 );', '#endif', 'spotDiffuse += diffuse * spotLightColor[ i ] * spotDiffuseWeight * lDistance * spotEffect;', 'vec3 spotHalfVector = normalize( lVector + viewPosition );', 'float spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );', 'float spotSpecularWeight = specularStrength * max( pow( spotDotNormalHalf, shininess ), 0.0 );', '#ifdef PHYSICALLY_BASED_SHADING', 'float specularNormalization = ( shininess + 2.0001 ) / 8.0;', 'vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, spotHalfVector ), 5.0 );', 'spotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * specularNormalization * spotEffect;', '#else', 'spotSpecular += specular * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * spotEffect;', '#endif', '}', '}', '#endif', '#if MAX_DIR_LIGHTS > 0', 'vec3 dirDiffuse  = vec3( 0.0 );', 'vec3 dirSpecular = vec3( 0.0 );', 'for( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {', 'vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );', 'vec3 dirVector = normalize( lDirection.xyz );', 'float dotProduct = dot( normal, dirVector );', '#ifdef WRAP_AROUND', 'float dirDiffuseWeightFull = max( dotProduct, 0.0 );', 'float dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );', 'vec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );', '#else', 'float dirDiffuseWeight = max( dotProduct, 0.0 );', '#endif', 'dirDiffuse  += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;', 'vec3 dirHalfVector = normalize( dirVector + viewPosition );', 'float dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );', 'float dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );', '#ifdef PHYSICALLY_BASED_SHADING', 'float specularNormalization = ( shininess + 2.0001 ) / 8.0;', 'vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );', 'dirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;', '#else', 'dirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight;', '#endif', '}', '#endif', 'vec3 totalDiffuse = vec3( 0.0 );', 'vec3 totalSpecular = vec3( 0.0 );', '#if MAX_DIR_LIGHTS > 0', 'totalDiffuse += dirDiffuse;', 'totalSpecular += dirSpecular;', '#endif', '#if MAX_POINT_LIGHTS > 0', 'totalDiffuse += pointDiffuse;', 'totalSpecular += pointSpecular;', '#endif', '#if MAX_SPOT_LIGHTS > 0', 'totalDiffuse += spotDiffuse;', 'totalSpecular += spotSpecular;', '#endif', '#ifdef METAL', 'gl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient + totalSpecular );', '#else', 'gl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;', '#endif'], '\n'), 'color_pars_fragment', $.Strings_join(['#ifdef USE_COLOR', 'varying vec3 vColor;', '#endif'], '\n'), 'color_fragment', $.Strings_join(['#ifdef USE_COLOR', 'gl_FragColor = gl_FragColor * vec4( vColor, opacity );', '#endif'], '\n'), 'color_pars_vertex', $.Strings_join(['#ifdef USE_COLOR', 'varying vec3 vColor;', '#endif'], '\n'), 'color_vertex', $.Strings_join(['#ifdef USE_COLOR', '#ifdef GAMMA_INPUT', 'vColor = color * color;', '#else', 'vColor = color;', '#endif', '#endif'], '\n'), 'skinning_pars_vertex', $.Strings_join(['#ifdef USE_SKINNING', '#ifdef BONE_TEXTURE', 'uniform sampler2D boneTexture;', 'mat4 getBoneMatrix( const in float i ) {', 'float j = i * 4.0;', 'float x = mod( j, N_BONE_PIXEL_X );', 'float y = floor( j / N_BONE_PIXEL_X );', 'const float dx = 1.0 / N_BONE_PIXEL_X;', 'const float dy = 1.0 / N_BONE_PIXEL_Y;', 'y = dy * ( y + 0.5 );', 'vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );', 'vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );', 'vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );', 'vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );', 'mat4 bone = mat4( v1, v2, v3, v4 );', 'return bone;', '}', '#else', 'uniform mat4 boneGlobalMatrices[ MAX_BONES ];', 'mat4 getBoneMatrix( const in float i ) {', 'mat4 bone = boneGlobalMatrices[ int(i) ];', 'return bone;', '}', '#endif', '#endif'], '\n'), 'skinbase_vertex', $.Strings_join(['#ifdef USE_SKINNING', 'mat4 boneMatX = getBoneMatrix( skinIndex.x );', 'mat4 boneMatY = getBoneMatrix( skinIndex.y );', '#endif'], '\n'), 'skinning_vertex', $.Strings_join(['#ifdef USE_SKINNING', 'vec4 skinned  = boneMatX * skinVertexA * skinWeight.x;', 'skinned    += boneMatY * skinVertexB * skinWeight.y;', 'gl_Position  = projectionMatrix * modelViewMatrix * skinned;', '#endif'], '\n'), 'morphtarget_pars_vertex', $.Strings_join(['#ifdef USE_MORPHTARGETS', '#ifndef USE_MORPHNORMALS', 'uniform float morphTargetInfluences[ 8 ];', '#else', 'uniform float morphTargetInfluences[ 4 ];', '#endif', '#endif'], '\n'), 'morphtarget_vertex', $.Strings_join(['#ifdef USE_MORPHTARGETS', 'vec3 morphed = vec3( 0.0 );', 'morphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];', 'morphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];', 'morphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];', 'morphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];', '#ifndef USE_MORPHNORMALS', 'morphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];', 'morphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];', 'morphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];', 'morphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];', '#endif', 'morphed += position;', 'gl_Position = projectionMatrix * modelViewMatrix * vec4( morphed, 1.0 );', '#endif'], '\n'), 'default_vertex', $.Strings_join(['#ifndef USE_MORPHTARGETS', '#ifndef USE_SKINNING', 'gl_Position = projectionMatrix * mvPosition;', '#endif', '#endif'], '\n'), 'morphnormal_vertex', $.Strings_join(['#ifdef USE_MORPHNORMALS', 'vec3 morphedNormal = vec3( 0.0 );', 'morphedNormal +=  ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];', 'morphedNormal +=  ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];', 'morphedNormal +=  ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];', 'morphedNormal +=  ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];', 'morphedNormal += normal;', '#endif'], '\n'), 'skinnormal_vertex', $.Strings_join(['#ifdef USE_SKINNING', 'mat4 skinMatrix = skinWeight.x * boneMatX;', 'skinMatrix   += skinWeight.y * boneMatY;', 'vec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );', '#endif'], '\n'), 'defaultnormal_vertex', $.Strings_join(['vec3 transformedNormal;', '#ifdef USE_SKINNING', 'transformedNormal = skinnedNormal.xyz;', '#endif', '#ifdef USE_MORPHNORMALS', 'transformedNormal = morphedNormal;', '#endif', '#ifndef USE_MORPHNORMALS', '#ifndef USE_SKINNING', 'transformedNormal = normal;', '#endif', '#endif', 'transformedNormal = normalMatrix * transformedNormal;'], '\n'), 'shadowmap_pars_fragment', $.Strings_join(['#ifdef USE_SHADOWMAP', 'uniform sampler2D shadowMap[ MAX_SHADOWS ];', 'uniform vec2 shadowMapSize[ MAX_SHADOWS ];', 'uniform float shadowDarkness[ MAX_SHADOWS ];', 'uniform float shadowBias[ MAX_SHADOWS ];', 'varying vec4 vShadowCoord[ MAX_SHADOWS ];', 'float unpackDepth( const in vec4 rgba_depth ) {', 'const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );', 'float depth = dot( rgba_depth, bit_shift );', 'return depth;', '}', '#endif'], '\n'), 'shadowmap_fragment', $.Strings_join(['#ifdef USE_SHADOWMAP', '#ifdef SHADOWMAP_DEBUG', 'vec3 frustumColors[3];', 'frustumColors[0] = vec3( 1.0, 0.5, 0.0 );', 'frustumColors[1] = vec3( 0.0, 1.0, 0.8 );', 'frustumColors[2] = vec3( 0.0, 0.5, 1.0 );', '#endif', '#ifdef SHADOWMAP_CASCADE', 'int inFrustumCount = 0;', '#endif', 'float fDepth;', 'vec3 shadowColor = vec3( 1.0 );', 'for( int i = 0; i < MAX_SHADOWS; i ++ ) {', 'vec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;', 'bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );', 'bool inFrustum = all( inFrustumVec );', '#ifdef SHADOWMAP_CASCADE', 'inFrustumCount += int( inFrustum );', 'bvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z <= 1.0 );', '#else', 'bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );', '#endif', 'bool frustumTest = all( frustumTestVec );', 'if ( frustumTest ) {', 'shadowCoord.z += shadowBias[ i ];', '#ifdef SHADOWMAP_SOFT', 'float shadow = 0.0;', 'const float shadowDelta = 1.0 / 9.0;', 'float xPixelOffset = 1.0 / shadowMapSize[ i ].x;', 'float yPixelOffset = 1.0 / shadowMapSize[ i ].y;', 'float dx0 = -1.25 * xPixelOffset;', 'float dy0 = -1.25 * yPixelOffset;', 'float dx1 = 1.25 * xPixelOffset;', 'float dy1 = 1.25 * yPixelOffset;', 'fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );', 'if ( fDepth < shadowCoord.z ) shadow += shadowDelta;', 'fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );', 'if ( fDepth < shadowCoord.z ) shadow += shadowDelta;', 'fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );', 'if ( fDepth < shadowCoord.z ) shadow += shadowDelta;', 'fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );', 'if ( fDepth < shadowCoord.z ) shadow += shadowDelta;', 'fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );', 'if ( fDepth < shadowCoord.z ) shadow += shadowDelta;', 'fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );', 'if ( fDepth < shadowCoord.z ) shadow += shadowDelta;', 'fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );', 'if ( fDepth < shadowCoord.z ) shadow += shadowDelta;', 'fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );', 'if ( fDepth < shadowCoord.z ) shadow += shadowDelta;', 'fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );', 'if ( fDepth < shadowCoord.z ) shadow += shadowDelta;', 'shadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );', '#else', 'vec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );', 'float fDepth = unpackDepth( rgbaDepth );', 'if ( fDepth < shadowCoord.z )', 'shadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );', '#endif', '}', '#ifdef SHADOWMAP_DEBUG', '#ifdef SHADOWMAP_CASCADE', 'if ( inFrustum && inFrustumCount == 1 ) gl_FragColor.xyz *= frustumColors[ i ];', '#else', 'if ( inFrustum ) gl_FragColor.xyz *= frustumColors[ i ];', '#endif', '#endif', '}', '#ifdef GAMMA_OUTPUT', 'shadowColor *= shadowColor;', '#endif', 'gl_FragColor.xyz = gl_FragColor.xyz * shadowColor;', '#endif'], '\n'), 'shadowmap_pars_vertex', $.Strings_join(['#ifdef USE_SHADOWMAP', 'varying vec4 vShadowCoord[ MAX_SHADOWS ];', 'uniform mat4 shadowMatrix[ MAX_SHADOWS ];', '#endif'], '\n'), 'shadowmap_vertex', $.Strings_join(['#ifdef USE_SHADOWMAP', 'vec4 transformedPosition;', '#ifdef USE_MORPHTARGETS', 'transformedPosition = modelMatrix * vec4( morphed, 1.0 );', '#else', '#ifdef USE_SKINNING', 'transformedPosition = modelMatrix * skinned;', '#else', 'transformedPosition = modelMatrix * vec4( position, 1.0 );', '#endif', '#endif', 'for( int i = 0; i < MAX_SHADOWS; i ++ ) {', 'vShadowCoord[ i ] = shadowMatrix[ i ] * transformedPosition;', '}', '#endif'], '\n'), 'alphatest_fragment', $.Strings_join(['#ifdef ALPHATEST', 'if ( gl_FragColor.a < ALPHATEST ) discard;', '#endif'], '\n'), 'linear_to_gamma_fragment', $.Strings_join(['#ifdef GAMMA_OUTPUT', 'gl_FragColor.xyz = sqrt( gl_FragColor.xyz );', '#endif'], '\n')]);
  return $.__ShaderChunk;
};

$.endsWith = function(receiver, other) {
  $.checkString(other);
  var receiverLength = receiver.length;
  var otherLength = other.length;
  if (otherLength > receiverLength)
    return false;
  return other === $.substring$1(receiver, receiverLength - otherLength);
};

$.allMatchesInStringUnchecked = function(needle, haystack) {
  var result = $.ListImplementation_List(null);
  var length$ = $.get$length(haystack);
  var patternLength = needle.length;
  for (var startIndex = 0; true;) {
    var position = $.indexOf$2(haystack, needle, startIndex);
    if ($.eqB(position, -1))
      break;
    result.push($.StringMatch$(position, haystack, needle));
    var endIndex = $.add(position, patternLength);
    if ($.eqB(endIndex, length$))
      break;
    else
      startIndex = $.eqB(position, endIndex) ? $.add(startIndex, 1) : endIndex;
  }
  return result;
};

$._SpeechRecognitionEventsImpl$ = function(_ptr) {
  return new $._SpeechRecognitionEventsImpl(_ptr);
};

$.Primitives_getSeconds = function(receiver) {
  return receiver.isUtc === true ? $.Primitives_lazyAsJsDate(receiver).getUTCSeconds() : $.Primitives_lazyAsJsDate(receiver).getSeconds();
};

$.WebGLRenderer$ = function(canvas, precision, alpha, premultipliedAlpha, antialias, stencil, preserveDrawingBuffer, clearColor, clearAlpha, maxLights) {
  var t1 = new $.WebGLRenderer(canvas, null, precision, clearColor, clearAlpha, maxLights, alpha, premultipliedAlpha, antialias, stencil, preserveDrawingBuffer, true, true, true, true, true, true, true, false, false, false, false, true, true, true, false, false, 8, 4, true, [], [], $.WebGLRendererInfo$(), [], 0, null, null, -1, null, null, 0, -1, -1, -1, -1, -1, -1, -1, -1, null, null, null, null, 0, 0, 0, 0, 0, 0, $.Frustum$(), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Vector4$(0, 0, 0, 1), $.Vector3$(0, 0, 0), null, true, null, null, null, null, null, null, null, null, null, null);
  t1.WebGLRenderer$10(canvas, precision, alpha, premultipliedAlpha, antialias, stencil, preserveDrawingBuffer, clearColor, clearAlpha, maxLights);
  return t1;
};

$.WebGLRendererInfo$ = function() {
  var t1 = new $.WebGLRendererInfo(null, null);
  t1.WebGLRendererInfo$0();
  return t1;
};

$.IllegalArgumentException$ = function(arg) {
  return new $.IllegalArgumentException(arg);
};

$._HttpRequestUploadEventsImpl$ = function(_ptr) {
  return new $._HttpRequestUploadEventsImpl(_ptr);
};

$.toString = function(value) {
  if (typeof value == "object" && value !== null)
    if ($.isJsArray(value))
      return $.Collections_collectionToString(value);
    else
      return value.toString$0();
  if (value === 0 && (1 / value) < 0)
    return '-0.0';
  if (value == null)
    return 'null';
  if (typeof value == "function")
    return 'Closure';
  return String(value);
};

$.DualPivotQuicksort__doSort = function(a, left, right, compare) {
  if ($.leB($.sub(right, left), 32))
    $.DualPivotQuicksort_insertionSort_(a, left, right, compare);
  else
    $.DualPivotQuicksort__dualPivotQuicksort(a, left, right, compare);
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.NullPointerException$(null, $.CTC0));
  return object;
};

$.tan = function(value) {
  return Math.tan($.checkNum(value));
};

$.Collections__containsRef = function(c, ref) {
  for (var t1 = $.iterator(c); t1.hasNext$0() === true;) {
    var t2 = t1.next$0();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  if (typeof a !== 'string' && (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $.Arrays_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (var i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$._MediaElementEventsImpl$ = function(_ptr) {
  return new $._MediaElementEventsImpl(_ptr);
};

$.getTraceFromException = function(exception) {
  return $.StackTrace$(exception.stack);
};

$.Collections_map = function(source, destination, f) {
  for (var t1 = $.iterator(source); t1.hasNext$0() === true;)
    destination.push(f.call$1(t1.next$0()));
  return destination;
};

$.Maps__emitMap = function(m, result, visiting) {
  var t1 = {};
  $.add$1(visiting, m);
  $.add$1(result, '{');
  t1.first_1 = true;
  $.forEach(m, new $.Maps__emitMap_anon(result, t1, visiting));
  $.add$1(result, '}');
  $.removeLast(visiting);
};

$._MessageTraverser_isPrimitive = function(x) {
  return x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean';
};

$._Deserializer_isPrimitive = function(x) {
  return x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean';
};

$.propertySet = function(object, property, value) {
  object[property] = value;
};

$._BatteryManagerEventsImpl$ = function(_ptr) {
  return new $._BatteryManagerEventsImpl(_ptr);
};

$._IDBOpenDBRequestEventsImpl$ = function(_ptr) {
  return new $._IDBOpenDBRequestEventsImpl(_ptr);
};

$.sqrt = function(value) {
  return Math.sqrt($.checkNum(value));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedOperationException$(reason));
};

$.le = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a <= b : $.le$slow(a, b);
};

$._serializeMessage = function(message) {
  if ($._globalState().get$needSerialization() === true)
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$.IcosahedronGeometry_IcosahedronGeometry = function(radius, detail) {
  var t = (1 + $.sqrt(5)) / 2;
  var t1 = [-1, t, 0];
  var t2 = [1, t, 0];
  var t3 = -t;
  return $.IcosahedronGeometry$_internal([t1, t2, [-1, t3, 0], [1, t3, 0], [0, -1, t], [0, 1, t], [0, -1, t3], [0, 1, t3], [t, 0, -1], [t, 0, 1], [t3, 0, -1], [t3, 0, 1]], [[0, 11, 5], [0, 5, 1], [0, 1, 7], [0, 7, 10], [0, 10, 11], [1, 5, 9], [5, 11, 4], [11, 10, 2], [10, 7, 6], [7, 1, 8], [3, 9, 4], [3, 4, 2], [3, 2, 6], [3, 6, 8], [3, 8, 9], [4, 9, 5], [2, 4, 11], [6, 2, 10], [8, 6, 7], [9, 8, 1]], radius, detail);
};

$.IndexOutOfRangeException$ = function(_value) {
  return new $.IndexOutOfRangeException(_value);
};

$.KeyValuePair$ = function(key, value) {
  return new $.KeyValuePair(key, value);
};

$._DocumentEventsImpl$ = function(_ptr) {
  return new $._DocumentEventsImpl(_ptr);
};

$._IDBVersionChangeRequestEventsImpl$ = function(_ptr) {
  return new $._IDBVersionChangeRequestEventsImpl(_ptr);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$.sin = function(value) {
  return Math.sin($.checkNum(value));
};

$.FutureNotCompleteException$ = function() {
  return new $.FutureNotCompleteException();
};

$.propertyTypeCastError = function(value, property) {
  throw $.$$throw($.CastExceptionImplementation$($.Primitives_objectTypeName(value), $.substring$2(property, 3, $.get$length(property))));
};

$.MeshLambertMaterial$ = function(map, color, ambient, emissive, wrapAround, wrapRGB, lightMap, specularMap, envMap, combine, reflectivity, refractionRatio, shading, vertexColors, fog, wireframe, wireframeLinewidth, wireframeLinecap, wireframeLinejoin, skinning, morphTargets, morphNormals, name$, side, opacity, transparent, blending, blendSrc, blendDst, blendEquation, depthTest, depthWrite, polygonOffset, polygonOffsetFactor, polygonOffsetUnits, alphaTest, overdraw, visible) {
  var t1 = $.Color$(color);
  var t2 = $.Color$(ambient);
  var t3 = $.Color$(emissive);
  var t4 = wrapRGB == null ? $.Vector3$(1, 1, 1) : wrapRGB;
  var t5 = $.Three_MaterialCount;
  $.Three_MaterialCount = $.add(t5, 1);
  return new $.MeshLambertMaterial(null, t1, t2, t3, wrapAround, t4, map, lightMap, specularMap, envMap, combine, reflectivity, refractionRatio, shading, wireframe, wireframeLinewidth, wireframeLinecap, wireframeLinejoin, skinning, morphTargets, morphNormals, vertexColors, fog, name$, t5, side, opacity, blending, blendSrc, blendDst, blendEquation, alphaTest, polygonOffset, polygonOffsetFactor, polygonOffsetUnits, transparent, depthTest, depthWrite, overdraw, visible, true, null);
};

$.ArrowHelper$ = function(dir, origin, length$, hex) {
  var t1 = $.Three_Object3DCount;
  $.Three_Object3DCount = $.add(t1, 1);
  t1 = new $.ArrowHelper(null, null, t1, '', $.makeLiteralMap([]), null, [], $.Vector3$(0, 1, 0), $.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0), $.Vector3$(1, 1, 1), 'XYZ', null, null, null, true, null, $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), $.Matrix4$(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), true, true, $.Quaternion$(0, 0, 0, 1), false, 0, 1, true, false, false, true, $.Vector3$(0, 0, 0), null);
  t1.ArrowHelper$4(dir, origin, length$, hex);
  return t1;
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
};

$.LinkedHashMapImplementation$ = function() {
  var t1 = new $.LinkedHashMapImplementation(null, null);
  t1.LinkedHashMapImplementation$0();
  return t1;
};

$.FutureImpl$ = function() {
  return new $.FutureImpl(false, null, null, null, false, [], [], []);
};

$._TypedArrayFactoryProvider_Uint16Array = function(length$) {
  return $._TypedArrayFactoryProvider__U16(length$);
};

$.UV$ = function(u, v) {
  return new $.UV(u, v);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property,
      {value: value, enumerable: false, writable: true, configurable: true});
};

$.lt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b);
};

$._FileWriterEventsImpl$ = function(_ptr) {
  return new $._FileWriterEventsImpl(_ptr);
};

$.cos = function(value) {
  return Math.cos($.checkNum(value));
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  t1._Manager$0();
  return t1;
};

$.sub = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a - b : $.sub$slow(a, b);
};

$._Lists_indexOf$bailout = function(state, a, element, startIndex, endIndex) {
  if ($.geB(startIndex, $.get$length(a)))
    return -1;
  if ($.ltB(startIndex, 0))
    startIndex = 0;
  for (var i = startIndex; $.ltB(i, endIndex); i = $.add(i, 1))
    if ($.eqB($.index(a, i), element))
      return i;
  return -1;
};

$.Arrays_indexOf$bailout = function(state, a, element, startIndex, endIndex) {
  if ($.geB(startIndex, $.get$length(a)))
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (var i = startIndex; i < endIndex; ++i)
    if ($.eqB($.index(a, i), element))
      return i;
  return -1;
};

$._Lists_getRange$bailout = function(state, a, start, length$, accumulator) {
  if ($.ltB(length$, 0))
    throw $.$$throw($.IllegalArgumentException$('length'));
  if ($.ltB(start, 0))
    throw $.$$throw($.IndexOutOfRangeException$(start));
  var end = $.add(start, length$);
  if ($.gtB(end, $.get$length(a)))
    throw $.$$throw($.IndexOutOfRangeException$(end));
  for (var i = start; $.ltB(i, end); i = $.add(i, 1))
    accumulator.push($.index(a, i));
  return accumulator;
};

$.Futures_wait$bailout = function(state, futures, t1) {
  if ($.isEmpty(futures) === true)
    return $.FutureImpl_FutureImpl$immediate($.CTC0);
  var completer = $.CompleterImpl$();
  var result = completer.get$future();
  t1.remaining_1 = $.get$length(futures);
  var values = $.ListImplementation_List($.get$length(futures));
  for (var i = 0; $.ltB(i, $.get$length(futures)); ++i) {
    var future = $.index(futures, i);
    future.then$1(new $.Futures_wait_anon(completer, i, t1, result, values));
    future.handleException$1(new $.Futures_wait_anon0(future, completer, result));
  }
  return result;
};

$.Arrays_copy$bailout = function(state, src, srcStart, dst, dstStart, count) {
  if (srcStart < dstStart)
    for (var i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j)
      $.indexSet(dst, j, $.index(src, i));
  else
    for (var t1 = srcStart + count, i = srcStart, j = dstStart; i < t1; ++i, ++j)
      $.indexSet(dst, j, $.index(src, i));
};

$.StringImplementation__toJsStringArray$bailout = function(state, strings) {
  $.checkNull(strings);
  var length$ = $.get$length(strings);
  if ($.isJsArray(strings)) {
    for (var i = 0; $.ltB(i, length$); ++i) {
      var string = $.index(strings, i);
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.IllegalArgumentException$(string));
    }
    var array = strings;
  } else {
    array = $.ListImplementation_List(length$);
    for (i = 0; $.ltB(i, length$); ++i) {
      string = $.index(strings, i);
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.IllegalArgumentException$(string));
      if (i < 0 || i >= array.length)
        throw $.ioore(i);
      array[i] = string;
    }
  }
  return array;
};

$.DualPivotQuicksort__dualPivotQuicksort$bailout = function(state, env0, env1, env2, env3, env4, env5, env6, env7, env8, env9, env10, env11, env12, env13) {
  switch (state) {
    case 1:
      var a = env0;
      var left = env1;
      var right = env2;
      var compare = env3;
      break;
    case 2:
      a = env0;
      left = env1;
      compare = env2;
      less = env3;
      k = env4;
      index1 = env5;
      index5 = env6;
      el2 = env7;
      pivots_are_equal = env8;
      right = env9;
      ak = env10;
      comp = env11;
      el4 = env12;
      great = env13;
      break;
  }
  switch (state) {
    case 0:
    case 1:
      state = 0;
      var sixth = $.tdiv($.add($.sub(right, left), 1), 6);
      if (typeof sixth !== 'number')
        throw $.iae(sixth);
      var index1 = left + sixth;
      var index5 = $.sub(right, sixth);
      if (typeof right !== 'number')
        throw $.iae(right);
      var index3 = $.tdiv(left + right, 2);
      var index2 = index3 - sixth;
      var index4 = index3 + sixth;
      var el1 = $.index(a, index1);
      var el2 = $.index(a, index2);
      var el3 = $.index(a, index3);
      var el4 = $.index(a, index4);
      var el5 = $.index(a, index5);
      if ($.gtB(compare.call$2(el1, el2), 0)) {
        var t0 = el1;
        el1 = el2;
        el2 = t0;
      }
      if ($.gtB(compare.call$2(el4, el5), 0)) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      if ($.gtB(compare.call$2(el1, el3), 0)) {
        t0 = el3;
        el3 = el1;
        el1 = t0;
      }
      if ($.gtB(compare.call$2(el2, el3), 0)) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if ($.gtB(compare.call$2(el1, el4), 0)) {
        t0 = el1;
        el1 = el4;
        el4 = t0;
      }
      if ($.gtB(compare.call$2(el3, el4), 0)) {
        t0 = el3;
        el3 = el4;
        el4 = t0;
      }
      if ($.gtB(compare.call$2(el2, el5), 0)) {
        t0 = el5;
        el5 = el2;
        el2 = t0;
      }
      if ($.gtB(compare.call$2(el2, el3), 0)) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if ($.gtB(compare.call$2(el4, el5), 0)) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      $.indexSet(a, index1, el1);
      $.indexSet(a, index3, el3);
      $.indexSet(a, index5, el5);
      $.indexSet(a, index2, $.index(a, left));
      $.indexSet(a, index4, $.index(a, right));
      var less = left + 1;
      var great = right - 1;
      var pivots_are_equal = $.eqB(compare.call$2(el2, el4), 0);
    case 2:
      if (state === 2 || state === 0 && pivots_are_equal)
        switch (state) {
          case 0:
            var k = less;
          case 2:
            L0:
              while (true)
                switch (state) {
                  case 0:
                    if (!(k <= great))
                      break L0;
                  case 2:
                    c$0: {
                      switch (state) {
                        case 0:
                          var ak = $.index(a, k);
                          var comp = compare.call$2(ak, el2);
                        case 2:
                          state = 0;
                          if ($.eqB(comp, 0))
                            break c$0;
                          if ($.ltB(comp, 0)) {
                            if (!(k === less)) {
                              $.indexSet(a, k, $.index(a, less));
                              $.indexSet(a, less, ak);
                            }
                            ++less;
                          } else
                            for (var less0 = less + 1; true;) {
                              comp = compare.call$2($.index(a, great), el2);
                              if ($.gtB(comp, 0)) {
                                --great;
                                continue;
                              } else if ($.ltB(comp, 0)) {
                                $.indexSet(a, k, $.index(a, less));
                                $.indexSet(a, less, $.index(a, great));
                                var great0 = great - 1;
                                $.indexSet(a, great, ak);
                                great = great0;
                                less = less0;
                                break;
                              } else {
                                $.indexSet(a, k, $.index(a, great));
                                great0 = great - 1;
                                $.indexSet(a, great, ak);
                                great = great0;
                                break;
                              }
                            }
                      }
                    }
                    ++k;
                }
        }
      else
        for (k = less; k <= great; ++k) {
          ak = $.index(a, k);
          if ($.ltB(compare.call$2(ak, el2), 0)) {
            if (!(k === less)) {
              $.indexSet(a, k, $.index(a, less));
              $.indexSet(a, less, ak);
            }
            ++less;
          } else if ($.gtB(compare.call$2(ak, el4), 0))
            for (less0 = less + 1; true;)
              if ($.gtB(compare.call$2($.index(a, great), el4), 0)) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                if ($.ltB(compare.call$2($.index(a, great), el2), 0)) {
                  $.indexSet(a, k, $.index(a, less));
                  $.indexSet(a, less, $.index(a, great));
                  great0 = great - 1;
                  $.indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                } else {
                  $.indexSet(a, k, $.index(a, great));
                  great0 = great - 1;
                  $.indexSet(a, great, ak);
                  great = great0;
                }
                break;
              }
        }
      var t1 = less - 1;
      $.indexSet(a, left, $.index(a, t1));
      $.indexSet(a, t1, el2);
      $.indexSet(a, right, $.index(a, great + 1));
      $.indexSet(a, great + 1, el4);
      $.DualPivotQuicksort__doSort(a, left, less - 2, compare);
      $.DualPivotQuicksort__doSort(a, great + 2, right, compare);
      if (pivots_are_equal)
        return;
      if (less < index1 && $.gtB(great, index5)) {
        for (; $.eqB(compare.call$2($.index(a, less), el2), 0);)
          ++less;
        for (; $.eqB(compare.call$2($.index(a, great), el4), 0);)
          --great;
        for (k = less; k <= great; ++k) {
          ak = $.index(a, k);
          if ($.eqB(compare.call$2(ak, el2), 0)) {
            if (!(k === less)) {
              $.indexSet(a, k, $.index(a, less));
              $.indexSet(a, less, ak);
            }
            ++less;
          } else if ($.eqB(compare.call$2(ak, el4), 0))
            for (less0 = less + 1; true;)
              if ($.eqB(compare.call$2($.index(a, great), el4), 0)) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                if ($.ltB(compare.call$2($.index(a, great), el2), 0)) {
                  $.indexSet(a, k, $.index(a, less));
                  $.indexSet(a, less, $.index(a, great));
                  great0 = great - 1;
                  $.indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                } else {
                  $.indexSet(a, k, $.index(a, great));
                  great0 = great - 1;
                  $.indexSet(a, great, ak);
                  great = great0;
                }
                break;
              }
        }
        $.DualPivotQuicksort__doSort(a, less, great, compare);
      } else
        $.DualPivotQuicksort__doSort(a, less, great, compare);
  }
};

$.DualPivotQuicksort_insertionSort_$bailout = function(state, a, left, right, compare) {
  for (var i = left + 1; $.leB(i, right); ++i) {
    var el = $.index(a, i);
    var j = i;
    while (true) {
      if (!(j > left && $.gtB(compare.call$2($.index(a, j - 1), el), 0)))
        break;
      var j0 = j - 1;
      $.indexSet(a, j, $.index(a, j0));
      j = j0;
    }
    $.indexSet(a, j, el);
  }
};

$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$.toStringWrapper.call$0 = $.toStringWrapper;
$.toStringWrapper.$name = "toStringWrapper";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$._timerFactory.call$3 = $._timerFactory;
$._timerFactory.$name = "_timerFactory";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
Isolate.$finishClasses($$);
$$ = {};
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.CTC0 = Isolate.makeConstantList([]);
$.CTC20 = new Isolate.$isolateProperties.ConstantMap(0, {}, Isolate.$isolateProperties.CTC0);
$.CTC26 = 'structured clone of ArrayBufferView';
$.CTC8 = new Isolate.$isolateProperties.NotImplementedException('structured clone of ArrayBufferView');
$.CTC27 = 'Cannot removeLast on immutable List.';
$.CTC10 = new Isolate.$isolateProperties.UnsupportedOperationException('Cannot removeLast on immutable List.');
$.CTC28 = null;
$.CTC23 = new Isolate.$isolateProperties.NotImplementedException(null);
$.CTC29 = 'structured clone of ArrayBuffer';
$.CTC7 = new Isolate.$isolateProperties.NotImplementedException('structured clone of ArrayBuffer');
$.CTC13 = new Isolate.$isolateProperties._DeletedKeySentinel();
$.CTC30 = 'Cannot sort immutable List.';
$.CTC17 = new Isolate.$isolateProperties.UnsupportedOperationException('Cannot sort immutable List.');
$.CTC31 = 'structured clone of Date';
$.CTC2 = new Isolate.$isolateProperties.NotImplementedException('structured clone of Date');
$.CTC32 = 'TODO(jacobr): should we impl?';
$.CTC18 = new Isolate.$isolateProperties.UnsupportedOperationException('TODO(jacobr): should we impl?');
$.CTC25 = new Isolate.$isolateProperties.Object();
$.CTC33 = 'Cannot add to immutable List.';
$.CTC1 = new Isolate.$isolateProperties.UnsupportedOperationException('Cannot add to immutable List.');
$.CTC34 = 'IDBKey containing Date';
$.CTC14 = new Isolate.$isolateProperties.NotImplementedException('IDBKey containing Date');
$.CTC35 = 'Incorrect number or type of arguments';
$.CTC19 = new Isolate.$isolateProperties.ExceptionImplementation('Incorrect number or type of arguments');
$.CTC36 = 'Cannot removeRange on immutable List.';
$.CTC22 = new Isolate.$isolateProperties.UnsupportedOperationException('Cannot removeRange on immutable List.');
$.CTC37 = 'structured clone of Blob';
$.CTC5 = new Isolate.$isolateProperties.NotImplementedException('structured clone of Blob');
$.CTC38 = 'structured clone of RegExp';
$.CTC3 = new Isolate.$isolateProperties.NotImplementedException('structured clone of RegExp');
$.CTC39 = 'structured clone of FileList';
$.CTC6 = new Isolate.$isolateProperties.NotImplementedException('structured clone of FileList');
$.CTC24 = new Isolate.$isolateProperties._Random();
$.CTC21 = new Isolate.$isolateProperties.IllegalAccessException();
$.CTC40 = 'structured clone of File';
$.CTC4 = new Isolate.$isolateProperties.NotImplementedException('structured clone of File');
$.CTC41 = 'structured clone of other type';
$.CTC9 = new Isolate.$isolateProperties.NotImplementedException('structured clone of other type');
$.CTC = new Isolate.$isolateProperties.NullPointerException(null, Isolate.$isolateProperties.CTC0);
$.CTC42 = 'Invalid list length';
$.CTC16 = new Isolate.$isolateProperties.IllegalArgumentException('Invalid list length');
$.CTC43 = '';
$.CTC15 = new Isolate.$isolateProperties.UnsupportedOperationException('');
$.CTC11 = new Isolate.$isolateProperties.NoMoreElementsException();
$.CTC12 = new Isolate.$isolateProperties.EmptyQueueException();
$.WebGLRenderingContext_TEXTURE_CUBE_MAP = 34067;
$.Three_DoubleSide = 2;
$.WebGLRenderingContext_POLYGON_OFFSET_FILL = 32823;
$.crossOrigin = 'anonymous';
$.WebGLRenderingContext_ONE_MINUS_DST_ALPHA = 773;
$.WebGLRenderingContext_SRC_ALPHA = 770;
$.WebGLRenderingContext_TEXTURE_MAG_FILTER = 10240;
$.Three_RepeatWrapping = 0;
$.Three_IntType = 13;
$.WebGLRenderingContext_ARRAY_BUFFER = 34962;
$.HashMapImplementation__DELETED_KEY = Isolate.$isolateProperties.CTC13;
$.WebGLRenderingContext_FUNC_REVERSE_SUBTRACT = 32779;
$.DateImplementation__MAX_MILLISECONDS_SINCE_EPOCH = 8640000000000000;
$.EXTTextureFilterAnisotropic_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 34047;
$.WebGLRenderingContext_UNSIGNED_SHORT_5_6_5 = 33635;
$.WebGLRenderingContext_ELEMENT_ARRAY_BUFFER = 34963;
$.WebGLRenderingContext_RGBA = 6408;
$.Three_OneMinusSrcColorFactor = 203;
$.Three_AlphaFormat = 16;
$.WebGLRenderingContext_SRC_COLOR = 768;
$.Three_UnsignedShort4444Type = 1016;
$.Three_NoShading = 0;
$.WebGLRenderingContext_TRIANGLES = 4;
$.WebGLRenderingContext_DEPTH_STENCIL = 34041;
$.WebGLRenderingContext_VALIDATE_STATUS = 35715;
$.Three_LuminanceAlphaFormat = 20;
$.WebGLRenderingContext_NEAREST = 9728;
$.Three_UnsignedShort565Type = 1018;
$.Three_NearestMipMapNearestFilter = 4;
$.WebGLRenderingContext_TEXTURE_WRAP_T = 10243;
$.WebGLRenderingContext_FRAGMENT_SHADER = 35632;
$.Three_SmoothShading = 2;
$.WebGLRenderingContext_SRC_ALPHA_SATURATE = 776;
$.WebGLRenderingContext_DEPTH_ATTACHMENT = 36096;
$.WebGLRenderingContext_BYTE = 5120;
$.WebGLRenderingContext_CCW = 2305;
$.WebGLRenderingContext_CLAMP_TO_EDGE = 33071;
$.WebGLRenderingContext_UNSIGNED_INT = 5125;
$.Three_DstColorFactor = 208;
$.WebGLRenderingContext_DYNAMIC_DRAW = 35048;
$.Matrix4____v2 = null;
$.__ShaderLib = null;
$.__UniformsLib = null;
$.Three_OneFactor = 201;
$.Three_UnsignedShort5551Type = 1017;
$.WebGLRenderingContext_POINTS = 0;
$.Three_SrcAlphaFactor = 204;
$.Three_MaterialCount = 0;
$.WebGLRenderingContext_FRAMEBUFFER = 36160;
$.Three_NearestFilter = 3;
$.Three_LuminanceFormat = 19;
$.WebGLRenderingContext_FUNC_ADD = 32774;
$.Three_ShortType = 11;
$.WebGLRenderingContext_MAX_VERTEX_UNIFORM_VECTORS = 36347;
$.Three_VertexColors = 2;
$.Three_SrcColorFactor = 202;
$.WebGLRenderingContext_DEPTH_BUFFER_BIT = 256;
$.Three_OneMinusDstColorFactor = 209;
$.Three_BackSide = 1;
$._ReceivePortImpl__nextFreeId = 1;
$.WebGLRenderingContext_UNPACK_FLIP_Y_WEBGL = 37440;
$.WebGLRenderingContext_COMPILE_STATUS = 35713;
$.WebGLRenderingContext_LINEAR_MIPMAP_NEAREST = 9985;
$.Three_GeometryCount = 0;
$.WebGLRenderingContext_LINEAR = 9729;
$.Three_FrontSide = 0;
$.WebGLRenderingContext_COLOR_BUFFER_BIT = 16384;
$.WebGLRenderingContext_ONE_MINUS_SRC_COLOR = 769;
$.WebGLRenderer_PRECISION_HIGH = 'highp';
$.WebGLRenderingContext_TEXTURE0 = 33984;
$.WebGLRenderingContext_LINEAR_MIPMAP_LINEAR = 9987;
$.WebGLRenderingContext_UNSIGNED_SHORT = 5123;
$.Three_NormalBlending = 1;
$.WebGLRenderingContext_LEQUAL = 515;
$.Three_AddEquation = 100;
$.WebGLRenderingContext_LUMINANCE_ALPHA = 6410;
$.Matrix4____v1 = null;
$.WebGLRenderingContext_NEAREST_MIPMAP_NEAREST = 9984;
$.Three_LinearMipMapLinearFilter = 8;
$.WebGLRenderingContext_FLOAT = 5126;
$.WebGLRenderingContext_UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
$.WebGLRenderingContext_ONE_MINUS_DST_COLOR = 775;
$.Three_MirroredRepeatWrapping = 2;
$.WebGLRenderingContext_ONE_MINUS_SRC_ALPHA = 771;
$._getTypeNameOf = null;
$.Three_UnsignedIntType = 14;
$.__ShaderChunk = null;
$.Three_RGBAFormat = 18;
$.WebGLRenderingContext_MAX_TEXTURE_SIZE = 3379;
$.Three_OneMinusSrcAlphaFactor = 205;
$.WebGLRenderingContext_STATIC_DRAW = 35044;
$.WebGLRenderingContext_ZERO = 0;
$.Three_ZeroFactor = 200;
$.PI = 3.141592653589793;
$.WebGLRenderingContext_TEXTURE_MIN_FILTER = 10241;
$.Three_FlatShading = 1;
$.LineStrip = 0;
$.WebGLRenderingContext_LINES = 1;
$.DualPivotQuicksort__INSERTION_SORT_THRESHOLD = 32;
$.Three_UnsignedByteType = 10;
$.WebGLRenderingContext_NEAREST_MIPMAP_LINEAR = 9986;
$.Three_DstAlphaFactor = 206;
$.Three_NoBlending = 0;
$.WebGLRenderingContext_TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
$.WebGLRenderingContext_RENDERBUFFER = 36161;
$.EXTTextureFilterAnisotropic_TEXTURE_MAX_ANISOTROPY_EXT = 34046;
$.Three_MultiplyBlending = 4;
$.WebGLRenderingContext_INT = 5124;
$.WebGLRenderingContext_BACK = 1029;
$.WebGLRenderingContext_DEPTH_COMPONENT16 = 33189;
$.WebGLRenderingContext_TEXTURE_WRAP_S = 10242;
$.Three_SubtractEquation = 101;
$.WebGLRenderingContext_LUMINANCE = 6409;
$.HashMapImplementation__INITIAL_CAPACITY = 8;
$.WebGLRenderingContext_ALPHA = 6406;
$.WebGLRenderingContext_CW = 2304;
$.Three_AdditiveBlending = 2;
$.WebGLRenderingContext_MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
$.WebGLRenderingContext_FUNC_SUBTRACT = 32778;
$.WebGLRenderingContext_STENCIL_BUFFER_BIT = 1024;
$.Three_NearestMipMapLinearFilter = 5;
$.WebGLRenderingContext_RGBA4 = 32854;
$.Three_OneMinusDstAlphaFactor = 207;
$.WebGLRenderingContext_TEXTURE_2D = 3553;
$.WebGLRenderingContext_MIRRORED_REPEAT = 33648;
$.Three_MultiplyOperation = 0;
$.WebGLRenderingContext_DST_ALPHA = 772;
$.Three_LinearMipMapNearestFilter = 7;
$._TimerFactory__factory = null;
$._cachedBrowserPrefix = null;
$.Primitives_DOLLAR_CHAR_VALUE = 36;
$.Three_SubtractiveBlending = 3;
$.Three_TextureCount = 0;
$.WebGLRenderingContext_SHORT = 5122;
$.WebGLRenderingContext_REPEAT = 10497;
$.Three_RGBFormat = 17;
$.WebGLRenderingContext_ONE = 1;
$.Three_LinearFilter = 6;
$.WebGLRenderingContext_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
$.WebGLRenderingContext_UNSIGNED_SHORT_4_4_4_4 = 32819;
$.Three_CustomBlending = 5;
$.WebGLRenderingContext_RGB = 6407;
$.Three_Object3DCount = 0;
$.WebGLRenderingContext_TRIANGLE_STRIP = 5;
$.Three_ClampToEdgeWrapping = 1;
$.WebGLRenderingContext_DEPTH_STENCIL_ATTACHMENT = 33306;
$.WebGLRenderingContext_DST_COLOR = 774;
$.Three_FloatType = 15;
$.WebGLRenderingContext_UNSIGNED_BYTE = 5121;
$.WebGLRenderingContext_CULL_FACE = 2884;
$.WebGLRenderingContext_UNSIGNED_SHORT_5_5_5_1 = 32820;
$.WebGLRenderingContext_LINE_STRIP = 3;
$.Matrix4____v3 = null;
$.WebGLRenderingContext_LINK_STATUS = 35714;
$.WebGLRenderingContext_COLOR_ATTACHMENT0 = 36064;
$.WebGLRenderingContext_BLEND = 3042;
$.Three_ByteType = 9;
$.WebGLRenderingContext_DEPTH_TEST = 2929;
$.Three_NoColors = 0;
$.WebGLRenderingContext_VERTEX_SHADER = 35633;
$.Three_SrcAlphaSaturateFactor = 210;
$.Three_ReverseSubtractEquation = 102;
$.Three_UnsignedShortType = 12;
var $ = null;
Isolate.$finishClasses($$);
$$ = {};
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.$defineNativeClass = function(cls, fields, methods) {
  var generateGetterSetter =   function(field, prototype) {
    var len = field.length;
    var lastChar = field[len - 1];
    var needsGetter = lastChar == '?' || lastChar == '=';
    var needsSetter = lastChar == '!' || lastChar == '=';
    if (needsGetter || needsSetter) field = field.substring(0, len - 1);
    if (needsGetter) {
      var getterString = "return this." + field + ";";
        prototype["get$" + field] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + field] = new Function("v", setterString);
    }
    return field;
  };
  for (var i = 0; i < fields.length; i++) {
    generateGetterSetter(fields[i], methods);
  }
  for (var method in methods) {
    $.dynamicFunction(method)[cls] = methods[method];
  }
};

(function(table) {
  for (var key in table) {
    $.defineProperty(Object.prototype, key, table[key]);
  }
})({
 is$JavaScriptIndexingBehavior: function() { return false; },
 is$ArrayBufferView: function() { return false; },
 is$_FileListImpl: function() { return false; },
 is$_ImageDataImpl: function() { return false; },
 is$_FileImpl: function() { return false; },
 is$_BlobImpl: function() { return false; },
 is$_ArrayBufferViewImpl: function() { return false; },
 toString$0: function() { return $.toStringForNativeObject(this); },
 is$IDBKeyRange: function() { return false; },
 is$ImageElement: function() { return false; },
 is$CanvasElement: function() { return false; },
 is$Blob: function() { return false; },
 is$File: function() { return false; },
 is$ArrayBuffer: function() { return false; },
 is$Element: function() { return false; },
 is$List: function() { return false; },
 is$Collection: function() { return false; },
 is$FileList: function() { return false; },
 is$ImageData: function() { return false; },
 is$_ArrayBufferImpl: function() { return false; },
 is$Map: function() { return false; },
 is$VideoElement: function() { return false; }
});

$.$defineNativeClass('AbstractWorker', [], {
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $._AbstractWorkerEventsImpl$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLAnchorElement', ["name?", "type?"], {
 toString$0: function() {
  return this.toString();
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('WebKitAnimation', ["name?"], {
});

$.$defineNativeClass('WebKitAnimationList', ["length?"], {
 length$0: function() { return this.length.call$0(); }
});

$.$defineNativeClass('HTMLAppletElement', ["code?", "height=", "name?", "object?", "width="], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLAreaElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('ArrayBuffer', [], {
 is$_ArrayBufferImpl: function() { return true; },
 is$ArrayBuffer: function() { return true; }
});

$.$defineNativeClass('ArrayBufferView', ["buffer?"], {
 is$_ArrayBufferViewImpl: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Attr', ["name?", "value="], {
});

$.$defineNativeClass('AudioBuffer', ["length?"], {
 length$0: function() { return this.length.call$0(); }
});

$.$defineNativeClass('AudioBufferSourceNode', ["buffer="], {
});

$.$defineNativeClass('AudioContext', [], {
 get$on: function() {
  return $._AudioContextEventsImpl$(this);
}
});

$.$defineNativeClass('HTMLAudioElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('AudioParam', ["name?", "value="], {
});

$.$defineNativeClass('HTMLBRElement', [], {
 clear$0: function() { return this.clear.call$0(); },
 clear$1: function(arg0) { return this.clear.call$1(arg0); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('BarInfo', ["visible?"], {
});

$.$defineNativeClass('HTMLBaseElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLBaseFontElement', ["color?", "size="], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('BatteryManager', [], {
 get$on: function() {
  return $._BatteryManagerEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('BiquadFilterNode', ["type?"], {
});

$.$defineNativeClass('Blob', ["size?", "type?"], {
 is$_BlobImpl: function() { return true; },
 is$Blob: function() { return true; }
});

$.$defineNativeClass('HTMLBodyElement', [], {
 get$on: function() {
  return $._BodyElementEventsImpl$(this);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLButtonElement', ["name?", "type?", "value="], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('WebKitCSSKeyframesRule', ["name?"], {
});

$.$defineNativeClass('WebKitCSSMatrix', ["a?", "b?", "c?", "d?"], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('CSSRule', ["type?"], {
});

$.$defineNativeClass('CSSRuleList', ["length?"], {
 length$0: function() { return this.length.call$0(); }
});

$.$defineNativeClass('CSSStyleDeclaration', ["length?"], {
 length$0: function() { return this.length.call$0(); },
 getPropertyValue$1: function(propertyName) {
  return this.getPropertyValue(propertyName);
},
 setProperty$3: function(propertyName, value, priority) {
  return this.setProperty(propertyName,value,priority);
},
 get$clear: function() {
  return this.getPropertyValue$1('clear');
},
 clear$0: function() { return this.get$clear().call$0(); },
 clear$1: function(arg0) { return this.get$clear().call$1(arg0); },
 get$color: function() {
  return this.getPropertyValue$1('color');
},
 get$content: function() {
  return this.getPropertyValue$1('content');
},
 get$filter: function() {
  return this.getPropertyValue$1($.S($._browserPrefix()) + 'filter');
},
 filter$1: function(arg0) { return this.get$filter().call$1(arg0); },
 get$height: function() {
  return this.getPropertyValue$1('height');
},
 set$height: function(value) {
  this.setProperty$3('height', value, '');
},
 get$opacity: function() {
  return this.getPropertyValue$1('opacity');
},
 get$position: function() {
  return this.getPropertyValue$1('position');
},
 get$resize: function() {
  return this.getPropertyValue$1('resize');
},
 get$size: function() {
  return this.getPropertyValue$1('size');
},
 set$size: function(value) {
  this.setProperty$3('size', value, '');
},
 set$src: function(value) {
  this.setProperty$3('src', value, '');
},
 get$width: function() {
  return this.getPropertyValue$1('width');
},
 set$width: function(value) {
  this.setProperty$3('width', value, '');
}
});

$.$defineNativeClass('CSSValueList', ["length?"], {
 length$0: function() { return this.length.call$0(); }
});

$.$defineNativeClass('HTMLCanvasElement', ["height=", "width="], {
 getContext$1: function(contextId) {
  return this.getContext(contextId);
},
 get$context2d: function() {
  return this.getContext$1('2d');
},
 is$CanvasElement: function() { return true; },
 is$Element: function() { return true; }
});

$.$defineNativeClass('CanvasRenderingContext2D', [], {
 lineWidth$1: function(arg0) { return this.lineWidth.call$1(arg0); },
 drawImage$9: function(canvas_OR_image_OR_video, sx_OR_x, sy_OR_y, sw_OR_width, height_OR_sh, dx, dy, dw, dh) {
  return this.drawImage(canvas_OR_image_OR_video,sx_OR_x,sy_OR_y,sw_OR_width,height_OR_sh,dx,dy,dw,dh);
}
});

$.$defineNativeClass('CharacterData', ["data?", "length?"], {
 length$0: function() { return this.length.call$0(); }
});

$.$defineNativeClass('ClientRect', ["height?", "width?"], {
});

$.$defineNativeClass('ClientRectList', ["length?"], {
 length$0: function() { return this.length.call$0(); }
});

$.$defineNativeClass('CloseEvent', ["code?"], {
});

$.$defineNativeClass('CompositionEvent', ["data?"], {
});

_ConsoleImpl = (typeof console == 'undefined' ? {} : console);
_ConsoleImpl.error$1 = function(arg) {
  return this.error(arg);
};
_ConsoleImpl.get$error = function() { return new $.BoundClosure(this, 'error$1'); };
_ConsoleImpl.count$1 = function(arg) {
  return this.count(arg);
};
_ConsoleImpl.get$count = function() { return new $.BoundClosure(this, 'count$1'); };
$.$defineNativeClass('HTMLContentElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('ConvolverNode', ["buffer="], {
 normalize$0: function() { return this.normalize.call$0(); }
});

$.$defineNativeClass('HTMLDListElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('DOMApplicationCache', [], {
 get$on: function() {
  return $._DOMApplicationCacheEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('DOMError', ["name?"], {
});

$.$defineNativeClass('DOMException', ["code?", "message?", "name?"], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DOMFileSystem', ["name?"], {
});

$.$defineNativeClass('DOMFileSystemSync', ["name?"], {
});

$.$defineNativeClass('DOMMimeType', ["type?"], {
});

$.$defineNativeClass('DOMMimeTypeArray', ["length?"], {
 length$0: function() { return this.length.call$0(); }
});

$.$defineNativeClass('DOMPlugin', ["length?", "name?"], {
 length$0: function() { return this.length.call$0(); }
});

$.$defineNativeClass('DOMPluginArray', ["length?"], {
 length$0: function() { return this.length.call$0(); }
});

$.$defineNativeClass('DOMSelection', ["type?"], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DOMSettableTokenList', ["value="], {
});

$.$defineNativeClass('DOMStringList', ["length?"], {
 length$0: function() { return this.length.call$0(); },
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.CTC17);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC10);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 contains$1: function(string) {
  return this.contains(string);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('DOMTokenList', ["length?"], {
 length$0: function() { return this.length.call$0(); },
 add$1: function(token) {
  return this.add(token);
},
 contains$1: function(token) {
  return this.contains(token);
},
 remove$1: function(token) {
  return this.remove(token);
},
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('HTMLDataListElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('DataTransferItem', ["type?"], {
});

$.$defineNativeClass('DataTransferItemList', ["length?"], {
 length$0: function() { return this.length.call$0(); },
 add$2: function(data_OR_file, type) {
  return this.add(data_OR_file,type);
},
 add$1: function(data_OR_file) {
  return this.add(data_OR_file);
},
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('DataView', [], {
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('DedicatedWorkerContext', [], {
 get$on: function() {
  return $._DedicatedWorkerContextEventsImpl$(this);
},
 postMessage$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 postMessage$1: function(message) {
  return this.postMessage(message);
}
});

$.$defineNativeClass('HTMLDetailsElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLDirectoryElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLDivElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLDocument', ["body?"], {
 get$on: function() {
  return $._DocumentEventsImpl$(this);
},
 $dom_createElement$1: function(tagName) {
  return this.createElement(tagName);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('DocumentFragment', [], {
 get$elements: function() {
  if (this._elements == null)
    this._elements = $.FilteredElementList$(this);
  return this._elements;
},
 get$id: function() {
  return '';
},
 get$parent: function() {
  return;
},
 get$attributes: function() {
  return $.CTC20;
},
 set$id: function(value) {
  throw $.$$throw($.UnsupportedOperationException$('ID can\'t be set for document fragments.'));
},
 get$on: function() {
  return $._ElementEventsImpl$(this);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('DocumentType', ["name?"], {
});

$.$defineNativeClass('Element', ["id="], {
 get$attributes: function() {
  return $._ElementAttributeMap$(this);
},
 get$elements: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$elements')) {
  {
  return $._ChildrenElementList$_wrap(this);
}
  } else {
    return Object.prototype.get$elements.call(this);
  }

},
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $._ElementEventsImpl$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 get$$$dom_children: function() {
return this.children;
},
 get$$$dom_firstElementChild: function() {
return this.firstElementChild;
},
 get$$$dom_lastElementChild: function() {
return this.lastElementChild;
},
 $dom_getAttribute$1: function(name) {
  return this.getAttribute(name);
},
 $dom_hasAttribute$1: function(name) {
  return this.hasAttribute(name);
},
 $dom_removeAttribute$1: function(name) {
  return this.removeAttribute(name);
},
 $dom_setAttribute$2: function(name, value) {
  return this.setAttribute(name,value);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLEmbedElement', ["height=", "name?", "src!", "type?", "width="], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('Entry', ["name?"], {
 remove$2: function(successCallback, errorCallback) {
  return this.remove($.convertDartClosureToJS(successCallback, 0),$.convertDartClosureToJS(errorCallback, 1));
},
 remove$1: function(successCallback) {
  successCallback = $.convertDartClosureToJS(successCallback, 0);
  return this.remove(successCallback);
}
});

$.$defineNativeClass('EntryArray', ["length?"], {
 length$0: function() { return this.length.call$0(); }
});

$.$defineNativeClass('EntryArraySync', ["length?"], {
 length$0: function() { return this.length.call$0(); }
});

$.$defineNativeClass('EntrySync', ["name?"], {
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('ErrorEvent', ["message?"], {
});

$.$defineNativeClass('Event', ["type?"], {
});

$.$defineNativeClass('EventException', ["code?", "message?", "name?"], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('EventSource', [], {
 get$on: function() {
  return $._EventSourceEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('EventTarget', [], {
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $._EventsImpl$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_addEventListener$3')) {
  {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_addEventListener$3.call(this, type, listener, useCapture);
  }

},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_removeEventListener$3')) {
  {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_removeEventListener$3.call(this, type, listener, useCapture);
  }

}
});

$.$defineNativeClass('HTMLFieldSetElement', ["elements?", "name?", "type?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('File', ["name?"], {
 is$_FileImpl: function() { return true; },
 is$File: function() { return true; },
 is$Blob: function() { return true; }
});

$.$defineNativeClass('FileError', ["code?"], {
});

$.$defineNativeClass('FileException', ["code?", "message?", "name?"], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('FileList', ["length?"], {
 length$0: function() { return this.length.call$0(); },
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.CTC17);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC10);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$_FileListImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$FileList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('FileReader', ["error?"], {
 get$on: function() {
  return $._FileReaderEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('FileWriter', ["error?", "length?", "position?"], {
 get$on: function() {
  return $._FileWriterEventsImpl$(this);
},
 length$0: function() { return this.length.call$0(); },
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('FileWriterSync', ["length?", "position?"], {
 length$0: function() { return this.length.call$0(); }
});

$.$defineNativeClass('Float32Array', ["length?"], {
 length$0: function() { return this.length.call$0(); },
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.CTC17);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC10);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Float64Array', ["length?"], {
 length$0: function() { return this.length.call$0(); },
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.CTC17);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC10);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('HTMLFontElement', ["color?", "size="], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLFormElement', ["length?", "name?"], {
 length$0: function() { return this.length.call$0(); },
 reset$0: function() {
  return this.reset();
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLFrameElement', ["height?", "name?", "src!", "width?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLFrameSetElement', [], {
 get$on: function() {
  return $._FrameSetElementEventsImpl$(this);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('Gamepad', ["id?", "index?"], {
});

$.$defineNativeClass('GamepadList', ["length?"], {
 length$0: function() { return this.length.call$0(); }
});

$.$defineNativeClass('HTMLHRElement', ["size=", "width="], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLAllCollection', ["length?"], {
 length$0: function() { return this.length.call$0(); }
});

$.$defineNativeClass('HTMLCollection', ["length?"], {
 length$0: function() { return this.length.call$0(); },
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.CTC17);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC10);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('HTMLOptionsCollection', [], {
 get$length: function() {
return this.length;
},
 length$0: function() { return this.get$length().call$0(); },
 set$length: function(value) {
this.length = value;
},
 remove$1: function(index) {
  return this.remove(index);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('HTMLHeadElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLHeadingElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('History', ["length?"], {
 length$0: function() { return this.length.call$0(); }
});

$.$defineNativeClass('HTMLHtmlElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('XMLHttpRequest', [], {
 get$on: function() {
  return $._HttpRequestEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('XMLHttpRequestException', ["code?", "message?", "name?"], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('XMLHttpRequestProgressEvent', ["position?"], {
});

$.$defineNativeClass('XMLHttpRequestUpload', [], {
 get$on: function() {
  return $._HttpRequestUploadEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBCursor', [], {
 get$key: function() {
  return $._convertNativeToDart_IDBKey(this.get$_key());
},
 get$_key: function() {
return this.key;
}
});

$.$defineNativeClass('IDBCursorWithValue', [], {
 get$value: function() {
  return $._convertNativeToDart_IDBAny(this.get$_lib_value());
},
 get$_lib_value: function() {
return this.value;
}
});

$.$defineNativeClass('IDBDatabase', ["name?"], {
 get$on: function() {
  return $._IDBDatabaseEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBDatabaseException', ["code?", "message?", "name?"], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('IDBIndex', ["name?"], {
 count$1: function(key_OR_range) {
  var t1 = $ === key_OR_range;
  if (t1)
    key_OR_range = null;
  var t2 = !t1;
  if (t1)
    return this._count_1$0();
  if (typeof key_OR_range === 'object' && key_OR_range !== null && key_OR_range.is$IDBKeyRange() || key_OR_range == null)
    return this._count_2$1(key_OR_range);
  if (t2)
    return this._count_3$1(key_OR_range);
  throw $.$$throw($.CTC19);
},
 get$count: function() { return new $.BoundClosure1(this, 'count$1'); },
 _count_1$0: function() {
  return this.count();
},
 _count_2$1: function(range) {
  return this.count(range);
},
 _count_3$1: function(key) {
  return this.count(key);
}
});

$.$defineNativeClass('IDBKeyRange', [], {
 is$IDBKeyRange: function() { return true; }
});

$.$defineNativeClass('IDBObjectStore', ["name?"], {
 add$2: function(value, key) {
  var t1 = $ === key;
  if (t1)
    key = null;
  if (!t1)
    return this._add_1$2($._convertDartToNative_SerializedScriptValue(value), key);
  return this._add_2$1($._convertDartToNative_SerializedScriptValue(value));
},
 add$1: function(value) {
  return this.add$2(value,$)
},
 _add_1$2: function(value, key) {
  return this.add(value,key);
},
 _add_2$1: function(value) {
  return this.add(value);
},
 clear$0: function() {
  return this.clear();
},
 count$1: function(key_OR_range) {
  var t1 = $ === key_OR_range;
  if (t1)
    key_OR_range = null;
  var t2 = !t1;
  if (t1)
    return this._count_1$0();
  if (typeof key_OR_range === 'object' && key_OR_range !== null && key_OR_range.is$IDBKeyRange() || key_OR_range == null)
    return this._count_2$1(key_OR_range);
  if (t2)
    return this._count_3$1(key_OR_range);
  throw $.$$throw($.CTC19);
},
 get$count: function() { return new $.BoundClosure2(this, 'count$1'); },
 _count_1$0: function() {
  return this.count();
},
 _count_2$1: function(range) {
  return this.count(range);
},
 _count_3$1: function(key) {
  return this.count(key);
},
 index$1: function(name) {
  return this.index(name);
},
 get$index: function() { return new $.BoundClosure(this, 'index$1'); }
});

$.$defineNativeClass('IDBOpenDBRequest', [], {
 get$on: function() {
  return $._IDBOpenDBRequestEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBRequest', ["error?"], {
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $._IDBRequestEventsImpl$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_addEventListener$3')) {
  {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_addEventListener$3.call(this, type, listener, useCapture);
  }

},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_removeEventListener$3')) {
  {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_removeEventListener$3.call(this, type, listener, useCapture);
  }

}
});

$.$defineNativeClass('IDBTransaction', ["error?"], {
 get$on: function() {
  return $._IDBTransactionEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBVersionChangeRequest', [], {
 get$on: function() {
  return $._IDBVersionChangeRequestEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLIFrameElement', ["height=", "name?", "src!", "width="], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('ImageData', ["data?", "height?", "width?"], {
 is$_ImageDataImpl: function() { return true; },
 is$ImageData: function() { return true; }
});

$.$defineNativeClass('HTMLImageElement', ["crossOrigin!", "height=", "name?", "src!", "width=", "x?", "y?"], {
 complete$1: function(arg0) { return this.complete.call$1(arg0); },
 is$ImageElement: function() { return true; },
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLInputElement', ["height=", "name?", "size=", "src!", "type?", "value=", "width="], {
 get$on: function() {
  return $._InputElementEventsImpl$(this);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('Int16Array', ["length?"], {
 length$0: function() { return this.length.call$0(); },
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.CTC17);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC10);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Int32Array', ["length?"], {
 length$0: function() { return this.length.call$0(); },
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.CTC17);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC10);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Int8Array', ["length?"], {
 length$0: function() { return this.length.call$0(); },
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.CTC17);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC10);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('JavaScriptAudioNode', [], {
 get$on: function() {
  return $._JavaScriptAudioNodeEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('JavaScriptCallFrame', ["type?"], {
});

$.$defineNativeClass('HTMLKeygenElement', ["name?", "type?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLIElement', ["type?", "value="], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLabelElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLegendElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLinkElement', ["type?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('LocalMediaStream', [], {
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('Location', [], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('HTMLMapElement', ["name?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLMarqueeElement', ["height=", "width="], {
 start$0: function() {
  return this.start();
},
 get$start: function() { return new $.BoundClosure0(this, 'start$0'); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('MediaController', [], {
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLMediaElement', ["error?", "src!"], {
 get$on: function() {
  return $._MediaElementEventsImpl$(this);
},
 load$0: function() {
  return this.load();
},
 get$load: function() { return new $.BoundClosure0(this, 'load$0'); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('MediaError', ["code?"], {
});

$.$defineNativeClass('MediaKeyError', ["code?"], {
});

$.$defineNativeClass('MediaKeyEvent', ["message?"], {
});

$.$defineNativeClass('MediaList', ["length?"], {
 length$0: function() { return this.length.call$0(); },
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.CTC17);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC10);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('MediaSource', [], {
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStream', [], {
 get$on: function() {
  return $._MediaStreamEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_addEventListener$3')) {
  {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_addEventListener$3.call(this, type, listener, useCapture);
  }

},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_removeEventListener$3')) {
  {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_removeEventListener$3.call(this, type, listener, useCapture);
  }

}
});

$.$defineNativeClass('MediaStreamList', ["length?"], {
 length$0: function() { return this.length.call$0(); }
});

$.$defineNativeClass('MediaStreamTrack', [], {
 get$on: function() {
  return $._MediaStreamTrackEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStreamTrackList', ["length?"], {
 get$on: function() {
  return $._MediaStreamTrackListEventsImpl$(this);
},
 length$0: function() { return this.length.call$0(); },
 add$1: function(track) {
  return this.add(track);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 remove$1: function(track) {
  return this.remove(track);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLMenuElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('MessageEvent', ["data?", "ports?"], {
});

$.$defineNativeClass('MessagePort', [], {
 get$on: function() {
  return $._MessagePortEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 postMessage$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 postMessage$1: function(message) {
  return this.postMessage(message);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 start$0: function() {
  return this.start();
},
 get$start: function() { return new $.BoundClosure0(this, 'start$0'); }
});

$.$defineNativeClass('HTMLMetaElement', ["content?", "name?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('Metadata', ["size?"], {
});

$.$defineNativeClass('HTMLMeterElement', ["value="], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLModElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('MouseEvent', ["x?", "y?"], {
});

$.$defineNativeClass('MutationRecord', ["type?"], {
});

$.$defineNativeClass('NamedNodeMap', ["length?"], {
 length$0: function() { return this.length.call$0(); },
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.CTC17);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC10);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('Navigator', ["userAgent?"], {
});

$.$defineNativeClass('NavigatorUserMediaError', ["code?"], {
});

$.$defineNativeClass('Node', [], {
 get$nodes: function() {
  return $._ChildNodeListLazy$(this);
},
 remove$0: function() {
  if (!(this.get$parent() == null))
    this.get$parent().$dom_removeChild$1(this);
  return this;
},
 replaceWith$1: function(otherNode) {
  try {
    var parent$ = this.get$parent();
    parent$.$dom_replaceChild$2(otherNode, this);
  } catch (exception) {
    $.unwrapException(exception);
  }

  return this;
},
 get$$$dom_attributes: function() {
return this.attributes;
},
 get$$$dom_childNodes: function() {
return this.childNodes;
},
 get$parent: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$parent')) {
  {
return this.parentNode;
}
  } else {
    return Object.prototype.get$parent.call(this);
  }

},
 set$text: function(value) {
this.textContent = value;
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_appendChild$1: function(newChild) {
  return this.appendChild(newChild);
},
 contains$1: function(other) {
  return this.contains(other);
},
 $dom_removeChild$1: function(oldChild) {
  return this.removeChild(oldChild);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_replaceChild$2: function(newChild, oldChild) {
  return this.replaceChild(newChild,oldChild);
}
});

$.$defineNativeClass('NodeIterator', [], {
 filter$1: function(arg0) { return this.filter.call$1(arg0); }
});

$.$defineNativeClass('NodeList', ["length?"], {
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  this._parent.$dom_appendChild$1(value);
},
 addLast$1: function(value) {
  this._parent.$dom_appendChild$1(value);
},
 addAll$1: function(collection) {
  for (var t1 = $.iterator(collection), t2 = this._parent; t1.hasNext$0() === true;)
    t2.$dom_appendChild$1(t1.next$0());
},
 removeLast$0: function() {
  var result = this.last$0();
  if (!(result == null))
    this._parent.$dom_removeChild$1(result);
  return result;
},
 clear$0: function() {
  this._parent.set$text('');
},
 operator$indexSet$2: function(index, value) {
  this._parent.$dom_replaceChild$2(value, this.operator$index$1(index));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._NodeListWrapper$($._Collections_filter(this, [], f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._NodeListWrapper$($._Lists_getRange(this, start, rangeLength, []));
},
 length$0: function() { return this.length.call$0(); },
 operator$index$1: function(index) {
return this[index];
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('Notification', [], {
 get$on: function() {
  return $._NotificationEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLOListElement', ["start?", "type?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLObjectElement', ["code?", "data?", "height=", "name?", "type?", "width="], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLOptGroupElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLOptionElement', ["index?", "value="], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('Oscillator', ["type?"], {
});

$.$defineNativeClass('HTMLOutputElement', ["name?", "type?", "value="], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLParagraphElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLParamElement', ["name?", "type?", "value="], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('PeerConnection00', [], {
 get$on: function() {
  return $._PeerConnection00EventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('Performance', ["memory?"], {
});

$.$defineNativeClass('PerformanceNavigation', ["type?"], {
});

$.$defineNativeClass('WebKitPoint', ["x=", "y="], {
});

$.$defineNativeClass('PositionError', ["code?", "message?"], {
});

$.$defineNativeClass('HTMLPreElement', ["width="], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('ProcessingInstruction', ["data?"], {
});

$.$defineNativeClass('HTMLProgressElement', ["position?", "value="], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLQuoteElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('RTCPeerConnection', [], {
 get$on: function() {
  return $._RTCPeerConnectionEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('RTCSessionDescription', ["type?"], {
});

$.$defineNativeClass('RadioNodeList', ["value="], {
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('Range', [], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('RangeException', ["code?", "message?", "name?"], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('SQLError', ["code?", "message?"], {
});

$.$defineNativeClass('SQLException', ["code?", "message?"], {
});

$.$defineNativeClass('SQLResultSetRowList', ["length?"], {
 length$0: function() { return this.length.call$0(); }
});

$.$defineNativeClass('SVGAElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGAltGlyphDefElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGAltGlyphElement', ["format?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGAltGlyphItemElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGAngle', ["value="], {
});

$.$defineNativeClass('SVGAnimateColorElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGAnimateElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGAnimateMotionElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGAnimateTransformElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGAnimationElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGCircleElement', ["r?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGClipPathElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGComponentTransferFunctionElement', ["offset?", "type?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGCursorElement', ["x?", "y?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGDefsElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGDescElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGDocument', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGElement', [], {
 get$elements: function() {
  return $.FilteredElementList$(this);
},
 get$id: function() {
return this.id;
},
 set$id: function(value) {
this.id = value;
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGElementInstance', [], {
 get$on: function() {
  return $._SVGElementInstanceEventsImpl$(this);
}
});

$.$defineNativeClass('SVGElementInstanceList', ["length?"], {
 length$0: function() { return this.length.call$0(); }
});

$.$defineNativeClass('SVGEllipseElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGException', ["code?", "message?", "name?"], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('SVGFEBlendElement', ["height?", "width?", "x?", "y?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEColorMatrixElement', ["type?", "height?", "width?", "x?", "y?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEComponentTransferElement', ["height?", "width?", "x?", "y?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFECompositeElement', ["height?", "width?", "x?", "y?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEConvolveMatrixElement', ["height?", "width?", "x?", "y?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEDiffuseLightingElement', ["height?", "width?", "x?", "y?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEDisplacementMapElement', ["height?", "width?", "x?", "y?"], {
 scale$1: function(arg0) { return this.scale.call$1(arg0); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEDistantLightElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEDropShadowElement', ["height?", "width?", "x?", "y?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEFloodElement', ["height?", "width?", "x?", "y?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEFuncAElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEFuncBElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEFuncGElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEFuncRElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEGaussianBlurElement', ["height?", "width?", "x?", "y?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEImageElement', ["height?", "width?", "x?", "y?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEMergeElement', ["height?", "width?", "x?", "y?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEMergeNodeElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEMorphologyElement', ["height?", "width?", "x?", "y?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEOffsetElement', ["height?", "width?", "x?", "y?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFEPointLightElement', ["x?", "y?", "z?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFESpecularLightingElement', ["height?", "width?", "x?", "y?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFESpotLightElement', ["x?", "y?", "z?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFETileElement', ["height?", "width?", "x?", "y?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFETurbulenceElement', ["type?", "height?", "width?", "x?", "y?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFilterElement', ["height?", "width?", "x?", "y?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFontElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceFormatElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceNameElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceSrcElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceUriElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGForeignObjectElement', ["height?", "width?", "x?", "y?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGGElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGGlyphElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGGlyphRefElement', ["format?", "x=", "y="], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGGradientElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGHKernElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGImageElement', ["height?", "width?", "x?", "y?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGLength', ["value="], {
});

$.$defineNativeClass('SVGLengthList', [], {
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('SVGLineElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGLinearGradientElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGMPathElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGMarkerElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGMaskElement', ["height?", "width?", "x?", "y?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGMatrix', ["a?", "b?", "c?", "d?"], {
 flipY$0: function() {
  return this.flipY();
},
 get$flipY: function() { return new $.BoundClosure0(this, 'flipY$0'); },
 scale$1: function(scaleFactor) {
  return this.scale(scaleFactor);
}
});

$.$defineNativeClass('SVGMetadataElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGMissingGlyphElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGNumber', ["value="], {
});

$.$defineNativeClass('SVGNumberList', [], {
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('SVGPathElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGPathSegArcAbs', ["x=", "y="], {
});

$.$defineNativeClass('SVGPathSegArcRel', ["x=", "y="], {
});

$.$defineNativeClass('SVGPathSegCurvetoCubicAbs', ["x=", "y="], {
});

$.$defineNativeClass('SVGPathSegCurvetoCubicRel', ["x=", "y="], {
});

$.$defineNativeClass('SVGPathSegCurvetoCubicSmoothAbs', ["x=", "y="], {
});

$.$defineNativeClass('SVGPathSegCurvetoCubicSmoothRel', ["x=", "y="], {
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticAbs', ["x=", "y="], {
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticRel', ["x=", "y="], {
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticSmoothAbs', ["x=", "y="], {
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticSmoothRel', ["x=", "y="], {
});

$.$defineNativeClass('SVGPathSegLinetoAbs', ["x=", "y="], {
});

$.$defineNativeClass('SVGPathSegLinetoHorizontalAbs', ["x="], {
});

$.$defineNativeClass('SVGPathSegLinetoHorizontalRel', ["x="], {
});

$.$defineNativeClass('SVGPathSegLinetoRel', ["x=", "y="], {
});

$.$defineNativeClass('SVGPathSegLinetoVerticalAbs', ["y="], {
});

$.$defineNativeClass('SVGPathSegLinetoVerticalRel', ["y="], {
});

$.$defineNativeClass('SVGPathSegList', [], {
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('SVGPathSegMovetoAbs', ["x=", "y="], {
});

$.$defineNativeClass('SVGPathSegMovetoRel', ["x=", "y="], {
});

$.$defineNativeClass('SVGPatternElement', ["height?", "width?", "x?", "y?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGPoint', ["x=", "y="], {
});

$.$defineNativeClass('SVGPointList', [], {
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('SVGPolygonElement', ["points?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGPolylineElement', ["points?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGRadialGradientElement', ["r?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGRect', ["height=", "width=", "x=", "y="], {
});

$.$defineNativeClass('SVGRectElement', ["height?", "width?", "x?", "y?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGSVGElement', ["height?", "width?", "x?", "y?"], {
 viewport$4: function(arg0, arg1, arg2, arg3) { return this.viewport.call$4(arg0, arg1, arg2, arg3); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGScriptElement', ["type?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGSetElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGStopElement', ["offset?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGStringList', [], {
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('SVGStyleElement', ["type?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGSwitchElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGSymbolElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGTRefElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGTSpanElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGTextContentElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGTextElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGTextPathElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGTextPositioningElement', ["x?", "y?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGTitleElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGTransform', ["type?"], {
});

$.$defineNativeClass('SVGTransformList', [], {
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('SVGUseElement', ["height?", "width?", "x?", "y?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGVKernElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SVGViewElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('Screen', ["height?", "width?"], {
});

$.$defineNativeClass('HTMLScriptElement', ["crossOrigin!", "src!", "type?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('ScriptProfileNode', ["visible?"], {
 children$0: function() {
  return this.children();
},
 get$children: function() { return new $.BoundClosure0(this, 'children$0'); }
});

$.$defineNativeClass('HTMLSelectElement', ["length=", "name?", "size=", "type?", "value="], {
 length$0: function() { return this.length.call$0(); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLShadowElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('ShadowRoot', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SharedWorkerContext', ["name?"], {
 get$on: function() {
  return $._SharedWorkerContextEventsImpl$(this);
}
});

$.$defineNativeClass('SourceBufferList', ["length?"], {
 length$0: function() { return this.length.call$0(); },
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLSourceElement', ["src!", "type?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLSpanElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SpeechGrammar', ["src!"], {
});

$.$defineNativeClass('SpeechGrammarList', ["length?"], {
 length$0: function() { return this.length.call$0(); }
});

$.$defineNativeClass('SpeechInputResultList', ["length?"], {
 length$0: function() { return this.length.call$0(); }
});

$.$defineNativeClass('SpeechRecognition', [], {
 get$on: function() {
  return $._SpeechRecognitionEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 start$0: function() {
  return this.start();
},
 get$start: function() { return new $.BoundClosure0(this, 'start$0'); }
});

$.$defineNativeClass('SpeechRecognitionError', ["code?", "message?"], {
});

$.$defineNativeClass('SpeechRecognitionResult', ["length?"], {
 length$0: function() { return this.length.call$0(); }
});

$.$defineNativeClass('SpeechRecognitionResultList', ["length?"], {
 length$0: function() { return this.length.call$0(); }
});

$.$defineNativeClass('Storage', [], {
 containsKey$1: function(key) {
  return !(this.$dom_getItem$1(key) == null);
},
 operator$index$1: function(key) {
  return this.$dom_getItem$1(key);
},
 operator$indexSet$2: function(key, value) {
  return this.$dom_setItem$2(key, value);
},
 remove$1: function(key) {
  var value = this.operator$index$1(key);
  this.$dom_removeItem$1(key);
  return value;
},
 clear$0: function() {
  return this.$dom_clear$0();
},
 forEach$1: function(f) {
  for (var i = 0; true; ++i) {
    var key = this.$dom_key$1(i);
    if (key == null)
      return;
    f.call$2(key, this.operator$index$1(key));
  }
},
 getKeys$0: function() {
  var keys = [];
  this.forEach$1(new $._StorageImpl_getKeys_anon(keys));
  return keys;
},
 getValues$0: function() {
  var values = [];
  this.forEach$1(new $._StorageImpl_getValues_anon(values));
  return values;
},
 get$length: function() {
  return this.get$$$dom_length();
},
 length$0: function() { return this.get$length().call$0(); },
 isEmpty$0: function() {
  return this.$dom_key$1(0) == null;
},
 get$$$dom_length: function() {
return this.length;
},
 $dom_clear$0: function() {
  return this.clear();
},
 $dom_getItem$1: function(key) {
  return this.getItem(key);
},
 $dom_key$1: function(index) {
  return this.key(index);
},
 $dom_removeItem$1: function(key) {
  return this.removeItem(key);
},
 $dom_setItem$2: function(key, data) {
  return this.setItem(key,data);
},
 is$Map: function() { return true; }
});

$.$defineNativeClass('StorageEvent', ["key?"], {
});

$.$defineNativeClass('HTMLStyleElement', ["type?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('StyleMedia', ["type?"], {
});

$.$defineNativeClass('StyleSheet', ["type?"], {
});

$.$defineNativeClass('StyleSheetList', ["length?"], {
 length$0: function() { return this.length.call$0(); },
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.CTC17);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC10);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('HTMLTableCaptionElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableCellElement', ["height=", "width="], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableColElement', ["width="], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableElement', ["width="], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableRowElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableSectionElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTextAreaElement', ["name?", "type?", "value="], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('TextEvent', ["data?"], {
});

$.$defineNativeClass('TextMetrics', ["width?"], {
});

$.$defineNativeClass('TextTrack', [], {
 get$on: function() {
  return $._TextTrackEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('TextTrackCue', ["id=", "position?", "size=", "text!"], {
 get$on: function() {
  return $._TextTrackCueEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('TextTrackCueList', ["length?"], {
 length$0: function() { return this.length.call$0(); }
});

$.$defineNativeClass('TextTrackList', ["length?"], {
 get$on: function() {
  return $._TextTrackListEventsImpl$(this);
},
 length$0: function() { return this.length.call$0(); },
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('TimeRanges', ["length?"], {
 length$0: function() { return this.length.call$0(); },
 start$1: function(index) {
  return this.start(index);
},
 get$start: function() { return new $.BoundClosure(this, 'start$1'); }
});

$.$defineNativeClass('HTMLTitleElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('TouchList', ["length?"], {
 length$0: function() { return this.length.call$0(); },
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.CTC17);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC10);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('HTMLTrackElement', ["src!"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('TreeWalker', [], {
 filter$1: function(arg0) { return this.filter.call$1(arg0); }
});

$.$defineNativeClass('HTMLUListElement', ["type?"], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('Uint16Array', ["length?"], {
 length$0: function() { return this.length.call$0(); },
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.CTC17);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC10);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Uint32Array', ["length?"], {
 length$0: function() { return this.length.call$0(); },
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.CTC17);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC10);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Uint8Array', ["length?"], {
 length$0: function() { return this.length.call$0(); },
 operator$index$1: function(index) {
return this[index];
},
 operator$indexSet$2: function(index, value) {
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC1);
},
 addAll$1: function(collection) {
  throw $.$$throw($.CTC1);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, f);
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.CTC17);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC10);
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Uint8ClampedArray', [], {
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('HTMLUnknownElement', [], {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLVideoElement', ["height=", "width="], {
 is$VideoElement: function() { return true; },
 is$Element: function() { return true; }
});

$.$defineNativeClass('WebGLActiveInfo', ["name?", "size?", "type?"], {
});

$.$defineNativeClass('WebGLRenderingContext', [], {
 activeTexture$1: function(texture) {
  return this.activeTexture(texture);
},
 attachShader$2: function(program, shader) {
  return this.attachShader(program,shader);
},
 bindBuffer$2: function(target, buffer) {
  return this.bindBuffer(target,buffer);
},
 bindFramebuffer$2: function(target, framebuffer) {
  return this.bindFramebuffer(target,framebuffer);
},
 bindRenderbuffer$2: function(target, renderbuffer) {
  return this.bindRenderbuffer(target,renderbuffer);
},
 bindTexture$2: function(target, texture) {
  return this.bindTexture(target,texture);
},
 blendEquation$1: function(mode) {
  return this.blendEquation(mode);
},
 get$blendEquation: function() { return new $.BoundClosure(this, 'blendEquation$1'); },
 blendEquationSeparate$2: function(modeRGB, modeAlpha) {
  return this.blendEquationSeparate(modeRGB,modeAlpha);
},
 blendFunc$2: function(sfactor, dfactor) {
  return this.blendFunc(sfactor,dfactor);
},
 blendFuncSeparate$4: function(srcRGB, dstRGB, srcAlpha, dstAlpha) {
  return this.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
},
 bufferData$3: function(target, data_OR_size, usage) {
  return this.bufferData(target,data_OR_size,usage);
},
 clear$1: function(mask) {
  return this.clear(mask);
},
 clearColor$4: function(red, green, blue, alpha) {
  return this.clearColor(red,green,blue,alpha);
},
 clearDepth$1: function(depth) {
  return this.clearDepth(depth);
},
 clearStencil$1: function(s) {
  return this.clearStencil(s);
},
 compileShader$1: function(shader) {
  return this.compileShader(shader);
},
 createBuffer$0: function() {
  return this.createBuffer();
},
 createFramebuffer$0: function() {
  return this.createFramebuffer();
},
 createProgram$0: function() {
  return this.createProgram();
},
 createRenderbuffer$0: function() {
  return this.createRenderbuffer();
},
 createShader$1: function(type) {
  return this.createShader(type);
},
 createTexture$0: function() {
  return this.createTexture();
},
 cullFace$1: function(mode) {
  return this.cullFace(mode);
},
 deleteProgram$1: function(program) {
  return this.deleteProgram(program);
},
 deleteShader$1: function(shader) {
  return this.deleteShader(shader);
},
 depthFunc$1: function(func) {
  return this.depthFunc(func);
},
 depthMask$1: function(flag) {
  return this.depthMask(flag);
},
 disable$1: function(cap) {
  return this.disable(cap);
},
 disableVertexAttribArray$1: function(index) {
  return this.disableVertexAttribArray(index);
},
 drawArrays$3: function(mode, first, count) {
  return this.drawArrays(mode,first,count);
},
 drawElements$4: function(mode, count, type, offset) {
  return this.drawElements(mode,count,type,offset);
},
 enable$1: function(cap) {
  return this.enable(cap);
},
 enableVertexAttribArray$1: function(index) {
  return this.enableVertexAttribArray(index);
},
 framebufferRenderbuffer$4: function(target, attachment, renderbuffertarget, renderbuffer) {
  return this.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
},
 framebufferTexture2D$5: function(target, attachment, textarget, texture, level) {
  return this.framebufferTexture2D(target,attachment,textarget,texture,level);
},
 frontFace$1: function(mode) {
  return this.frontFace(mode);
},
 generateMipmap$1: function(target) {
  return this.generateMipmap(target);
},
 getAttribLocation$2: function(program, name) {
  return this.getAttribLocation(program,name);
},
 getError$0: function() {
  return this.getError();
},
 getExtension$1: function(name) {
  return this.getExtension(name);
},
 getParameter$1: function(pname) {
  return this.getParameter(pname);
},
 getProgramParameter$2: function(program, pname) {
  return this.getProgramParameter(program,pname);
},
 getShaderInfoLog$1: function(shader) {
  return this.getShaderInfoLog(shader);
},
 getShaderParameter$2: function(shader, pname) {
  return this.getShaderParameter(shader,pname);
},
 getUniformLocation$2: function(program, name) {
  return this.getUniformLocation(program,name);
},
 lineWidth$1: function(width) {
  return this.lineWidth(width);
},
 linkProgram$1: function(program) {
  return this.linkProgram(program);
},
 pixelStorei$2: function(pname, param) {
  return this.pixelStorei(pname,param);
},
 polygonOffset$2: function(factor, units) {
  return this.polygonOffset(factor,units);
},
 get$polygonOffset: function() { return new $.BoundClosure3(this, 'polygonOffset$2'); },
 renderbufferStorage$4: function(target, internalformat, width, height) {
  return this.renderbufferStorage(target,internalformat,width,height);
},
 shaderSource$2: function(shader, string) {
  return this.shaderSource(shader,string);
},
 texImage2D$9: function(target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video, format, type, pixels) {
  var t1 = $ === format;
  if (t1)
    format = null;
  var t2 = $ === type;
  if (t2)
    type = null;
  var t3 = $ === pixels;
  if (t3)
    pixels = null;
  if (typeof border_OR_canvas_OR_image_OR_pixels_OR_video === 'number' && Math.floor(border_OR_canvas_OR_image_OR_pixels_OR_video) === border_OR_canvas_OR_image_OR_pixels_OR_video || border_OR_canvas_OR_image_OR_pixels_OR_video == null)
    if (typeof format === 'number' && Math.floor(format) === format || format == null)
      if (typeof type === 'number' && Math.floor(type) === type || type == null)
        var t4 = typeof pixels === 'object' && pixels !== null && pixels.is$ArrayBufferView() || pixels == null;
      else
        t4 = false;
    else
      t4 = false;
  else
    t4 = false;
  if (t4) {
    this._texImage2D_1$9(target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video, format, type, pixels);
    return;
  }
  if ((typeof border_OR_canvas_OR_image_OR_pixels_OR_video === 'object' && border_OR_canvas_OR_image_OR_pixels_OR_video !== null && border_OR_canvas_OR_image_OR_pixels_OR_video.is$ImageData() || border_OR_canvas_OR_image_OR_pixels_OR_video == null) && t1 && t2 && t3) {
    this._texImage2D_2$6(target, level, internalformat, format_OR_width, height_OR_type, $._convertDartToNative_ImageData(border_OR_canvas_OR_image_OR_pixels_OR_video));
    return;
  }
  if ((typeof border_OR_canvas_OR_image_OR_pixels_OR_video === 'object' && border_OR_canvas_OR_image_OR_pixels_OR_video !== null && border_OR_canvas_OR_image_OR_pixels_OR_video.is$ImageElement() || border_OR_canvas_OR_image_OR_pixels_OR_video == null) && t1 && t2 && t3) {
    this._texImage2D_3$6(target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video);
    return;
  }
  if ((typeof border_OR_canvas_OR_image_OR_pixels_OR_video === 'object' && border_OR_canvas_OR_image_OR_pixels_OR_video !== null && border_OR_canvas_OR_image_OR_pixels_OR_video.is$CanvasElement() || border_OR_canvas_OR_image_OR_pixels_OR_video == null) && t1 && t2 && t3) {
    this._texImage2D_4$6(target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video);
    return;
  }
  if ((typeof border_OR_canvas_OR_image_OR_pixels_OR_video === 'object' && border_OR_canvas_OR_image_OR_pixels_OR_video !== null && border_OR_canvas_OR_image_OR_pixels_OR_video.is$VideoElement() || border_OR_canvas_OR_image_OR_pixels_OR_video == null) && t1 && t2 && t3) {
    this._texImage2D_5$6(target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video);
    return;
  }
  throw $.$$throw($.CTC19);
},
 texImage2D$6: function(target,level,internalformat,format_OR_width,height_OR_type,border_OR_canvas_OR_image_OR_pixels_OR_video) {
  return this.texImage2D$9(target,level,internalformat,format_OR_width,height_OR_type,border_OR_canvas_OR_image_OR_pixels_OR_video,$,$,$)
},
 _texImage2D_1$9: function(target, level, internalformat, width, height, border, format, type, pixels) {
  return this.texImage2D(target,level,internalformat,width,height,border,format,type,pixels);
},
 _texImage2D_2$6: function(target, level, internalformat, format, type, pixels) {
  return this.texImage2D(target,level,internalformat,format,type,pixels);
},
 _texImage2D_3$6: function(target, level, internalformat, format, type, image) {
  return this.texImage2D(target,level,internalformat,format,type,image);
},
 _texImage2D_4$6: function(target, level, internalformat, format, type, canvas) {
  return this.texImage2D(target,level,internalformat,format,type,canvas);
},
 _texImage2D_5$6: function(target, level, internalformat, format, type, video) {
  return this.texImage2D(target,level,internalformat,format,type,video);
},
 texParameterf$3: function(target, pname, param) {
  return this.texParameterf(target,pname,param);
},
 texParameteri$3: function(target, pname, param) {
  return this.texParameteri(target,pname,param);
},
 uniform1f$2: function(location, x) {
  return this.uniform1f(location,x);
},
 uniform1fv$2: function(location, v) {
  return this.uniform1fv(location,v);
},
 uniform1i$2: function(location, x) {
  return this.uniform1i(location,x);
},
 uniform1iv$2: function(location, v) {
  return this.uniform1iv(location,v);
},
 uniform2f$3: function(location, x, y) {
  return this.uniform2f(location,x,y);
},
 uniform2fv$2: function(location, v) {
  return this.uniform2fv(location,v);
},
 uniform3f$4: function(location, x, y, z) {
  return this.uniform3f(location,x,y,z);
},
 uniform3fv$2: function(location, v) {
  return this.uniform3fv(location,v);
},
 uniform3iv$2: function(location, v) {
  return this.uniform3iv(location,v);
},
 uniform4f$5: function(location, x, y, z, w) {
  return this.uniform4f(location,x,y,z,w);
},
 uniform4fv$2: function(location, v) {
  return this.uniform4fv(location,v);
},
 uniformMatrix3fv$3: function(location, transpose, array) {
  return this.uniformMatrix3fv(location,transpose,array);
},
 uniformMatrix4fv$3: function(location, transpose, array) {
  return this.uniformMatrix4fv(location,transpose,array);
},
 useProgram$1: function(program) {
  return this.useProgram(program);
},
 vertexAttribPointer$6: function(indx, size, type, normalized, stride, offset) {
  return this.vertexAttribPointer(indx,size,type,normalized,stride,offset);
},
 viewport$4: function(x, y, width, height) {
  return this.viewport(x,y,width,height);
}
});

$.$defineNativeClass('WebKitNamedFlow', ["name?"], {
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('WebSocket', [], {
 get$on: function() {
  return $._WebSocketEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$2: function(code, reason) {
  return this.close(code,reason);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('DOMWindow', ["innerHeight?", "innerWidth?", "length?", "name?", "navigator?", "parent?"], {
 requestAnimationFrame$1: function(callback) {
  this._ensureRequestAnimationFrame$0();
  return this._requestAnimationFrame$1(callback);
},
 _requestAnimationFrame$1: function(callback) {
  return this.requestAnimationFrame($.convertDartClosureToJS(callback, 1));
},
 _ensureRequestAnimationFrame$0: function() {
   if (this.requestAnimationFrame && this.cancelAnimationFrame) return;
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !this.requestAnimationFrame; ++i) {
     this.requestAnimationFrame = this[vendors[i] + 'RequestAnimationFrame'];
     this.cancelAnimationFrame =
         this[vendors[i]+'CancelAnimationFrame'] ||
         this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if (this.requestAnimationFrame && this.cancelAnimationFrame) return;
   this.requestAnimationFrame = function(callback) {
       return window.setTimeout(callback, 16 /* 16ms ~= 60fps */);
   };
   this.cancelAnimationFrame = function(id) { clearTimeout(id); }

},
 get$on: function() {
  return $._WindowEventsImpl$(this);
},
 length$0: function() { return this.length.call$0(); },
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
},
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
}
});

$.$defineNativeClass('Worker', [], {
 get$on: function() {
  return $._WorkerEventsImpl$(this);
},
 postMessage$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 postMessage$1: function(message) {
  return this.postMessage(message);
}
});

$.$defineNativeClass('WorkerContext', ["navigator?"], {
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $._WorkerContextEventsImpl$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
},
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
}
});

$.$defineNativeClass('WorkerLocation', [], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('WorkerNavigator', ["userAgent?"], {
});

$.$defineNativeClass('XPathException', ["code?", "message?", "name?"], {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('XSLTProcessor', [], {
 reset$0: function() {
  return this.reset();
}
});

$.$defineNativeClass('Worker', [], {
 get$id: function() {
return this.id;
},
 set$id: function(i) {
this.id = i;
},
 postMessage$1: function(msg) {
return this.postMessage(msg);
}
});

$.$defineNativeClass('DOMWindow', [], {
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
}
});

// 365 dynamic classes.
// 417 classes
// 35 !leaf
(function(){
  var v0/*class(_SVGTextPositioningElementImpl)*/ = 'SVGTextPositioningElement|SVGTextElement|SVGTSpanElement|SVGTRefElement|SVGAltGlyphElement|SVGTextElement|SVGTSpanElement|SVGTRefElement|SVGAltGlyphElement';
  var v1/*class(_Uint8ArrayImpl)*/ = 'Uint8Array|Uint8ClampedArray|Uint8ClampedArray';
  var v2/*class(_SVGTextContentElementImpl)*/ = [v0/*class(_SVGTextPositioningElementImpl)*/,v0/*class(_SVGTextPositioningElementImpl)*/,'SVGTextContentElement|SVGTextPathElement|SVGTextPathElement'].join('|');
  var v3/*class(_SVGGradientElementImpl)*/ = 'SVGGradientElement|SVGRadialGradientElement|SVGLinearGradientElement|SVGRadialGradientElement|SVGLinearGradientElement';
  var v4/*class(_SVGComponentTransferFunctionElementImpl)*/ = 'SVGComponentTransferFunctionElement|SVGFEFuncRElement|SVGFEFuncGElement|SVGFEFuncBElement|SVGFEFuncAElement|SVGFEFuncRElement|SVGFEFuncGElement|SVGFEFuncBElement|SVGFEFuncAElement';
  var v5/*class(_SVGAnimationElementImpl)*/ = 'SVGAnimationElement|SVGSetElement|SVGAnimateTransformElement|SVGAnimateMotionElement|SVGAnimateElement|SVGAnimateColorElement|SVGSetElement|SVGAnimateTransformElement|SVGAnimateMotionElement|SVGAnimateElement|SVGAnimateColorElement';
  var v6/*class(_SVGElementImpl)*/ = [v2/*class(_SVGTextContentElementImpl)*/,v3/*class(_SVGGradientElementImpl)*/,v4/*class(_SVGComponentTransferFunctionElementImpl)*/,v5/*class(_SVGAnimationElementImpl)*/,v2/*class(_SVGTextContentElementImpl)*/,v3/*class(_SVGGradientElementImpl)*/,v4/*class(_SVGComponentTransferFunctionElementImpl)*/,v5/*class(_SVGAnimationElementImpl)*/,'SVGElement|SVGViewElement|SVGVKernElement|SVGUseElement|SVGTitleElement|SVGSymbolElement|SVGSwitchElement|SVGStyleElement|SVGStopElement|SVGScriptElement|SVGSVGElement|SVGRectElement|SVGPolylineElement|SVGPolygonElement|SVGPatternElement|SVGPathElement|SVGMissingGlyphElement|SVGMetadataElement|SVGMaskElement|SVGMarkerElement|SVGMPathElement|SVGLineElement|SVGImageElement|SVGHKernElement|SVGGlyphRefElement|SVGGlyphElement|SVGGElement|SVGForeignObjectElement|SVGFontFaceUriElement|SVGFontFaceSrcElement|SVGFontFaceNameElement|SVGFontFaceFormatElement|SVGFontFaceElement|SVGFontElement|SVGFilterElement|SVGFETurbulenceElement|SVGFETileElement|SVGFESpotLightElement|SVGFESpecularLightingElement|SVGFEPointLightElement|SVGFEOffsetElement|SVGFEMorphologyElement|SVGFEMergeNodeElement|SVGFEMergeElement|SVGFEImageElement|SVGFEGaussianBlurElement|SVGFEFloodElement|SVGFEDropShadowElement|SVGFEDistantLightElement|SVGFEDisplacementMapElement|SVGFEDiffuseLightingElement|SVGFEConvolveMatrixElement|SVGFECompositeElement|SVGFEComponentTransferElement|SVGFEColorMatrixElement|SVGFEBlendElement|SVGEllipseElement|SVGDescElement|SVGDefsElement|SVGCursorElement|SVGClipPathElement|SVGCircleElement|SVGAltGlyphItemElement|SVGAltGlyphDefElement|SVGAElement|SVGViewElement|SVGVKernElement|SVGUseElement|SVGTitleElement|SVGSymbolElement|SVGSwitchElement|SVGStyleElement|SVGStopElement|SVGScriptElement|SVGSVGElement|SVGRectElement|SVGPolylineElement|SVGPolygonElement|SVGPatternElement|SVGPathElement|SVGMissingGlyphElement|SVGMetadataElement|SVGMaskElement|SVGMarkerElement|SVGMPathElement|SVGLineElement|SVGImageElement|SVGHKernElement|SVGGlyphRefElement|SVGGlyphElement|SVGGElement|SVGForeignObjectElement|SVGFontFaceUriElement|SVGFontFaceSrcElement|SVGFontFaceNameElement|SVGFontFaceFormatElement|SVGFontFaceElement|SVGFontElement|SVGFilterElement|SVGFETurbulenceElement|SVGFETileElement|SVGFESpotLightElement|SVGFESpecularLightingElement|SVGFEPointLightElement|SVGFEOffsetElement|SVGFEMorphologyElement|SVGFEMergeNodeElement|SVGFEMergeElement|SVGFEImageElement|SVGFEGaussianBlurElement|SVGFEFloodElement|SVGFEDropShadowElement|SVGFEDistantLightElement|SVGFEDisplacementMapElement|SVGFEDiffuseLightingElement|SVGFEConvolveMatrixElement|SVGFECompositeElement|SVGFEComponentTransferElement|SVGFEColorMatrixElement|SVGFEBlendElement|SVGEllipseElement|SVGDescElement|SVGDefsElement|SVGCursorElement|SVGClipPathElement|SVGCircleElement|SVGAltGlyphItemElement|SVGAltGlyphDefElement|SVGAElement'].join('|');
  var v7/*class(_MediaElementImpl)*/ = 'HTMLMediaElement|HTMLVideoElement|HTMLAudioElement|HTMLVideoElement|HTMLAudioElement';
  var v8/*class(_MouseEventImpl)*/ = 'MouseEvent|WheelEvent|WheelEvent';
  var v9/*class(_ElementImpl)*/ = [v6/*class(_SVGElementImpl)*/,v7/*class(_MediaElementImpl)*/,v6/*class(_SVGElementImpl)*/,v7/*class(_MediaElementImpl)*/,'Element|HTMLUnknownElement|HTMLUListElement|HTMLTrackElement|HTMLTitleElement|HTMLTextAreaElement|HTMLTableSectionElement|HTMLTableRowElement|HTMLTableElement|HTMLTableColElement|HTMLTableCellElement|HTMLTableCaptionElement|HTMLStyleElement|HTMLSpanElement|HTMLSourceElement|HTMLShadowElement|HTMLSelectElement|HTMLScriptElement|HTMLQuoteElement|HTMLProgressElement|HTMLPreElement|HTMLParamElement|HTMLParagraphElement|HTMLOutputElement|HTMLOptionElement|HTMLOptGroupElement|HTMLObjectElement|HTMLOListElement|HTMLModElement|HTMLMeterElement|HTMLMetaElement|HTMLMenuElement|HTMLMarqueeElement|HTMLMapElement|HTMLLinkElement|HTMLLegendElement|HTMLLabelElement|HTMLLIElement|HTMLKeygenElement|HTMLInputElement|HTMLImageElement|HTMLIFrameElement|HTMLHtmlElement|HTMLHeadingElement|HTMLHeadElement|HTMLHRElement|HTMLFrameSetElement|HTMLFrameElement|HTMLFormElement|HTMLFontElement|HTMLFieldSetElement|HTMLEmbedElement|HTMLDivElement|HTMLDirectoryElement|HTMLDetailsElement|HTMLDataListElement|HTMLDListElement|HTMLContentElement|HTMLCanvasElement|HTMLButtonElement|HTMLBodyElement|HTMLBaseFontElement|HTMLBaseElement|HTMLBRElement|HTMLAreaElement|HTMLAppletElement|HTMLAnchorElement|HTMLElement|HTMLUnknownElement|HTMLUListElement|HTMLTrackElement|HTMLTitleElement|HTMLTextAreaElement|HTMLTableSectionElement|HTMLTableRowElement|HTMLTableElement|HTMLTableColElement|HTMLTableCellElement|HTMLTableCaptionElement|HTMLStyleElement|HTMLSpanElement|HTMLSourceElement|HTMLShadowElement|HTMLSelectElement|HTMLScriptElement|HTMLQuoteElement|HTMLProgressElement|HTMLPreElement|HTMLParamElement|HTMLParagraphElement|HTMLOutputElement|HTMLOptionElement|HTMLOptGroupElement|HTMLObjectElement|HTMLOListElement|HTMLModElement|HTMLMeterElement|HTMLMetaElement|HTMLMenuElement|HTMLMarqueeElement|HTMLMapElement|HTMLLinkElement|HTMLLegendElement|HTMLLabelElement|HTMLLIElement|HTMLKeygenElement|HTMLInputElement|HTMLImageElement|HTMLIFrameElement|HTMLHtmlElement|HTMLHeadingElement|HTMLHeadElement|HTMLHRElement|HTMLFrameSetElement|HTMLFrameElement|HTMLFormElement|HTMLFontElement|HTMLFieldSetElement|HTMLEmbedElement|HTMLDivElement|HTMLDirectoryElement|HTMLDetailsElement|HTMLDataListElement|HTMLDListElement|HTMLContentElement|HTMLCanvasElement|HTMLButtonElement|HTMLBodyElement|HTMLBaseFontElement|HTMLBaseElement|HTMLBRElement|HTMLAreaElement|HTMLAppletElement|HTMLAnchorElement|HTMLElement'].join('|');
  var v10/*class(_DocumentFragmentImpl)*/ = 'DocumentFragment|ShadowRoot|ShadowRoot';
  var v11/*class(_DocumentImpl)*/ = 'HTMLDocument|SVGDocument|SVGDocument';
  var v12/*class(_CharacterDataImpl)*/ = 'CharacterData|Text|CDATASection|CDATASection|Comment|Text|CDATASection|CDATASection|Comment';
  var v13/*class(_WorkerContextImpl)*/ = 'WorkerContext|SharedWorkerContext|DedicatedWorkerContext|SharedWorkerContext|DedicatedWorkerContext';
  var v14/*class(_NodeImpl)*/ = [v9/*class(_ElementImpl)*/,v10/*class(_DocumentFragmentImpl)*/,v11/*class(_DocumentImpl)*/,v12/*class(_CharacterDataImpl)*/,v9/*class(_ElementImpl)*/,v10/*class(_DocumentFragmentImpl)*/,v11/*class(_DocumentImpl)*/,v12/*class(_CharacterDataImpl)*/,'Node|ProcessingInstruction|Notation|EntityReference|Entity|DocumentType|Attr|ProcessingInstruction|Notation|EntityReference|Entity|DocumentType|Attr'].join('|');
  var v15/*class(_MediaStreamImpl)*/ = 'MediaStream|LocalMediaStream|LocalMediaStream';
  var v16/*class(_IDBRequestImpl)*/ = 'IDBRequest|IDBVersionChangeRequest|IDBOpenDBRequest|IDBVersionChangeRequest|IDBOpenDBRequest';
  var v17/*class(_AbstractWorkerImpl)*/ = 'AbstractWorker|Worker|SharedWorker|Worker|SharedWorker';
  var table = [
    // [dynamic-dispatch-tag, tags of classes implementing dynamic-dispatch-tag]
    ['SVGGradientElement', v3/*class(_SVGGradientElementImpl)*/],
    ['SVGTextPositioningElement', v0/*class(_SVGTextPositioningElementImpl)*/],
    ['SVGTextContentElement', v2/*class(_SVGTextContentElementImpl)*/],
    ['StyleSheet', 'StyleSheet|CSSStyleSheet|CSSStyleSheet'],
    ['AbstractWorker', v17/*class(_AbstractWorkerImpl)*/],
    ['Uint8Array', v1/*class(_Uint8ArrayImpl)*/],
    ['ArrayBufferView', [v1/*class(_Uint8ArrayImpl)*/,v1/*class(_Uint8ArrayImpl)*/,'ArrayBufferView|Uint32Array|Uint16Array|Int8Array|Int32Array|Int16Array|Float64Array|Float32Array|DataView|Uint32Array|Uint16Array|Int8Array|Int32Array|Int16Array|Float64Array|Float32Array|DataView'].join('|')],
    ['AudioParam', 'AudioParam|AudioGain|AudioGain'],
    ['Blob', 'Blob|File|File'],
    ['CSSRule', 'CSSRule|CSSUnknownRule|CSSStyleRule|CSSPageRule|CSSMediaRule|WebKitCSSKeyframesRule|WebKitCSSKeyframeRule|CSSImportRule|CSSFontFaceRule|CSSCharsetRule|CSSUnknownRule|CSSStyleRule|CSSPageRule|CSSMediaRule|WebKitCSSKeyframesRule|WebKitCSSKeyframeRule|CSSImportRule|CSSFontFaceRule|CSSCharsetRule'],
    ['WorkerContext', v13/*class(_WorkerContextImpl)*/],
    ['CSSValueList', 'CSSValueList|WebKitCSSFilterValue|WebKitCSSTransformValue|WebKitCSSFilterValue|WebKitCSSTransformValue'],
    ['CharacterData', v12/*class(_CharacterDataImpl)*/],
    ['DOMTokenList', 'DOMTokenList|DOMSettableTokenList|DOMSettableTokenList'],
    ['HTMLDocument', v11/*class(_DocumentImpl)*/],
    ['DocumentFragment', v10/*class(_DocumentFragmentImpl)*/],
    ['SVGComponentTransferFunctionElement', v4/*class(_SVGComponentTransferFunctionElementImpl)*/],
    ['SVGAnimationElement', v5/*class(_SVGAnimationElementImpl)*/],
    ['SVGElement', v6/*class(_SVGElementImpl)*/],
    ['HTMLMediaElement', v7/*class(_MediaElementImpl)*/],
    ['Element', v9/*class(_ElementImpl)*/],
    ['Entry', 'Entry|FileEntry|DirectoryEntry|FileEntry|DirectoryEntry'],
    ['EntrySync', 'EntrySync|FileEntrySync|DirectoryEntrySync|FileEntrySync|DirectoryEntrySync'],
    ['MouseEvent', v8/*class(_MouseEventImpl)*/],
    ['Event', [v8/*class(_MouseEventImpl)*/,v8/*class(_MouseEventImpl)*/,v8/*class(_MouseEventImpl)*/,v8/*class(_MouseEventImpl)*/,'Event|WebGLContextEvent|UIEvent|TouchEvent|TextEvent|SVGZoomEvent|KeyboardEvent|CompositionEvent|TouchEvent|TextEvent|SVGZoomEvent|KeyboardEvent|CompositionEvent|WebKitTransitionEvent|TrackEvent|StorageEvent|SpeechRecognitionEvent|SpeechRecognitionError|SpeechInputEvent|RTCIceCandidateEvent|ProgressEvent|XMLHttpRequestProgressEvent|XMLHttpRequestProgressEvent|PopStateEvent|PageTransitionEvent|OverflowEvent|OfflineAudioCompletionEvent|MutationEvent|MessageEvent|MediaStreamTrackEvent|MediaStreamEvent|MediaKeyEvent|IDBVersionChangeEvent|IDBUpgradeNeededEvent|HashChangeEvent|ErrorEvent|DeviceOrientationEvent|DeviceMotionEvent|CustomEvent|CloseEvent|BeforeLoadEvent|AudioProcessingEvent|WebKitAnimationEvent|WebGLContextEvent|UIEvent|TouchEvent|TextEvent|SVGZoomEvent|KeyboardEvent|CompositionEvent|TouchEvent|TextEvent|SVGZoomEvent|KeyboardEvent|CompositionEvent|WebKitTransitionEvent|TrackEvent|StorageEvent|SpeechRecognitionEvent|SpeechRecognitionError|SpeechInputEvent|RTCIceCandidateEvent|ProgressEvent|XMLHttpRequestProgressEvent|XMLHttpRequestProgressEvent|PopStateEvent|PageTransitionEvent|OverflowEvent|OfflineAudioCompletionEvent|MutationEvent|MessageEvent|MediaStreamTrackEvent|MediaStreamEvent|MediaKeyEvent|IDBVersionChangeEvent|IDBUpgradeNeededEvent|HashChangeEvent|ErrorEvent|DeviceOrientationEvent|DeviceMotionEvent|CustomEvent|CloseEvent|BeforeLoadEvent|AudioProcessingEvent|WebKitAnimationEvent'].join('|')],
    ['Node', v14/*class(_NodeImpl)*/],
    ['MediaStream', v15/*class(_MediaStreamImpl)*/],
    ['IDBRequest', v16/*class(_IDBRequestImpl)*/],
    ['EventTarget', [v13/*class(_WorkerContextImpl)*/,v14/*class(_NodeImpl)*/,v15/*class(_MediaStreamImpl)*/,v16/*class(_IDBRequestImpl)*/,v17/*class(_AbstractWorkerImpl)*/,v13/*class(_WorkerContextImpl)*/,v14/*class(_NodeImpl)*/,v15/*class(_MediaStreamImpl)*/,v16/*class(_IDBRequestImpl)*/,v17/*class(_AbstractWorkerImpl)*/,'EventTarget|DOMWindow|WebSocket|WebKitNamedFlow|TextTrackList|TextTrackCue|TextTrack|SpeechRecognition|SourceBufferList|SVGElementInstance|RTCPeerConnection|Performance|PeerConnection00|Notification|MessagePort|MediaStreamTrackList|MediaStreamTrack|MediaSource|MediaController|IDBTransaction|IDBDatabase|XMLHttpRequestUpload|XMLHttpRequest|FileWriter|FileReader|EventSource|DOMApplicationCache|BatteryManager|AudioContext|DOMWindow|WebSocket|WebKitNamedFlow|TextTrackList|TextTrackCue|TextTrack|SpeechRecognition|SourceBufferList|SVGElementInstance|RTCPeerConnection|Performance|PeerConnection00|Notification|MessagePort|MediaStreamTrackList|MediaStreamTrack|MediaSource|MediaController|IDBTransaction|IDBDatabase|XMLHttpRequestUpload|XMLHttpRequest|FileWriter|FileReader|EventSource|DOMApplicationCache|BatteryManager|AudioContext'].join('|')],
    ['HTMLCollection', 'HTMLCollection|HTMLOptionsCollection|HTMLOptionsCollection'],
    ['IDBCursor', 'IDBCursor|IDBCursorWithValue|IDBCursorWithValue'],
    ['NodeList', 'NodeList|RadioNodeList|RadioNodeList']];
$.dynamicSetMetadata(table);
})();

var $globalThis = $;
var $globalState;
var $globals;
var $isWorker = false;
var $supportsWorkers = false;
var $thisScriptUrl;
function $static_init(){};

function $initGlobals(context) {
  context.isolateStatics = new Isolate();
}
function $setGlobals(context) {
  $ = context.isolateStatics;
  $globalThis = $;
}
$.main.call$0 = $.main

//
// BEGIN invoke [main].
//
if (typeof document != 'undefined' && document.readyState != 'complete') {
  document.addEventListener('readystatechange', function () {
    if (document.readyState == 'complete') {
      if (typeof dartMainRunner == 'function') {
        dartMainRunner(function() { $.startRootIsolate($.main); });
      } else {
        $.startRootIsolate($.main);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner == 'function') {
    dartMainRunner(function() { $.startRootIsolate($.main); });
  } else {
    $.startRootIsolate($.main);
  }
}
//
// END invoke [main].
//

function init() {
Isolate.$isolateProperties = {};
Isolate.$defineClass = function(cls, fields, prototype) {
  var generateGetterSetter =   function(field, prototype) {
    var len = field.length;
    var lastChar = field[len - 1];
    var needsGetter = lastChar == '?' || lastChar == '=';
    var needsSetter = lastChar == '!' || lastChar == '=';
    if (needsGetter || needsSetter) field = field.substring(0, len - 1);
    if (needsGetter) {
      var getterString = "return this." + field + ";";
        prototype["get$" + field] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + field] = new Function("v", setterString);
    }
    return field;
  };
  var constructor;
  if (typeof fields == 'function') {
    constructor = fields;
  } else {
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0) str += ", ";
      var field = fields[i];
      field = generateGetterSetter(field, prototype);
      str += field;
      body += "this." + field + " = " + field + ";\n";
    }
    str += ") {" + body + "}\n";
    str += "return " + cls + ";";
    constructor = new Function(str)();
  }
  constructor.prototype = prototype;
  return constructor;
};
var supportsProto = false;
var tmp = Isolate.$defineClass('c', ['f?'], {}).prototype;
if (tmp.__proto__) {
  tmp.__proto__ = {};
  if (typeof tmp.get$f !== "undefined") supportsProto = true;
}
Isolate.$pendingClasses = {};
Isolate.$finishClasses = function(collectedClasses) {
  for (var cls in collectedClasses) {
    if (Object.prototype.hasOwnProperty.call(collectedClasses, cls)) {
      var desc = collectedClasses[cls];
      Isolate.$isolateProperties[cls] = Isolate.$defineClass(cls, desc[''], desc);
      if (desc['super'] !== "") Isolate.$pendingClasses[cls] = desc['super'];
    }
  }
  var pendingClasses = Isolate.$pendingClasses;
  Isolate.$pendingClasses = {};
  var finishedClasses = {};
  function finishClass(cls) {
    if (finishedClasses[cls]) return;
    finishedClasses[cls] = true;
    var superclass = pendingClasses[cls];
    if (!superclass) return;
    finishClass(superclass);
    var constructor = Isolate.$isolateProperties[cls];
    var superConstructor = Isolate.$isolateProperties[superclass];
    var prototype = constructor.prototype;
    if (supportsProto) {
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
    } else {
      function tmp() {};
      tmp.prototype = superConstructor.prototype;
      var newPrototype = new tmp();
      constructor.prototype = newPrototype;
      newPrototype.constructor = constructor;
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var member in prototype) {
        if (member == '' || member == 'super') continue;
        if (hasOwnProperty.call(prototype, member)) {
          newPrototype[member] = prototype[member];
        }
      }
    }
  }
  for (var cls in pendingClasses) finishClass(cls);
};
Isolate.$finishIsolateConstructor = function(oldIsolate) {
  var isolateProperties = oldIsolate.$isolateProperties;
  var isolatePrototype = oldIsolate.prototype;
  var str = "{\n";
  str += "var properties = Isolate.$isolateProperties;\n";
  for (var staticName in isolateProperties) {
    if (Object.prototype.hasOwnProperty.call(isolateProperties, staticName)) {
      str += "this." + staticName + "= properties." + staticName + ";\n";
    }
  }
  str += "}\n";
  var newIsolate = new Function(str);
  newIsolate.prototype = isolatePrototype;
  isolatePrototype.constructor = newIsolate;
  newIsolate.$isolateProperties = isolateProperties;
  return newIsolate;
};
}

//@ sourceMappingURL=WebGL_Geometries.dart.js.map